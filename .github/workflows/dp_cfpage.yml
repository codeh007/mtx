name: dp_cfpage

on:
  push:
    paths:
      - ".changeset/**"
      - "packages/**"
      - "apps/**"
      - "package.json"
    branches:
      - main
  workflow_dispatch:
    inputs:
      input:
        description: "功能选项 (1: 仅构建, 2: 构建并部署, 3: 构建docker镜像并发布)"
        required: true
        type: choice
        options:
          - "1"
          - "2"
          - "3"
        default: "1"

permissions:
  contents: write
  packages: write
  actions: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MTM_DATABASE_URL: ${{ secrets.MTM_DATABASE_URL }}
  SERVER_MSGQUEUE_RABBITMQ_URL: ${{ secrets.SERVER_MSGQUEUE_RABBITMQ_URL }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_API_EMAIL: ${{ secrets.CLOUDFLARE_API_EMAIL }}
  CLOUDFLARE_AI_TOKEN: ${{ secrets.CLOUDFLARE_AI_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  # Tag Image with tag name on release
  # else with user specified tag (default 'dev') if triggered via workflow
  # else with run_id if triggered via a pull request
  # else with 'pre' (if push to master)
  DOCKER_IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.event_name == 'workflow_dispatch' && github.event.inputs.tag || 'pre' }}

jobs:
  deploy:
    name: dp_cfpage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # token: ${{ secrets.SAGE_PAT }}

      - name: setup bun
        uses: ./.github/actions/setup_bun

      - name: 使用gomtm 进行 cfpage 部署
        run: (cd apps/mtxedge && ../../packages/gomtm-cli/bin/gomtm dp cfpage)

      - name: deploy mtmaiui
        run: (cd packages/mtmaiui && bun run build && ../../packages/gomtm-cli/bin/gomtm dp cfpage)

  testing_npm_install_gomtm:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [deploy]
    steps:
      - name: 安装 gomtm-cli 包后,应该自带 gomtm 命令
        run: |
          npm install gomtm-cli -g
          gomtm --help

  testing_gomtm_worker:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [deploy]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 测试是否能自动启动worker
        # run: (cd apps/mtxedge && ../../packages/gomtm-cli/bin/gomtm)
        run: timeout 30s sh -c '(cd apps/mtxedge && ../../packages/gomtm-cli/bin/gomtm)'
        continue-on-error: true

  build_docker_gomtm_base:
    needs: [deploy, testing_npm_install_gomtm, testing_gomtm_worker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建基础gomtmdocker镜像
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/gomtmbase:latest
          file: packages/gomtm-cli/docker/gomtm/Dockerfile
          target: mtmbase

      - name: 构建gomtm-cli docker镜像
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/gomtm:latest
          file: packages/gomtm-cli/docker/gomtm/Dockerfile
          target: gomtm

