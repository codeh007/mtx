// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  ReadinessGetData,
  LivenessGetData,
  MetadataGetData,
  MetadataGetResponse,
  MetadataGetError,
  CloudMetadataGetData,
  CloudMetadataGetResponse,
  CloudMetadataGetError,
  MetadataListIntegrationsData,
  MetadataListIntegrationsResponse,
  MetadataListIntegrationsError,
  UserUpdateLoginData,
  UserUpdateLoginResponse,
  UserUpdateLoginError,
  UserUpdateGoogleOauthStartData,
  UserUpdateGoogleOauthCallbackData,
  UserUpdateGithubOauthStartData,
  UserUpdateGithubOauthCallbackData,
  UserUpdateSlackOauthStartData,
  UserUpdateSlackOauthCallbackData,
  SnsUpdateData,
  SnsUpdateError,
  SnsListData,
  SnsListResponse,
  SnsListError,
  SnsCreateData,
  SnsCreateResponse,
  SnsCreateError,
  AlertEmailGroupListData,
  AlertEmailGroupListResponse,
  AlertEmailGroupListError,
  AlertEmailGroupCreateData,
  AlertEmailGroupCreateResponse,
  AlertEmailGroupCreateError,
  TenantResourcePolicyGetData,
  TenantResourcePolicyGetResponse,
  TenantResourcePolicyGetError,
  AlertEmailGroupDeleteData,
  AlertEmailGroupDeleteResponse,
  AlertEmailGroupDeleteError,
  AlertEmailGroupUpdateData,
  AlertEmailGroupUpdateResponse,
  AlertEmailGroupUpdateError,
  SnsDeleteData,
  SnsDeleteResponse,
  SnsDeleteError,
  SlackWebhookListData,
  SlackWebhookListResponse,
  SlackWebhookListError,
  SlackWebhookDeleteData,
  SlackWebhookDeleteResponse,
  SlackWebhookDeleteError,
  UserGetCurrentData,
  UserGetCurrentResponse,
  UserGetCurrentError,
  UserUpdatePasswordData,
  UserUpdatePasswordResponse,
  UserUpdatePasswordError,
  UserCreateData,
  UserCreateResponse,
  UserCreateError,
  UserUpdateLogoutData,
  UserUpdateLogoutResponse,
  UserUpdateLogoutError,
  TenantMembershipsListData,
  TenantMembershipsListResponse,
  TenantMembershipsListError,
  UserListTenantInvitesData,
  UserListTenantInvitesResponse,
  UserListTenantInvitesError,
  TenantInviteAcceptData,
  TenantInviteAcceptError,
  TenantInviteRejectData,
  TenantInviteRejectError,
  TenantCreateData,
  TenantCreateResponse,
  TenantCreateError,
  TenantUpdateData,
  TenantUpdateResponse,
  TenantUpdateError,
  TenantAlertingSettingsGetData,
  TenantAlertingSettingsGetResponse,
  TenantAlertingSettingsGetError,
  TenantInviteListData,
  TenantInviteListResponse,
  TenantInviteListError,
  TenantInviteCreateData,
  TenantInviteCreateResponse,
  TenantInviteCreateError,
  TenantInviteDeleteData,
  TenantInviteDeleteResponse,
  TenantInviteDeleteError,
  TenantInviteUpdateData,
  TenantInviteUpdateResponse,
  TenantInviteUpdateError,
  ApiTokenListData,
  ApiTokenListResponse,
  ApiTokenListError,
  ApiTokenCreateData,
  ApiTokenCreateResponse,
  ApiTokenCreateError,
  ApiTokenUpdateRevokeData,
  ApiTokenUpdateRevokeResponse,
  ApiTokenUpdateRevokeError,
  TenantGetQueueMetricsData,
  TenantGetQueueMetricsResponse,
  TenantGetQueueMetricsError,
  TenantGetStepRunQueueMetricsData,
  TenantGetStepRunQueueMetricsResponse,
  TenantGetStepRunQueueMetricsError,
  EventListData,
  EventListResponse,
  EventListError,
  EventCreateData,
  EventCreateResponse,
  EventCreateError,
  EventCreateBulkData,
  EventCreateBulkResponse,
  EventCreateBulkError,
  EventUpdateReplayData,
  EventUpdateReplayResponse,
  EventUpdateReplayError,
  EventUpdateCancelData,
  EventUpdateCancelResponse,
  EventUpdateCancelError,
  RateLimitListData,
  RateLimitListResponse,
  RateLimitListError,
  TenantMemberListData,
  TenantMemberListResponse,
  TenantMemberListError,
  TenantMemberDeleteData,
  TenantMemberDeleteResponse,
  TenantMemberDeleteError,
  EventGetData,
  EventGetResponse,
  EventGetError,
  EventDataGetData,
  EventDataGetResponse,
  EventDataGetError,
  EventKeyListData,
  EventKeyListResponse,
  EventKeyListError,
  WorkflowListData,
  WorkflowListResponse,
  WorkflowListError,
  WorkflowScheduledListData,
  WorkflowScheduledListResponse,
  WorkflowScheduledListError,
  WorkflowScheduledDeleteData,
  WorkflowScheduledDeleteResponse,
  WorkflowScheduledDeleteError,
  WorkflowScheduledGetData,
  WorkflowScheduledGetResponse,
  WorkflowScheduledGetError,
  CronWorkflowListData,
  CronWorkflowListResponse,
  CronWorkflowListError,
  WorkflowRunCancelData,
  WorkflowRunCancelResponse,
  WorkflowRunCancelError,
  WorkflowDeleteData,
  WorkflowDeleteResponse,
  WorkflowDeleteError,
  WorkflowGetData,
  WorkflowGetResponse,
  WorkflowGetError,
  WorkflowUpdateData,
  WorkflowUpdateResponse,
  WorkflowUpdateError,
  WorkflowVersionGetData,
  WorkflowVersionGetResponse,
  WorkflowVersionGetError,
  WorkflowRunCreateData,
  WorkflowRunCreateResponse,
  WorkflowRunCreateError,
  WorkflowGetMetricsData,
  WorkflowGetMetricsResponse,
  WorkflowGetMetricsError,
  LogLineListData,
  LogLineListResponse,
  LogLineListError,
  StepRunListEventsData,
  StepRunListEventsResponse,
  StepRunListEventsError,
  WorkflowRunListStepRunEventsData,
  WorkflowRunListStepRunEventsResponse,
  WorkflowRunListStepRunEventsError,
  StepRunListArchivesData,
  StepRunListArchivesResponse,
  StepRunListArchivesError,
  WorkflowGetWorkersCountData,
  WorkflowGetWorkersCountResponse,
  WorkflowGetWorkersCountError,
  WorkflowRunListData,
  WorkflowRunListResponse,
  WorkflowRunListError,
  WorkflowRunUpdateReplayData,
  WorkflowRunUpdateReplayResponse,
  WorkflowRunUpdateReplayError,
  WorkflowRunGetMetricsData,
  WorkflowRunGetMetricsResponse,
  WorkflowRunGetMetricsError,
  WorkflowRunGetData,
  WorkflowRunGetResponse,
  WorkflowRunGetError,
  WorkflowRunGetShapeData,
  WorkflowRunGetShapeResponse,
  WorkflowRunGetShapeError,
  StepRunGetData,
  StepRunGetResponse,
  StepRunGetError,
  StepRunUpdateRerunData,
  StepRunUpdateRerunResponse,
  StepRunUpdateRerunError,
  StepRunUpdateCancelData,
  StepRunUpdateCancelResponse,
  StepRunUpdateCancelError,
  StepRunGetSchemaData,
  StepRunGetSchemaResponse,
  StepRunGetSchemaError,
  WorkerListData,
  WorkerListResponse,
  WorkerListError,
  WorkerGetData,
  WorkerGetResponse,
  WorkerGetError,
  WorkerUpdateData,
  WorkerUpdateResponse,
  WorkerUpdateError,
  WebhookListData,
  WebhookListResponse,
  WebhookListError,
  WebhookCreateData,
  WebhookCreateResponse,
  WebhookCreateError,
  WebhookDeleteData,
  WebhookDeleteError,
  WebhookRequestsListData,
  WebhookRequestsListResponse,
  WebhookRequestsListError,
  WorkflowRunGetInputData,
  WorkflowRunGetInputResponse,
  WorkflowRunGetInputError,
  WorkflowGetByNameData,
  WorkflowGetByNameResponse,
  WorkflowGetByNameError,
  ChatChatData,
  ChatChatResponse,
  ChatChatError,
  ChatMessagesData,
  ChatMessagesResponse,
  WorkerConfigData,
  WorkerConfigResponse,
  MtmaiBloggenconfigData,
  MtmaiBloggenconfigResponse,
  MtmaiWorkerConfigData,
  MtmaiWorkerConfigResponse,
  BlogListData,
  BlogListResponse,
  BlogCreateData,
  BlogCreateResponse,
  BlogCreateError,
  BlogGetData,
  BlogGetResponse,
  BlogGetError,
  BlogUpdateData,
  BlogUpdateResponse,
  BlogUpdateError,
  SiteListData,
  SiteListResponse,
  SiteListError,
  SiteCreateData,
  SiteCreateResponse,
  SiteCreateError,
  SiteGetData,
  SiteGetResponse,
  SiteGetError,
  SiteUpdateData,
  SiteUpdateResponse,
  SiteUpdateError,
  SiteGetByHostData,
  SiteGetByHostResponse,
  SiteGetByHostError,
  SiteHostListData,
  SiteHostListResponse,
  SiteHostListError,
  SiteHostCreateData,
  SiteHostCreateResponse,
  SiteHostCreateError,
  SiteHostGetData,
  SiteHostGetResponse,
  SiteHostGetError,
  SiteHostUpdateData,
  SiteHostUpdateResponse,
  SiteHostUpdateError,
  PostListPublicData,
  PostListPublicResponse,
  PostListPublicError,
  PostGetData,
  PostGetResponse,
  PostGetError,
  PostListData,
  PostListResponse,
  PostListError,
  PostCreateData,
  PostCreateResponse,
  PostCreateError,
  ArtifactListData,
  ArtifactListResponse,
  ArtifactCreateData,
  ArtifactCreateResponse,
  ArtifactCreateError,
  ArtifactGetData,
  ArtifactGetResponse,
  ArtifactGetError,
  TeamListData,
  TeamListResponse,
  TeamCreateData,
  TeamCreateResponse,
  TeamCreateError,
  TeamGetData,
  TeamGetResponse,
  GalleryListData,
  GalleryListResponse,
  GalleryCreateData,
  GalleryCreateResponse,
  GalleryCreateError,
  GalleryGetData,
  GalleryGetResponse,
  SessionListData,
  SessionListResponse,
  SessionCreateData,
  SessionCreateResponse,
  SessionCreateError,
  SessionGetData,
  SessionGetResponse,
  SessionUpdateData,
  SessionUpdateResponse,
  SessionUpdateError,
  AgentNodeListData,
  AgentNodeListResponse,
  AgentCreateData,
  AgentCreateResponse,
  AgentCreateError,
  AgentNodeData,
  AgentNodeResponse,
  AgentNodeUpdateData,
  AgentNodeUpdateResponse,
  AgentNodeUpdateError,
  AgentNodeRunData,
  AgentNodeRunResponse,
  AgentNodeRunError,
  AgentListData,
  AgentListResponse,
  AgentGetData,
  AgentGetResponse,
  AgentStreamData,
  AgentStreamResponse,
  AgentStreamError,
  AgEventListData,
  AgEventListResponse,
  AgEventCreateData,
  AgEventCreateResponse,
  AgEventCreateError,
  AgEventGetData,
  AgEventGetResponse,
  RunListData,
  RunListResponse,
  RunCreateData,
  RunCreateResponse,
  RunCreateError,
  RunGetData,
  RunGetResponse,
  ModelListData,
  ModelListResponse,
  ModelListError,
  ModelCreateData,
  ModelCreateResponse,
  ModelCreateError,
  ModelGetData,
  ModelGetResponse,
  ModelUpdateData,
  ModelUpdateResponse,
  ModelUpdateError,
  PromptListData,
  PromptListResponse,
  PromptGetData,
  PromptGetResponse,
  PromptGetError,
  AssisantListData,
  AssisantListResponse,
  AssisantGetData,
  AssisantGetResponse,
  AdminReleaseConnData,
  AdminReleaseConnResponse,
  AdminReleaseConnError,
  FrontendGetConfigData,
  FrontendGetConfigResponse,
  FrontendGetSiderbarData,
  FrontendGetSiderbarResponse,
  HfAccountGetData,
  HfAccountGetResponse,
  HfAccountGetError,
  EnvListData,
  EnvListResponse,
  EnvListError,
  EnvUpdateData,
  EnvUpdateResponse,
  EnvUpdateError,
  EnvGetData,
  EnvGetResponse,
  EnvGetError,
  KvUpdateData,
  KvUpdateResponse,
  KvUpdateError,
  KvGetData,
  KvGetResponse,
  KvGetError,
  EndpointListData,
  EndpointListResponse,
  EndpointListError,
  EndpointUpdateData,
  EndpointUpdateResponse,
  EndpointUpdateError,
  PlatformListData,
  PlatformListResponse,
  PlatformListError,
  PlatformCreateData,
  PlatformCreateResponse,
  PlatformCreateError,
  PlatformGetData,
  PlatformGetResponse,
  PlatformUpdateData,
  PlatformUpdateResponse,
  PlatformUpdateError,
  PlatformAccountListData,
  PlatformAccountListResponse,
  PlatformAccountListError,
  PlatformAccountCreateData,
  PlatformAccountCreateResponse,
  PlatformAccountCreateError,
  PlatformAccountGetData,
  PlatformAccountGetResponse,
  PlatformAccountUpdateData,
  PlatformAccountUpdateResponse,
  PlatformAccountUpdateError,
  BrowserListData,
  BrowserListResponse,
  BrowserListError,
  BrowserCreateData,
  BrowserCreateResponse,
  BrowserCreateError,
  BrowserGetData,
  BrowserGetResponse,
  BrowserUpdateData,
  BrowserUpdateResponse,
  BrowserUpdateError,
  ProxyListData,
  ProxyListResponse,
  ProxyListError,
  ProxyCreateData,
  ProxyCreateResponse,
  ProxyCreateError,
  ProxyGetData,
  ProxyGetResponse,
  ProxyUpdateData,
  ProxyUpdateResponse,
  ProxyUpdateError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get readiness
 * Gets the readiness status
 */
export const readinessGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadinessGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/ready",
    ...options,
  });
};

/**
 * Get liveness
 * Gets the liveness status
 */
export const livenessGet = <ThrowOnError extends boolean = false>(
  options?: Options<LivenessGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/live",
    ...options,
  });
};

/**
 * Get metadata
 * Gets metadata for the Hatchet instance
 */
export const metadataGet = <ThrowOnError extends boolean = false>(
  options?: Options<MetadataGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MetadataGetResponse,
    MetadataGetError,
    ThrowOnError
  >({
    url: "/api/v1/meta",
    ...options,
  });
};

/**
 * Get cloud metadata
 * Gets metadata for the Hatchet cloud instance
 */
export const cloudMetadataGet = <ThrowOnError extends boolean = false>(
  options?: Options<CloudMetadataGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CloudMetadataGetResponse,
    CloudMetadataGetError,
    ThrowOnError
  >({
    url: "/api/v1/cloud/metadata",
    ...options,
  });
};

/**
 * List integrations
 * List all integrations
 */
export const metadataListIntegrations = <ThrowOnError extends boolean = false>(
  options?: Options<MetadataListIntegrationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MetadataListIntegrationsResponse,
    MetadataListIntegrationsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/meta/integrations",
    ...options,
  });
};

/**
 * Login user
 * Logs in a user.
 */
export const userUpdateLogin = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserUpdateLoginResponse,
    UserUpdateLoginError,
    ThrowOnError
  >({
    url: "/api/v1/users/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateGoogleOauthStart = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserUpdateGoogleOauthStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/google/start",
    ...options,
  });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateGoogleOauthCallback = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserUpdateGoogleOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/google/callback",
    ...options,
  });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateGithubOauthStart = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserUpdateGithubOauthStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/github/start",
    ...options,
  });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateGithubOauthCallback = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserUpdateGithubOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/github/callback",
    ...options,
  });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateSlackOauthStart = <ThrowOnError extends boolean = false>(
  options: Options<UserUpdateSlackOauthStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/tenants/{tenant}/slack/start",
    ...options,
  });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateSlackOauthCallback = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserUpdateSlackOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/slack/callback",
    ...options,
  });
};

/**
 * Github app tenant webhook
 * SNS event
 */
export const snsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SnsUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SnsUpdateError,
    ThrowOnError
  >({
    url: "/api/v1/sns/{tenant}/{event}",
    ...options,
  });
};

/**
 * List SNS integrations
 * List SNS integrations
 */
export const snsList = <ThrowOnError extends boolean = false>(
  options: Options<SnsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SnsListResponse,
    SnsListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sns",
    ...options,
  });
};

/**
 * Create SNS integration
 * Create SNS integration
 */
export const snsCreate = <ThrowOnError extends boolean = false>(
  options: Options<SnsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SnsCreateResponse,
    SnsCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sns",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List tenant alert email groups
 * Gets a list of tenant alert email groups
 */
export const alertEmailGroupList = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AlertEmailGroupListResponse,
    AlertEmailGroupListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/alerting-email-groups",
    ...options,
  });
};

/**
 * Create tenant alert email group
 * Creates a new tenant alert email group
 */
export const alertEmailGroupCreate = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AlertEmailGroupCreateResponse,
    AlertEmailGroupCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/alerting-email-groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create tenant alert email group
 * Gets the resource policy for a tenant
 */
export const tenantResourcePolicyGet = <ThrowOnError extends boolean = false>(
  options: Options<TenantResourcePolicyGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantResourcePolicyGetResponse,
    TenantResourcePolicyGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/resource-policy",
    ...options,
  });
};

/**
 * Delete tenant alert email group
 * Deletes a tenant alert email group
 */
export const alertEmailGroupDelete = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    AlertEmailGroupDeleteResponse,
    AlertEmailGroupDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/alerting-email-groups/{alert-email-group}",
    ...options,
  });
};

/**
 * Update tenant alert email group
 * Updates a tenant alert email group
 */
export const alertEmailGroupUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    AlertEmailGroupUpdateResponse,
    AlertEmailGroupUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/alerting-email-groups/{alert-email-group}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete SNS integration
 * Delete SNS integration
 */
export const snsDelete = <ThrowOnError extends boolean = false>(
  options: Options<SnsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    SnsDeleteResponse,
    SnsDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/sns/{sns}",
    ...options,
  });
};

/**
 * List Slack integrations
 * List Slack webhooks
 */
export const slackWebhookList = <ThrowOnError extends boolean = false>(
  options: Options<SlackWebhookListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SlackWebhookListResponse,
    SlackWebhookListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/slack",
    ...options,
  });
};

/**
 * Delete Slack webhook
 * Delete Slack webhook
 */
export const slackWebhookDelete = <ThrowOnError extends boolean = false>(
  options: Options<SlackWebhookDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    SlackWebhookDeleteResponse,
    SlackWebhookDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/slack/{slack}",
    ...options,
  });
};

/**
 * Get current user
 * Gets the current user
 */
export const userGetCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<UserGetCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserGetCurrentResponse,
    UserGetCurrentError,
    ThrowOnError
  >({
    url: "/api/v1/users/current",
    ...options,
  });
};

/**
 * Change user password
 * Update a user password.
 */
export const userUpdatePassword = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdatePasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserUpdatePasswordResponse,
    UserUpdatePasswordError,
    ThrowOnError
  >({
    url: "/api/v1/users/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Register user
 * Registers a user.
 */
export const userCreate = <ThrowOnError extends boolean = false>(
  options?: Options<UserCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserCreateResponse,
    UserCreateError,
    ThrowOnError
  >({
    url: "/api/v1/users/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Logout user
 * Logs out a user.
 */
export const userUpdateLogout = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserUpdateLogoutResponse,
    UserUpdateLogoutError,
    ThrowOnError
  >({
    url: "/api/v1/users/logout",
    ...options,
  });
};

/**
 * List tenant memberships
 * Lists all tenant memberships for the current user
 */
export const tenantMembershipsList = <ThrowOnError extends boolean = false>(
  options?: Options<TenantMembershipsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantMembershipsListResponse,
    TenantMembershipsListError,
    ThrowOnError
  >({
    url: "/api/v1/users/memberships",
    ...options,
  });
};

/**
 * List tenant invites
 * Lists all tenant invites for the current user
 */
export const userListTenantInvites = <ThrowOnError extends boolean = false>(
  options?: Options<UserListTenantInvitesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserListTenantInvitesResponse,
    UserListTenantInvitesError,
    ThrowOnError
  >({
    url: "/api/v1/users/invites",
    ...options,
  });
};

/**
 * Accept tenant invite
 * Accepts a tenant invite
 */
export const tenantInviteAccept = <ThrowOnError extends boolean = false>(
  options?: Options<TenantInviteAcceptData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    TenantInviteAcceptError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/users/invites/accept",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Reject tenant invite
 * Rejects a tenant invite
 */
export const tenantInviteReject = <ThrowOnError extends boolean = false>(
  options?: Options<TenantInviteRejectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    TenantInviteRejectError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/users/invites/reject",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create tenant
 * Creates a new tenant
 */
export const tenantCreate = <ThrowOnError extends boolean = false>(
  options: Options<TenantCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TenantCreateResponse,
    TenantCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update tenant
 * Update an existing tenant
 */
export const tenantUpdate = <ThrowOnError extends boolean = false>(
  options: Options<TenantUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    TenantUpdateResponse,
    TenantUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get tenant alerting settings
 * Gets the alerting settings for a tenant
 */
export const tenantAlertingSettingsGet = <ThrowOnError extends boolean = false>(
  options: Options<TenantAlertingSettingsGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantAlertingSettingsGetResponse,
    TenantAlertingSettingsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/alerting/settings",
    ...options,
  });
};

/**
 * List tenant invites
 * Gets a list of tenant invites
 */
export const tenantInviteList = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantInviteListResponse,
    TenantInviteListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites",
    ...options,
  });
};

/**
 * Create tenant invite
 * Creates a new tenant invite
 */
export const tenantInviteCreate = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TenantInviteCreateResponse,
    TenantInviteCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete invite
 * Deletes a tenant invite
 */
export const tenantInviteDelete = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    TenantInviteDeleteResponse,
    TenantInviteDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}",
    ...options,
  });
};

/**
 * Update invite
 * Updates a tenant invite
 */
export const tenantInviteUpdate = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    TenantInviteUpdateResponse,
    TenantInviteUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List API Tokens
 * List API tokens for a tenant
 */
export const apiTokenList = <ThrowOnError extends boolean = false>(
  options: Options<ApiTokenListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ApiTokenListResponse,
    ApiTokenListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/api-tokens",
    ...options,
  });
};

/**
 * Create API Token
 * Create an API token for a tenant
 */
export const apiTokenCreate = <ThrowOnError extends boolean = false>(
  options: Options<ApiTokenCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ApiTokenCreateResponse,
    ApiTokenCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/api-tokens",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke API Token
 * Revoke an API token for a tenant
 */
export const apiTokenUpdateRevoke = <ThrowOnError extends boolean = false>(
  options: Options<ApiTokenUpdateRevokeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ApiTokenUpdateRevokeResponse,
    ApiTokenUpdateRevokeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/api-tokens/{api-token}",
    ...options,
  });
};

/**
 * Get workflow metrics
 * Get the queue metrics for the tenant
 */
export const tenantGetQueueMetrics = <ThrowOnError extends boolean = false>(
  options: Options<TenantGetQueueMetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantGetQueueMetricsResponse,
    TenantGetQueueMetricsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/queue-metrics",
    ...options,
  });
};

/**
 * Get step run metrics
 * Get the queue metrics for the tenant
 */
export const tenantGetStepRunQueueMetrics = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TenantGetStepRunQueueMetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantGetStepRunQueueMetricsResponse,
    TenantGetStepRunQueueMetricsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/step-run-queue-metrics",
    ...options,
  });
};

/**
 * List events
 * Lists all events for a tenant.
 */
export const eventList = <ThrowOnError extends boolean = false>(
  options: Options<EventListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EventListResponse,
    EventListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/events",
    ...options,
  });
};

/**
 * Create event
 * Creates a new event.
 */
export const eventCreate = <ThrowOnError extends boolean = false>(
  options: Options<EventCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    EventCreateResponse,
    EventCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Bulk Create events
 * Bulk creates new events.
 */
export const eventCreateBulk = <ThrowOnError extends boolean = false>(
  options: Options<EventCreateBulkData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    EventCreateBulkResponse,
    EventCreateBulkError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/events/bulk",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Replay events
 * Replays a list of events.
 */
export const eventUpdateReplay = <ThrowOnError extends boolean = false>(
  options: Options<EventUpdateReplayData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    EventUpdateReplayResponse,
    EventUpdateReplayError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/events/replay",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Replay events
 * Cancels all runs for a list of events.
 */
export const eventUpdateCancel = <ThrowOnError extends boolean = false>(
  options: Options<EventUpdateCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    EventUpdateCancelResponse,
    EventUpdateCancelError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/events/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List rate limits
 * Lists all rate limits for a tenant.
 */
export const rateLimitList = <ThrowOnError extends boolean = false>(
  options: Options<RateLimitListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RateLimitListResponse,
    RateLimitListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/rate-limits",
    ...options,
  });
};

/**
 * List tenant members
 * Gets a list of tenant members
 */
export const tenantMemberList = <ThrowOnError extends boolean = false>(
  options: Options<TenantMemberListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TenantMemberListResponse,
    TenantMemberListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/members",
    ...options,
  });
};

/**
 * Delete a tenant member
 * Delete a member from a tenant
 */
export const tenantMemberDelete = <ThrowOnError extends boolean = false>(
  options: Options<TenantMemberDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    TenantMemberDeleteResponse,
    TenantMemberDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/members/{member}",
    ...options,
  });
};

/**
 * Get event data
 * Get an event.
 */
export const eventGet = <ThrowOnError extends boolean = false>(
  options: Options<EventGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EventGetResponse,
    EventGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/events/{event}",
    ...options,
  });
};

/**
 * Get event data
 * Get the data for an event.
 */
export const eventDataGet = <ThrowOnError extends boolean = false>(
  options: Options<EventDataGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EventDataGetResponse,
    EventDataGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/events/{event}/data",
    ...options,
  });
};

/**
 * List event keys
 * Lists all event keys for a tenant.
 */
export const eventKeyList = <ThrowOnError extends boolean = false>(
  options: Options<EventKeyListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EventKeyListResponse,
    EventKeyListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/events/keys",
    ...options,
  });
};

/**
 * Get workflows
 * Get all workflows for a tenant
 */
export const workflowList = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowListResponse,
    WorkflowListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows",
    ...options,
  });
};

/**
 * Get scheduled workflow runs
 * Get all scheduled workflow runs for a tenant
 */
export const workflowScheduledList = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowScheduledListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowScheduledListResponse,
    WorkflowScheduledListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/scheduled",
    ...options,
  });
};

/**
 * Delete scheduled workflow run
 * Delete a scheduled workflow run for a tenant
 */
export const workflowScheduledDelete = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowScheduledDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    WorkflowScheduledDeleteResponse,
    WorkflowScheduledDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/scheduled/{scheduledId}",
    ...options,
  });
};

/**
 * Get scheduled workflow run
 * Get a scheduled workflow run for a tenant
 */
export const workflowScheduledGet = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowScheduledGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowScheduledGetResponse,
    WorkflowScheduledGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/scheduled/{scheduledId}",
    ...options,
  });
};

/**
 * Get cron job workflows
 * Get all cron job workflow runs for a tenant
 */
export const cronWorkflowList = <ThrowOnError extends boolean = false>(
  options: Options<CronWorkflowListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CronWorkflowListResponse,
    CronWorkflowListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/crons",
    ...options,
  });
};

/**
 * Cancel workflow runs
 * Cancel a batch of workflow runs
 */
export const workflowRunCancel = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    WorkflowRunCancelResponse,
    WorkflowRunCancelError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/cancel",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete workflow
 * Delete a workflow for a tenant
 */
export const workflowDelete = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    WorkflowDeleteResponse,
    WorkflowDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workflows/{workflow}",
    ...options,
  });
};

/**
 * Get workflow
 * Get a workflow for a tenant
 */
export const workflowGet = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowGetResponse,
    WorkflowGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workflows/{workflow}",
    ...options,
  });
};

/**
 * Update workflow
 * Update a workflow for a tenant
 */
export const workflowUpdate = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    WorkflowUpdateResponse,
    WorkflowUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workflows/{workflow}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get workflow version
 * Get a workflow version for a tenant
 */
export const workflowVersionGet = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowVersionGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowVersionGetResponse,
    WorkflowVersionGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workflows/{workflow}/versions",
    ...options,
  });
};

/**
 * Trigger workflow run
 * Trigger a new workflow run for a tenant
 */
export const workflowRunCreate = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    WorkflowRunCreateResponse,
    WorkflowRunCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workflows/{workflow}/trigger",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get workflow metrics
 * Get the metrics for a workflow version
 */
export const workflowGetMetrics = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowGetMetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowGetMetricsResponse,
    WorkflowGetMetricsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workflows/{workflow}/metrics",
    ...options,
  });
};

/**
 * List log lines
 * Lists log lines for a step run.
 */
export const logLineList = <ThrowOnError extends boolean = false>(
  options: Options<LogLineListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LogLineListResponse,
    LogLineListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/step-runs/{step-run}/logs",
    ...options,
  });
};

/**
 * List events for step run
 * List events for a step run
 */
export const stepRunListEvents = <ThrowOnError extends boolean = false>(
  options: Options<StepRunListEventsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StepRunListEventsResponse,
    StepRunListEventsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/step-runs/{step-run}/events",
    ...options,
  });
};

/**
 * List events for all step runs for a workflow run
 * List events for all step runs for a workflow run
 */
export const workflowRunListStepRunEvents = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WorkflowRunListStepRunEventsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowRunListStepRunEventsResponse,
    WorkflowRunListStepRunEventsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/step-run-events",
    ...options,
  });
};

/**
 * List archives for step run
 * List archives for a step run
 */
export const stepRunListArchives = <ThrowOnError extends boolean = false>(
  options: Options<StepRunListArchivesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StepRunListArchivesResponse,
    StepRunListArchivesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/step-runs/{step-run}/archives",
    ...options,
  });
};

/**
 * Get workflow worker count
 * Get a count of the workers available for workflow
 */
export const workflowGetWorkersCount = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowGetWorkersCountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowGetWorkersCountResponse,
    WorkflowGetWorkersCountError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/{workflow}/worker-count",
    ...options,
  });
};

/**
 * Get workflow runs
 * Get all workflow runs for a tenant
 */
export const workflowRunList = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowRunListResponse,
    WorkflowRunListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/runs",
    ...options,
  });
};

/**
 * Replay workflow runs
 * Replays a list of workflow runs.
 */
export const workflowRunUpdateReplay = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunUpdateReplayData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    WorkflowRunUpdateReplayResponse,
    WorkflowRunUpdateReplayError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflow-runs/replay",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get workflow runs metrics
 * Get a summary of  workflow run metrics for a tenant
 */
export const workflowRunGetMetrics = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunGetMetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowRunGetMetricsResponse,
    WorkflowRunGetMetricsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/runs/metrics",
    ...options,
  });
};

/**
 * Get workflow run
 * Get a workflow run for a tenant
 */
export const workflowRunGet = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowRunGetResponse,
    WorkflowRunGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}",
    ...options,
  });
};

/**
 * Get workflow run
 * Get a workflow run for a tenant
 */
export const workflowRunGetShape = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunGetShapeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowRunGetShapeResponse,
    WorkflowRunGetShapeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/shape",
    ...options,
  });
};

/**
 * Get step run
 * Get a step run by id
 */
export const stepRunGet = <ThrowOnError extends boolean = false>(
  options: Options<StepRunGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StepRunGetResponse,
    StepRunGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/step-runs/{step-run}",
    ...options,
  });
};

/**
 * Rerun step run
 * Reruns a step run
 */
export const stepRunUpdateRerun = <ThrowOnError extends boolean = false>(
  options: Options<StepRunUpdateRerunData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    StepRunUpdateRerunResponse,
    StepRunUpdateRerunError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/rerun",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Attempts to cancel a step run
 * Attempts to cancel a step run
 */
export const stepRunUpdateCancel = <ThrowOnError extends boolean = false>(
  options: Options<StepRunUpdateCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    StepRunUpdateCancelResponse,
    StepRunUpdateCancelError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/cancel",
    ...options,
  });
};

/**
 * Get step run schema
 * Get the schema for a step run
 */
export const stepRunGetSchema = <ThrowOnError extends boolean = false>(
  options: Options<StepRunGetSchemaData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StepRunGetSchemaResponse,
    StepRunGetSchemaError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/schema",
    ...options,
  });
};

/**
 * Get workers
 * Get all workers for a tenant
 */
export const workerList = <ThrowOnError extends boolean = false>(
  options: Options<WorkerListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkerListResponse,
    WorkerListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/worker",
    ...options,
  });
};

/**
 * Get worker
 * Get a worker
 */
export const workerGet = <ThrowOnError extends boolean = false>(
  options: Options<WorkerGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkerGetResponse,
    WorkerGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workers/{worker}",
    ...options,
  });
};

/**
 * Update worker
 * Update a worker
 */
export const workerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<WorkerUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    WorkerUpdateResponse,
    WorkerUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/workers/{worker}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List webhooks
 * Lists all webhooks
 */
export const webhookList = <ThrowOnError extends boolean = false>(
  options: Options<WebhookListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WebhookListResponse,
    WebhookListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/webhook-workers",
    ...options,
  });
};

/**
 * Create a webhook
 * Creates a webhook
 */
export const webhookCreate = <ThrowOnError extends boolean = false>(
  options: Options<WebhookCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    WebhookCreateResponse,
    WebhookCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/webhook-workers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a webhook
 * Deletes a webhook
 */
export const webhookDelete = <ThrowOnError extends boolean = false>(
  options: Options<WebhookDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    unknown,
    WebhookDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/webhook-workers/{webhook}",
    ...options,
  });
};

/**
 * List webhook requests
 * Lists all requests for a webhook
 */
export const webhookRequestsList = <ThrowOnError extends boolean = false>(
  options: Options<WebhookRequestsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WebhookRequestsListResponse,
    WebhookRequestsListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/webhook-workers/{webhook}/requests",
    ...options,
  });
};

/**
 * Get workflow run input
 * Get the input for a workflow run.
 */
export const workflowRunGetInput = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowRunGetInputData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowRunGetInputResponse,
    WorkflowRunGetInputError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/input",
    ...options,
  });
};

/**
 * Get workflow version
 * Get a workflow by its name
 */
export const workflowGetByName = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowGetByNameData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkflowGetByNameResponse,
    WorkflowGetByNameError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/workflows/byName/{name}",
    ...options,
  });
};

/**
 * 聊天消息接口
 * chat 聊天接口
 */
export const chatChat = <ThrowOnError extends boolean = false>(
  options: Options<ChatChatData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ChatChatResponse,
    ChatChatError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取聊天消息
 * 获取聊天消息
 */
export const chatMessages = <ThrowOnError extends boolean = false>(
  options: Options<ChatMessagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ChatMessagesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/chat/{chatId}/messages",
    ...options,
  });
};

/**
 * 获取worker配置, 内部使用免去配置 token环境变量的麻烦
 * 获取worker配置
 */
export const workerConfig = <ThrowOnError extends boolean = false>(
  options?: Options<WorkerConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WorkerConfigResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/worker/config",
    ...options,
  });
};

/**
 * 获取博客生成配置
 * 获取博客生成配置
 */
export const mtmaiBloggenconfig = <ThrowOnError extends boolean = false>(
  options?: Options<MtmaiBloggenconfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MtmaiBloggenconfigResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/mtmai/bloggenconfig",
    ...options,
  });
};

export const mtmaiWorkerConfig = <ThrowOnError extends boolean = false>(
  options?: Options<MtmaiWorkerConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MtmaiWorkerConfigResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/mtmai/worker_config",
    ...options,
  });
};

/**
 * Get tenant blogs
 * Get the blogs for the tenant
 */
export const blogList = <ThrowOnError extends boolean = false>(
  options: Options<BlogListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BlogListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/blogs",
    ...options,
  });
};

/**
 * Create blog post
 * Creates a new blog
 */
export const blogCreate = <ThrowOnError extends boolean = false>(
  options: Options<BlogCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BlogCreateResponse,
    BlogCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/blogs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the blogs for the tenant
 */
export const blogGet = <ThrowOnError extends boolean = false>(
  options: Options<BlogGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BlogGetResponse,
    BlogGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/blogs/{blog}",
    ...options,
  });
};

/**
 * Update blog
 * Update an existing blog
 */
export const blogUpdate = <ThrowOnError extends boolean = false>(
  options: Options<BlogUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    BlogUpdateResponse,
    BlogUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/blogs/{blog}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the sites for the tenant
 */
export const siteList = <ThrowOnError extends boolean = false>(
  options: Options<SiteListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SiteListResponse,
    SiteListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites",
    ...options,
  });
};

/**
 * create site
 */
export const siteCreate = <ThrowOnError extends boolean = false>(
  options: Options<SiteCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SiteCreateResponse,
    SiteCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the site for the tenant
 */
export const siteGet = <ThrowOnError extends boolean = false>(
  options: Options<SiteGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SiteGetResponse,
    SiteGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/{site}",
    ...options,
  });
};

/**
 * Update tenant
 * Update an existing site
 */
export const siteUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SiteUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    SiteUpdateResponse,
    SiteUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/{site}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 前端根据域名获取site公开数据
 */
export const siteGetByHost = <ThrowOnError extends boolean = false>(
  options: Options<SiteGetByHostData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SiteGetByHostResponse,
    SiteGetByHostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/byHost/{host}",
    ...options,
  });
};

/**
 * Get the site-hosts for the tenant
 */
export const siteHostList = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SiteHostListResponse,
    SiteHostListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/site-hosts",
    ...options,
  });
};

/**
 * create site-host
 */
export const siteHostCreate = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SiteHostCreateResponse,
    SiteHostCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/site-hosts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the site-host for the tenant
 */
export const siteHostGet = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SiteHostGetResponse,
    SiteHostGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/site-hosts/{host}",
    ...options,
  });
};

/**
 * Update tenant
 * Update an existing site-host
 */
export const siteHostUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    SiteHostUpdateResponse,
    SiteHostUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/site-hosts/{host}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the posts for the site
 */
export const postListPublic = <ThrowOnError extends boolean = false>(
  options?: Options<PostListPublicData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PostListPublicResponse,
    PostListPublicError,
    ThrowOnError
  >({
    url: "/api/v1/posts/public",
    ...options,
  });
};

/**
 * Get the post for the tenant
 */
export const postGet = <ThrowOnError extends boolean = false>(
  options: Options<PostGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PostGetResponse,
    PostGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/posts/{post}",
    ...options,
  });
};

/**
 * Get the posts for the site
 */
export const postList = <ThrowOnError extends boolean = false>(
  options: Options<PostListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PostListResponse,
    PostListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/posts",
    ...options,
  });
};

/**
 * create post
 */
export const postCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostCreateResponse,
    PostCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/posts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的artifacts列表
 * Get the artifacts for the tenant
 */
export const artifactList = <ThrowOnError extends boolean = false>(
  options: Options<ArtifactListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ArtifactListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/artifacts",
    ...options,
  });
};

/**
 * Create blog post
 * Creates a new artifact
 */
export const artifactCreate = <ThrowOnError extends boolean = false>(
  options: Options<ArtifactCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ArtifactCreateResponse,
    ArtifactCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/artifacts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get step run
 * Get a blog post by id
 */
export const artifactGet = <ThrowOnError extends boolean = false>(
  options: Options<ArtifactGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ArtifactGetResponse,
    ArtifactGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/artifacts/{artifact}",
    ...options,
  });
};

/**
 * 获取租户下的团队列表
 * 获取团队列表
 */
export const teamList = <ThrowOnError extends boolean = false>(
  options: Options<TeamListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TeamListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/teams",
    ...options,
  });
};

/**
 * create team
 */
export const teamCreate = <ThrowOnError extends boolean = false>(
  options: Options<TeamCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TeamCreateResponse,
    TeamCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/teams",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的团队列表
 * 获取团队列表
 */
export const teamGet = <ThrowOnError extends boolean = false>(
  options: Options<TeamGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TeamGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/teams/{team}",
    ...options,
  });
};

/**
 * 获取租户下的画廊列表
 * 获取画廊列表
 */
export const galleryList = <ThrowOnError extends boolean = false>(
  options: Options<GalleryListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GalleryListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/galleries",
    ...options,
  });
};

/**
 * create gallery
 */
export const galleryCreate = <ThrowOnError extends boolean = false>(
  options: Options<GalleryCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GalleryCreateResponse,
    GalleryCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/galleries",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的画廊列表
 * 获取画廊列表
 */
export const galleryGet = <ThrowOnError extends boolean = false>(
  options: Options<GalleryGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GalleryGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/gallery/{gallery}",
    ...options,
  });
};

/**
 * 获取租户下的会话列表
 * 获取会话列表
 */
export const sessionList = <ThrowOnError extends boolean = false>(
  options: Options<SessionListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SessionListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sessions",
    ...options,
  });
};

/**
 * create session
 */
export const sessionCreate = <ThrowOnError extends boolean = false>(
  options: Options<SessionCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SessionCreateResponse,
    SessionCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的会话
 * 获取会话
 */
export const sessionGet = <ThrowOnError extends boolean = false>(
  options: Options<SessionGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SessionGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sessions/{session}",
    ...options,
  });
};

/**
 * 更新会话
 * 更新会话
 */
export const sessionUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SessionUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    SessionUpdateResponse,
    SessionUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sessions/{session}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的节点列表
 * 获取节点
 */
export const agentNodeList = <ThrowOnError extends boolean = false>(
  options: Options<AgentNodeListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgentNodeListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/nodes",
    ...options,
  });
};

/**
 * Create agent node
 * Creates a new agentnode
 */
export const agentCreate = <ThrowOnError extends boolean = false>(
  options: Options<AgentCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AgentCreateResponse,
    AgentCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/nodes",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取节点状态
 * 获取节点状态
 */
export const agentNode = <ThrowOnError extends boolean = false>(
  options: Options<AgentNodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgentNodeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/nodes/{node}",
    ...options,
  });
};

/**
 * 更新节点状态
 * 更新节点状态
 */
export const agentNodeUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AgentNodeUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    AgentNodeUpdateResponse,
    AgentNodeUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/nodes/{node}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 执行节点
 * 执行节点(执行工作流)
 */
export const agentNodeRun = <ThrowOnError extends boolean = false>(
  options: Options<AgentNodeRunData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AgentNodeRunResponse,
    AgentNodeRunError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/nodes/run",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的agent列表
 * 获取agent列表
 */
export const agentList = <ThrowOnError extends boolean = false>(
  options: Options<AgentListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgentListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/agents",
    ...options,
  });
};

/**
 * 获取租户下的agent列表
 * 获取agent列表
 */
export const agentGet = <ThrowOnError extends boolean = false>(
  options: Options<AgentGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgentGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/agent/{agent}",
    ...options,
  });
};

/**
 * 拉取事件
 * 拉取事件
 */
export const agentStream = <ThrowOnError extends boolean = false>(
  options: Options<AgentStreamData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgentStreamResponse,
    AgentStreamError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/stream/{stream}",
    ...options,
  });
};

/**
 * 获取租户下的agEvent列表
 * 获取agEvent列表
 */
export const agEventList = <ThrowOnError extends boolean = false>(
  options: Options<AgEventListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgEventListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/agEvents",
    ...options,
  });
};

/**
 * create agEvent
 */
export const agEventCreate = <ThrowOnError extends boolean = false>(
  options: Options<AgEventCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AgEventCreateResponse,
    AgEventCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/agEvents",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的agEvent列表
 * 获取agEvent列表
 */
export const agEventGet = <ThrowOnError extends boolean = false>(
  options: Options<AgEventGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AgEventGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/agEvents/{agEvent}",
    ...options,
  });
};

/**
 * 获取租户下的run列表
 * 获取run列表
 */
export const runList = <ThrowOnError extends boolean = false>(
  options: Options<RunListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RunListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/runs",
    ...options,
  });
};

/**
 * 创建run
 */
export const runCreate = <ThrowOnError extends boolean = false>(
  options: Options<RunCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RunCreateResponse,
    RunCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/runs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的run列表
 * 获取run列表
 */
export const runGet = <ThrowOnError extends boolean = false>(
  options: Options<RunGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<RunGetResponse, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          scheme: "basic",
          type: "http",
        },
      ],
      url: "/api/v1/tenants/{tenant}/runs/{run}",
      ...options,
    },
  );
};

export const modelList = <ThrowOnError extends boolean = false>(
  options: Options<ModelListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ModelListResponse,
    ModelListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/models",
    ...options,
  });
};

/**
 * 大语言模型配置
 */
export const modelCreate = <ThrowOnError extends boolean = false>(
  options: Options<ModelCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ModelCreateResponse,
    ModelCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/models",
    ...options,
  });
};

export const modelGet = <ThrowOnError extends boolean = false>(
  options: Options<ModelGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ModelGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/models/{model}",
    ...options,
  });
};

/**
 * Update an model
 */
export const modelUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ModelUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    ModelUpdateResponse,
    ModelUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/models/{model}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 提示词列表
 * Get the blogs for the tenant
 */
export const promptList = <ThrowOnError extends boolean = false>(
  options: Options<PromptListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/prompts",
    ...options,
  });
};

/**
 * 获取单个提示词
 */
export const promptGet = <ThrowOnError extends boolean = false>(
  options: Options<PromptGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptGetResponse,
    PromptGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/prompts/{prompt}",
    ...options,
  });
};

/**
 * 提示词列表
 * Get the blogs for the tenant
 */
export const assisantList = <ThrowOnError extends boolean = false>(
  options: Options<AssisantListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AssisantListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/assisants",
    ...options,
  });
};

/**
 * 获取单个助手配置
 */
export const assisantGet = <ThrowOnError extends boolean = false>(
  options: Options<AssisantGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AssisantGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/tenants/{tenant}/assisants/{assisant}",
    ...options,
  });
};

export const adminReleaseConn = <ThrowOnError extends boolean = false>(
  options?: Options<AdminReleaseConnData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminReleaseConnResponse,
    AdminReleaseConnError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/admin/releaseConn",
    ...options,
  });
};

export const frontendGetConfig = <ThrowOnError extends boolean = false>(
  options?: Options<FrontendGetConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    FrontendGetConfigResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/frontend/config",
    ...options,
  });
};

export const frontendGetSiderbar = <ThrowOnError extends boolean = false>(
  options?: Options<FrontendGetSiderbarData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    FrontendGetSiderbarResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/frontend/siderbar",
    ...options,
  });
};

export const hfAccountGet = <ThrowOnError extends boolean = false>(
  options?: Options<HfAccountGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HfAccountGetResponse,
    HfAccountGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/hf/account",
    ...options,
  });
};

/**
 * 环境变量
 */
export const envList = <ThrowOnError extends boolean = false>(
  options?: Options<EnvListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EnvListResponse,
    EnvListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/env",
    ...options,
  });
};

/**
 * Update blog
 * Update an existing env
 */
export const envUpdate = <ThrowOnError extends boolean = false>(
  options: Options<EnvUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    EnvUpdateResponse,
    EnvUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/env",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 环境变量
 */
export const envGet = <ThrowOnError extends boolean = false>(
  options: Options<EnvGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EnvGetResponse,
    EnvGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/env/{name}",
    ...options,
  });
};

/**
 * Update blog
 * Update an existing env
 */
export const kvUpdate = <ThrowOnError extends boolean = false>(
  options: Options<KvUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    KvUpdateResponse,
    KvUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/kv",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const kvGet = <ThrowOnError extends boolean = false>(
  options: Options<KvGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    KvGetResponse,
    KvGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/kv/{key}",
    ...options,
  });
};

export const endpointList = <ThrowOnError extends boolean = false>(
  options?: Options<EndpointListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EndpointListResponse,
    EndpointListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/endpoint",
    ...options,
  });
};

/**
 * Update endpoint
 * Update an endpoint
 */
export const endpointUpdate = <ThrowOnError extends boolean = false>(
  options: Options<EndpointUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    EndpointUpdateResponse,
    EndpointUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/endpoint",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const platformList = <ThrowOnError extends boolean = false>(
  options?: Options<PlatformListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PlatformListResponse,
    PlatformListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platforms",
    ...options,
  });
};

/**
 * create platform
 */
export const platformCreate = <ThrowOnError extends boolean = false>(
  options: Options<PlatformCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PlatformCreateResponse,
    PlatformCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platforms",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const platformGet = <ThrowOnError extends boolean = false>(
  options: Options<PlatformGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PlatformGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platforms/{platform}",
    ...options,
  });
};

/**
 * Update platform
 * Update an platform
 */
export const platformUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PlatformUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PlatformUpdateResponse,
    PlatformUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platforms/{platform}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const platformAccountList = <ThrowOnError extends boolean = false>(
  options?: Options<PlatformAccountListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PlatformAccountListResponse,
    PlatformAccountListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platform_accounts",
    ...options,
  });
};

/**
 * create platform_account
 */
export const platformAccountCreate = <ThrowOnError extends boolean = false>(
  options: Options<PlatformAccountCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PlatformAccountCreateResponse,
    PlatformAccountCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platform_accounts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const platformAccountGet = <ThrowOnError extends boolean = false>(
  options: Options<PlatformAccountGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PlatformAccountGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platform_accounts/{platform_account}",
    ...options,
  });
};

/**
 * Update platform_account
 * Update an platform_account
 */
export const platformAccountUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PlatformAccountUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PlatformAccountUpdateResponse,
    PlatformAccountUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/platform_accounts/{platform_account}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const browserList = <ThrowOnError extends boolean = false>(
  options?: Options<BrowserListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BrowserListResponse,
    BrowserListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/browsers",
    ...options,
  });
};

/**
 * create browser
 */
export const browserCreate = <ThrowOnError extends boolean = false>(
  options: Options<BrowserCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BrowserCreateResponse,
    BrowserCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/browsers",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const browserGet = <ThrowOnError extends boolean = false>(
  options: Options<BrowserGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    BrowserGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/browsers/{browser}",
    ...options,
  });
};

/**
 * Update browser
 * Update an browser
 */
export const browserUpdate = <ThrowOnError extends boolean = false>(
  options: Options<BrowserUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    BrowserUpdateResponse,
    BrowserUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/browsers/{browser}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const proxyList = <ThrowOnError extends boolean = false>(
  options?: Options<ProxyListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ProxyListResponse,
    ProxyListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/proxies",
    ...options,
  });
};

/**
 * create proxy
 */
export const proxyCreate = <ThrowOnError extends boolean = false>(
  options: Options<ProxyCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ProxyCreateResponse,
    ProxyCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/proxies",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const proxyGet = <ThrowOnError extends boolean = false>(
  options: Options<ProxyGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ProxyGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/proxies/{proxy}",
    ...options,
  });
};

/**
 * Update proxy
 * Update an proxy
 */
export const proxyUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ProxyUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    ProxyUpdateResponse,
    ProxyUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        scheme: "basic",
        type: "http",
      },
    ],
    url: "/api/v1/proxies/{proxy}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
