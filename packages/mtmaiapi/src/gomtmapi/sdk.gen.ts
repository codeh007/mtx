// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ReadinessGetData, LivenessGetData, MetadataGetData, MetadataGetResponse, MetadataGetError, CloudMetadataGetData, CloudMetadataGetResponse, CloudMetadataGetError, MetadataListIntegrationsData, MetadataListIntegrationsResponse, MetadataListIntegrationsError, UserUpdateLoginData, UserUpdateLoginResponse, UserUpdateLoginError, UserUpdateGoogleOauthStartData, UserUpdateGoogleOauthCallbackData, UserUpdateGithubOauthStartData, UserUpdateGithubOauthCallbackData, UserUpdateSlackOauthStartData, UserUpdateSlackOauthCallbackData, TenantSettingsListData, TenantSettingsListResponse, TenantSettingsListError, TenantDefaultSettingGetData, TenantDefaultSettingGetResponse, TenantDefaultSettingGetError, TenantDefaultSettingData, TenantDefaultSettingResponse, TenantDefaultSettingError, TenantSettingsDeleteData, TenantSettingsDeleteResponse, TenantSettingsDeleteError, TenantSettingsGetData, TenantSettingsGetResponse, TenantSettingsGetError, TenantSettingsUpsertData, TenantSettingsUpsertResponse, TenantSettingsUpsertError, SnsListData, SnsListResponse, SnsListError, SnsCreateData, SnsCreateResponse, SnsCreateError, AlertEmailGroupListData, AlertEmailGroupListResponse, AlertEmailGroupListError, AlertEmailGroupCreateData, AlertEmailGroupCreateResponse, AlertEmailGroupCreateError, TenantResourcePolicyGetData, TenantResourcePolicyGetResponse, TenantResourcePolicyGetError, AlertEmailGroupDeleteData, AlertEmailGroupDeleteResponse, AlertEmailGroupDeleteError, AlertEmailGroupUpdateData, AlertEmailGroupUpdateResponse, AlertEmailGroupUpdateError, SnsDeleteData, SnsDeleteResponse, SnsDeleteError, SlackWebhookListData, SlackWebhookListResponse, SlackWebhookListError, SlackWebhookDeleteData, SlackWebhookDeleteResponse, SlackWebhookDeleteError, UserGetCurrentData, UserGetCurrentResponse, UserGetCurrentError, UserUpdatePasswordData, UserUpdatePasswordResponse, UserUpdatePasswordError, UserCreateData, UserCreateResponse, UserCreateError, UserUpdateLogoutData, UserUpdateLogoutResponse, UserUpdateLogoutError, TenantMembershipsListData, TenantMembershipsListResponse, TenantMembershipsListError, UserListTenantInvitesData, UserListTenantInvitesResponse, UserListTenantInvitesError, TenantInviteAcceptData, TenantInviteAcceptError, TenantInviteRejectData, TenantInviteRejectError, TenantCreateData, TenantCreateResponse, TenantCreateError, TenantUpdateData, TenantUpdateResponse, TenantUpdateError, TenantAlertingSettingsGetData, TenantAlertingSettingsGetResponse, TenantAlertingSettingsGetError, TenantInviteListData, TenantInviteListResponse, TenantInviteListError, TenantInviteCreateData, TenantInviteCreateResponse, TenantInviteCreateError, TenantInviteDeleteData, TenantInviteDeleteResponse, TenantInviteDeleteError, TenantInviteUpdateData, TenantInviteUpdateResponse, TenantInviteUpdateError, ApiTokenListData, ApiTokenListResponse, ApiTokenListError, ApiTokenCreateData, ApiTokenCreateResponse, ApiTokenCreateError, ApiTokenUpdateRevokeData, ApiTokenUpdateRevokeResponse, ApiTokenUpdateRevokeError, TenantGetQueueMetricsData, TenantGetQueueMetricsResponse, TenantGetQueueMetricsError, TenantGetStepRunQueueMetricsData, TenantGetStepRunQueueMetricsResponse, TenantGetStepRunQueueMetricsError, EventListData, EventListResponse, EventListError, EventUpdateCancelData, EventUpdateCancelResponse, EventUpdateCancelError, RateLimitListData, RateLimitListResponse, RateLimitListError, TenantMemberListData, TenantMemberListResponse, TenantMemberListError, TenantMemberDeleteData, TenantMemberDeleteResponse, TenantMemberDeleteError, EventGetData, EventGetResponse, EventGetError, EventDataGetData, EventDataGetResponse, EventDataGetError, EventKeyListData, EventKeyListResponse, EventKeyListError, WorkflowListData, WorkflowListResponse, WorkflowListError, WorkflowScheduledListData, WorkflowScheduledListResponse, WorkflowScheduledListError, WorkflowScheduledDeleteData, WorkflowScheduledDeleteResponse, WorkflowScheduledDeleteError, WorkflowScheduledGetData, WorkflowScheduledGetResponse, WorkflowScheduledGetError, CronWorkflowListData, CronWorkflowListResponse, CronWorkflowListError, WorkflowRunCancelData, WorkflowRunCancelResponse, WorkflowRunCancelError, WorkflowDeleteData, WorkflowDeleteResponse, WorkflowDeleteError, WorkflowGetData, WorkflowGetResponse, WorkflowGetError, WorkflowUpdateData, WorkflowUpdateResponse, WorkflowUpdateError, WorkflowVersionGetData, WorkflowVersionGetResponse, WorkflowVersionGetError, WorkflowRunCreateData, WorkflowRunCreateResponse, WorkflowRunCreateError, WorkflowGetMetricsData, WorkflowGetMetricsResponse, WorkflowGetMetricsError, LogLineListData, LogLineListResponse, LogLineListError, StepRunListEventsData, StepRunListEventsResponse, StepRunListEventsError, WorkflowRunListStepRunEventsData, WorkflowRunListStepRunEventsResponse, WorkflowRunListStepRunEventsError, StepRunListArchivesData, StepRunListArchivesResponse, StepRunListArchivesError, WorkflowGetWorkersCountData, WorkflowGetWorkersCountResponse, WorkflowGetWorkersCountError, WorkflowRunListData, WorkflowRunListResponse, WorkflowRunListError, WorkflowRunUpdateReplayData, WorkflowRunUpdateReplayResponse, WorkflowRunUpdateReplayError, WorkflowRunGetMetricsData, WorkflowRunGetMetricsResponse, WorkflowRunGetMetricsError, WorkflowRunGetData, WorkflowRunGetResponse, WorkflowRunGetError, WorkflowRunGetShapeData, WorkflowRunGetShapeResponse, WorkflowRunGetShapeError, StepRunGetData, StepRunGetResponse, StepRunGetError, StepRunUpdateRerunData, StepRunUpdateRerunResponse, StepRunUpdateRerunError, StepRunUpdateCancelData, StepRunUpdateCancelResponse, StepRunUpdateCancelError, StepRunGetSchemaData, StepRunGetSchemaResponse, StepRunGetSchemaError, WorkerListData, WorkerListResponse, WorkerListError, WorkerGetData, WorkerGetResponse, WorkerGetError, WorkerUpdateData, WorkerUpdateResponse, WorkerUpdateError, WebhookListData, WebhookListResponse, WebhookListError, WebhookCreateData, WebhookCreateResponse, WebhookCreateError, WebhookDeleteData, WebhookDeleteError, WebhookRequestsListData, WebhookRequestsListResponse, WebhookRequestsListError, WorkflowRunGetInputData, WorkflowRunGetInputResponse, WorkflowRunGetInputError, WorkflowGetByNameData, WorkflowGetByNameResponse, WorkflowGetByNameError, BlogListData, BlogListResponse, BlogCreateData, BlogCreateResponse, BlogCreateError, BlogGetData, BlogGetResponse, BlogGetError, BlogUpdateData, BlogUpdateResponse, BlogUpdateError, SiteListData, SiteListResponse, SiteListError, SiteCreateData, SiteCreateResponse, SiteCreateError, SiteGetData, SiteGetResponse, SiteGetError, SiteUpdateData, SiteUpdateResponse, SiteUpdateError, SiteGetByHostData, SiteGetByHostResponse, SiteGetByHostError, SiteHostListData, SiteHostListResponse, SiteHostListError, SiteHostCreateData, SiteHostCreateResponse, SiteHostCreateError, SiteHostGetData, SiteHostGetResponse, SiteHostGetError, SiteHostUpdateData, SiteHostUpdateResponse, SiteHostUpdateError, PostListPublicData, PostListPublicResponse, PostListPublicError, PostGetData, PostGetResponse, PostGetError, PostListData, PostListResponse, PostListError, PostCreateData, PostCreateResponse, PostCreateError, ArtifactListData, ArtifactListResponse, ArtifactGetData, ArtifactGetResponse, ArtifactGetError, ComsListData, ComsListResponse, ComsListError, ComsUpsertData, ComsUpsertResponse, ComsUpsertError, ComsGetData, ComsGetResponse, ComsGetError, GalleryListData, GalleryListResponse, GalleryCreateData, GalleryCreateResponse, GalleryCreateError, GalleryGetData, GalleryGetResponse, AgEventListData, AgEventListResponse, AgEventGetData, AgEventGetResponse, ModelListData, ModelListResponse, ModelListError, ModelGetData, ModelGetResponse, ModelGetError, ModelUpsertData, ModelUpsertResponse, ModelUpsertError, ModelRunsListData, ModelRunsListResponse, ModelRunsListError, ModelRunGetData, ModelRunGetResponse, ModelRunGetError, ModelRunUpsertData, ModelRunUpsertResponse, ModelRunUpsertError, PromptListData, PromptListResponse, PromptListError, PromptGetData, PromptGetResponse, PromptGetError, AdminReleaseConnData, AdminReleaseConnResponse, AdminReleaseConnError, AdminResetDbData, AdminResetDbResponse, AdminResetDbError, FrontendGetConfigData, FrontendGetConfigResponse, FrontendGetSiderbarData, FrontendGetSiderbarResponse, HfAccountGetData, HfAccountGetResponse, HfAccountGetError, EnvListData, EnvListResponse, EnvListError, EnvUpdateData, EnvUpdateResponse, EnvUpdateError, EnvGetData, EnvGetResponse, EnvGetError, EndpointListData, EndpointListResponse, EndpointListError, EndpointUpdateData, EndpointUpdateResponse, EndpointUpdateError, PlatformListData, PlatformListResponse, PlatformListError, PlatformCreateData, PlatformCreateResponse, PlatformCreateError, PlatformGetData, PlatformGetResponse, PlatformUpdateData, PlatformUpdateResponse, PlatformUpdateError, PlatformAccountListData, PlatformAccountListResponse, PlatformAccountListError, PlatformAccountCreateData, PlatformAccountCreateResponse, PlatformAccountCreateError, PlatformAccountGetData, PlatformAccountGetResponse, PlatformAccountUpsertData, PlatformAccountUpsertResponse, PlatformAccountUpsertError, BrowserListData, BrowserListResponse, BrowserListError, BrowserCreateData, BrowserCreateResponse, BrowserCreateError, BrowserOpenData, BrowserOpenResponse, BrowserOpenError, BrowserGetData, BrowserGetResponse, BrowserUpdateData, BrowserUpdateResponse, BrowserUpdateError, ProxyListData, ProxyListResponse, ProxyListError, ProxyGetData, ProxyGetResponse, ProxyGetError, ProxyUpsertData, ProxyUpsertResponse, ProxyUpsertError, AgStateListData, AgStateListResponse, AgStateGetData, AgStateGetResponse, AgStateGetError, AgStateUpsertData, AgStateUpsertResponse, AgStateUpsertError, ChatMessagesListData, ChatMessagesListResponse, ChatMessagesListError, ChatSessionListData, ChatSessionListResponse, ChatSessionListError, ChatMessageUpsertData, ChatMessageUpsertResponse, ChatMessageUpsertError, ChatSessionGetData, ChatSessionGetResponse, ChatSessionGetError, ChatSessionUpsertData, ChatSessionUpsertResponse, ChatSessionUpsertError, FlowStateListData, FlowStateListResponse, FlowStateGetData, FlowStateGetResponse, FlowStateGetError, FlowStateUpsertData, FlowStateUpsertResponse, FlowStateUpsertError, UiAgentGetData, UiAgentGetResponse, UiAgentGetError, DispatcherListenData, DispatcherListenResponse, DispatcherListenError, ResourceListData, ResourceListResponse, ResourceListError, ResourceUpsertData, ResourceUpsertResponse, ResourceUpsertError, ResourceDeleteData, ResourceDeleteResponse, ResourceDeleteError, ResourceGetData, ResourceGetResponse, ResourceGetError, InstagramLoginData, InstagramLoginResponse, InstagramLoginError, AdkAppListData, AdkAppListResponse, AdkAppListError, AdkAppUpsertData, AdkAppUpsertResponse, AdkAppUpsertError, AdkAppGetData, AdkAppGetResponse, AdkAppGetError, AdkSessionListData, AdkSessionListResponse, AdkSessionListError, AdkSessionUpsertData, AdkSessionUpsertResponse, AdkSessionUpsertError, AdkSessionGetData, AdkSessionGetResponse, AdkSessionGetError, AdkUserStateListData, AdkUserStateListResponse, AdkUserStateListError, AdkUserStateUpsertData, AdkUserStateUpsertResponse, AdkUserStateUpsertError, AdkUserStateGetData, AdkUserStateGetResponse, AdkUserStateGetError, AdkEventsListData, AdkEventsListResponse, AdkEventsListError, AdkEventsUpsertData, AdkEventsUpsertResponse, AdkEventsUpsertError, AdkEventsGetData, AdkEventsGetResponse, AdkEventsGetError, TkGetUserProfileData, TkGetUserProfileResponse, TkGetUserProfileError, TkAccountLoginData, TkAccountLoginResponse, TkAccountLoginError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get readiness
 * Gets the readiness status
 */
export const readinessGet = <ThrowOnError extends boolean = false>(options?: Options<ReadinessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/ready',
        ...options
    });
};

/**
 * Get liveness
 * Gets the liveness status
 */
export const livenessGet = <ThrowOnError extends boolean = false>(options?: Options<LivenessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/live',
        ...options
    });
};

/**
 * Get metadata
 * Gets metadata for the Hatchet instance
 */
export const metadataGet = <ThrowOnError extends boolean = false>(options?: Options<MetadataGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MetadataGetResponse, MetadataGetError, ThrowOnError>({
        url: '/api/v1/meta',
        ...options
    });
};

/**
 * Get cloud metadata
 * Gets metadata for the Hatchet cloud instance
 */
export const cloudMetadataGet = <ThrowOnError extends boolean = false>(options?: Options<CloudMetadataGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CloudMetadataGetResponse, CloudMetadataGetError, ThrowOnError>({
        url: '/api/v1/cloud/metadata',
        ...options
    });
};

/**
 * List integrations
 * List all integrations
 */
export const metadataListIntegrations = <ThrowOnError extends boolean = false>(options?: Options<MetadataListIntegrationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MetadataListIntegrationsResponse, MetadataListIntegrationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/meta/integrations',
        ...options
    });
};

/**
 * Login user
 * Logs in a user.
 */
export const userUpdateLogin = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserUpdateLoginResponse, UserUpdateLoginError, ThrowOnError>({
        url: '/api/v1/users/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateGoogleOauthStart = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateGoogleOauthStartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/users/google/start',
        ...options
    });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateGoogleOauthCallback = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateGoogleOauthCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/users/google/callback',
        ...options
    });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateGithubOauthStart = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateGithubOauthStartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/users/github/start',
        ...options
    });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateGithubOauthCallback = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateGithubOauthCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/users/github/callback',
        ...options
    });
};

/**
 * Starts the OAuth flow
 */
export const userUpdateSlackOauthStart = <ThrowOnError extends boolean = false>(options: Options<UserUpdateSlackOauthStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/slack/start',
        ...options
    });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateSlackOauthCallback = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateSlackOauthCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/users/slack/callback',
        ...options
    });
};

export const tenantSettingsList = <ThrowOnError extends boolean = false>(options: Options<TenantSettingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantSettingsListResponse, TenantSettingsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/settings',
        ...options
    });
};

export const tenantDefaultSettingGet = <ThrowOnError extends boolean = false>(options: Options<TenantDefaultSettingGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantDefaultSettingGetResponse, TenantDefaultSettingGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/{setting}/default',
        ...options
    });
};

export const tenantDefaultSetting = <ThrowOnError extends boolean = false>(options: Options<TenantDefaultSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TenantDefaultSettingResponse, TenantDefaultSettingError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/{setting}/default',
        ...options
    });
};

export const tenantSettingsDelete = <ThrowOnError extends boolean = false>(options: Options<TenantSettingsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantSettingsDeleteResponse, TenantSettingsDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/settings/{setting}',
        ...options
    });
};

export const tenantSettingsGet = <ThrowOnError extends boolean = false>(options: Options<TenantSettingsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantSettingsGetResponse, TenantSettingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/settings/{setting}',
        ...options
    });
};

export const tenantSettingsUpsert = <ThrowOnError extends boolean = false>(options: Options<TenantSettingsUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TenantSettingsUpsertResponse, TenantSettingsUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/settings/{setting}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List SNS integrations
 * List SNS integrations
 */
export const snsList = <ThrowOnError extends boolean = false>(options: Options<SnsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SnsListResponse, SnsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sns',
        ...options
    });
};

/**
 * Create SNS integration
 * Create SNS integration
 */
export const snsCreate = <ThrowOnError extends boolean = false>(options: Options<SnsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SnsCreateResponse, SnsCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sns',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List tenant alert email groups
 * Gets a list of tenant alert email groups
 */
export const alertEmailGroupList = <ThrowOnError extends boolean = false>(options: Options<AlertEmailGroupListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlertEmailGroupListResponse, AlertEmailGroupListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/alerting-email-groups',
        ...options
    });
};

/**
 * Create tenant alert email group
 * Creates a new tenant alert email group
 */
export const alertEmailGroupCreate = <ThrowOnError extends boolean = false>(options: Options<AlertEmailGroupCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AlertEmailGroupCreateResponse, AlertEmailGroupCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/alerting-email-groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create tenant alert email group
 * Gets the resource policy for a tenant
 */
export const tenantResourcePolicyGet = <ThrowOnError extends boolean = false>(options: Options<TenantResourcePolicyGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantResourcePolicyGetResponse, TenantResourcePolicyGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/resource-policy',
        ...options
    });
};

/**
 * Delete tenant alert email group
 * Deletes a tenant alert email group
 */
export const alertEmailGroupDelete = <ThrowOnError extends boolean = false>(options: Options<AlertEmailGroupDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AlertEmailGroupDeleteResponse, AlertEmailGroupDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/alerting-email-groups/{alert-email-group}',
        ...options
    });
};

/**
 * Update tenant alert email group
 * Updates a tenant alert email group
 */
export const alertEmailGroupUpdate = <ThrowOnError extends boolean = false>(options: Options<AlertEmailGroupUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AlertEmailGroupUpdateResponse, AlertEmailGroupUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/alerting-email-groups/{alert-email-group}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete SNS integration
 * Delete SNS integration
 */
export const snsDelete = <ThrowOnError extends boolean = false>(options: Options<SnsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SnsDeleteResponse, SnsDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/sns/{sns}',
        ...options
    });
};

/**
 * List Slack integrations
 * List Slack webhooks
 */
export const slackWebhookList = <ThrowOnError extends boolean = false>(options: Options<SlackWebhookListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlackWebhookListResponse, SlackWebhookListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/slack',
        ...options
    });
};

/**
 * Delete Slack webhook
 * Delete Slack webhook
 */
export const slackWebhookDelete = <ThrowOnError extends boolean = false>(options: Options<SlackWebhookDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SlackWebhookDeleteResponse, SlackWebhookDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/slack/{slack}',
        ...options
    });
};

/**
 * Get current user
 * Gets the current user
 */
export const userGetCurrent = <ThrowOnError extends boolean = false>(options?: Options<UserGetCurrentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetCurrentResponse, UserGetCurrentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/current',
        ...options
    });
};

/**
 * Change user password
 * Update a user password.
 */
export const userUpdatePassword = <ThrowOnError extends boolean = false>(options?: Options<UserUpdatePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserUpdatePasswordResponse, UserUpdatePasswordError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register user
 * Registers a user.
 */
export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCreateResponse, UserCreateError, ThrowOnError>({
        url: '/api/v1/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout user
 * Logs out a user.
 */
export const userUpdateLogout = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserUpdateLogoutResponse, UserUpdateLogoutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/users/logout',
        ...options
    });
};

/**
 * Lists all tenant memberships for the current user
 */
export const tenantMembershipsList = <ThrowOnError extends boolean = false>(options?: Options<TenantMembershipsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantMembershipsListResponse, TenantMembershipsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/users/memberships',
        ...options
    });
};

/**
 * List tenant invites
 * Lists all tenant invites for the current user
 */
export const userListTenantInvites = <ThrowOnError extends boolean = false>(options?: Options<UserListTenantInvitesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListTenantInvitesResponse, UserListTenantInvitesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/users/invites',
        ...options
    });
};

/**
 * Accept tenant invite
 * Accepts a tenant invite
 */
export const tenantInviteAccept = <ThrowOnError extends boolean = false>(options?: Options<TenantInviteAcceptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, TenantInviteAcceptError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/users/invites/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reject tenant invite
 * Rejects a tenant invite
 */
export const tenantInviteReject = <ThrowOnError extends boolean = false>(options?: Options<TenantInviteRejectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, TenantInviteRejectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/users/invites/reject',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create tenant
 * Creates a new tenant
 */
export const tenantCreate = <ThrowOnError extends boolean = false>(options: Options<TenantCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TenantCreateResponse, TenantCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update tenant
 * Update an existing tenant
 */
export const tenantUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TenantUpdateResponse, TenantUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get tenant alerting settings
 * Gets the alerting settings for a tenant
 */
export const tenantAlertingSettingsGet = <ThrowOnError extends boolean = false>(options: Options<TenantAlertingSettingsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantAlertingSettingsGetResponse, TenantAlertingSettingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/alerting/settings',
        ...options
    });
};

/**
 * List tenant invites
 * Gets a list of tenant invites
 */
export const tenantInviteList = <ThrowOnError extends boolean = false>(options: Options<TenantInviteListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantInviteListResponse, TenantInviteListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/invites',
        ...options
    });
};

/**
 * Create tenant invite
 * Creates a new tenant invite
 */
export const tenantInviteCreate = <ThrowOnError extends boolean = false>(options: Options<TenantInviteCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TenantInviteCreateResponse, TenantInviteCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/invites',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete invite
 * Deletes a tenant invite
 */
export const tenantInviteDelete = <ThrowOnError extends boolean = false>(options: Options<TenantInviteDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantInviteDeleteResponse, TenantInviteDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/invites/{tenant-invite}',
        ...options
    });
};

/**
 * Update invite
 * Updates a tenant invite
 */
export const tenantInviteUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantInviteUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TenantInviteUpdateResponse, TenantInviteUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/invites/{tenant-invite}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List API Tokens
 * List API tokens for a tenant
 */
export const apiTokenList = <ThrowOnError extends boolean = false>(options: Options<ApiTokenListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiTokenListResponse, ApiTokenListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/api-tokens',
        ...options
    });
};

/**
 * Create API Token
 * Create an API token for a tenant
 */
export const apiTokenCreate = <ThrowOnError extends boolean = false>(options: Options<ApiTokenCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiTokenCreateResponse, ApiTokenCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/api-tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Revoke API Token
 * Revoke an API token for a tenant
 */
export const apiTokenUpdateRevoke = <ThrowOnError extends boolean = false>(options: Options<ApiTokenUpdateRevokeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiTokenUpdateRevokeResponse, ApiTokenUpdateRevokeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/api-tokens/{api-token}',
        ...options
    });
};

/**
 * Get workflow metrics
 * Get the queue metrics for the tenant
 */
export const tenantGetQueueMetrics = <ThrowOnError extends boolean = false>(options: Options<TenantGetQueueMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetQueueMetricsResponse, TenantGetQueueMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/queue-metrics',
        ...options
    });
};

/**
 * Get step run metrics
 * Get the queue metrics for the tenant
 */
export const tenantGetStepRunQueueMetrics = <ThrowOnError extends boolean = false>(options: Options<TenantGetStepRunQueueMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetStepRunQueueMetricsResponse, TenantGetStepRunQueueMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/step-run-queue-metrics',
        ...options
    });
};

/**
 * List events
 * Lists all events for a tenant.
 */
export const eventList = <ThrowOnError extends boolean = false>(options: Options<EventListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventListResponse, EventListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/events',
        ...options
    });
};

/**
 * Replay events
 * Cancels all runs for a list of events.
 */
export const eventUpdateCancel = <ThrowOnError extends boolean = false>(options: Options<EventUpdateCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventUpdateCancelResponse, EventUpdateCancelError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/events/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List rate limits
 * Lists all rate limits for a tenant.
 */
export const rateLimitList = <ThrowOnError extends boolean = false>(options: Options<RateLimitListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RateLimitListResponse, RateLimitListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/rate-limits',
        ...options
    });
};

/**
 * List tenant members
 * Gets a list of tenant members
 */
export const tenantMemberList = <ThrowOnError extends boolean = false>(options: Options<TenantMemberListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantMemberListResponse, TenantMemberListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/members',
        ...options
    });
};

/**
 * Delete a tenant member
 * Delete a member from a tenant
 */
export const tenantMemberDelete = <ThrowOnError extends boolean = false>(options: Options<TenantMemberDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantMemberDeleteResponse, TenantMemberDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/members/{member}',
        ...options
    });
};

/**
 * Get event data
 * Get an event.
 */
export const eventGet = <ThrowOnError extends boolean = false>(options: Options<EventGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventGetResponse, EventGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/events/{event}',
        ...options
    });
};

/**
 * Get event data
 * Get the data for an event.
 */
export const eventDataGet = <ThrowOnError extends boolean = false>(options: Options<EventDataGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventDataGetResponse, EventDataGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/events/{event}/data',
        ...options
    });
};

/**
 * List event keys
 * Lists all event keys for a tenant.
 */
export const eventKeyList = <ThrowOnError extends boolean = false>(options: Options<EventKeyListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventKeyListResponse, EventKeyListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/events/keys',
        ...options
    });
};

/**
 * Get workflows
 * Get all workflows for a tenant
 */
export const workflowList = <ThrowOnError extends boolean = false>(options: Options<WorkflowListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowListResponse, WorkflowListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows',
        ...options
    });
};

/**
 * Get scheduled workflow runs
 * Get all scheduled workflow runs for a tenant
 */
export const workflowScheduledList = <ThrowOnError extends boolean = false>(options: Options<WorkflowScheduledListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowScheduledListResponse, WorkflowScheduledListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/scheduled',
        ...options
    });
};

/**
 * Delete scheduled workflow run
 * Delete a scheduled workflow run for a tenant
 */
export const workflowScheduledDelete = <ThrowOnError extends boolean = false>(options: Options<WorkflowScheduledDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WorkflowScheduledDeleteResponse, WorkflowScheduledDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/scheduled/{scheduledId}',
        ...options
    });
};

/**
 * Get scheduled workflow run
 * Get a scheduled workflow run for a tenant
 */
export const workflowScheduledGet = <ThrowOnError extends boolean = false>(options: Options<WorkflowScheduledGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowScheduledGetResponse, WorkflowScheduledGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/scheduled/{scheduledId}',
        ...options
    });
};

/**
 * Get cron job workflows
 * Get all cron job workflow runs for a tenant
 */
export const cronWorkflowList = <ThrowOnError extends boolean = false>(options: Options<CronWorkflowListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CronWorkflowListResponse, CronWorkflowListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/crons',
        ...options
    });
};

/**
 * Cancel workflow runs
 * Cancel a batch of workflow runs
 */
export const workflowRunCancel = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkflowRunCancelResponse, WorkflowRunCancelError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete workflow
 * Delete a workflow for a tenant
 */
export const workflowDelete = <ThrowOnError extends boolean = false>(options: Options<WorkflowDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WorkflowDeleteResponse, WorkflowDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workflows/{workflow}',
        ...options
    });
};

/**
 * Get workflow
 * Get a workflow for a tenant
 */
export const workflowGet = <ThrowOnError extends boolean = false>(options: Options<WorkflowGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowGetResponse, WorkflowGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workflows/{workflow}',
        ...options
    });
};

/**
 * Update workflow
 * Update a workflow for a tenant
 */
export const workflowUpdate = <ThrowOnError extends boolean = false>(options: Options<WorkflowUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<WorkflowUpdateResponse, WorkflowUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workflows/{workflow}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get workflow version
 * Get a workflow version for a tenant
 */
export const workflowVersionGet = <ThrowOnError extends boolean = false>(options: Options<WorkflowVersionGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowVersionGetResponse, WorkflowVersionGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workflows/{workflow}/versions',
        ...options
    });
};

/**
 * Trigger workflow run
 * Trigger a new workflow run for a tenant
 */
export const workflowRunCreate = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkflowRunCreateResponse, WorkflowRunCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workflows/{workflow}/trigger',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get workflow metrics
 * Get the metrics for a workflow version
 */
export const workflowGetMetrics = <ThrowOnError extends boolean = false>(options: Options<WorkflowGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowGetMetricsResponse, WorkflowGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workflows/{workflow}/metrics',
        ...options
    });
};

/**
 * List log lines
 * Lists log lines for a step run.
 */
export const logLineList = <ThrowOnError extends boolean = false>(options: Options<LogLineListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LogLineListResponse, LogLineListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/step-runs/{step-run}/logs',
        ...options
    });
};

/**
 * List events for step run
 * List events for a step run
 */
export const stepRunListEvents = <ThrowOnError extends boolean = false>(options: Options<StepRunListEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StepRunListEventsResponse, StepRunListEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/step-runs/{step-run}/events',
        ...options
    });
};

/**
 * List events for all step runs for a workflow run
 * List events for all step runs for a workflow run
 */
export const workflowRunListStepRunEvents = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunListStepRunEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowRunListStepRunEventsResponse, WorkflowRunListStepRunEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/step-run-events',
        ...options
    });
};

/**
 * List archives for step run
 * List archives for a step run
 */
export const stepRunListArchives = <ThrowOnError extends boolean = false>(options: Options<StepRunListArchivesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StepRunListArchivesResponse, StepRunListArchivesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/step-runs/{step-run}/archives',
        ...options
    });
};

/**
 * Get workflow worker count
 * Get a count of the workers available for workflow
 */
export const workflowGetWorkersCount = <ThrowOnError extends boolean = false>(options: Options<WorkflowGetWorkersCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowGetWorkersCountResponse, WorkflowGetWorkersCountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/{workflow}/worker-count',
        ...options
    });
};

/**
 * Get workflow runs
 * Get all workflow runs for a tenant
 */
export const workflowRunList = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowRunListResponse, WorkflowRunListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/runs',
        ...options
    });
};

/**
 * Replay workflow runs
 * Replays a list of workflow runs.
 */
export const workflowRunUpdateReplay = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunUpdateReplayData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkflowRunUpdateReplayResponse, WorkflowRunUpdateReplayError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflow-runs/replay',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get workflow runs metrics
 * Get a summary of  workflow run metrics for a tenant
 */
export const workflowRunGetMetrics = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowRunGetMetricsResponse, WorkflowRunGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/runs/metrics',
        ...options
    });
};

/**
 * Get workflow run
 * Get a workflow run for a tenant
 */
export const workflowRunGet = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowRunGetResponse, WorkflowRunGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}',
        ...options
    });
};

/**
 * Get workflow run
 * Get a workflow run for a tenant
 */
export const workflowRunGetShape = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunGetShapeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowRunGetShapeResponse, WorkflowRunGetShapeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/shape',
        ...options
    });
};

/**
 * Get step run
 * Get a step run by id
 */
export const stepRunGet = <ThrowOnError extends boolean = false>(options: Options<StepRunGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StepRunGetResponse, StepRunGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/step-runs/{step-run}',
        ...options
    });
};

/**
 * Rerun step run
 * Reruns a step run
 */
export const stepRunUpdateRerun = <ThrowOnError extends boolean = false>(options: Options<StepRunUpdateRerunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StepRunUpdateRerunResponse, StepRunUpdateRerunError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/step-runs/{step-run}/rerun',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Attempts to cancel a step run
 * Attempts to cancel a step run
 */
export const stepRunUpdateCancel = <ThrowOnError extends boolean = false>(options: Options<StepRunUpdateCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StepRunUpdateCancelResponse, StepRunUpdateCancelError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/step-runs/{step-run}/cancel',
        ...options
    });
};

/**
 * Get step run schema
 * Get the schema for a step run
 */
export const stepRunGetSchema = <ThrowOnError extends boolean = false>(options: Options<StepRunGetSchemaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StepRunGetSchemaResponse, StepRunGetSchemaError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/step-runs/{step-run}/schema',
        ...options
    });
};

/**
 * Get workers
 * Get all workers for a tenant
 */
export const workerList = <ThrowOnError extends boolean = false>(options: Options<WorkerListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkerListResponse, WorkerListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/worker',
        ...options
    });
};

/**
 * Get worker
 * Get a worker
 */
export const workerGet = <ThrowOnError extends boolean = false>(options: Options<WorkerGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkerGetResponse, WorkerGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workers/{worker}',
        ...options
    });
};

/**
 * Update worker
 * Update a worker
 */
export const workerUpdate = <ThrowOnError extends boolean = false>(options: Options<WorkerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<WorkerUpdateResponse, WorkerUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/workers/{worker}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List webhooks
 * Lists all webhooks
 */
export const webhookList = <ThrowOnError extends boolean = false>(options: Options<WebhookListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WebhookListResponse, WebhookListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/webhook-workers',
        ...options
    });
};

/**
 * Create a webhook
 * Creates a webhook
 */
export const webhookCreate = <ThrowOnError extends boolean = false>(options: Options<WebhookCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhookCreateResponse, WebhookCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/webhook-workers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a webhook
 * Deletes a webhook
 */
export const webhookDelete = <ThrowOnError extends boolean = false>(options: Options<WebhookDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, WebhookDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/webhook-workers/{webhook}',
        ...options
    });
};

/**
 * List webhook requests
 * Lists all requests for a webhook
 */
export const webhookRequestsList = <ThrowOnError extends boolean = false>(options: Options<WebhookRequestsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WebhookRequestsListResponse, WebhookRequestsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/webhook-workers/{webhook}/requests',
        ...options
    });
};

/**
 * Get workflow run input
 * Get the input for a workflow run.
 */
export const workflowRunGetInput = <ThrowOnError extends boolean = false>(options: Options<WorkflowRunGetInputData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowRunGetInputResponse, WorkflowRunGetInputError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/input',
        ...options
    });
};

/**
 * Get workflow version
 * Get a workflow by its name
 */
export const workflowGetByName = <ThrowOnError extends boolean = false>(options: Options<WorkflowGetByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkflowGetByNameResponse, WorkflowGetByNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/workflows/byName/{name}',
        ...options
    });
};

/**
 * Get tenant blogs
 * Get the blogs for the tenant
 */
export const blogList = <ThrowOnError extends boolean = false>(options: Options<BlogListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/blogs',
        ...options
    });
};

/**
 * Create blog post
 * Creates a new blog
 */
export const blogCreate = <ThrowOnError extends boolean = false>(options: Options<BlogCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlogCreateResponse, BlogCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/blogs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the blogs for the tenant
 */
export const blogGet = <ThrowOnError extends boolean = false>(options: Options<BlogGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogGetResponse, BlogGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/blogs/{blog}',
        ...options
    });
};

/**
 * Update blog
 * Update an existing blog
 */
export const blogUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BlogUpdateResponse, BlogUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/blogs/{blog}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the sites for the tenant
 */
export const siteList = <ThrowOnError extends boolean = false>(options: Options<SiteListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SiteListResponse, SiteListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sites',
        ...options
    });
};

/**
 * create site
 */
export const siteCreate = <ThrowOnError extends boolean = false>(options: Options<SiteCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SiteCreateResponse, SiteCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sites',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the site for the tenant
 */
export const siteGet = <ThrowOnError extends boolean = false>(options: Options<SiteGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SiteGetResponse, SiteGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sites/{site}',
        ...options
    });
};

/**
 * Update tenant
 * Update an existing site
 */
export const siteUpdate = <ThrowOnError extends boolean = false>(options: Options<SiteUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SiteUpdateResponse, SiteUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sites/{site}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 前端根据域名获取site公开数据
 */
export const siteGetByHost = <ThrowOnError extends boolean = false>(options: Options<SiteGetByHostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SiteGetByHostResponse, SiteGetByHostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/sites/byHost/{host}',
        ...options
    });
};

/**
 * Get the site-hosts for the tenant
 */
export const siteHostList = <ThrowOnError extends boolean = false>(options: Options<SiteHostListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SiteHostListResponse, SiteHostListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/site-hosts',
        ...options
    });
};

/**
 * create site-host
 */
export const siteHostCreate = <ThrowOnError extends boolean = false>(options: Options<SiteHostCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SiteHostCreateResponse, SiteHostCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/site-hosts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the site-host for the tenant
 */
export const siteHostGet = <ThrowOnError extends boolean = false>(options: Options<SiteHostGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SiteHostGetResponse, SiteHostGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/site-hosts/{host}',
        ...options
    });
};

/**
 * Update tenant
 * Update an existing site-host
 */
export const siteHostUpdate = <ThrowOnError extends boolean = false>(options: Options<SiteHostUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SiteHostUpdateResponse, SiteHostUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/site-hosts/{host}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the posts for the site
 */
export const postListPublic = <ThrowOnError extends boolean = false>(options?: Options<PostListPublicData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PostListPublicResponse, PostListPublicError, ThrowOnError>({
        url: '/api/v1/posts/public',
        ...options
    });
};

/**
 * Get the post for the tenant
 */
export const postGet = <ThrowOnError extends boolean = false>(options: Options<PostGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PostGetResponse, PostGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/posts/{post}',
        ...options
    });
};

/**
 * Get the posts for the site
 */
export const postList = <ThrowOnError extends boolean = false>(options: Options<PostListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PostListResponse, PostListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/posts',
        ...options
    });
};

/**
 * create post
 */
export const postCreate = <ThrowOnError extends boolean = false>(options: Options<PostCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCreateResponse, PostCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的artifacts列表
 * Get the artifacts for the tenant
 */
export const artifactList = <ThrowOnError extends boolean = false>(options: Options<ArtifactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ArtifactListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/artifacts',
        ...options
    });
};

/**
 * Get step run
 * Get a blog post by id
 */
export const artifactGet = <ThrowOnError extends boolean = false>(options: Options<ArtifactGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ArtifactGetResponse, ArtifactGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/artifacts/{artifact}',
        ...options
    });
};

/**
 * 获取团队列表
 */
export const comsList = <ThrowOnError extends boolean = false>(options: Options<ComsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComsListResponse, ComsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/comps',
        ...options
    });
};

/**
 * Upsert an component
 */
export const comsUpsert = <ThrowOnError extends boolean = false>(options: Options<ComsUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ComsUpsertResponse, ComsUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/comps/{com}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const comsGet = <ThrowOnError extends boolean = false>(options: Options<ComsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComsGetResponse, ComsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/comps/get',
        ...options
    });
};

/**
 * 获取租户下的画廊列表
 * 获取画廊列表
 */
export const galleryList = <ThrowOnError extends boolean = false>(options: Options<GalleryListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GalleryListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/galleries',
        ...options
    });
};

/**
 * create gallery
 */
export const galleryCreate = <ThrowOnError extends boolean = false>(options: Options<GalleryCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GalleryCreateResponse, GalleryCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/galleries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取画廊列表
 */
export const galleryGet = <ThrowOnError extends boolean = false>(options: Options<GalleryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GalleryGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/gallery/{gallery}',
        ...options
    });
};

/**
 * 获取租户下的agEvent列表
 * 获取agEvent列表
 */
export const agEventList = <ThrowOnError extends boolean = false>(options: Options<AgEventListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AgEventListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/agEvents',
        ...options
    });
};

/**
 * 获取租户下的agEvent列表
 * 获取agEvent列表
 */
export const agEventGet = <ThrowOnError extends boolean = false>(options: Options<AgEventGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AgEventGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/agEvents/{agEvent}',
        ...options
    });
};

export const modelList = <ThrowOnError extends boolean = false>(options: Options<ModelListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ModelListResponse, ModelListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/models',
        ...options
    });
};

export const modelGet = <ThrowOnError extends boolean = false>(options: Options<ModelGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ModelGetResponse, ModelGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/models/{model}',
        ...options
    });
};

/**
 * upsert an model
 */
export const modelUpsert = <ThrowOnError extends boolean = false>(options: Options<ModelUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ModelUpsertResponse, ModelUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/models/{model}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const modelRunsList = <ThrowOnError extends boolean = false>(options: Options<ModelRunsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ModelRunsListResponse, ModelRunsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/model_runs',
        ...options
    });
};

export const modelRunGet = <ThrowOnError extends boolean = false>(options: Options<ModelRunGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ModelRunGetResponse, ModelRunGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/model_runs/{model_run}',
        ...options
    });
};

/**
 * Update an model
 */
export const modelRunUpsert = <ThrowOnError extends boolean = false>(options: Options<ModelRunUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ModelRunUpsertResponse, ModelRunUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/model_runs/{model_run}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 提示词列表
 * Get the blogs for the tenant
 */
export const promptList = <ThrowOnError extends boolean = false>(options: Options<PromptListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromptListResponse, PromptListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/prompts',
        ...options
    });
};

/**
 * 获取单个提示词
 */
export const promptGet = <ThrowOnError extends boolean = false>(options: Options<PromptGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromptGetResponse, PromptGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/prompts/{prompt}',
        ...options
    });
};

export const adminReleaseConn = <ThrowOnError extends boolean = false>(options?: Options<AdminReleaseConnData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AdminReleaseConnResponse, AdminReleaseConnError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/releaseConn',
        ...options
    });
};

/**
 * Reset the database
 */
export const adminResetDb = <ThrowOnError extends boolean = false>(options?: Options<AdminResetDbData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AdminResetDbResponse, AdminResetDbError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/resetDb',
        ...options
    });
};

export const frontendGetConfig = <ThrowOnError extends boolean = false>(options?: Options<FrontendGetConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FrontendGetConfigResponse, unknown, ThrowOnError>({
        url: '/api/v1/frontend/config',
        ...options
    });
};

export const frontendGetSiderbar = <ThrowOnError extends boolean = false>(options?: Options<FrontendGetSiderbarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FrontendGetSiderbarResponse, unknown, ThrowOnError>({
        url: '/api/v1/frontend/siderbar',
        ...options
    });
};

export const hfAccountGet = <ThrowOnError extends boolean = false>(options?: Options<HfAccountGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HfAccountGetResponse, HfAccountGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/hf/account',
        ...options
    });
};

/**
 * 环境变量
 */
export const envList = <ThrowOnError extends boolean = false>(options?: Options<EnvListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EnvListResponse, EnvListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/env',
        ...options
    });
};

/**
 * Update blog
 * Update an existing env
 */
export const envUpdate = <ThrowOnError extends boolean = false>(options: Options<EnvUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EnvUpdateResponse, EnvUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/env',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 环境变量
 */
export const envGet = <ThrowOnError extends boolean = false>(options: Options<EnvGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EnvGetResponse, EnvGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/env/{name}',
        ...options
    });
};

export const endpointList = <ThrowOnError extends boolean = false>(options?: Options<EndpointListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EndpointListResponse, EndpointListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/endpoint',
        ...options
    });
};

/**
 * Update endpoint
 * Update an endpoint
 */
export const endpointUpdate = <ThrowOnError extends boolean = false>(options: Options<EndpointUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EndpointUpdateResponse, EndpointUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/endpoint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const platformList = <ThrowOnError extends boolean = false>(options: Options<PlatformListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlatformListResponse, PlatformListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platforms',
        ...options
    });
};

/**
 * create platform
 */
export const platformCreate = <ThrowOnError extends boolean = false>(options: Options<PlatformCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PlatformCreateResponse, PlatformCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platforms',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const platformGet = <ThrowOnError extends boolean = false>(options: Options<PlatformGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlatformGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platforms/{platform}',
        ...options
    });
};

/**
 * Update platform
 * Update an platform
 */
export const platformUpdate = <ThrowOnError extends boolean = false>(options: Options<PlatformUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PlatformUpdateResponse, PlatformUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platforms/{platform}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const platformAccountList = <ThrowOnError extends boolean = false>(options: Options<PlatformAccountListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlatformAccountListResponse, PlatformAccountListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platform_accounts',
        ...options
    });
};

export const platformAccountCreate = <ThrowOnError extends boolean = false>(options: Options<PlatformAccountCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PlatformAccountCreateResponse, PlatformAccountCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platform_accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const platformAccountGet = <ThrowOnError extends boolean = false>(options: Options<PlatformAccountGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlatformAccountGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platform_accounts/{platform_account}',
        ...options
    });
};

/**
 * Update an platform_account
 */
export const platformAccountUpsert = <ThrowOnError extends boolean = false>(options: Options<PlatformAccountUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PlatformAccountUpsertResponse, PlatformAccountUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/platform_accounts/{platform_account}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const browserList = <ThrowOnError extends boolean = false>(options: Options<BrowserListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BrowserListResponse, BrowserListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/browsers',
        ...options
    });
};

/**
 * create browser
 */
export const browserCreate = <ThrowOnError extends boolean = false>(options: Options<BrowserCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BrowserCreateResponse, BrowserCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/browsers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const browserOpen = <ThrowOnError extends boolean = false>(options: Options<BrowserOpenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BrowserOpenResponse, BrowserOpenError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/browsers/{browser}/open',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const browserGet = <ThrowOnError extends boolean = false>(options: Options<BrowserGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BrowserGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/browsers/{browser}',
        ...options
    });
};

/**
 * Update an browser
 */
export const browserUpdate = <ThrowOnError extends boolean = false>(options: Options<BrowserUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BrowserUpdateResponse, BrowserUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/browsers/{browser}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proxyList = <ThrowOnError extends boolean = false>(options: Options<ProxyListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProxyListResponse, ProxyListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/proxies',
        ...options
    });
};

export const proxyGet = <ThrowOnError extends boolean = false>(options: Options<ProxyGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProxyGetResponse, ProxyGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/proxies/{proxy}',
        ...options
    });
};

export const proxyUpsert = <ThrowOnError extends boolean = false>(options: Options<ProxyUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProxyUpsertResponse, ProxyUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/proxies/{proxy}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的 agent 状态
 */
export const agStateList = <ThrowOnError extends boolean = false>(options: Options<AgStateListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AgStateListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/agStates',
        ...options
    });
};

/**
 * 获取租户下的 agent 状态
 */
export const agStateGet = <ThrowOnError extends boolean = false>(options: Options<AgStateGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AgStateGetResponse, AgStateGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/agState/{state}',
        ...options
    });
};

/**
 * Upsert an agState
 */
export const agStateUpsert = <ThrowOnError extends boolean = false>(options: Options<AgStateUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AgStateUpsertResponse, AgStateUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/agStateSave',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取聊天消息
 */
export const chatMessagesList = <ThrowOnError extends boolean = false>(options: Options<ChatMessagesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChatMessagesListResponse, ChatMessagesListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/chat/{chat}/messages',
        ...options
    });
};

/**
 * 获取聊天列表
 */
export const chatSessionList = <ThrowOnError extends boolean = false>(options: Options<ChatSessionListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChatSessionListResponse, ChatSessionListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/chat/sessions',
        ...options
    });
};

/**
 * 保存 聊天消息
 */
export const chatMessageUpsert = <ThrowOnError extends boolean = false>(options: Options<ChatMessageUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChatMessageUpsertResponse, ChatMessageUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/chat/sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的聊天列表
 * 获取聊天列表
 */
export const chatSessionGet = <ThrowOnError extends boolean = false>(options: Options<ChatSessionGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChatSessionGetResponse, ChatSessionGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/chat/sessions/{session}',
        ...options
    });
};

/**
 * Upsert chat session
 */
export const chatSessionUpsert = <ThrowOnError extends boolean = false>(options: Options<ChatSessionUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChatSessionUpsertResponse, ChatSessionUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/chat/sessions/{session}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的 flow 状态
 */
export const flowStateList = <ThrowOnError extends boolean = false>(options: Options<FlowStateListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FlowStateListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/flow-states',
        ...options
    });
};

export const flowStateGet = <ThrowOnError extends boolean = false>(options: Options<FlowStateGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FlowStateGetResponse, FlowStateGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/flow-states/{session}/{workflow}',
        ...options
    });
};

/**
 * Upsert an flowState
 */
export const flowStateUpsert = <ThrowOnError extends boolean = false>(options: Options<FlowStateUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<FlowStateUpsertResponse, FlowStateUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/flow-states/{session}/{workflow}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取聊天界面状态
 */
export const uiAgentGet = <ThrowOnError extends boolean = false>(options: Options<UiAgentGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UiAgentGetResponse, UiAgentGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/ag_ui',
        ...options
    });
};

export const dispatcherListen = <ThrowOnError extends boolean = false>(options: Options<DispatcherListenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DispatcherListenResponse, DispatcherListenError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/dispatcher/listen/{workerId}',
        ...options
    });
};

export const resourceList = <ThrowOnError extends boolean = false>(options: Options<ResourceListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceListResponse, ResourceListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/resources',
        ...options
    });
};

/**
 * 保存 资源
 */
export const resourceUpsert = <ThrowOnError extends boolean = false>(options: Options<ResourceUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourceUpsertResponse, ResourceUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/resources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const resourceDelete = <ThrowOnError extends boolean = false>(options: Options<ResourceDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ResourceDeleteResponse, ResourceDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/resources/{resource}',
        ...options
    });
};

/**
 * 获取租户下的资源
 * 获取资源
 */
export const resourceGet = <ThrowOnError extends boolean = false>(options: Options<ResourceGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceGetResponse, ResourceGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/resources/{resource}',
        ...options
    });
};

export const instagramLogin = <ThrowOnError extends boolean = false>(options?: Options<InstagramLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<InstagramLoginResponse, InstagramLoginError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/instagram/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取adk事件列表
 */
export const adkAppList = <ThrowOnError extends boolean = false>(options: Options<AdkAppListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkAppListResponse, AdkAppListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/app',
        ...options
    });
};

/**
 * 保存 adk 应用
 */
export const adkAppUpsert = <ThrowOnError extends boolean = false>(options: Options<AdkAppUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdkAppUpsertResponse, AdkAppUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/app',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取adk应用
 * 获取adk应用
 */
export const adkAppGet = <ThrowOnError extends boolean = false>(options: Options<AdkAppGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkAppGetResponse, AdkAppGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/app/{app}',
        ...options
    });
};

/**
 * 获取adk事件列表
 */
export const adkSessionList = <ThrowOnError extends boolean = false>(options: Options<AdkSessionListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkSessionListResponse, AdkSessionListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/session',
        ...options
    });
};

/**
 * 保存 adk 会话
 */
export const adkSessionUpsert = <ThrowOnError extends boolean = false>(options: Options<AdkSessionUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdkSessionUpsertResponse, AdkSessionUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的adk用户状态
 * 获取adk会话
 */
export const adkSessionGet = <ThrowOnError extends boolean = false>(options: Options<AdkSessionGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkSessionGetResponse, AdkSessionGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/app/{app}/session/{session}',
        ...options
    });
};

/**
 * 获取adk用户状态列表
 */
export const adkUserStateList = <ThrowOnError extends boolean = false>(options: Options<AdkUserStateListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkUserStateListResponse, AdkUserStateListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/user-state',
        ...options
    });
};

/**
 * 保存 adk 用户状态
 */
export const adkUserStateUpsert = <ThrowOnError extends boolean = false>(options: Options<AdkUserStateUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdkUserStateUpsertResponse, AdkUserStateUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/user-state',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的adk用户状态
 * 获取adk用户状态
 */
export const adkUserStateGet = <ThrowOnError extends boolean = false>(options: Options<AdkUserStateGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkUserStateGetResponse, AdkUserStateGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/user-state/{state}',
        ...options
    });
};

/**
 * 获取adk事件列表
 */
export const adkEventsList = <ThrowOnError extends boolean = false>(options: Options<AdkEventsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkEventsListResponse, AdkEventsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/events',
        ...options
    });
};

/**
 * 保存 adk 事件
 */
export const adkEventsUpsert = <ThrowOnError extends boolean = false>(options: Options<AdkEventsUpsertData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdkEventsUpsertResponse, AdkEventsUpsertError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取租户下的adk事件列表
 * 获取adk事件列表
 */
export const adkEventsGet = <ThrowOnError extends boolean = false>(options: Options<AdkEventsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdkEventsGetResponse, AdkEventsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/adk/events/{event}',
        ...options
    });
};

/**
 * Get a user profile
 */
export const tkGetUserProfile = <ThrowOnError extends boolean = false>(options: Options<TkGetUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TkGetUserProfileResponse, TkGetUserProfileError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/tk/getUserProfile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login to tk account
 */
export const tkAccountLogin = <ThrowOnError extends boolean = false>(options: Options<TkAccountLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TkAccountLoginResponse, TkAccountLoginError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'hatchet',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/api/v1/tenants/{tenant}/tk/tkAccountLogin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};