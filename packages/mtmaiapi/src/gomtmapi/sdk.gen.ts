// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-fetch";
import type {
  ReadinessGetData,
  LivenessGetData,
  MetadataGetData,
  MetadataGetResponse,
  MetadataGetError,
  MetadataListIntegrationsData,
  MetadataListIntegrationsResponse,
  MetadataListIntegrationsError,
  UserUpdateLoginData,
  UserUpdateLoginResponse,
  UserUpdateLoginError,
  UserUpdateGoogleOauthStartData,
  UserUpdateGoogleOauthCallbackData,
  UserUpdateGithubOauthStartData,
  UserUpdateGithubOauthCallbackData,
  UserUpdateSlackOauthStartData,
  UserUpdateSlackOauthCallbackData,
  AlertEmailGroupListData,
  AlertEmailGroupListResponse,
  AlertEmailGroupListError,
  AlertEmailGroupCreateData,
  AlertEmailGroupCreateResponse,
  AlertEmailGroupCreateError,
  TenantResourcePolicyGetData,
  TenantResourcePolicyGetResponse,
  TenantResourcePolicyGetError,
  AlertEmailGroupDeleteData,
  AlertEmailGroupDeleteResponse,
  AlertEmailGroupDeleteError,
  AlertEmailGroupUpdateData,
  AlertEmailGroupUpdateResponse,
  AlertEmailGroupUpdateError,
  SlackWebhookListData,
  SlackWebhookListResponse,
  SlackWebhookListError,
  SlackWebhookDeleteData,
  SlackWebhookDeleteResponse,
  SlackWebhookDeleteError,
  UserGetCurrentData,
  UserGetCurrentResponse,
  UserGetCurrentError,
  UserUpdatePasswordData,
  UserUpdatePasswordResponse,
  UserUpdatePasswordError,
  UserCreateData,
  UserCreateResponse,
  UserCreateError,
  UserUpdateLogoutData,
  UserUpdateLogoutResponse,
  UserUpdateLogoutError,
  TenantMembershipsListData,
  TenantMembershipsListResponse,
  TenantMembershipsListError,
  UserListTenantInvitesData,
  UserListTenantInvitesResponse,
  UserListTenantInvitesError,
  TenantInviteAcceptData,
  TenantInviteAcceptError,
  TenantInviteRejectData,
  TenantInviteRejectError,
  TenantCreateData,
  TenantCreateResponse,
  TenantCreateError,
  TenantUpdateData,
  TenantUpdateResponse,
  TenantUpdateError,
  TenantAlertingSettingsGetData,
  TenantAlertingSettingsGetResponse,
  TenantAlertingSettingsGetError,
  TenantInviteListData,
  TenantInviteListResponse,
  TenantInviteListError,
  TenantInviteCreateData,
  TenantInviteCreateResponse,
  TenantInviteCreateError,
  TenantInviteDeleteData,
  TenantInviteDeleteResponse,
  TenantInviteDeleteError,
  TenantInviteUpdateData,
  TenantInviteUpdateResponse,
  TenantInviteUpdateError,
  ApiTokenListData,
  ApiTokenListResponse,
  ApiTokenListError,
  ApiTokenCreateData,
  ApiTokenCreateResponse,
  ApiTokenCreateError,
  ApiTokenUpdateRevokeData,
  ApiTokenUpdateRevokeResponse,
  ApiTokenUpdateRevokeError,
  TenantMemberListData,
  TenantMemberListResponse,
  TenantMemberListError,
  TenantMemberDeleteData,
  TenantMemberDeleteResponse,
  TenantMemberDeleteError,
  MonitoringPostRunProbeData,
  MonitoringPostRunProbeError,
  InfoGetVersionData,
  InfoGetVersionResponse,
  EventPushData,
  EventPushResponse,
  EventPushError,
  SiteListData,
  SiteListResponse,
  SiteListError,
  SiteCreateData,
  SiteCreateResponse,
  SiteCreateError,
  SiteGetData,
  SiteGetResponse,
  SiteGetError,
  SiteUpdateData,
  SiteUpdateResponse,
  SiteUpdateError,
  SiteGetByHostData,
  SiteGetByHostResponse,
  SiteGetByHostError,
  SiteHostListData,
  SiteHostListResponse,
  SiteHostListError,
  SiteHostCreateData,
  SiteHostCreateResponse,
  SiteHostCreateError,
  SiteHostGetData,
  SiteHostGetResponse,
  SiteHostGetError,
  SiteHostUpdateData,
  SiteHostUpdateResponse,
  SiteHostUpdateError,
  FrontendGetConfigData,
  FrontendGetConfigResponse,
  FrontendGetSiderbarData,
  FrontendGetSiderbarResponse,
  EndpointListData,
  EndpointListResponse,
  EndpointListError,
  EndpointUpdateData,
  EndpointUpdateResponse,
  EndpointUpdateError,
  MtworkerGetTasksData,
  MtworkerGetTasksResponse,
  PostListPublicData,
  PostListPublicResponse,
  PostListPublicError,
  PostGetData,
  PostGetResponse,
  PostGetError,
  PostListData,
  PostListResponse,
  PostListError,
  PostCreateData,
  PostCreateResponse,
  PostCreateError,
  ArtifactListData,
  ArtifactListResponse,
  ArtifactGetData,
  ArtifactGetResponse,
  ArtifactGetError,
  ArtifactSaveData,
  ArtifactSaveResponse,
  ArtifactSaveError,
  SandboxGetData,
  SandboxGetResponse,
  ScriptsByNameData,
  ScriptsByNameResponse,
  ScriptsByNameError,
  SingboxGetWorkerProfileData,
  SingboxGetWorkerProfileResponse,
  SingboxGetWorkerProfileError,
  SingboxSubscribeData,
  SingboxSubscribeResponse,
  SingboxSubscribeError,
  SingboxGeoipCnSrsData,
  SingboxGeoipCnSrsResponse,
  SingboxGeoipCnSrsError,
  SingboxGetOutboundsData,
  SingboxGetOutboundsResponse,
  SingboxGetOutboundsError,
  SingboxImportOutboundsData,
  SingboxImportOutboundsResponse,
  SingboxImportOutboundsError,
  BotListData,
  BotListResponse,
  BotListError,
  BotGetData,
  BotGetResponse,
  BotGetError,
  BotHeartbeatData,
  BotHeartbeatResponse,
  BotHeartbeatError,
  PAccountCreateData,
  PAccountCreateResponse2,
  PAccountCreateError,
  PAccountListData,
  PAccountListResponse,
  PAccountListError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get readiness
 * Gets the readiness status
 */
export const readinessGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadinessGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/ready",
    ...options,
  });
};

/**
 * Get liveness
 * Gets the liveness status
 */
export const livenessGet = <ThrowOnError extends boolean = false>(
  options?: Options<LivenessGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/live",
    ...options,
  });
};

/**
 * Get metadata
 * Gets metadata for the Hatchet instance
 */
export const metadataGet = <ThrowOnError extends boolean = false>(
  options?: Options<MetadataGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MetadataGetResponse,
    MetadataGetError,
    ThrowOnError
  >({
    url: "/api/v1/meta",
    ...options,
  });
};

/**
 * List integrations
 * List all integrations
 */
export const metadataListIntegrations = <ThrowOnError extends boolean = false>(
  options?: Options<MetadataListIntegrationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MetadataListIntegrationsResponse,
    MetadataListIntegrationsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/meta/integrations",
    ...options,
  });
};

/**
 * Login user
 * Logs in a user.
 */
export const userUpdateLogin = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateLoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UserUpdateLoginResponse,
    UserUpdateLoginError,
    ThrowOnError
  >({
    url: "/api/v1/users/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateGoogleOauthStart = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateGoogleOauthStartData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/google/start",
    ...options,
  });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateGoogleOauthCallback = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateGoogleOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/google/callback",
    ...options,
  });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateGithubOauthStart = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateGithubOauthStartData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/github/start",
    ...options,
  });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateGithubOauthCallback = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateGithubOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/v1/users/github/callback",
    ...options,
  });
};

/**
 * Start OAuth flow
 * Starts the OAuth flow
 */
export const userUpdateSlackOauthStart = <ThrowOnError extends boolean = false>(
  options: Options<UserUpdateSlackOauthStartData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/slack/start",
    ...options,
  });
};

/**
 * Complete OAuth flow
 * Completes the OAuth flow
 */
export const userUpdateSlackOauthCallback = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateSlackOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/slack/callback",
    ...options,
  });
};

/**
 * List tenant alert email groups
 * Gets a list of tenant alert email groups
 */
export const alertEmailGroupList = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    AlertEmailGroupListResponse,
    AlertEmailGroupListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/alerting-email-groups",
    ...options,
  });
};

/**
 * Create tenant alert email group
 * Creates a new tenant alert email group
 */
export const alertEmailGroupCreate = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AlertEmailGroupCreateResponse,
    AlertEmailGroupCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/alerting-email-groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create tenant alert email group
 * Gets the resource policy for a tenant
 */
export const tenantResourcePolicyGet = <ThrowOnError extends boolean = false>(
  options: Options<TenantResourcePolicyGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    TenantResourcePolicyGetResponse,
    TenantResourcePolicyGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/resource-policy",
    ...options,
  });
};

/**
 * Delete tenant alert email group
 * Deletes a tenant alert email group
 */
export const alertEmailGroupDelete = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    AlertEmailGroupDeleteResponse,
    AlertEmailGroupDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/alerting-email-groups/{alert-email-group}",
    ...options,
  });
};

/**
 * Update tenant alert email group
 * Updates a tenant alert email group
 */
export const alertEmailGroupUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AlertEmailGroupUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    AlertEmailGroupUpdateResponse,
    AlertEmailGroupUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/alerting-email-groups/{alert-email-group}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Slack integrations
 * List Slack webhooks
 */
export const slackWebhookList = <ThrowOnError extends boolean = false>(
  options: Options<SlackWebhookListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SlackWebhookListResponse,
    SlackWebhookListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/slack",
    ...options,
  });
};

/**
 * Delete Slack webhook
 * Delete Slack webhook
 */
export const slackWebhookDelete = <ThrowOnError extends boolean = false>(
  options: Options<SlackWebhookDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    SlackWebhookDeleteResponse,
    SlackWebhookDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/slack/{slack}",
    ...options,
  });
};

/**
 * Get current user
 * Gets the current user
 */
export const userGetCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<UserGetCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserGetCurrentResponse,
    UserGetCurrentError,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/current",
    ...options,
  });
};

/**
 * Change user password
 * Update a user password.
 */
export const userUpdatePassword = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdatePasswordData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UserUpdatePasswordResponse,
    UserUpdatePasswordError,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Register user
 * Registers a user.
 */
export const userCreate = <ThrowOnError extends boolean = false>(
  options?: Options<UserCreateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<UserCreateResponse, UserCreateError, ThrowOnError>(
    {
      url: "/api/v1/users/register",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    },
  );
};

/**
 * Logout user
 * Logs out a user.
 */
export const userUpdateLogout = <ThrowOnError extends boolean = false>(
  options?: Options<UserUpdateLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UserUpdateLogoutResponse,
    UserUpdateLogoutError,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/logout",
    ...options,
  });
};

/**
 * List tenant memberships
 * Lists all tenant memberships for the current user
 */
export const tenantMembershipsList = <ThrowOnError extends boolean = false>(
  options?: Options<TenantMembershipsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TenantMembershipsListResponse,
    TenantMembershipsListError,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/memberships",
    ...options,
  });
};

/**
 * List tenant invites
 * Lists all tenant invites for the current user
 */
export const userListTenantInvites = <ThrowOnError extends boolean = false>(
  options?: Options<UserListTenantInvitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserListTenantInvitesResponse,
    UserListTenantInvitesError,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/invites",
    ...options,
  });
};

/**
 * Accept tenant invite
 * Accepts a tenant invite
 */
export const tenantInviteAccept = <ThrowOnError extends boolean = false>(
  options?: Options<TenantInviteAcceptData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<unknown, TenantInviteAcceptError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/invites/accept",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Reject tenant invite
 * Rejects a tenant invite
 */
export const tenantInviteReject = <ThrowOnError extends boolean = false>(
  options?: Options<TenantInviteRejectData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<unknown, TenantInviteRejectError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/users/invites/reject",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create tenant
 * Creates a new tenant
 */
export const tenantCreate = <ThrowOnError extends boolean = false>(
  options: Options<TenantCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TenantCreateResponse,
    TenantCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update tenant
 * Update an existing tenant
 */
export const tenantUpdate = <ThrowOnError extends boolean = false>(
  options: Options<TenantUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    TenantUpdateResponse,
    TenantUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get tenant alerting settings
 * Gets the alerting settings for a tenant
 */
export const tenantAlertingSettingsGet = <ThrowOnError extends boolean = false>(
  options: Options<TenantAlertingSettingsGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    TenantAlertingSettingsGetResponse,
    TenantAlertingSettingsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/alerting/settings",
    ...options,
  });
};

/**
 * List tenant invites
 * Gets a list of tenant invites
 */
export const tenantInviteList = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    TenantInviteListResponse,
    TenantInviteListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites",
    ...options,
  });
};

/**
 * Create tenant invite
 * Creates a new tenant invite
 */
export const tenantInviteCreate = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TenantInviteCreateResponse,
    TenantInviteCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete invite
 * Deletes a tenant invite
 */
export const tenantInviteDelete = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    TenantInviteDeleteResponse,
    TenantInviteDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}",
    ...options,
  });
};

/**
 * Update invite
 * Updates a tenant invite
 */
export const tenantInviteUpdate = <ThrowOnError extends boolean = false>(
  options: Options<TenantInviteUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    TenantInviteUpdateResponse,
    TenantInviteUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List API Tokens
 * List API tokens for a tenant
 */
export const apiTokenList = <ThrowOnError extends boolean = false>(
  options: Options<ApiTokenListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ApiTokenListResponse,
    ApiTokenListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/api-tokens",
    ...options,
  });
};

/**
 * Create API Token
 * Create an API token for a tenant
 */
export const apiTokenCreate = <ThrowOnError extends boolean = false>(
  options: Options<ApiTokenCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ApiTokenCreateResponse,
    ApiTokenCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/api-tokens",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke API Token
 * Revoke an API token for a tenant
 */
export const apiTokenUpdateRevoke = <ThrowOnError extends boolean = false>(
  options: Options<ApiTokenUpdateRevokeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ApiTokenUpdateRevokeResponse,
    ApiTokenUpdateRevokeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/api-tokens/{api-token}",
    ...options,
  });
};

/**
 * List tenant members
 * Gets a list of tenant members
 */
export const tenantMemberList = <ThrowOnError extends boolean = false>(
  options: Options<TenantMemberListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    TenantMemberListResponse,
    TenantMemberListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/members",
    ...options,
  });
};

/**
 * Delete a tenant member
 * Delete a member from a tenant
 */
export const tenantMemberDelete = <ThrowOnError extends boolean = false>(
  options: Options<TenantMemberDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    TenantMemberDeleteResponse,
    TenantMemberDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/members/{member}",
    ...options,
  });
};

/**
 * Detailed Health Probe For the Instance
 * Triggers a workflow to check the status of the instance
 */
export const monitoringPostRunProbe = <ThrowOnError extends boolean = false>(
  options: Options<MonitoringPostRunProbeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, MonitoringPostRunProbeError, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          in: "cookie",
          name: "hatchet",
          type: "apiKey",
        },
      ],
      url: "/api/v1/monitoring/{tenant}/probe",
      ...options,
    },
  );
};

/**
 * We return the version for the currently running server
 * Get the version of the server
 */
export const infoGetVersion = <ThrowOnError extends boolean = false>(
  options?: Options<InfoGetVersionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<InfoGetVersionResponse, unknown, ThrowOnError>({
    url: "/api/v1/version",
    ...options,
  });
};

/**
 * 发送事件（触发工作流）
 */
export const eventPush = <ThrowOnError extends boolean = false>(
  options: Options<EventPushData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<EventPushResponse, EventPushError, ThrowOnError>({
    url: "/api/v1/event/push",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the sites for the tenant
 */
export const siteList = <ThrowOnError extends boolean = false>(
  options: Options<SiteListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<SiteListResponse, SiteListError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites",
    ...options,
  });
};

/**
 * create site
 */
export const siteCreate = <ThrowOnError extends boolean = false>(
  options: Options<SiteCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<SiteCreateResponse, SiteCreateError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the site for the tenant
 */
export const siteGet = <ThrowOnError extends boolean = false>(
  options: Options<SiteGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<SiteGetResponse, SiteGetError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/{site}",
    ...options,
  });
};

/**
 * Update tenant
 * Update an existing site
 */
export const siteUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SiteUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<SiteUpdateResponse, SiteUpdateError, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          in: "cookie",
          name: "hatchet",
          type: "apiKey",
        },
      ],
      url: "/api/v1/tenants/{tenant}/sites/{site}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    },
  );
};

/**
 * 前端根据域名获取site公开数据
 */
export const siteGetByHost = <ThrowOnError extends boolean = false>(
  options: Options<SiteGetByHostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SiteGetByHostResponse,
    SiteGetByHostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/byHost/{host}",
    ...options,
  });
};

/**
 * Get the site-hosts for the tenant
 */
export const siteHostList = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SiteHostListResponse,
    SiteHostListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts",
    ...options,
  });
};

/**
 * create site-host
 */
export const siteHostCreate = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SiteHostCreateResponse,
    SiteHostCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the site-host for the tenant
 */
export const siteHostGet = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<SiteHostGetResponse, SiteHostGetError, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          in: "cookie",
          name: "hatchet",
          type: "apiKey",
        },
      ],
      url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts/{host}",
      ...options,
    },
  );
};

/**
 * Update tenant
 * Update an existing site-host
 */
export const siteHostUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SiteHostUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    SiteHostUpdateResponse,
    SiteHostUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts/{host}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const frontendGetConfig = <ThrowOnError extends boolean = false>(
  options?: Options<FrontendGetConfigData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<FrontendGetConfigResponse, unknown, ThrowOnError>({
    url: "/api/v1/frontend/config",
    ...options,
  });
};

export const frontendGetSiderbar = <ThrowOnError extends boolean = false>(
  options?: Options<FrontendGetSiderbarData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<FrontendGetSiderbarResponse, unknown, ThrowOnError>(
    {
      url: "/api/v1/frontend/siderbar",
      ...options,
    },
  );
};

export const endpointList = <ThrowOnError extends boolean = false>(
  options?: Options<EndpointListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EndpointListResponse,
    EndpointListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/endpoint",
    ...options,
  });
};

/**
 * Update endpoint
 * Update an endpoint
 */
export const endpointUpdate = <ThrowOnError extends boolean = false>(
  options: Options<EndpointUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    EndpointUpdateResponse,
    EndpointUpdateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/endpoint",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取mtworker任务
 * 获取mtworker任务
 */
export const mtworkerGetTasks = <ThrowOnError extends boolean = false>(
  options?: Options<MtworkerGetTasksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<MtworkerGetTasksResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/mtworker/tasks",
    ...options,
  });
};

/**
 * Get the posts for the site
 */
export const postListPublic = <ThrowOnError extends boolean = false>(
  options?: Options<PostListPublicData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    PostListPublicResponse,
    PostListPublicError,
    ThrowOnError
  >({
    url: "/api/v1/posts/public",
    ...options,
  });
};

/**
 * Get the post for the tenant
 */
export const postGet = <ThrowOnError extends boolean = false>(
  options: Options<PostGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<PostGetResponse, PostGetError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/posts/{post}",
    ...options,
  });
};

/**
 * Get the posts for the site
 */
export const postList = <ThrowOnError extends boolean = false>(
  options: Options<PostListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<PostListResponse, PostListError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/posts",
    ...options,
  });
};

/**
 * create post
 */
export const postCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<PostCreateResponse, PostCreateError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/posts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取租户下的artifacts列表
 * Get the artifacts for the tenant
 */
export const artifactList = <ThrowOnError extends boolean = false>(
  options: Options<ArtifactListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ArtifactListResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/artifacts",
    ...options,
  });
};

/**
 * Get step run
 * Get a blog post by id
 */
export const artifactGet = <ThrowOnError extends boolean = false>(
  options: Options<ArtifactGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ArtifactGetResponse, ArtifactGetError, ThrowOnError>(
    {
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
        {
          in: "cookie",
          name: "hatchet",
          type: "apiKey",
        },
      ],
      url: "/api/v1/tenants/{tenant}/artifacts/{artifact}",
      ...options,
    },
  );
};

/**
 * Update artifact
 * Update an existing artifact
 */
export const artifactSave = <ThrowOnError extends boolean = false>(
  options: Options<ArtifactSaveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ArtifactSaveResponse,
    ArtifactSaveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/artifacts/{artifact}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 获取沙盒
 * 获取沙盒
 */
export const sandboxGet = <ThrowOnError extends boolean = false>(
  options?: Options<SandboxGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<SandboxGetResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/sb",
    ...options,
  });
};

/**
 * Get a script by name
 * Get a script by name
 */
export const scriptsByName = <ThrowOnError extends boolean = false>(
  options: Options<ScriptsByNameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ScriptsByNameResponse,
    ScriptsByNameError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/scripts/scripts/{name}",
    ...options,
  });
};

/**
 * 获取sing-box worker profile
 * 获取sing-box worker profile
 */
export const singboxGetWorkerProfile = <ThrowOnError extends boolean = false>(
  options: Options<SingboxGetWorkerProfileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SingboxGetWorkerProfileResponse,
    SingboxGetWorkerProfileError,
    ThrowOnError
  >({
    url: "/api/v1/singbox/workerProfile/{profileType}/{profile}",
    ...options,
  });
};

/**
 * 获取sing-box订阅
 * 获取sing-box订阅
 */
export const singboxSubscribe = <ThrowOnError extends boolean = false>(
  options?: Options<SingboxSubscribeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SingboxSubscribeResponse,
    SingboxSubscribeError,
    ThrowOnError
  >({
    url: "/api/v1/singbox/subscribe/{group}/{profile}",
    ...options,
  });
};

/**
 * 获取sing-box geoip-cn.srs文件
 * 获取sing-box geoip-cn.srs文件
 */
export const singboxGeoipCnSrs = <ThrowOnError extends boolean = false>(
  options: Options<SingboxGeoipCnSrsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SingboxGeoipCnSrsResponse,
    SingboxGeoipCnSrsError,
    ThrowOnError
  >({
    url: "/api/v1/singbox/srs/{file}",
    ...options,
  });
};

/**
 * 获取sing-box outbound
 * 获取sing-box outbound
 */
export const singboxGetOutbounds = <ThrowOnError extends boolean = false>(
  options?: Options<SingboxGetOutboundsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SingboxGetOutboundsResponse,
    SingboxGetOutboundsError,
    ThrowOnError
  >({
    url: "/api/v1/singbox/outbounds",
    ...options,
  });
};

/**
 * 导入sing-box outbound
 * 导入sing-box outbound
 */
export const singboxImportOutbounds = <ThrowOnError extends boolean = false>(
  options?: Options<SingboxImportOutboundsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    SingboxImportOutboundsResponse,
    SingboxImportOutboundsError,
    ThrowOnError
  >({
    url: "/api/v1/singbox/import",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get bot list for a tenant.
 */
export const botList = <ThrowOnError extends boolean = false>(
  options?: Options<BotListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<BotListResponse, BotListError, ThrowOnError>({
    url: "/api/v1/bot/list",
    ...options,
  });
};

/**
 * Get bot by id.
 */
export const botGet = <ThrowOnError extends boolean = false>(
  options: Options<BotGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<BotGetResponse, BotGetError, ThrowOnError>({
    url: "/api/v1/bot/{bot}",
    ...options,
  });
};

/**
 * Heartbeat
 * Heartbeat for bot.
 */
export const botHeartbeat = <ThrowOnError extends boolean = false>(
  options?: Options<BotHeartbeatData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    BotHeartbeatResponse,
    BotHeartbeatError,
    ThrowOnError
  >({
    url: "/api/v1/bot/heartbeat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create platform account
 * Create platform account.
 */
export const pAccountCreate = <ThrowOnError extends boolean = false>(
  options: Options<PAccountCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PAccountCreateResponse2,
    PAccountCreateError,
    ThrowOnError
  >({
    url: "/api/v1/tenants/{tenant}/p_account/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get the p_account for the tenant
 */
export const pAccountList = <ThrowOnError extends boolean = false>(
  options: Options<PAccountListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    PAccountListResponse,
    PAccountListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        in: "cookie",
        name: "hatchet",
        type: "apiKey",
      },
    ],
    url: "/api/v1/tenants/{tenant}/p_account/list",
    ...options,
  });
};
