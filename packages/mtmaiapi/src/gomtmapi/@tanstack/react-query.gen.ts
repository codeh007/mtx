// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  readinessGet,
  livenessGet,
  metadataGet,
  cloudMetadataGet,
  metadataListIntegrations,
  userUpdateLogin,
  userUpdateGoogleOauthStart,
  userUpdateGoogleOauthCallback,
  userUpdateGithubOauthStart,
  userUpdateGithubOauthCallback,
  userUpdateSlackOauthStart,
  userUpdateSlackOauthCallback,
  snsUpdate,
  snsList,
  snsCreate,
  alertEmailGroupList,
  alertEmailGroupCreate,
  tenantResourcePolicyGet,
  alertEmailGroupDelete,
  alertEmailGroupUpdate,
  snsDelete,
  slackWebhookList,
  slackWebhookDelete,
  userGetCurrent,
  userUpdatePassword,
  userCreate,
  userUpdateLogout,
  tenantMembershipsList,
  userListTenantInvites,
  tenantInviteAccept,
  tenantInviteReject,
  tenantCreate,
  tenantUpdate,
  tenantAlertingSettingsGet,
  tenantInviteList,
  tenantInviteCreate,
  tenantInviteDelete,
  tenantInviteUpdate,
  apiTokenList,
  apiTokenCreate,
  apiTokenUpdateRevoke,
  tenantGetQueueMetrics,
  tenantGetStepRunQueueMetrics,
  eventList,
  eventCreate,
  eventCreateBulk,
  eventUpdateReplay,
  eventUpdateCancel,
  rateLimitList,
  tenantMemberList,
  tenantMemberDelete,
  eventGet,
  eventDataGet,
  eventKeyList,
  workflowList,
  workflowScheduledList,
  workflowScheduledDelete,
  workflowScheduledGet,
  cronWorkflowList,
  workflowRunCancel,
  workflowDelete,
  workflowGet,
  workflowUpdate,
  workflowVersionGet,
  workflowRunCreate,
  workflowGetMetrics,
  logLineList,
  stepRunListEvents,
  workflowRunListStepRunEvents,
  stepRunListArchives,
  workflowGetWorkersCount,
  workflowRunList,
  workflowRunUpdateReplay,
  workflowRunGetMetrics,
  workflowRunGet,
  workflowRunGetShape,
  stepRunGet,
  stepRunUpdateRerun,
  stepRunUpdateCancel,
  stepRunGetSchema,
  workerList,
  workerGet,
  workerUpdate,
  webhookList,
  webhookCreate,
  webhookDelete,
  webhookRequestsList,
  workflowRunGetInput,
  workflowGetByName,
  workerConfig,
  mtmaiBloggenconfig,
  mtmaiWorkerConfig,
  blogList,
  blogCreate,
  blogGet,
  blogUpdate,
  siteList,
  siteCreate,
  siteGet,
  siteUpdate,
  siteGetByHost,
  siteHostList,
  siteHostCreate,
  siteHostGet,
  siteHostUpdate,
  postListPublic,
  postGet,
  postList,
  postCreate,
  artifactList,
  artifactCreate,
  artifactGet,
  teamList,
  teamCreate,
  teamGet,
  teamUpsert,
  galleryList,
  galleryCreate,
  galleryGet,
  agentStream,
  agEventList,
  agEventCreate,
  agEventGet,
  runList,
  runCreate,
  runGet,
  modelList,
  modelCreate,
  modelGet,
  modelUpdate,
  promptList,
  promptGet,
  adminReleaseConn,
  frontendGetConfig,
  frontendGetSiderbar,
  hfAccountGet,
  envList,
  envUpdate,
  envGet,
  kvUpdate,
  kvGet,
  endpointList,
  endpointUpdate,
  platformList,
  platformCreate,
  platformGet,
  platformUpdate,
  platformAccountList,
  platformAccountCreate,
  platformAccountGet,
  platformAccountUpdate,
  browserList,
  browserCreate,
  browserGet,
  browserUpdate,
  proxyList,
  proxyCreate,
  proxyGet,
  proxyUpdate,
  agStateList,
  agStateGet,
  agStateUpsert,
  tenantSeed,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import type {
  ReadinessGetData,
  LivenessGetData,
  MetadataGetData,
  CloudMetadataGetData,
  MetadataListIntegrationsData,
  UserUpdateLoginData,
  UserUpdateLoginError,
  UserUpdateLoginResponse,
  UserUpdateGoogleOauthStartData,
  UserUpdateGoogleOauthCallbackData,
  UserUpdateGithubOauthStartData,
  UserUpdateGithubOauthCallbackData,
  UserUpdateSlackOauthStartData,
  UserUpdateSlackOauthCallbackData,
  SnsUpdateData,
  SnsUpdateError,
  SnsListData,
  SnsCreateData,
  SnsCreateError,
  SnsCreateResponse,
  AlertEmailGroupListData,
  AlertEmailGroupCreateData,
  AlertEmailGroupCreateError,
  AlertEmailGroupCreateResponse,
  TenantResourcePolicyGetData,
  AlertEmailGroupDeleteData,
  AlertEmailGroupDeleteError,
  AlertEmailGroupDeleteResponse,
  AlertEmailGroupUpdateData,
  AlertEmailGroupUpdateError,
  AlertEmailGroupUpdateResponse,
  SnsDeleteData,
  SnsDeleteError,
  SnsDeleteResponse,
  SlackWebhookListData,
  SlackWebhookDeleteData,
  SlackWebhookDeleteError,
  SlackWebhookDeleteResponse,
  UserGetCurrentData,
  UserUpdatePasswordData,
  UserUpdatePasswordError,
  UserUpdatePasswordResponse,
  UserCreateData,
  UserCreateError,
  UserCreateResponse,
  UserUpdateLogoutData,
  UserUpdateLogoutError,
  UserUpdateLogoutResponse,
  TenantMembershipsListData,
  UserListTenantInvitesData,
  TenantInviteAcceptData,
  TenantInviteAcceptError,
  TenantInviteRejectData,
  TenantInviteRejectError,
  TenantCreateData,
  TenantCreateError,
  TenantCreateResponse,
  TenantUpdateData,
  TenantUpdateError,
  TenantUpdateResponse,
  TenantAlertingSettingsGetData,
  TenantInviteListData,
  TenantInviteCreateData,
  TenantInviteCreateError,
  TenantInviteCreateResponse,
  TenantInviteDeleteData,
  TenantInviteDeleteError,
  TenantInviteDeleteResponse,
  TenantInviteUpdateData,
  TenantInviteUpdateError,
  TenantInviteUpdateResponse,
  ApiTokenListData,
  ApiTokenCreateData,
  ApiTokenCreateError,
  ApiTokenCreateResponse,
  ApiTokenUpdateRevokeData,
  ApiTokenUpdateRevokeError,
  ApiTokenUpdateRevokeResponse,
  TenantGetQueueMetricsData,
  TenantGetStepRunQueueMetricsData,
  EventListData,
  EventListError,
  EventListResponse,
  EventCreateData,
  EventCreateError,
  EventCreateResponse,
  EventCreateBulkData,
  EventCreateBulkError,
  EventCreateBulkResponse,
  EventUpdateReplayData,
  EventUpdateReplayError,
  EventUpdateReplayResponse,
  EventUpdateCancelData,
  EventUpdateCancelError,
  EventUpdateCancelResponse,
  RateLimitListData,
  RateLimitListError,
  RateLimitListResponse,
  TenantMemberListData,
  TenantMemberDeleteData,
  TenantMemberDeleteError,
  TenantMemberDeleteResponse,
  EventGetData,
  EventDataGetData,
  EventKeyListData,
  WorkflowListData,
  WorkflowScheduledListData,
  WorkflowScheduledListError,
  WorkflowScheduledListResponse,
  WorkflowScheduledDeleteData,
  WorkflowScheduledDeleteError,
  WorkflowScheduledDeleteResponse,
  WorkflowScheduledGetData,
  CronWorkflowListData,
  CronWorkflowListError,
  CronWorkflowListResponse,
  WorkflowRunCancelData,
  WorkflowRunCancelError,
  WorkflowRunCancelResponse,
  WorkflowDeleteData,
  WorkflowDeleteError,
  WorkflowDeleteResponse,
  WorkflowGetData,
  WorkflowUpdateData,
  WorkflowUpdateError,
  WorkflowUpdateResponse,
  WorkflowVersionGetData,
  WorkflowRunCreateData,
  WorkflowRunCreateError,
  WorkflowRunCreateResponse,
  WorkflowGetMetricsData,
  LogLineListData,
  LogLineListError,
  LogLineListResponse,
  StepRunListEventsData,
  StepRunListEventsError,
  StepRunListEventsResponse,
  WorkflowRunListStepRunEventsData,
  StepRunListArchivesData,
  StepRunListArchivesError,
  StepRunListArchivesResponse,
  WorkflowGetWorkersCountData,
  WorkflowRunListData,
  WorkflowRunListError,
  WorkflowRunListResponse,
  WorkflowRunUpdateReplayData,
  WorkflowRunUpdateReplayError,
  WorkflowRunUpdateReplayResponse,
  WorkflowRunGetMetricsData,
  WorkflowRunGetData,
  WorkflowRunGetShapeData,
  StepRunGetData,
  StepRunUpdateRerunData,
  StepRunUpdateRerunError,
  StepRunUpdateRerunResponse,
  StepRunUpdateCancelData,
  StepRunUpdateCancelError,
  StepRunUpdateCancelResponse,
  StepRunGetSchemaData,
  WorkerListData,
  WorkerGetData,
  WorkerUpdateData,
  WorkerUpdateError,
  WorkerUpdateResponse,
  WebhookListData,
  WebhookCreateData,
  WebhookCreateError,
  WebhookCreateResponse,
  WebhookDeleteData,
  WebhookDeleteError,
  WebhookRequestsListData,
  WorkflowRunGetInputData,
  WorkflowGetByNameData,
  WorkerConfigData,
  MtmaiBloggenconfigData,
  MtmaiWorkerConfigData,
  BlogListData,
  BlogCreateData,
  BlogCreateError,
  BlogCreateResponse,
  BlogGetData,
  BlogUpdateData,
  BlogUpdateError,
  BlogUpdateResponse,
  SiteListData,
  SiteCreateData,
  SiteCreateError,
  SiteCreateResponse,
  SiteGetData,
  SiteUpdateData,
  SiteUpdateError,
  SiteUpdateResponse,
  SiteGetByHostData,
  SiteHostListData,
  SiteHostListError,
  SiteHostListResponse,
  SiteHostCreateData,
  SiteHostCreateError,
  SiteHostCreateResponse,
  SiteHostGetData,
  SiteHostUpdateData,
  SiteHostUpdateError,
  SiteHostUpdateResponse,
  PostListPublicData,
  PostGetData,
  PostListData,
  PostCreateData,
  PostCreateError,
  PostCreateResponse,
  ArtifactListData,
  ArtifactCreateData,
  ArtifactCreateError,
  ArtifactCreateResponse,
  ArtifactGetData,
  TeamListData,
  TeamCreateData,
  TeamCreateError,
  TeamCreateResponse,
  TeamGetData,
  TeamUpsertData,
  TeamUpsertError,
  TeamUpsertResponse,
  GalleryListData,
  GalleryCreateData,
  GalleryCreateError,
  GalleryCreateResponse,
  GalleryGetData,
  AgentStreamData,
  AgEventListData,
  AgEventCreateData,
  AgEventCreateError,
  AgEventCreateResponse,
  AgEventGetData,
  RunListData,
  RunCreateData,
  RunCreateError,
  RunCreateResponse,
  RunGetData,
  ModelListData,
  ModelCreateData,
  ModelCreateError,
  ModelCreateResponse,
  ModelGetData,
  ModelUpdateData,
  ModelUpdateError,
  ModelUpdateResponse,
  PromptListData,
  PromptGetData,
  AdminReleaseConnData,
  AdminReleaseConnError,
  AdminReleaseConnResponse,
  FrontendGetConfigData,
  FrontendGetSiderbarData,
  HfAccountGetData,
  EnvListData,
  EnvUpdateData,
  EnvUpdateError,
  EnvUpdateResponse,
  EnvGetData,
  KvUpdateData,
  KvUpdateError,
  KvUpdateResponse,
  KvGetData,
  EndpointListData,
  EndpointUpdateData,
  EndpointUpdateError,
  EndpointUpdateResponse,
  PlatformListData,
  PlatformCreateData,
  PlatformCreateError,
  PlatformCreateResponse,
  PlatformGetData,
  PlatformUpdateData,
  PlatformUpdateError,
  PlatformUpdateResponse,
  PlatformAccountListData,
  PlatformAccountCreateData,
  PlatformAccountCreateError,
  PlatformAccountCreateResponse,
  PlatformAccountGetData,
  PlatformAccountUpdateData,
  PlatformAccountUpdateError,
  PlatformAccountUpdateResponse,
  BrowserListData,
  BrowserCreateData,
  BrowserCreateError,
  BrowserCreateResponse,
  BrowserGetData,
  BrowserUpdateData,
  BrowserUpdateError,
  BrowserUpdateResponse,
  ProxyListData,
  ProxyCreateData,
  ProxyCreateError,
  ProxyCreateResponse,
  ProxyGetData,
  ProxyUpdateData,
  ProxyUpdateError,
  ProxyUpdateResponse,
  AgStateListData,
  AgStateGetData,
  AgStateUpsertData,
  AgStateUpsertError,
  AgStateUpsertResponse,
  TenantSeedData,
  TenantSeedError,
  TenantSeedResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const readinessGetQueryKey = (options?: Options<ReadinessGetData>) => [
  createQueryKey("readinessGet", options),
];

export const readinessGetOptions = (options?: Options<ReadinessGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readinessGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readinessGetQueryKey(options),
  });
};

export const livenessGetQueryKey = (options?: Options<LivenessGetData>) => [
  createQueryKey("livenessGet", options),
];

export const livenessGetOptions = (options?: Options<LivenessGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await livenessGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: livenessGetQueryKey(options),
  });
};

export const metadataGetQueryKey = (options?: Options<MetadataGetData>) => [
  createQueryKey("metadataGet", options),
];

export const metadataGetOptions = (options?: Options<MetadataGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metadataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metadataGetQueryKey(options),
  });
};

export const cloudMetadataGetQueryKey = (
  options?: Options<CloudMetadataGetData>,
) => [createQueryKey("cloudMetadataGet", options)];

export const cloudMetadataGetOptions = (
  options?: Options<CloudMetadataGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cloudMetadataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cloudMetadataGetQueryKey(options),
  });
};

export const metadataListIntegrationsQueryKey = (
  options?: Options<MetadataListIntegrationsData>,
) => [createQueryKey("metadataListIntegrations", options)];

export const metadataListIntegrationsOptions = (
  options?: Options<MetadataListIntegrationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metadataListIntegrations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metadataListIntegrationsQueryKey(options),
  });
};

export const userUpdateLoginQueryKey = (
  options?: Options<UserUpdateLoginData>,
) => [createQueryKey("userUpdateLogin", options)];

export const userUpdateLoginOptions = (
  options?: Options<UserUpdateLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateLoginQueryKey(options),
  });
};

export const userUpdateLoginMutation = (
  options?: Partial<Options<UserUpdateLoginData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserUpdateLoginResponse,
    UserUpdateLoginError,
    Options<UserUpdateLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdateLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateGoogleOauthStartQueryKey = (
  options?: Options<UserUpdateGoogleOauthStartData>,
) => [createQueryKey("userUpdateGoogleOauthStart", options)];

export const userUpdateGoogleOauthStartOptions = (
  options?: Options<UserUpdateGoogleOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGoogleOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGoogleOauthStartQueryKey(options),
  });
};

export const userUpdateGoogleOauthCallbackQueryKey = (
  options?: Options<UserUpdateGoogleOauthCallbackData>,
) => [createQueryKey("userUpdateGoogleOauthCallback", options)];

export const userUpdateGoogleOauthCallbackOptions = (
  options?: Options<UserUpdateGoogleOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGoogleOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGoogleOauthCallbackQueryKey(options),
  });
};

export const userUpdateGithubOauthStartQueryKey = (
  options?: Options<UserUpdateGithubOauthStartData>,
) => [createQueryKey("userUpdateGithubOauthStart", options)];

export const userUpdateGithubOauthStartOptions = (
  options?: Options<UserUpdateGithubOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGithubOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGithubOauthStartQueryKey(options),
  });
};

export const userUpdateGithubOauthCallbackQueryKey = (
  options?: Options<UserUpdateGithubOauthCallbackData>,
) => [createQueryKey("userUpdateGithubOauthCallback", options)];

export const userUpdateGithubOauthCallbackOptions = (
  options?: Options<UserUpdateGithubOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGithubOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGithubOauthCallbackQueryKey(options),
  });
};

export const userUpdateSlackOauthStartQueryKey = (
  options: Options<UserUpdateSlackOauthStartData>,
) => [createQueryKey("userUpdateSlackOauthStart", options)];

export const userUpdateSlackOauthStartOptions = (
  options: Options<UserUpdateSlackOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateSlackOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateSlackOauthStartQueryKey(options),
  });
};

export const userUpdateSlackOauthCallbackQueryKey = (
  options?: Options<UserUpdateSlackOauthCallbackData>,
) => [createQueryKey("userUpdateSlackOauthCallback", options)];

export const userUpdateSlackOauthCallbackOptions = (
  options?: Options<UserUpdateSlackOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateSlackOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateSlackOauthCallbackQueryKey(options),
  });
};

export const snsUpdateQueryKey = (options: Options<SnsUpdateData>) => [
  createQueryKey("snsUpdate", options),
];

export const snsUpdateOptions = (options: Options<SnsUpdateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await snsUpdate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: snsUpdateQueryKey(options),
  });
};

export const snsUpdateMutation = (
  options?: Partial<Options<SnsUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SnsUpdateError,
    Options<SnsUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await snsUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const snsListQueryKey = (options: Options<SnsListData>) => [
  createQueryKey("snsList", options),
];

export const snsListOptions = (options: Options<SnsListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await snsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: snsListQueryKey(options),
  });
};

export const snsCreateQueryKey = (options: Options<SnsCreateData>) => [
  createQueryKey("snsCreate", options),
];

export const snsCreateOptions = (options: Options<SnsCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await snsCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: snsCreateQueryKey(options),
  });
};

export const snsCreateMutation = (
  options?: Partial<Options<SnsCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SnsCreateResponse,
    SnsCreateError,
    Options<SnsCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await snsCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const alertEmailGroupListQueryKey = (
  options: Options<AlertEmailGroupListData>,
) => [createQueryKey("alertEmailGroupList", options)];

export const alertEmailGroupListOptions = (
  options: Options<AlertEmailGroupListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alertEmailGroupList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alertEmailGroupListQueryKey(options),
  });
};

export const alertEmailGroupCreateQueryKey = (
  options: Options<AlertEmailGroupCreateData>,
) => [createQueryKey("alertEmailGroupCreate", options)];

export const alertEmailGroupCreateOptions = (
  options: Options<AlertEmailGroupCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alertEmailGroupCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alertEmailGroupCreateQueryKey(options),
  });
};

export const alertEmailGroupCreateMutation = (
  options?: Partial<Options<AlertEmailGroupCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupCreateResponse,
    AlertEmailGroupCreateError,
    Options<AlertEmailGroupCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantResourcePolicyGetQueryKey = (
  options: Options<TenantResourcePolicyGetData>,
) => [createQueryKey("tenantResourcePolicyGet", options)];

export const tenantResourcePolicyGetOptions = (
  options: Options<TenantResourcePolicyGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantResourcePolicyGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantResourcePolicyGetQueryKey(options),
  });
};

export const alertEmailGroupDeleteMutation = (
  options?: Partial<Options<AlertEmailGroupDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupDeleteResponse,
    AlertEmailGroupDeleteError,
    Options<AlertEmailGroupDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const alertEmailGroupUpdateMutation = (
  options?: Partial<Options<AlertEmailGroupUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupUpdateResponse,
    AlertEmailGroupUpdateError,
    Options<AlertEmailGroupUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const snsDeleteMutation = (
  options?: Partial<Options<SnsDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SnsDeleteResponse,
    SnsDeleteError,
    Options<SnsDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await snsDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const slackWebhookListQueryKey = (
  options: Options<SlackWebhookListData>,
) => [createQueryKey("slackWebhookList", options)];

export const slackWebhookListOptions = (
  options: Options<SlackWebhookListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await slackWebhookList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: slackWebhookListQueryKey(options),
  });
};

export const slackWebhookDeleteMutation = (
  options?: Partial<Options<SlackWebhookDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SlackWebhookDeleteResponse,
    SlackWebhookDeleteError,
    Options<SlackWebhookDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await slackWebhookDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userGetCurrentQueryKey = (
  options?: Options<UserGetCurrentData>,
) => [createQueryKey("userGetCurrent", options)];

export const userGetCurrentOptions = (
  options?: Options<UserGetCurrentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userGetCurrent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userGetCurrentQueryKey(options),
  });
};

export const userUpdatePasswordQueryKey = (
  options?: Options<UserUpdatePasswordData>,
) => [createQueryKey("userUpdatePassword", options)];

export const userUpdatePasswordOptions = (
  options?: Options<UserUpdatePasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdatePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdatePasswordQueryKey(options),
  });
};

export const userUpdatePasswordMutation = (
  options?: Partial<Options<UserUpdatePasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserUpdatePasswordResponse,
    UserUpdatePasswordError,
    Options<UserUpdatePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdatePassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userCreateQueryKey = (options?: Options<UserCreateData>) => [
  createQueryKey("userCreate", options),
];

export const userCreateOptions = (options?: Options<UserCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userCreateQueryKey(options),
  });
};

export const userCreateMutation = (
  options?: Partial<Options<UserCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserCreateResponse,
    UserCreateError,
    Options<UserCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateLogoutQueryKey = (
  options?: Options<UserUpdateLogoutData>,
) => [createQueryKey("userUpdateLogout", options)];

export const userUpdateLogoutOptions = (
  options?: Options<UserUpdateLogoutData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateLogoutQueryKey(options),
  });
};

export const userUpdateLogoutMutation = (
  options?: Partial<Options<UserUpdateLogoutData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserUpdateLogoutResponse,
    UserUpdateLogoutError,
    Options<UserUpdateLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdateLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantMembershipsListQueryKey = (
  options?: Options<TenantMembershipsListData>,
) => [createQueryKey("tenantMembershipsList", options)];

export const tenantMembershipsListOptions = (
  options?: Options<TenantMembershipsListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantMembershipsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantMembershipsListQueryKey(options),
  });
};

export const userListTenantInvitesQueryKey = (
  options?: Options<UserListTenantInvitesData>,
) => [createQueryKey("userListTenantInvites", options)];

export const userListTenantInvitesOptions = (
  options?: Options<UserListTenantInvitesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userListTenantInvites({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userListTenantInvitesQueryKey(options),
  });
};

export const tenantInviteAcceptQueryKey = (
  options?: Options<TenantInviteAcceptData>,
) => [createQueryKey("tenantInviteAccept", options)];

export const tenantInviteAcceptOptions = (
  options?: Options<TenantInviteAcceptData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteAccept({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteAcceptQueryKey(options),
  });
};

export const tenantInviteAcceptMutation = (
  options?: Partial<Options<TenantInviteAcceptData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    TenantInviteAcceptError,
    Options<TenantInviteAcceptData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteAccept({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteRejectQueryKey = (
  options?: Options<TenantInviteRejectData>,
) => [createQueryKey("tenantInviteReject", options)];

export const tenantInviteRejectOptions = (
  options?: Options<TenantInviteRejectData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteReject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteRejectQueryKey(options),
  });
};

export const tenantInviteRejectMutation = (
  options?: Partial<Options<TenantInviteRejectData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    TenantInviteRejectError,
    Options<TenantInviteRejectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteReject({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantCreateQueryKey = (options: Options<TenantCreateData>) => [
  createQueryKey("tenantCreate", options),
];

export const tenantCreateOptions = (options: Options<TenantCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantCreateQueryKey(options),
  });
};

export const tenantCreateMutation = (
  options?: Partial<Options<TenantCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantCreateResponse,
    TenantCreateError,
    Options<TenantCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantUpdateMutation = (
  options?: Partial<Options<TenantUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantUpdateResponse,
    TenantUpdateError,
    Options<TenantUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantAlertingSettingsGetQueryKey = (
  options: Options<TenantAlertingSettingsGetData>,
) => [createQueryKey("tenantAlertingSettingsGet", options)];

export const tenantAlertingSettingsGetOptions = (
  options: Options<TenantAlertingSettingsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantAlertingSettingsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantAlertingSettingsGetQueryKey(options),
  });
};

export const tenantInviteListQueryKey = (
  options: Options<TenantInviteListData>,
) => [createQueryKey("tenantInviteList", options)];

export const tenantInviteListOptions = (
  options: Options<TenantInviteListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteListQueryKey(options),
  });
};

export const tenantInviteCreateQueryKey = (
  options: Options<TenantInviteCreateData>,
) => [createQueryKey("tenantInviteCreate", options)];

export const tenantInviteCreateOptions = (
  options: Options<TenantInviteCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteCreateQueryKey(options),
  });
};

export const tenantInviteCreateMutation = (
  options?: Partial<Options<TenantInviteCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteCreateResponse,
    TenantInviteCreateError,
    Options<TenantInviteCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteDeleteMutation = (
  options?: Partial<Options<TenantInviteDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteDeleteResponse,
    TenantInviteDeleteError,
    Options<TenantInviteDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteUpdateMutation = (
  options?: Partial<Options<TenantInviteUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteUpdateResponse,
    TenantInviteUpdateError,
    Options<TenantInviteUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiTokenListQueryKey = (options: Options<ApiTokenListData>) => [
  createQueryKey("apiTokenList", options),
];

export const apiTokenListOptions = (options: Options<ApiTokenListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenListQueryKey(options),
  });
};

export const apiTokenCreateQueryKey = (
  options: Options<ApiTokenCreateData>,
) => [createQueryKey("apiTokenCreate", options)];

export const apiTokenCreateOptions = (options: Options<ApiTokenCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenCreateQueryKey(options),
  });
};

export const apiTokenCreateMutation = (
  options?: Partial<Options<ApiTokenCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiTokenCreateResponse,
    ApiTokenCreateError,
    Options<ApiTokenCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiTokenCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiTokenUpdateRevokeQueryKey = (
  options: Options<ApiTokenUpdateRevokeData>,
) => [createQueryKey("apiTokenUpdateRevoke", options)];

export const apiTokenUpdateRevokeOptions = (
  options: Options<ApiTokenUpdateRevokeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenUpdateRevoke({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenUpdateRevokeQueryKey(options),
  });
};

export const apiTokenUpdateRevokeMutation = (
  options?: Partial<Options<ApiTokenUpdateRevokeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiTokenUpdateRevokeResponse,
    ApiTokenUpdateRevokeError,
    Options<ApiTokenUpdateRevokeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiTokenUpdateRevoke({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantGetQueueMetricsQueryKey = (
  options: Options<TenantGetQueueMetricsData>,
) => [createQueryKey("tenantGetQueueMetrics", options)];

export const tenantGetQueueMetricsOptions = (
  options: Options<TenantGetQueueMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantGetQueueMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantGetQueueMetricsQueryKey(options),
  });
};

export const tenantGetStepRunQueueMetricsQueryKey = (
  options: Options<TenantGetStepRunQueueMetricsData>,
) => [createQueryKey("tenantGetStepRunQueueMetrics", options)];

export const tenantGetStepRunQueueMetricsOptions = (
  options: Options<TenantGetStepRunQueueMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantGetStepRunQueueMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantGetStepRunQueueMetricsQueryKey(options),
  });
};

export const eventListQueryKey = (options: Options<EventListData>) => [
  createQueryKey("eventList", options),
];

export const eventListOptions = (options: Options<EventListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventListQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const eventListInfiniteQueryKey = (
  options: Options<EventListData>,
): QueryKey<Options<EventListData>> => [
  createQueryKey("eventList", options, true),
];

export const eventListInfiniteOptions = (options: Options<EventListData>) => {
  return infiniteQueryOptions<
    EventListResponse,
    EventListError,
    InfiniteData<EventListResponse>,
    QueryKey<Options<EventListData>>,
    | number
    | Pick<
        QueryKey<Options<EventListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<EventListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await eventList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: eventListInfiniteQueryKey(options),
    },
  );
};

export const eventCreateQueryKey = (options: Options<EventCreateData>) => [
  createQueryKey("eventCreate", options),
];

export const eventCreateOptions = (options: Options<EventCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventCreateQueryKey(options),
  });
};

export const eventCreateMutation = (
  options?: Partial<Options<EventCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventCreateResponse,
    EventCreateError,
    Options<EventCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventCreateBulkQueryKey = (
  options: Options<EventCreateBulkData>,
) => [createQueryKey("eventCreateBulk", options)];

export const eventCreateBulkOptions = (
  options: Options<EventCreateBulkData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventCreateBulk({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventCreateBulkQueryKey(options),
  });
};

export const eventCreateBulkMutation = (
  options?: Partial<Options<EventCreateBulkData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventCreateBulkResponse,
    EventCreateBulkError,
    Options<EventCreateBulkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventCreateBulk({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventUpdateReplayQueryKey = (
  options: Options<EventUpdateReplayData>,
) => [createQueryKey("eventUpdateReplay", options)];

export const eventUpdateReplayOptions = (
  options: Options<EventUpdateReplayData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventUpdateReplay({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventUpdateReplayQueryKey(options),
  });
};

export const eventUpdateReplayMutation = (
  options?: Partial<Options<EventUpdateReplayData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventUpdateReplayResponse,
    EventUpdateReplayError,
    Options<EventUpdateReplayData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventUpdateReplay({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventUpdateCancelQueryKey = (
  options: Options<EventUpdateCancelData>,
) => [createQueryKey("eventUpdateCancel", options)];

export const eventUpdateCancelOptions = (
  options: Options<EventUpdateCancelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventUpdateCancel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventUpdateCancelQueryKey(options),
  });
};

export const eventUpdateCancelMutation = (
  options?: Partial<Options<EventUpdateCancelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventUpdateCancelResponse,
    EventUpdateCancelError,
    Options<EventUpdateCancelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventUpdateCancel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const rateLimitListQueryKey = (options: Options<RateLimitListData>) => [
  createQueryKey("rateLimitList", options),
];

export const rateLimitListOptions = (options: Options<RateLimitListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rateLimitList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rateLimitListQueryKey(options),
  });
};

export const rateLimitListInfiniteQueryKey = (
  options: Options<RateLimitListData>,
): QueryKey<Options<RateLimitListData>> => [
  createQueryKey("rateLimitList", options, true),
];

export const rateLimitListInfiniteOptions = (
  options: Options<RateLimitListData>,
) => {
  return infiniteQueryOptions<
    RateLimitListResponse,
    RateLimitListError,
    InfiniteData<RateLimitListResponse>,
    QueryKey<Options<RateLimitListData>>,
    | number
    | Pick<
        QueryKey<Options<RateLimitListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<RateLimitListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await rateLimitList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: rateLimitListInfiniteQueryKey(options),
    },
  );
};

export const tenantMemberListQueryKey = (
  options: Options<TenantMemberListData>,
) => [createQueryKey("tenantMemberList", options)];

export const tenantMemberListOptions = (
  options: Options<TenantMemberListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantMemberList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantMemberListQueryKey(options),
  });
};

export const tenantMemberDeleteMutation = (
  options?: Partial<Options<TenantMemberDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantMemberDeleteResponse,
    TenantMemberDeleteError,
    Options<TenantMemberDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantMemberDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventGetQueryKey = (options: Options<EventGetData>) => [
  createQueryKey("eventGet", options),
];

export const eventGetOptions = (options: Options<EventGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventGetQueryKey(options),
  });
};

export const eventDataGetQueryKey = (options: Options<EventDataGetData>) => [
  createQueryKey("eventDataGet", options),
];

export const eventDataGetOptions = (options: Options<EventDataGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventDataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventDataGetQueryKey(options),
  });
};

export const eventKeyListQueryKey = (options: Options<EventKeyListData>) => [
  createQueryKey("eventKeyList", options),
];

export const eventKeyListOptions = (options: Options<EventKeyListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventKeyList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventKeyListQueryKey(options),
  });
};

export const workflowListQueryKey = (options: Options<WorkflowListData>) => [
  createQueryKey("workflowList", options),
];

export const workflowListOptions = (options: Options<WorkflowListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowListQueryKey(options),
  });
};

export const workflowScheduledListQueryKey = (
  options: Options<WorkflowScheduledListData>,
) => [createQueryKey("workflowScheduledList", options)];

export const workflowScheduledListOptions = (
  options: Options<WorkflowScheduledListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowScheduledList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowScheduledListQueryKey(options),
  });
};

export const workflowScheduledListInfiniteQueryKey = (
  options: Options<WorkflowScheduledListData>,
): QueryKey<Options<WorkflowScheduledListData>> => [
  createQueryKey("workflowScheduledList", options, true),
];

export const workflowScheduledListInfiniteOptions = (
  options: Options<WorkflowScheduledListData>,
) => {
  return infiniteQueryOptions<
    WorkflowScheduledListResponse,
    WorkflowScheduledListError,
    InfiniteData<WorkflowScheduledListResponse>,
    QueryKey<Options<WorkflowScheduledListData>>,
    | number
    | Pick<
        QueryKey<Options<WorkflowScheduledListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<WorkflowScheduledListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await workflowScheduledList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: workflowScheduledListInfiniteQueryKey(options),
    },
  );
};

export const workflowScheduledDeleteMutation = (
  options?: Partial<Options<WorkflowScheduledDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowScheduledDeleteResponse,
    WorkflowScheduledDeleteError,
    Options<WorkflowScheduledDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowScheduledDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowScheduledGetQueryKey = (
  options: Options<WorkflowScheduledGetData>,
) => [createQueryKey("workflowScheduledGet", options)];

export const workflowScheduledGetOptions = (
  options: Options<WorkflowScheduledGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowScheduledGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowScheduledGetQueryKey(options),
  });
};

export const cronWorkflowListQueryKey = (
  options: Options<CronWorkflowListData>,
) => [createQueryKey("cronWorkflowList", options)];

export const cronWorkflowListOptions = (
  options: Options<CronWorkflowListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cronWorkflowList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cronWorkflowListQueryKey(options),
  });
};

export const cronWorkflowListInfiniteQueryKey = (
  options: Options<CronWorkflowListData>,
): QueryKey<Options<CronWorkflowListData>> => [
  createQueryKey("cronWorkflowList", options, true),
];

export const cronWorkflowListInfiniteOptions = (
  options: Options<CronWorkflowListData>,
) => {
  return infiniteQueryOptions<
    CronWorkflowListResponse,
    CronWorkflowListError,
    InfiniteData<CronWorkflowListResponse>,
    QueryKey<Options<CronWorkflowListData>>,
    | number
    | Pick<
        QueryKey<Options<CronWorkflowListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<CronWorkflowListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await cronWorkflowList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: cronWorkflowListInfiniteQueryKey(options),
    },
  );
};

export const workflowRunCancelQueryKey = (
  options: Options<WorkflowRunCancelData>,
) => [createQueryKey("workflowRunCancel", options)];

export const workflowRunCancelOptions = (
  options: Options<WorkflowRunCancelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunCancel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunCancelQueryKey(options),
  });
};

export const workflowRunCancelMutation = (
  options?: Partial<Options<WorkflowRunCancelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowRunCancelResponse,
    WorkflowRunCancelError,
    Options<WorkflowRunCancelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowRunCancel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowDeleteMutation = (
  options?: Partial<Options<WorkflowDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowDeleteResponse,
    WorkflowDeleteError,
    Options<WorkflowDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowGetQueryKey = (options: Options<WorkflowGetData>) => [
  createQueryKey("workflowGet", options),
];

export const workflowGetOptions = (options: Options<WorkflowGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetQueryKey(options),
  });
};

export const workflowUpdateMutation = (
  options?: Partial<Options<WorkflowUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowUpdateResponse,
    WorkflowUpdateError,
    Options<WorkflowUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowVersionGetQueryKey = (
  options: Options<WorkflowVersionGetData>,
) => [createQueryKey("workflowVersionGet", options)];

export const workflowVersionGetOptions = (
  options: Options<WorkflowVersionGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowVersionGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowVersionGetQueryKey(options),
  });
};

export const workflowRunCreateQueryKey = (
  options: Options<WorkflowRunCreateData>,
) => [createQueryKey("workflowRunCreate", options)];

export const workflowRunCreateOptions = (
  options: Options<WorkflowRunCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunCreateQueryKey(options),
  });
};

export const workflowRunCreateMutation = (
  options?: Partial<Options<WorkflowRunCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowRunCreateResponse,
    WorkflowRunCreateError,
    Options<WorkflowRunCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowRunCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowGetMetricsQueryKey = (
  options: Options<WorkflowGetMetricsData>,
) => [createQueryKey("workflowGetMetrics", options)];

export const workflowGetMetricsOptions = (
  options: Options<WorkflowGetMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGetMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetMetricsQueryKey(options),
  });
};

export const logLineListQueryKey = (options: Options<LogLineListData>) => [
  createQueryKey("logLineList", options),
];

export const logLineListOptions = (options: Options<LogLineListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logLineList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logLineListQueryKey(options),
  });
};

export const logLineListInfiniteQueryKey = (
  options: Options<LogLineListData>,
): QueryKey<Options<LogLineListData>> => [
  createQueryKey("logLineList", options, true),
];

export const logLineListInfiniteOptions = (
  options: Options<LogLineListData>,
) => {
  return infiniteQueryOptions<
    LogLineListResponse,
    LogLineListError,
    InfiniteData<LogLineListResponse>,
    QueryKey<Options<LogLineListData>>,
    | number
    | Pick<
        QueryKey<Options<LogLineListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<LogLineListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await logLineList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: logLineListInfiniteQueryKey(options),
    },
  );
};

export const stepRunListEventsQueryKey = (
  options: Options<StepRunListEventsData>,
) => [createQueryKey("stepRunListEvents", options)];

export const stepRunListEventsOptions = (
  options: Options<StepRunListEventsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunListEvents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunListEventsQueryKey(options),
  });
};

export const stepRunListEventsInfiniteQueryKey = (
  options: Options<StepRunListEventsData>,
): QueryKey<Options<StepRunListEventsData>> => [
  createQueryKey("stepRunListEvents", options, true),
];

export const stepRunListEventsInfiniteOptions = (
  options: Options<StepRunListEventsData>,
) => {
  return infiniteQueryOptions<
    StepRunListEventsResponse,
    StepRunListEventsError,
    InfiniteData<StepRunListEventsResponse>,
    QueryKey<Options<StepRunListEventsData>>,
    | number
    | Pick<
        QueryKey<Options<StepRunListEventsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<StepRunListEventsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await stepRunListEvents({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: stepRunListEventsInfiniteQueryKey(options),
    },
  );
};

export const workflowRunListStepRunEventsQueryKey = (
  options: Options<WorkflowRunListStepRunEventsData>,
) => [createQueryKey("workflowRunListStepRunEvents", options)];

export const workflowRunListStepRunEventsOptions = (
  options: Options<WorkflowRunListStepRunEventsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunListStepRunEvents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunListStepRunEventsQueryKey(options),
  });
};

export const stepRunListArchivesQueryKey = (
  options: Options<StepRunListArchivesData>,
) => [createQueryKey("stepRunListArchives", options)];

export const stepRunListArchivesOptions = (
  options: Options<StepRunListArchivesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunListArchives({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunListArchivesQueryKey(options),
  });
};

export const stepRunListArchivesInfiniteQueryKey = (
  options: Options<StepRunListArchivesData>,
): QueryKey<Options<StepRunListArchivesData>> => [
  createQueryKey("stepRunListArchives", options, true),
];

export const stepRunListArchivesInfiniteOptions = (
  options: Options<StepRunListArchivesData>,
) => {
  return infiniteQueryOptions<
    StepRunListArchivesResponse,
    StepRunListArchivesError,
    InfiniteData<StepRunListArchivesResponse>,
    QueryKey<Options<StepRunListArchivesData>>,
    | number
    | Pick<
        QueryKey<Options<StepRunListArchivesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<StepRunListArchivesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await stepRunListArchives({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: stepRunListArchivesInfiniteQueryKey(options),
    },
  );
};

export const workflowGetWorkersCountQueryKey = (
  options: Options<WorkflowGetWorkersCountData>,
) => [createQueryKey("workflowGetWorkersCount", options)];

export const workflowGetWorkersCountOptions = (
  options: Options<WorkflowGetWorkersCountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGetWorkersCount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetWorkersCountQueryKey(options),
  });
};

export const workflowRunListQueryKey = (
  options: Options<WorkflowRunListData>,
) => [createQueryKey("workflowRunList", options)];

export const workflowRunListOptions = (
  options: Options<WorkflowRunListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunListQueryKey(options),
  });
};

export const workflowRunListInfiniteQueryKey = (
  options: Options<WorkflowRunListData>,
): QueryKey<Options<WorkflowRunListData>> => [
  createQueryKey("workflowRunList", options, true),
];

export const workflowRunListInfiniteOptions = (
  options: Options<WorkflowRunListData>,
) => {
  return infiniteQueryOptions<
    WorkflowRunListResponse,
    WorkflowRunListError,
    InfiniteData<WorkflowRunListResponse>,
    QueryKey<Options<WorkflowRunListData>>,
    | number
    | Pick<
        QueryKey<Options<WorkflowRunListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<WorkflowRunListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await workflowRunList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: workflowRunListInfiniteQueryKey(options),
    },
  );
};

export const workflowRunUpdateReplayQueryKey = (
  options: Options<WorkflowRunUpdateReplayData>,
) => [createQueryKey("workflowRunUpdateReplay", options)];

export const workflowRunUpdateReplayOptions = (
  options: Options<WorkflowRunUpdateReplayData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunUpdateReplay({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunUpdateReplayQueryKey(options),
  });
};

export const workflowRunUpdateReplayMutation = (
  options?: Partial<Options<WorkflowRunUpdateReplayData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowRunUpdateReplayResponse,
    WorkflowRunUpdateReplayError,
    Options<WorkflowRunUpdateReplayData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowRunUpdateReplay({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowRunGetMetricsQueryKey = (
  options: Options<WorkflowRunGetMetricsData>,
) => [createQueryKey("workflowRunGetMetrics", options)];

export const workflowRunGetMetricsOptions = (
  options: Options<WorkflowRunGetMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGetMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetMetricsQueryKey(options),
  });
};

export const workflowRunGetQueryKey = (
  options: Options<WorkflowRunGetData>,
) => [createQueryKey("workflowRunGet", options)];

export const workflowRunGetOptions = (options: Options<WorkflowRunGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetQueryKey(options),
  });
};

export const workflowRunGetShapeQueryKey = (
  options: Options<WorkflowRunGetShapeData>,
) => [createQueryKey("workflowRunGetShape", options)];

export const workflowRunGetShapeOptions = (
  options: Options<WorkflowRunGetShapeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGetShape({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetShapeQueryKey(options),
  });
};

export const stepRunGetQueryKey = (options: Options<StepRunGetData>) => [
  createQueryKey("stepRunGet", options),
];

export const stepRunGetOptions = (options: Options<StepRunGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunGetQueryKey(options),
  });
};

export const stepRunUpdateRerunQueryKey = (
  options: Options<StepRunUpdateRerunData>,
) => [createQueryKey("stepRunUpdateRerun", options)];

export const stepRunUpdateRerunOptions = (
  options: Options<StepRunUpdateRerunData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunUpdateRerun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunUpdateRerunQueryKey(options),
  });
};

export const stepRunUpdateRerunMutation = (
  options?: Partial<Options<StepRunUpdateRerunData>>,
) => {
  const mutationOptions: UseMutationOptions<
    StepRunUpdateRerunResponse,
    StepRunUpdateRerunError,
    Options<StepRunUpdateRerunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await stepRunUpdateRerun({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const stepRunUpdateCancelQueryKey = (
  options: Options<StepRunUpdateCancelData>,
) => [createQueryKey("stepRunUpdateCancel", options)];

export const stepRunUpdateCancelOptions = (
  options: Options<StepRunUpdateCancelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunUpdateCancel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunUpdateCancelQueryKey(options),
  });
};

export const stepRunUpdateCancelMutation = (
  options?: Partial<Options<StepRunUpdateCancelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    StepRunUpdateCancelResponse,
    StepRunUpdateCancelError,
    Options<StepRunUpdateCancelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await stepRunUpdateCancel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const stepRunGetSchemaQueryKey = (
  options: Options<StepRunGetSchemaData>,
) => [createQueryKey("stepRunGetSchema", options)];

export const stepRunGetSchemaOptions = (
  options: Options<StepRunGetSchemaData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunGetSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunGetSchemaQueryKey(options),
  });
};

export const workerListQueryKey = (options: Options<WorkerListData>) => [
  createQueryKey("workerList", options),
];

export const workerListOptions = (options: Options<WorkerListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workerList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workerListQueryKey(options),
  });
};

export const workerGetQueryKey = (options: Options<WorkerGetData>) => [
  createQueryKey("workerGet", options),
];

export const workerGetOptions = (options: Options<WorkerGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workerGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workerGetQueryKey(options),
  });
};

export const workerUpdateMutation = (
  options?: Partial<Options<WorkerUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkerUpdateResponse,
    WorkerUpdateError,
    Options<WorkerUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workerUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhookListQueryKey = (options: Options<WebhookListData>) => [
  createQueryKey("webhookList", options),
];

export const webhookListOptions = (options: Options<WebhookListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await webhookList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhookListQueryKey(options),
  });
};

export const webhookCreateQueryKey = (options: Options<WebhookCreateData>) => [
  createQueryKey("webhookCreate", options),
];

export const webhookCreateOptions = (options: Options<WebhookCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await webhookCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhookCreateQueryKey(options),
  });
};

export const webhookCreateMutation = (
  options?: Partial<Options<WebhookCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WebhookCreateResponse,
    WebhookCreateError,
    Options<WebhookCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await webhookCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhookDeleteMutation = (
  options?: Partial<Options<WebhookDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    WebhookDeleteError,
    Options<WebhookDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await webhookDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhookRequestsListQueryKey = (
  options: Options<WebhookRequestsListData>,
) => [createQueryKey("webhookRequestsList", options)];

export const webhookRequestsListOptions = (
  options: Options<WebhookRequestsListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await webhookRequestsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhookRequestsListQueryKey(options),
  });
};

export const workflowRunGetInputQueryKey = (
  options: Options<WorkflowRunGetInputData>,
) => [createQueryKey("workflowRunGetInput", options)];

export const workflowRunGetInputOptions = (
  options: Options<WorkflowRunGetInputData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGetInput({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetInputQueryKey(options),
  });
};

export const workflowGetByNameQueryKey = (
  options: Options<WorkflowGetByNameData>,
) => [createQueryKey("workflowGetByName", options)];

export const workflowGetByNameOptions = (
  options: Options<WorkflowGetByNameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGetByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetByNameQueryKey(options),
  });
};

export const workerConfigQueryKey = (options?: Options<WorkerConfigData>) => [
  createQueryKey("workerConfig", options),
];

export const workerConfigOptions = (options?: Options<WorkerConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workerConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workerConfigQueryKey(options),
  });
};

export const mtmaiBloggenconfigQueryKey = (
  options?: Options<MtmaiBloggenconfigData>,
) => [createQueryKey("mtmaiBloggenconfig", options)];

export const mtmaiBloggenconfigOptions = (
  options?: Options<MtmaiBloggenconfigData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await mtmaiBloggenconfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: mtmaiBloggenconfigQueryKey(options),
  });
};

export const mtmaiWorkerConfigQueryKey = (
  options?: Options<MtmaiWorkerConfigData>,
) => [createQueryKey("mtmaiWorkerConfig", options)];

export const mtmaiWorkerConfigOptions = (
  options?: Options<MtmaiWorkerConfigData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await mtmaiWorkerConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: mtmaiWorkerConfigQueryKey(options),
  });
};

export const blogListQueryKey = (options: Options<BlogListData>) => [
  createQueryKey("blogList", options),
];

export const blogListOptions = (options: Options<BlogListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await blogList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: blogListQueryKey(options),
  });
};

export const blogCreateQueryKey = (options: Options<BlogCreateData>) => [
  createQueryKey("blogCreate", options),
];

export const blogCreateOptions = (options: Options<BlogCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await blogCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: blogCreateQueryKey(options),
  });
};

export const blogCreateMutation = (
  options?: Partial<Options<BlogCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BlogCreateResponse,
    BlogCreateError,
    Options<BlogCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await blogCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const blogGetQueryKey = (options: Options<BlogGetData>) => [
  createQueryKey("blogGet", options),
];

export const blogGetOptions = (options: Options<BlogGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await blogGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: blogGetQueryKey(options),
  });
};

export const blogUpdateMutation = (
  options?: Partial<Options<BlogUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BlogUpdateResponse,
    BlogUpdateError,
    Options<BlogUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await blogUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteListQueryKey = (options: Options<SiteListData>) => [
  createQueryKey("siteList", options),
];

export const siteListOptions = (options: Options<SiteListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteListQueryKey(options),
  });
};

export const siteCreateQueryKey = (options: Options<SiteCreateData>) => [
  createQueryKey("siteCreate", options),
];

export const siteCreateOptions = (options: Options<SiteCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteCreateQueryKey(options),
  });
};

export const siteCreateMutation = (
  options?: Partial<Options<SiteCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SiteCreateResponse,
    SiteCreateError,
    Options<SiteCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteGetQueryKey = (options: Options<SiteGetData>) => [
  createQueryKey("siteGet", options),
];

export const siteGetOptions = (options: Options<SiteGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteGetQueryKey(options),
  });
};

export const siteUpdateMutation = (
  options?: Partial<Options<SiteUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SiteUpdateResponse,
    SiteUpdateError,
    Options<SiteUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteGetByHostQueryKey = (options: Options<SiteGetByHostData>) => [
  createQueryKey("siteGetByHost", options),
];

export const siteGetByHostOptions = (options: Options<SiteGetByHostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteGetByHost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteGetByHostQueryKey(options),
  });
};

export const siteHostListQueryKey = (options: Options<SiteHostListData>) => [
  createQueryKey("siteHostList", options),
];

export const siteHostListOptions = (options: Options<SiteHostListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteHostList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteHostListQueryKey(options),
  });
};

export const siteHostListInfiniteQueryKey = (
  options: Options<SiteHostListData>,
): QueryKey<Options<SiteHostListData>> => [
  createQueryKey("siteHostList", options, true),
];

export const siteHostListInfiniteOptions = (
  options: Options<SiteHostListData>,
) => {
  return infiniteQueryOptions<
    SiteHostListResponse,
    SiteHostListError,
    InfiniteData<SiteHostListResponse>,
    QueryKey<Options<SiteHostListData>>,
    | number
    | Pick<
        QueryKey<Options<SiteHostListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<SiteHostListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await siteHostList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: siteHostListInfiniteQueryKey(options),
    },
  );
};

export const siteHostCreateQueryKey = (
  options: Options<SiteHostCreateData>,
) => [createQueryKey("siteHostCreate", options)];

export const siteHostCreateOptions = (options: Options<SiteHostCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteHostCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteHostCreateQueryKey(options),
  });
};

export const siteHostCreateMutation = (
  options?: Partial<Options<SiteHostCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SiteHostCreateResponse,
    SiteHostCreateError,
    Options<SiteHostCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteHostCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteHostGetQueryKey = (options: Options<SiteHostGetData>) => [
  createQueryKey("siteHostGet", options),
];

export const siteHostGetOptions = (options: Options<SiteHostGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteHostGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteHostGetQueryKey(options),
  });
};

export const siteHostUpdateMutation = (
  options?: Partial<Options<SiteHostUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SiteHostUpdateResponse,
    SiteHostUpdateError,
    Options<SiteHostUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteHostUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postListPublicQueryKey = (
  options?: Options<PostListPublicData>,
) => [createQueryKey("postListPublic", options)];

export const postListPublicOptions = (
  options?: Options<PostListPublicData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postListPublic({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postListPublicQueryKey(options),
  });
};

export const postGetQueryKey = (options: Options<PostGetData>) => [
  createQueryKey("postGet", options),
];

export const postGetOptions = (options: Options<PostGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGetQueryKey(options),
  });
};

export const postListQueryKey = (options: Options<PostListData>) => [
  createQueryKey("postList", options),
];

export const postListOptions = (options: Options<PostListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postListQueryKey(options),
  });
};

export const postCreateQueryKey = (options: Options<PostCreateData>) => [
  createQueryKey("postCreate", options),
];

export const postCreateOptions = (options: Options<PostCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCreateQueryKey(options),
  });
};

export const postCreateMutation = (
  options?: Partial<Options<PostCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostCreateResponse,
    PostCreateError,
    Options<PostCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const artifactListQueryKey = (options: Options<ArtifactListData>) => [
  createQueryKey("artifactList", options),
];

export const artifactListOptions = (options: Options<ArtifactListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactListQueryKey(options),
  });
};

export const artifactCreateQueryKey = (
  options: Options<ArtifactCreateData>,
) => [createQueryKey("artifactCreate", options)];

export const artifactCreateOptions = (options: Options<ArtifactCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactCreateQueryKey(options),
  });
};

export const artifactCreateMutation = (
  options?: Partial<Options<ArtifactCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ArtifactCreateResponse,
    ArtifactCreateError,
    Options<ArtifactCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await artifactCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const artifactGetQueryKey = (options: Options<ArtifactGetData>) => [
  createQueryKey("artifactGet", options),
];

export const artifactGetOptions = (options: Options<ArtifactGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactGetQueryKey(options),
  });
};

export const teamListQueryKey = (options: Options<TeamListData>) => [
  createQueryKey("teamList", options),
];

export const teamListOptions = (options: Options<TeamListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await teamList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: teamListQueryKey(options),
  });
};

export const teamCreateQueryKey = (options: Options<TeamCreateData>) => [
  createQueryKey("teamCreate", options),
];

export const teamCreateOptions = (options: Options<TeamCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await teamCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: teamCreateQueryKey(options),
  });
};

export const teamCreateMutation = (
  options?: Partial<Options<TeamCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TeamCreateResponse,
    TeamCreateError,
    Options<TeamCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await teamCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const teamGetQueryKey = (options: Options<TeamGetData>) => [
  createQueryKey("teamGet", options),
];

export const teamGetOptions = (options: Options<TeamGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await teamGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: teamGetQueryKey(options),
  });
};

export const teamUpsertMutation = (
  options?: Partial<Options<TeamUpsertData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TeamUpsertResponse,
    TeamUpsertError,
    Options<TeamUpsertData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await teamUpsert({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const galleryListQueryKey = (options: Options<GalleryListData>) => [
  createQueryKey("galleryList", options),
];

export const galleryListOptions = (options: Options<GalleryListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await galleryList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: galleryListQueryKey(options),
  });
};

export const galleryCreateQueryKey = (options: Options<GalleryCreateData>) => [
  createQueryKey("galleryCreate", options),
];

export const galleryCreateOptions = (options: Options<GalleryCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await galleryCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: galleryCreateQueryKey(options),
  });
};

export const galleryCreateMutation = (
  options?: Partial<Options<GalleryCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    GalleryCreateResponse,
    GalleryCreateError,
    Options<GalleryCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await galleryCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const galleryGetQueryKey = (options: Options<GalleryGetData>) => [
  createQueryKey("galleryGet", options),
];

export const galleryGetOptions = (options: Options<GalleryGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await galleryGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: galleryGetQueryKey(options),
  });
};

export const agentStreamQueryKey = (options: Options<AgentStreamData>) => [
  createQueryKey("agentStream", options),
];

export const agentStreamOptions = (options: Options<AgentStreamData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentStream({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agentStreamQueryKey(options),
  });
};

export const agEventListQueryKey = (options: Options<AgEventListData>) => [
  createQueryKey("agEventList", options),
];

export const agEventListOptions = (options: Options<AgEventListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agEventList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agEventListQueryKey(options),
  });
};

export const agEventCreateQueryKey = (options: Options<AgEventCreateData>) => [
  createQueryKey("agEventCreate", options),
];

export const agEventCreateOptions = (options: Options<AgEventCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agEventCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agEventCreateQueryKey(options),
  });
};

export const agEventCreateMutation = (
  options?: Partial<Options<AgEventCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AgEventCreateResponse,
    AgEventCreateError,
    Options<AgEventCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agEventCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const agEventGetQueryKey = (options: Options<AgEventGetData>) => [
  createQueryKey("agEventGet", options),
];

export const agEventGetOptions = (options: Options<AgEventGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agEventGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agEventGetQueryKey(options),
  });
};

export const runListQueryKey = (options: Options<RunListData>) => [
  createQueryKey("runList", options),
];

export const runListOptions = (options: Options<RunListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await runList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: runListQueryKey(options),
  });
};

export const runCreateQueryKey = (options: Options<RunCreateData>) => [
  createQueryKey("runCreate", options),
];

export const runCreateOptions = (options: Options<RunCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await runCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: runCreateQueryKey(options),
  });
};

export const runCreateMutation = (
  options?: Partial<Options<RunCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RunCreateResponse,
    RunCreateError,
    Options<RunCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await runCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const runGetQueryKey = (options: Options<RunGetData>) => [
  createQueryKey("runGet", options),
];

export const runGetOptions = (options: Options<RunGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await runGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: runGetQueryKey(options),
  });
};

export const modelListQueryKey = (options: Options<ModelListData>) => [
  createQueryKey("modelList", options),
];

export const modelListOptions = (options: Options<ModelListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await modelList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: modelListQueryKey(options),
  });
};

export const modelCreateQueryKey = (options: Options<ModelCreateData>) => [
  createQueryKey("modelCreate", options),
];

export const modelCreateOptions = (options: Options<ModelCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await modelCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: modelCreateQueryKey(options),
  });
};

export const modelCreateMutation = (
  options?: Partial<Options<ModelCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ModelCreateResponse,
    ModelCreateError,
    Options<ModelCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await modelCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const modelGetQueryKey = (options: Options<ModelGetData>) => [
  createQueryKey("modelGet", options),
];

export const modelGetOptions = (options: Options<ModelGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await modelGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: modelGetQueryKey(options),
  });
};

export const modelUpdateMutation = (
  options?: Partial<Options<ModelUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ModelUpdateResponse,
    ModelUpdateError,
    Options<ModelUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await modelUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const promptListQueryKey = (options: Options<PromptListData>) => [
  createQueryKey("promptList", options),
];

export const promptListOptions = (options: Options<PromptListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await promptList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: promptListQueryKey(options),
  });
};

export const promptGetQueryKey = (options: Options<PromptGetData>) => [
  createQueryKey("promptGet", options),
];

export const promptGetOptions = (options: Options<PromptGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await promptGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: promptGetQueryKey(options),
  });
};

export const adminReleaseConnQueryKey = (
  options?: Options<AdminReleaseConnData>,
) => [createQueryKey("adminReleaseConn", options)];

export const adminReleaseConnOptions = (
  options?: Options<AdminReleaseConnData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminReleaseConn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminReleaseConnQueryKey(options),
  });
};

export const adminReleaseConnMutation = (
  options?: Partial<Options<AdminReleaseConnData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AdminReleaseConnResponse,
    AdminReleaseConnError,
    Options<AdminReleaseConnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await adminReleaseConn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const frontendGetConfigQueryKey = (
  options?: Options<FrontendGetConfigData>,
) => [createQueryKey("frontendGetConfig", options)];

export const frontendGetConfigOptions = (
  options?: Options<FrontendGetConfigData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await frontendGetConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: frontendGetConfigQueryKey(options),
  });
};

export const frontendGetSiderbarQueryKey = (
  options?: Options<FrontendGetSiderbarData>,
) => [createQueryKey("frontendGetSiderbar", options)];

export const frontendGetSiderbarOptions = (
  options?: Options<FrontendGetSiderbarData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await frontendGetSiderbar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: frontendGetSiderbarQueryKey(options),
  });
};

export const hfAccountGetQueryKey = (options?: Options<HfAccountGetData>) => [
  createQueryKey("hfAccountGet", options),
];

export const hfAccountGetOptions = (options?: Options<HfAccountGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await hfAccountGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: hfAccountGetQueryKey(options),
  });
};

export const envListQueryKey = (options?: Options<EnvListData>) => [
  createQueryKey("envList", options),
];

export const envListOptions = (options?: Options<EnvListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await envList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: envListQueryKey(options),
  });
};

export const envUpdateMutation = (
  options?: Partial<Options<EnvUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EnvUpdateResponse,
    EnvUpdateError,
    Options<EnvUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await envUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const envGetQueryKey = (options: Options<EnvGetData>) => [
  createQueryKey("envGet", options),
];

export const envGetOptions = (options: Options<EnvGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await envGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: envGetQueryKey(options),
  });
};

export const kvUpdateMutation = (options?: Partial<Options<KvUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    KvUpdateResponse,
    KvUpdateError,
    Options<KvUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await kvUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const kvGetQueryKey = (options: Options<KvGetData>) => [
  createQueryKey("kvGet", options),
];

export const kvGetOptions = (options: Options<KvGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await kvGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: kvGetQueryKey(options),
  });
};

export const endpointListQueryKey = (options?: Options<EndpointListData>) => [
  createQueryKey("endpointList", options),
];

export const endpointListOptions = (options?: Options<EndpointListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await endpointList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: endpointListQueryKey(options),
  });
};

export const endpointUpdateMutation = (
  options?: Partial<Options<EndpointUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EndpointUpdateResponse,
    EndpointUpdateError,
    Options<EndpointUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await endpointUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformListQueryKey = (options?: Options<PlatformListData>) => [
  createQueryKey("platformList", options),
];

export const platformListOptions = (options?: Options<PlatformListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformListQueryKey(options),
  });
};

export const platformCreateQueryKey = (
  options: Options<PlatformCreateData>,
) => [createQueryKey("platformCreate", options)];

export const platformCreateOptions = (options: Options<PlatformCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformCreateQueryKey(options),
  });
};

export const platformCreateMutation = (
  options?: Partial<Options<PlatformCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PlatformCreateResponse,
    PlatformCreateError,
    Options<PlatformCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformGetQueryKey = (options: Options<PlatformGetData>) => [
  createQueryKey("platformGet", options),
];

export const platformGetOptions = (options: Options<PlatformGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformGetQueryKey(options),
  });
};

export const platformUpdateMutation = (
  options?: Partial<Options<PlatformUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PlatformUpdateResponse,
    PlatformUpdateError,
    Options<PlatformUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformAccountListQueryKey = (
  options?: Options<PlatformAccountListData>,
) => [createQueryKey("platformAccountList", options)];

export const platformAccountListOptions = (
  options?: Options<PlatformAccountListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformAccountList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformAccountListQueryKey(options),
  });
};

export const platformAccountCreateQueryKey = (
  options: Options<PlatformAccountCreateData>,
) => [createQueryKey("platformAccountCreate", options)];

export const platformAccountCreateOptions = (
  options: Options<PlatformAccountCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformAccountCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformAccountCreateQueryKey(options),
  });
};

export const platformAccountCreateMutation = (
  options?: Partial<Options<PlatformAccountCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PlatformAccountCreateResponse,
    PlatformAccountCreateError,
    Options<PlatformAccountCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformAccountCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformAccountGetQueryKey = (
  options: Options<PlatformAccountGetData>,
) => [createQueryKey("platformAccountGet", options)];

export const platformAccountGetOptions = (
  options: Options<PlatformAccountGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformAccountGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformAccountGetQueryKey(options),
  });
};

export const platformAccountUpdateMutation = (
  options?: Partial<Options<PlatformAccountUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PlatformAccountUpdateResponse,
    PlatformAccountUpdateError,
    Options<PlatformAccountUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformAccountUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const browserListQueryKey = (options?: Options<BrowserListData>) => [
  createQueryKey("browserList", options),
];

export const browserListOptions = (options?: Options<BrowserListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await browserList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: browserListQueryKey(options),
  });
};

export const browserCreateQueryKey = (options: Options<BrowserCreateData>) => [
  createQueryKey("browserCreate", options),
];

export const browserCreateOptions = (options: Options<BrowserCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await browserCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: browserCreateQueryKey(options),
  });
};

export const browserCreateMutation = (
  options?: Partial<Options<BrowserCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BrowserCreateResponse,
    BrowserCreateError,
    Options<BrowserCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await browserCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const browserGetQueryKey = (options: Options<BrowserGetData>) => [
  createQueryKey("browserGet", options),
];

export const browserGetOptions = (options: Options<BrowserGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await browserGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: browserGetQueryKey(options),
  });
};

export const browserUpdateMutation = (
  options?: Partial<Options<BrowserUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BrowserUpdateResponse,
    BrowserUpdateError,
    Options<BrowserUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await browserUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyListQueryKey = (options?: Options<ProxyListData>) => [
  createQueryKey("proxyList", options),
];

export const proxyListOptions = (options?: Options<ProxyListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyListQueryKey(options),
  });
};

export const proxyCreateQueryKey = (options: Options<ProxyCreateData>) => [
  createQueryKey("proxyCreate", options),
];

export const proxyCreateOptions = (options: Options<ProxyCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyCreateQueryKey(options),
  });
};

export const proxyCreateMutation = (
  options?: Partial<Options<ProxyCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ProxyCreateResponse,
    ProxyCreateError,
    Options<ProxyCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyGetQueryKey = (options: Options<ProxyGetData>) => [
  createQueryKey("proxyGet", options),
];

export const proxyGetOptions = (options: Options<ProxyGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyGetQueryKey(options),
  });
};

export const proxyUpdateMutation = (
  options?: Partial<Options<ProxyUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ProxyUpdateResponse,
    ProxyUpdateError,
    Options<ProxyUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const agStateListQueryKey = (options: Options<AgStateListData>) => [
  createQueryKey("agStateList", options),
];

export const agStateListOptions = (options: Options<AgStateListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agStateList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agStateListQueryKey(options),
  });
};

export const agStateGetQueryKey = (options: Options<AgStateGetData>) => [
  createQueryKey("agStateGet", options),
];

export const agStateGetOptions = (options: Options<AgStateGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agStateGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agStateGetQueryKey(options),
  });
};

export const agStateUpsertMutation = (
  options?: Partial<Options<AgStateUpsertData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AgStateUpsertResponse,
    AgStateUpsertError,
    Options<AgStateUpsertData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agStateUpsert({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantSeedQueryKey = (options: Options<TenantSeedData>) => [
  createQueryKey("tenantSeed", options),
];

export const tenantSeedOptions = (options: Options<TenantSeedData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantSeed({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantSeedQueryKey(options),
  });
};

export const tenantSeedMutation = (
  options?: Partial<Options<TenantSeedData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantSeedResponse,
    TenantSeedError,
    Options<TenantSeedData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantSeed({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
