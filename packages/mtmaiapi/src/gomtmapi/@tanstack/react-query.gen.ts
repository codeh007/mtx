// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  readinessGet,
  livenessGet,
  metadataGet,
  metadataListIntegrations,
  userUpdateLogin,
  userUpdateGoogleOauthStart,
  userUpdateGoogleOauthCallback,
  userUpdateGithubOauthStart,
  userUpdateGithubOauthCallback,
  userUpdateSlackOauthStart,
  userUpdateSlackOauthCallback,
  alertEmailGroupList,
  alertEmailGroupCreate,
  tenantResourcePolicyGet,
  alertEmailGroupDelete,
  alertEmailGroupUpdate,
  userGetCurrent,
  userUpdatePassword,
  userCreate,
  userUpdateLogout,
  tenantMembershipsList,
  userListTenantInvites,
  tenantInviteAccept,
  tenantInviteReject,
  tenantCreate,
  tenantUpdate,
  tenantAlertingSettingsGet,
  tenantInviteList,
  tenantInviteCreate,
  tenantInviteDelete,
  tenantInviteUpdate,
  apiTokenList,
  apiTokenCreate,
  apiTokenUpdateRevoke,
  tenantMemberList,
  tenantMemberDelete,
  monitoringPostRunProbe,
  infoGetVersion,
  eventPush,
  siteList,
  siteCreate,
  siteGet,
  siteUpdate,
  siteGetByHost,
  siteHostList,
  siteHostCreate,
  siteHostGet,
  siteHostUpdate,
  frontendGetConfig,
  frontendGetSiderbar,
  endpointList,
  endpointUpdate,
  mtworkerGetTasks,
  proxyList,
  proxyGet,
  proxyCreate,
  proxyUpdate,
  proxyDelete,
  postListPublic,
  postGet,
  postList,
  postCreate,
  artifactList,
  artifactGet,
  artifactSave,
  sandboxGet,
  scriptsByName,
  singboxGetWorkerProfile,
  singboxSubscribe,
  singboxGeoipCnSrs,
  singboxGetOutbounds,
  singboxCreateOutbound,
  singboxDeleteOutbound,
  singboxGetOutbound,
  singboxUpdateOutbound,
  singboxImportOutbounds,
  botList,
  botGet,
  botHeartbeat,
  platformList,
  platformGet,
  platformCreate,
  platformUpdate,
  platformDelete,
  pAccountCreate,
  pAccountList,
  pAccountGet,
  pAccountUpdate,
  pAccountDelete,
  albumList,
  albumCreate,
  albumDelete,
  albumGet,
  albumUpdate,
  photoList,
  photoUpload,
  photoDelete,
  photoGet,
  photoUpdate,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import type {
  ReadinessGetData,
  LivenessGetData,
  MetadataGetData,
  MetadataListIntegrationsData,
  UserUpdateLoginData,
  UserUpdateLoginError,
  UserUpdateLoginResponse,
  UserUpdateGoogleOauthStartData,
  UserUpdateGoogleOauthCallbackData,
  UserUpdateGithubOauthStartData,
  UserUpdateGithubOauthCallbackData,
  UserUpdateSlackOauthStartData,
  UserUpdateSlackOauthCallbackData,
  AlertEmailGroupListData,
  AlertEmailGroupCreateData,
  AlertEmailGroupCreateError,
  AlertEmailGroupCreateResponse,
  TenantResourcePolicyGetData,
  AlertEmailGroupDeleteData,
  AlertEmailGroupDeleteError,
  AlertEmailGroupDeleteResponse,
  AlertEmailGroupUpdateData,
  AlertEmailGroupUpdateError,
  AlertEmailGroupUpdateResponse,
  UserGetCurrentData,
  UserUpdatePasswordData,
  UserUpdatePasswordError,
  UserUpdatePasswordResponse,
  UserCreateData,
  UserCreateError,
  UserCreateResponse,
  UserUpdateLogoutData,
  UserUpdateLogoutError,
  UserUpdateLogoutResponse,
  TenantMembershipsListData,
  UserListTenantInvitesData,
  TenantInviteAcceptData,
  TenantInviteAcceptError,
  TenantInviteRejectData,
  TenantInviteRejectError,
  TenantCreateData,
  TenantCreateError,
  TenantCreateResponse,
  TenantUpdateData,
  TenantUpdateError,
  TenantUpdateResponse,
  TenantAlertingSettingsGetData,
  TenantInviteListData,
  TenantInviteCreateData,
  TenantInviteCreateError,
  TenantInviteCreateResponse,
  TenantInviteDeleteData,
  TenantInviteDeleteError,
  TenantInviteDeleteResponse,
  TenantInviteUpdateData,
  TenantInviteUpdateError,
  TenantInviteUpdateResponse,
  ApiTokenListData,
  ApiTokenCreateData,
  ApiTokenCreateError,
  ApiTokenCreateResponse,
  ApiTokenUpdateRevokeData,
  ApiTokenUpdateRevokeError,
  ApiTokenUpdateRevokeResponse,
  TenantMemberListData,
  TenantMemberDeleteData,
  TenantMemberDeleteError,
  TenantMemberDeleteResponse,
  MonitoringPostRunProbeData,
  MonitoringPostRunProbeError,
  InfoGetVersionData,
  EventPushData,
  EventPushError,
  EventPushResponse,
  SiteListData,
  SiteCreateData,
  SiteCreateError,
  SiteCreateResponse,
  SiteGetData,
  SiteUpdateData,
  SiteUpdateError,
  SiteUpdateResponse,
  SiteGetByHostData,
  SiteHostListData,
  SiteHostListError,
  SiteHostListResponse,
  SiteHostCreateData,
  SiteHostCreateError,
  SiteHostCreateResponse,
  SiteHostGetData,
  SiteHostUpdateData,
  SiteHostUpdateError,
  SiteHostUpdateResponse,
  FrontendGetConfigData,
  FrontendGetSiderbarData,
  EndpointListData,
  EndpointUpdateData,
  EndpointUpdateError,
  EndpointUpdateResponse,
  MtworkerGetTasksData,
  ProxyListData,
  ProxyListError,
  ProxyListResponse,
  ProxyGetData,
  ProxyCreateData,
  ProxyCreateError,
  ProxyCreateResponse,
  ProxyUpdateData,
  ProxyUpdateError,
  ProxyUpdateResponse,
  ProxyDeleteData,
  ProxyDeleteError,
  ProxyDeleteResponse,
  PostListPublicData,
  PostGetData,
  PostListData,
  PostCreateData,
  PostCreateError,
  PostCreateResponse,
  ArtifactListData,
  ArtifactGetData,
  ArtifactSaveData,
  ArtifactSaveError,
  ArtifactSaveResponse,
  SandboxGetData,
  ScriptsByNameData,
  SingboxGetWorkerProfileData,
  SingboxSubscribeData,
  SingboxGeoipCnSrsData,
  SingboxGetOutboundsData,
  SingboxCreateOutboundData,
  SingboxCreateOutboundError,
  SingboxCreateOutboundResponse,
  SingboxDeleteOutboundData,
  SingboxDeleteOutboundError,
  SingboxDeleteOutboundResponse,
  SingboxGetOutboundData,
  SingboxUpdateOutboundData,
  SingboxUpdateOutboundError,
  SingboxUpdateOutboundResponse,
  SingboxImportOutboundsData,
  SingboxImportOutboundsError,
  SingboxImportOutboundsResponse,
  BotListData,
  BotGetData,
  BotHeartbeatData,
  BotHeartbeatError,
  BotHeartbeatResponse,
  PlatformListData,
  PlatformListError,
  PlatformListResponse,
  PlatformGetData,
  PlatformCreateData,
  PlatformCreateError,
  PlatformCreateResponse,
  PlatformUpdateData,
  PlatformUpdateError,
  PlatformUpdateResponse,
  PlatformDeleteData,
  PlatformDeleteError,
  PlatformDeleteResponse,
  PAccountCreateData,
  PAccountCreateError,
  PAccountCreateResponse,
  PAccountListData,
  PAccountListError,
  PAccountListResponse,
  PAccountGetData,
  PAccountUpdateData,
  PAccountUpdateError,
  PAccountUpdateResponse,
  PAccountDeleteData,
  PAccountDeleteError,
  PAccountDeleteResponse,
  AlbumListData,
  AlbumCreateData,
  AlbumCreateError,
  AlbumCreateResponse,
  AlbumDeleteData,
  AlbumDeleteError,
  AlbumDeleteResponse,
  AlbumGetData,
  AlbumUpdateData,
  AlbumUpdateError,
  AlbumUpdateResponse,
  PhotoListData,
  PhotoUploadData,
  PhotoUploadError,
  PhotoUploadResponse,
  PhotoDeleteData,
  PhotoDeleteError,
  PhotoDeleteResponse,
  PhotoGetData,
  PhotoUpdateData,
  PhotoUpdateError,
  PhotoUpdateResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const readinessGetQueryKey = (options?: Options<ReadinessGetData>) =>
  createQueryKey("readinessGet", options);

export const readinessGetOptions = (options?: Options<ReadinessGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readinessGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readinessGetQueryKey(options),
  });
};

export const livenessGetQueryKey = (options?: Options<LivenessGetData>) =>
  createQueryKey("livenessGet", options);

export const livenessGetOptions = (options?: Options<LivenessGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await livenessGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: livenessGetQueryKey(options),
  });
};

export const metadataGetQueryKey = (options?: Options<MetadataGetData>) =>
  createQueryKey("metadataGet", options);

export const metadataGetOptions = (options?: Options<MetadataGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metadataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metadataGetQueryKey(options),
  });
};

export const metadataListIntegrationsQueryKey = (options?: Options<MetadataListIntegrationsData>) =>
  createQueryKey("metadataListIntegrations", options);

export const metadataListIntegrationsOptions = (
  options?: Options<MetadataListIntegrationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metadataListIntegrations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metadataListIntegrationsQueryKey(options),
  });
};

export const userUpdateLoginQueryKey = (options?: Options<UserUpdateLoginData>) =>
  createQueryKey("userUpdateLogin", options);

export const userUpdateLoginOptions = (options?: Options<UserUpdateLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateLoginQueryKey(options),
  });
};

export const userUpdateLoginMutation = (options?: Partial<Options<UserUpdateLoginData>>) => {
  const mutationOptions: UseMutationOptions<
    UserUpdateLoginResponse,
    UserUpdateLoginError,
    Options<UserUpdateLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdateLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateGoogleOauthStartQueryKey = (
  options?: Options<UserUpdateGoogleOauthStartData>,
) => createQueryKey("userUpdateGoogleOauthStart", options);

export const userUpdateGoogleOauthStartOptions = (
  options?: Options<UserUpdateGoogleOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGoogleOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGoogleOauthStartQueryKey(options),
  });
};

export const userUpdateGoogleOauthCallbackQueryKey = (
  options?: Options<UserUpdateGoogleOauthCallbackData>,
) => createQueryKey("userUpdateGoogleOauthCallback", options);

export const userUpdateGoogleOauthCallbackOptions = (
  options?: Options<UserUpdateGoogleOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGoogleOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGoogleOauthCallbackQueryKey(options),
  });
};

export const userUpdateGithubOauthStartQueryKey = (
  options?: Options<UserUpdateGithubOauthStartData>,
) => createQueryKey("userUpdateGithubOauthStart", options);

export const userUpdateGithubOauthStartOptions = (
  options?: Options<UserUpdateGithubOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGithubOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGithubOauthStartQueryKey(options),
  });
};

export const userUpdateGithubOauthCallbackQueryKey = (
  options?: Options<UserUpdateGithubOauthCallbackData>,
) => createQueryKey("userUpdateGithubOauthCallback", options);

export const userUpdateGithubOauthCallbackOptions = (
  options?: Options<UserUpdateGithubOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGithubOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGithubOauthCallbackQueryKey(options),
  });
};

export const userUpdateSlackOauthStartQueryKey = (
  options: Options<UserUpdateSlackOauthStartData>,
) => createQueryKey("userUpdateSlackOauthStart", options);

export const userUpdateSlackOauthStartOptions = (
  options: Options<UserUpdateSlackOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateSlackOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateSlackOauthStartQueryKey(options),
  });
};

export const userUpdateSlackOauthCallbackQueryKey = (
  options?: Options<UserUpdateSlackOauthCallbackData>,
) => createQueryKey("userUpdateSlackOauthCallback", options);

export const userUpdateSlackOauthCallbackOptions = (
  options?: Options<UserUpdateSlackOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateSlackOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateSlackOauthCallbackQueryKey(options),
  });
};

export const alertEmailGroupListQueryKey = (options: Options<AlertEmailGroupListData>) =>
  createQueryKey("alertEmailGroupList", options);

export const alertEmailGroupListOptions = (options: Options<AlertEmailGroupListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alertEmailGroupList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alertEmailGroupListQueryKey(options),
  });
};

export const alertEmailGroupCreateQueryKey = (options: Options<AlertEmailGroupCreateData>) =>
  createQueryKey("alertEmailGroupCreate", options);

export const alertEmailGroupCreateOptions = (options: Options<AlertEmailGroupCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alertEmailGroupCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alertEmailGroupCreateQueryKey(options),
  });
};

export const alertEmailGroupCreateMutation = (
  options?: Partial<Options<AlertEmailGroupCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupCreateResponse,
    AlertEmailGroupCreateError,
    Options<AlertEmailGroupCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantResourcePolicyGetQueryKey = (options: Options<TenantResourcePolicyGetData>) =>
  createQueryKey("tenantResourcePolicyGet", options);

export const tenantResourcePolicyGetOptions = (options: Options<TenantResourcePolicyGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantResourcePolicyGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantResourcePolicyGetQueryKey(options),
  });
};

export const alertEmailGroupDeleteMutation = (
  options?: Partial<Options<AlertEmailGroupDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupDeleteResponse,
    AlertEmailGroupDeleteError,
    Options<AlertEmailGroupDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const alertEmailGroupUpdateMutation = (
  options?: Partial<Options<AlertEmailGroupUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupUpdateResponse,
    AlertEmailGroupUpdateError,
    Options<AlertEmailGroupUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userGetCurrentQueryKey = (options?: Options<UserGetCurrentData>) =>
  createQueryKey("userGetCurrent", options);

export const userGetCurrentOptions = (options?: Options<UserGetCurrentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userGetCurrent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userGetCurrentQueryKey(options),
  });
};

export const userUpdatePasswordQueryKey = (options?: Options<UserUpdatePasswordData>) =>
  createQueryKey("userUpdatePassword", options);

export const userUpdatePasswordOptions = (options?: Options<UserUpdatePasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdatePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdatePasswordQueryKey(options),
  });
};

export const userUpdatePasswordMutation = (options?: Partial<Options<UserUpdatePasswordData>>) => {
  const mutationOptions: UseMutationOptions<
    UserUpdatePasswordResponse,
    UserUpdatePasswordError,
    Options<UserUpdatePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdatePassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userCreateQueryKey = (options?: Options<UserCreateData>) =>
  createQueryKey("userCreate", options);

export const userCreateOptions = (options?: Options<UserCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userCreateQueryKey(options),
  });
};

export const userCreateMutation = (options?: Partial<Options<UserCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    UserCreateResponse,
    UserCreateError,
    Options<UserCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateLogoutQueryKey = (options?: Options<UserUpdateLogoutData>) =>
  createQueryKey("userUpdateLogout", options);

export const userUpdateLogoutOptions = (options?: Options<UserUpdateLogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateLogoutQueryKey(options),
  });
};

export const userUpdateLogoutMutation = (options?: Partial<Options<UserUpdateLogoutData>>) => {
  const mutationOptions: UseMutationOptions<
    UserUpdateLogoutResponse,
    UserUpdateLogoutError,
    Options<UserUpdateLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdateLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantMembershipsListQueryKey = (options?: Options<TenantMembershipsListData>) =>
  createQueryKey("tenantMembershipsList", options);

export const tenantMembershipsListOptions = (options?: Options<TenantMembershipsListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantMembershipsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantMembershipsListQueryKey(options),
  });
};

export const userListTenantInvitesQueryKey = (options?: Options<UserListTenantInvitesData>) =>
  createQueryKey("userListTenantInvites", options);

export const userListTenantInvitesOptions = (options?: Options<UserListTenantInvitesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userListTenantInvites({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userListTenantInvitesQueryKey(options),
  });
};

export const tenantInviteAcceptQueryKey = (options?: Options<TenantInviteAcceptData>) =>
  createQueryKey("tenantInviteAccept", options);

export const tenantInviteAcceptOptions = (options?: Options<TenantInviteAcceptData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteAccept({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteAcceptQueryKey(options),
  });
};

export const tenantInviteAcceptMutation = (options?: Partial<Options<TenantInviteAcceptData>>) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    TenantInviteAcceptError,
    Options<TenantInviteAcceptData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteAccept({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteRejectQueryKey = (options?: Options<TenantInviteRejectData>) =>
  createQueryKey("tenantInviteReject", options);

export const tenantInviteRejectOptions = (options?: Options<TenantInviteRejectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteReject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteRejectQueryKey(options),
  });
};

export const tenantInviteRejectMutation = (options?: Partial<Options<TenantInviteRejectData>>) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    TenantInviteRejectError,
    Options<TenantInviteRejectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteReject({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantCreateQueryKey = (options: Options<TenantCreateData>) =>
  createQueryKey("tenantCreate", options);

export const tenantCreateOptions = (options: Options<TenantCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantCreateQueryKey(options),
  });
};

export const tenantCreateMutation = (options?: Partial<Options<TenantCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    TenantCreateResponse,
    TenantCreateError,
    Options<TenantCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantUpdateMutation = (options?: Partial<Options<TenantUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    TenantUpdateResponse,
    TenantUpdateError,
    Options<TenantUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantAlertingSettingsGetQueryKey = (
  options: Options<TenantAlertingSettingsGetData>,
) => createQueryKey("tenantAlertingSettingsGet", options);

export const tenantAlertingSettingsGetOptions = (
  options: Options<TenantAlertingSettingsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantAlertingSettingsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantAlertingSettingsGetQueryKey(options),
  });
};

export const tenantInviteListQueryKey = (options: Options<TenantInviteListData>) =>
  createQueryKey("tenantInviteList", options);

export const tenantInviteListOptions = (options: Options<TenantInviteListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteListQueryKey(options),
  });
};

export const tenantInviteCreateQueryKey = (options: Options<TenantInviteCreateData>) =>
  createQueryKey("tenantInviteCreate", options);

export const tenantInviteCreateOptions = (options: Options<TenantInviteCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteCreateQueryKey(options),
  });
};

export const tenantInviteCreateMutation = (options?: Partial<Options<TenantInviteCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteCreateResponse,
    TenantInviteCreateError,
    Options<TenantInviteCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteDeleteMutation = (options?: Partial<Options<TenantInviteDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteDeleteResponse,
    TenantInviteDeleteError,
    Options<TenantInviteDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteUpdateMutation = (options?: Partial<Options<TenantInviteUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteUpdateResponse,
    TenantInviteUpdateError,
    Options<TenantInviteUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiTokenListQueryKey = (options: Options<ApiTokenListData>) =>
  createQueryKey("apiTokenList", options);

export const apiTokenListOptions = (options: Options<ApiTokenListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenListQueryKey(options),
  });
};

export const apiTokenCreateQueryKey = (options: Options<ApiTokenCreateData>) =>
  createQueryKey("apiTokenCreate", options);

export const apiTokenCreateOptions = (options: Options<ApiTokenCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenCreateQueryKey(options),
  });
};

export const apiTokenCreateMutation = (options?: Partial<Options<ApiTokenCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    ApiTokenCreateResponse,
    ApiTokenCreateError,
    Options<ApiTokenCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiTokenCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiTokenUpdateRevokeQueryKey = (options: Options<ApiTokenUpdateRevokeData>) =>
  createQueryKey("apiTokenUpdateRevoke", options);

export const apiTokenUpdateRevokeOptions = (options: Options<ApiTokenUpdateRevokeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenUpdateRevoke({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenUpdateRevokeQueryKey(options),
  });
};

export const apiTokenUpdateRevokeMutation = (
  options?: Partial<Options<ApiTokenUpdateRevokeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiTokenUpdateRevokeResponse,
    ApiTokenUpdateRevokeError,
    Options<ApiTokenUpdateRevokeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiTokenUpdateRevoke({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantMemberListQueryKey = (options: Options<TenantMemberListData>) =>
  createQueryKey("tenantMemberList", options);

export const tenantMemberListOptions = (options: Options<TenantMemberListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantMemberList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantMemberListQueryKey(options),
  });
};

export const tenantMemberDeleteMutation = (options?: Partial<Options<TenantMemberDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    TenantMemberDeleteResponse,
    TenantMemberDeleteError,
    Options<TenantMemberDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantMemberDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const monitoringPostRunProbeQueryKey = (options: Options<MonitoringPostRunProbeData>) =>
  createQueryKey("monitoringPostRunProbe", options);

export const monitoringPostRunProbeOptions = (options: Options<MonitoringPostRunProbeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await monitoringPostRunProbe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: monitoringPostRunProbeQueryKey(options),
  });
};

export const monitoringPostRunProbeMutation = (
  options?: Partial<Options<MonitoringPostRunProbeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    MonitoringPostRunProbeError,
    Options<MonitoringPostRunProbeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await monitoringPostRunProbe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const infoGetVersionQueryKey = (options?: Options<InfoGetVersionData>) =>
  createQueryKey("infoGetVersion", options);

export const infoGetVersionOptions = (options?: Options<InfoGetVersionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await infoGetVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: infoGetVersionQueryKey(options),
  });
};

export const eventPushQueryKey = (options: Options<EventPushData>) =>
  createQueryKey("eventPush", options);

export const eventPushOptions = (options: Options<EventPushData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventPush({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventPushQueryKey(options),
  });
};

export const eventPushMutation = (options?: Partial<Options<EventPushData>>) => {
  const mutationOptions: UseMutationOptions<
    EventPushResponse,
    EventPushError,
    Options<EventPushData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventPush({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteListQueryKey = (options: Options<SiteListData>) =>
  createQueryKey("siteList", options);

export const siteListOptions = (options: Options<SiteListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteListQueryKey(options),
  });
};

export const siteCreateQueryKey = (options: Options<SiteCreateData>) =>
  createQueryKey("siteCreate", options);

export const siteCreateOptions = (options: Options<SiteCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteCreateQueryKey(options),
  });
};

export const siteCreateMutation = (options?: Partial<Options<SiteCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    SiteCreateResponse,
    SiteCreateError,
    Options<SiteCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteGetQueryKey = (options: Options<SiteGetData>) =>
  createQueryKey("siteGet", options);

export const siteGetOptions = (options: Options<SiteGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteGetQueryKey(options),
  });
};

export const siteUpdateMutation = (options?: Partial<Options<SiteUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    SiteUpdateResponse,
    SiteUpdateError,
    Options<SiteUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteGetByHostQueryKey = (options: Options<SiteGetByHostData>) =>
  createQueryKey("siteGetByHost", options);

export const siteGetByHostOptions = (options: Options<SiteGetByHostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteGetByHost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteGetByHostQueryKey(options),
  });
};

export const siteHostListQueryKey = (options: Options<SiteHostListData>) =>
  createQueryKey("siteHostList", options);

export const siteHostListOptions = (options: Options<SiteHostListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteHostList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteHostListQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const siteHostListInfiniteQueryKey = (
  options: Options<SiteHostListData>,
): QueryKey<Options<SiteHostListData>> => createQueryKey("siteHostList", options, true);

export const siteHostListInfiniteOptions = (options: Options<SiteHostListData>) => {
  return infiniteQueryOptions<
    SiteHostListResponse,
    SiteHostListError,
    InfiniteData<SiteHostListResponse>,
    QueryKey<Options<SiteHostListData>>,
    number | Pick<QueryKey<Options<SiteHostListData>>[0], "body" | "headers" | "path" | "query">
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<SiteHostListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await siteHostList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: siteHostListInfiniteQueryKey(options),
    },
  );
};

export const siteHostCreateQueryKey = (options: Options<SiteHostCreateData>) =>
  createQueryKey("siteHostCreate", options);

export const siteHostCreateOptions = (options: Options<SiteHostCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteHostCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteHostCreateQueryKey(options),
  });
};

export const siteHostCreateMutation = (options?: Partial<Options<SiteHostCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    SiteHostCreateResponse,
    SiteHostCreateError,
    Options<SiteHostCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteHostCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteHostGetQueryKey = (options: Options<SiteHostGetData>) =>
  createQueryKey("siteHostGet", options);

export const siteHostGetOptions = (options: Options<SiteHostGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteHostGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteHostGetQueryKey(options),
  });
};

export const siteHostUpdateMutation = (options?: Partial<Options<SiteHostUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    SiteHostUpdateResponse,
    SiteHostUpdateError,
    Options<SiteHostUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteHostUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const frontendGetConfigQueryKey = (options?: Options<FrontendGetConfigData>) =>
  createQueryKey("frontendGetConfig", options);

export const frontendGetConfigOptions = (options?: Options<FrontendGetConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await frontendGetConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: frontendGetConfigQueryKey(options),
  });
};

export const frontendGetSiderbarQueryKey = (options?: Options<FrontendGetSiderbarData>) =>
  createQueryKey("frontendGetSiderbar", options);

export const frontendGetSiderbarOptions = (options?: Options<FrontendGetSiderbarData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await frontendGetSiderbar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: frontendGetSiderbarQueryKey(options),
  });
};

export const endpointListQueryKey = (options?: Options<EndpointListData>) =>
  createQueryKey("endpointList", options);

export const endpointListOptions = (options?: Options<EndpointListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await endpointList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: endpointListQueryKey(options),
  });
};

export const endpointUpdateMutation = (options?: Partial<Options<EndpointUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    EndpointUpdateResponse,
    EndpointUpdateError,
    Options<EndpointUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await endpointUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const mtworkerGetTasksQueryKey = (options?: Options<MtworkerGetTasksData>) =>
  createQueryKey("mtworkerGetTasks", options);

export const mtworkerGetTasksOptions = (options?: Options<MtworkerGetTasksData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await mtworkerGetTasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: mtworkerGetTasksQueryKey(options),
  });
};

export const proxyListQueryKey = (options: Options<ProxyListData>) =>
  createQueryKey("proxyList", options);

export const proxyListOptions = (options: Options<ProxyListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyListQueryKey(options),
  });
};

export const proxyListInfiniteQueryKey = (
  options: Options<ProxyListData>,
): QueryKey<Options<ProxyListData>> => createQueryKey("proxyList", options, true);

export const proxyListInfiniteOptions = (options: Options<ProxyListData>) => {
  return infiniteQueryOptions<
    ProxyListResponse,
    ProxyListError,
    InfiniteData<ProxyListResponse>,
    QueryKey<Options<ProxyListData>>,
    number | Pick<QueryKey<Options<ProxyListData>>[0], "body" | "headers" | "path" | "query">
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<ProxyListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await proxyList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: proxyListInfiniteQueryKey(options),
    },
  );
};

export const proxyGetQueryKey = (options: Options<ProxyGetData>) =>
  createQueryKey("proxyGet", options);

export const proxyGetOptions = (options: Options<ProxyGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyGetQueryKey(options),
  });
};

export const proxyCreateQueryKey = (options: Options<ProxyCreateData>) =>
  createQueryKey("proxyCreate", options);

export const proxyCreateOptions = (options: Options<ProxyCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyCreateQueryKey(options),
  });
};

export const proxyCreateMutation = (options?: Partial<Options<ProxyCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    ProxyCreateResponse,
    ProxyCreateError,
    Options<ProxyCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyUpdateQueryKey = (options: Options<ProxyUpdateData>) =>
  createQueryKey("proxyUpdate", options);

export const proxyUpdateOptions = (options: Options<ProxyUpdateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyUpdate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyUpdateQueryKey(options),
  });
};

export const proxyUpdateMutation = (options?: Partial<Options<ProxyUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    ProxyUpdateResponse,
    ProxyUpdateError,
    Options<ProxyUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyDeleteQueryKey = (options: Options<ProxyDeleteData>) =>
  createQueryKey("proxyDelete", options);

export const proxyDeleteOptions = (options: Options<ProxyDeleteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyDelete({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyDeleteQueryKey(options),
  });
};

export const proxyDeleteMutation = (options?: Partial<Options<ProxyDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    ProxyDeleteResponse,
    ProxyDeleteError,
    Options<ProxyDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postListPublicQueryKey = (options?: Options<PostListPublicData>) =>
  createQueryKey("postListPublic", options);

export const postListPublicOptions = (options?: Options<PostListPublicData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postListPublic({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postListPublicQueryKey(options),
  });
};

export const postGetQueryKey = (options: Options<PostGetData>) =>
  createQueryKey("postGet", options);

export const postGetOptions = (options: Options<PostGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGetQueryKey(options),
  });
};

export const postListQueryKey = (options: Options<PostListData>) =>
  createQueryKey("postList", options);

export const postListOptions = (options: Options<PostListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postListQueryKey(options),
  });
};

export const postCreateQueryKey = (options: Options<PostCreateData>) =>
  createQueryKey("postCreate", options);

export const postCreateOptions = (options: Options<PostCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCreateQueryKey(options),
  });
};

export const postCreateMutation = (options?: Partial<Options<PostCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    PostCreateResponse,
    PostCreateError,
    Options<PostCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const artifactListQueryKey = (options: Options<ArtifactListData>) =>
  createQueryKey("artifactList", options);

export const artifactListOptions = (options: Options<ArtifactListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactListQueryKey(options),
  });
};

export const artifactGetQueryKey = (options: Options<ArtifactGetData>) =>
  createQueryKey("artifactGet", options);

export const artifactGetOptions = (options: Options<ArtifactGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactGetQueryKey(options),
  });
};

export const artifactSaveQueryKey = (options: Options<ArtifactSaveData>) =>
  createQueryKey("artifactSave", options);

export const artifactSaveOptions = (options: Options<ArtifactSaveData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactSave({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactSaveQueryKey(options),
  });
};

export const artifactSaveMutation = (options?: Partial<Options<ArtifactSaveData>>) => {
  const mutationOptions: UseMutationOptions<
    ArtifactSaveResponse,
    ArtifactSaveError,
    Options<ArtifactSaveData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await artifactSave({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const sandboxGetQueryKey = (options?: Options<SandboxGetData>) =>
  createQueryKey("sandboxGet", options);

export const sandboxGetOptions = (options?: Options<SandboxGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sandboxGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sandboxGetQueryKey(options),
  });
};

export const scriptsByNameQueryKey = (options: Options<ScriptsByNameData>) =>
  createQueryKey("scriptsByName", options);

export const scriptsByNameOptions = (options: Options<ScriptsByNameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await scriptsByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: scriptsByNameQueryKey(options),
  });
};

export const singboxGetWorkerProfileQueryKey = (options: Options<SingboxGetWorkerProfileData>) =>
  createQueryKey("singboxGetWorkerProfile", options);

export const singboxGetWorkerProfileOptions = (options: Options<SingboxGetWorkerProfileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxGetWorkerProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxGetWorkerProfileQueryKey(options),
  });
};

export const singboxSubscribeQueryKey = (options?: Options<SingboxSubscribeData>) =>
  createQueryKey("singboxSubscribe", options);

export const singboxSubscribeOptions = (options?: Options<SingboxSubscribeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxSubscribe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxSubscribeQueryKey(options),
  });
};

export const singboxGeoipCnSrsQueryKey = (options: Options<SingboxGeoipCnSrsData>) =>
  createQueryKey("singboxGeoipCnSrs", options);

export const singboxGeoipCnSrsOptions = (options: Options<SingboxGeoipCnSrsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxGeoipCnSrs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxGeoipCnSrsQueryKey(options),
  });
};

export const singboxGetOutboundsQueryKey = (options?: Options<SingboxGetOutboundsData>) =>
  createQueryKey("singboxGetOutbounds", options);

export const singboxGetOutboundsOptions = (options?: Options<SingboxGetOutboundsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxGetOutbounds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxGetOutboundsQueryKey(options),
  });
};

export const singboxCreateOutboundQueryKey = (options?: Options<SingboxCreateOutboundData>) =>
  createQueryKey("singboxCreateOutbound", options);

export const singboxCreateOutboundOptions = (options?: Options<SingboxCreateOutboundData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxCreateOutbound({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxCreateOutboundQueryKey(options),
  });
};

export const singboxCreateOutboundMutation = (
  options?: Partial<Options<SingboxCreateOutboundData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SingboxCreateOutboundResponse,
    SingboxCreateOutboundError,
    Options<SingboxCreateOutboundData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await singboxCreateOutbound({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const singboxDeleteOutboundMutation = (
  options?: Partial<Options<SingboxDeleteOutboundData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SingboxDeleteOutboundResponse,
    SingboxDeleteOutboundError,
    Options<SingboxDeleteOutboundData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await singboxDeleteOutbound({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const singboxGetOutboundQueryKey = (options: Options<SingboxGetOutboundData>) =>
  createQueryKey("singboxGetOutbound", options);

export const singboxGetOutboundOptions = (options: Options<SingboxGetOutboundData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxGetOutbound({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxGetOutboundQueryKey(options),
  });
};

export const singboxUpdateOutboundMutation = (
  options?: Partial<Options<SingboxUpdateOutboundData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SingboxUpdateOutboundResponse,
    SingboxUpdateOutboundError,
    Options<SingboxUpdateOutboundData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await singboxUpdateOutbound({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const singboxImportOutboundsQueryKey = (options?: Options<SingboxImportOutboundsData>) =>
  createQueryKey("singboxImportOutbounds", options);

export const singboxImportOutboundsOptions = (options?: Options<SingboxImportOutboundsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await singboxImportOutbounds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: singboxImportOutboundsQueryKey(options),
  });
};

export const singboxImportOutboundsMutation = (
  options?: Partial<Options<SingboxImportOutboundsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SingboxImportOutboundsResponse,
    SingboxImportOutboundsError,
    Options<SingboxImportOutboundsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await singboxImportOutbounds({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const botListQueryKey = (options?: Options<BotListData>) =>
  createQueryKey("botList", options);

export const botListOptions = (options?: Options<BotListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await botList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: botListQueryKey(options),
  });
};

export const botGetQueryKey = (options: Options<BotGetData>) => createQueryKey("botGet", options);

export const botGetOptions = (options: Options<BotGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await botGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: botGetQueryKey(options),
  });
};

export const botHeartbeatQueryKey = (options?: Options<BotHeartbeatData>) =>
  createQueryKey("botHeartbeat", options);

export const botHeartbeatOptions = (options?: Options<BotHeartbeatData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await botHeartbeat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: botHeartbeatQueryKey(options),
  });
};

export const botHeartbeatMutation = (options?: Partial<Options<BotHeartbeatData>>) => {
  const mutationOptions: UseMutationOptions<
    BotHeartbeatResponse,
    BotHeartbeatError,
    Options<BotHeartbeatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await botHeartbeat({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformListQueryKey = (options: Options<PlatformListData>) =>
  createQueryKey("platformList", options);

export const platformListOptions = (options: Options<PlatformListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformListQueryKey(options),
  });
};

export const platformListInfiniteQueryKey = (
  options: Options<PlatformListData>,
): QueryKey<Options<PlatformListData>> => createQueryKey("platformList", options, true);

export const platformListInfiniteOptions = (options: Options<PlatformListData>) => {
  return infiniteQueryOptions<
    PlatformListResponse,
    PlatformListError,
    InfiniteData<PlatformListResponse>,
    QueryKey<Options<PlatformListData>>,
    number | Pick<QueryKey<Options<PlatformListData>>[0], "body" | "headers" | "path" | "query">
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<PlatformListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await platformList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: platformListInfiniteQueryKey(options),
    },
  );
};

export const platformGetQueryKey = (options: Options<PlatformGetData>) =>
  createQueryKey("platformGet", options);

export const platformGetOptions = (options: Options<PlatformGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformGetQueryKey(options),
  });
};

export const platformCreateQueryKey = (options: Options<PlatformCreateData>) =>
  createQueryKey("platformCreate", options);

export const platformCreateOptions = (options: Options<PlatformCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await platformCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: platformCreateQueryKey(options),
  });
};

export const platformCreateMutation = (options?: Partial<Options<PlatformCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    PlatformCreateResponse,
    PlatformCreateError,
    Options<PlatformCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformUpdateMutation = (options?: Partial<Options<PlatformUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    PlatformUpdateResponse,
    PlatformUpdateError,
    Options<PlatformUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const platformDeleteMutation = (options?: Partial<Options<PlatformDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    PlatformDeleteResponse,
    PlatformDeleteError,
    Options<PlatformDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await platformDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const pAccountCreateQueryKey = (options: Options<PAccountCreateData>) =>
  createQueryKey("pAccountCreate", options);

export const pAccountCreateOptions = (options: Options<PAccountCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pAccountCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: pAccountCreateQueryKey(options),
  });
};

export const pAccountCreateMutation = (options?: Partial<Options<PAccountCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    PAccountCreateResponse,
    PAccountCreateError,
    Options<PAccountCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pAccountCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const pAccountListQueryKey = (options: Options<PAccountListData>) =>
  createQueryKey("pAccountList", options);

export const pAccountListOptions = (options: Options<PAccountListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pAccountList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: pAccountListQueryKey(options),
  });
};

export const pAccountListInfiniteQueryKey = (
  options: Options<PAccountListData>,
): QueryKey<Options<PAccountListData>> => createQueryKey("pAccountList", options, true);

export const pAccountListInfiniteOptions = (options: Options<PAccountListData>) => {
  return infiniteQueryOptions<
    PAccountListResponse,
    PAccountListError,
    InfiniteData<PAccountListResponse>,
    QueryKey<Options<PAccountListData>>,
    number | Pick<QueryKey<Options<PAccountListData>>[0], "body" | "headers" | "path" | "query">
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<PAccountListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await pAccountList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: pAccountListInfiniteQueryKey(options),
    },
  );
};

export const pAccountGetQueryKey = (options: Options<PAccountGetData>) =>
  createQueryKey("pAccountGet", options);

export const pAccountGetOptions = (options: Options<PAccountGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pAccountGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: pAccountGetQueryKey(options),
  });
};

export const pAccountUpdateMutation = (options?: Partial<Options<PAccountUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    PAccountUpdateResponse,
    PAccountUpdateError,
    Options<PAccountUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pAccountUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const pAccountDeleteMutation = (options?: Partial<Options<PAccountDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    PAccountDeleteResponse,
    PAccountDeleteError,
    Options<PAccountDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pAccountDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const albumListQueryKey = (options: Options<AlbumListData>) =>
  createQueryKey("albumList", options);

export const albumListOptions = (options: Options<AlbumListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await albumList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: albumListQueryKey(options),
  });
};

export const albumCreateQueryKey = (options: Options<AlbumCreateData>) =>
  createQueryKey("albumCreate", options);

export const albumCreateOptions = (options: Options<AlbumCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await albumCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: albumCreateQueryKey(options),
  });
};

export const albumCreateMutation = (options?: Partial<Options<AlbumCreateData>>) => {
  const mutationOptions: UseMutationOptions<
    AlbumCreateResponse,
    AlbumCreateError,
    Options<AlbumCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await albumCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const albumDeleteMutation = (options?: Partial<Options<AlbumDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    AlbumDeleteResponse,
    AlbumDeleteError,
    Options<AlbumDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await albumDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const albumGetQueryKey = (options: Options<AlbumGetData>) =>
  createQueryKey("albumGet", options);

export const albumGetOptions = (options: Options<AlbumGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await albumGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: albumGetQueryKey(options),
  });
};

export const albumUpdateMutation = (options?: Partial<Options<AlbumUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    AlbumUpdateResponse,
    AlbumUpdateError,
    Options<AlbumUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await albumUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const photoListQueryKey = (options: Options<PhotoListData>) =>
  createQueryKey("photoList", options);

export const photoListOptions = (options: Options<PhotoListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await photoList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: photoListQueryKey(options),
  });
};

export const photoUploadQueryKey = (options: Options<PhotoUploadData>) =>
  createQueryKey("photoUpload", options);

export const photoUploadOptions = (options: Options<PhotoUploadData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await photoUpload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: photoUploadQueryKey(options),
  });
};

export const photoUploadMutation = (options?: Partial<Options<PhotoUploadData>>) => {
  const mutationOptions: UseMutationOptions<
    PhotoUploadResponse,
    PhotoUploadError,
    Options<PhotoUploadData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await photoUpload({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const photoDeleteMutation = (options?: Partial<Options<PhotoDeleteData>>) => {
  const mutationOptions: UseMutationOptions<
    PhotoDeleteResponse,
    PhotoDeleteError,
    Options<PhotoDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await photoDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const photoGetQueryKey = (options: Options<PhotoGetData>) =>
  createQueryKey("photoGet", options);

export const photoGetOptions = (options: Options<PhotoGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await photoGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: photoGetQueryKey(options),
  });
};

export const photoUpdateMutation = (options?: Partial<Options<PhotoUpdateData>>) => {
  const mutationOptions: UseMutationOptions<
    PhotoUpdateResponse,
    PhotoUpdateError,
    Options<PhotoUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await photoUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
