// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from "@hey-api/client-fetch";
import {
  queryOptions,
  type UseMutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import {
  client,
  readinessGet,
  livenessGet,
  metadataGet,
  cloudMetadataGet,
  metadataListIntegrations,
  userUpdateLogin,
  userUpdateGoogleOauthStart,
  userUpdateGoogleOauthCallback,
  userUpdateGithubOauthStart,
  userUpdateGithubOauthCallback,
  userUpdateSlackOauthStart,
  userUpdateSlackOauthCallback,
  snsUpdate,
  snsList,
  snsCreate,
  alertEmailGroupCreate,
  alertEmailGroupList,
  tenantResourcePolicyGet,
  alertEmailGroupUpdate,
  alertEmailGroupDelete,
  snsDelete,
  slackWebhookList,
  slackWebhookDelete,
  userGetCurrent,
  userUpdatePassword,
  userCreate,
  userUpdateLogout,
  tenantMembershipsList,
  userListTenantInvites,
  tenantInviteAccept,
  tenantInviteReject,
  tenantCreate,
  tenantUpdate,
  tenantAlertingSettingsGet,
  tenantInviteCreate,
  tenantInviteList,
  tenantInviteUpdate,
  tenantInviteDelete,
  apiTokenCreate,
  apiTokenList,
  apiTokenUpdateRevoke,
  tenantGetQueueMetrics,
  tenantGetStepRunQueueMetrics,
  eventList,
  eventCreate,
  eventCreateBulk,
  eventUpdateReplay,
  eventUpdateCancel,
  rateLimitList,
  tenantMemberList,
  tenantMemberDelete,
  eventGet,
  eventDataGet,
  eventKeyList,
  workflowList,
  workflowScheduledList,
  workflowScheduledGet,
  workflowScheduledDelete,
  cronWorkflowList,
  workflowRunCancel,
  workflowGet,
  workflowDelete,
  workflowUpdate,
  workflowVersionGet,
  workflowRunCreate,
  workflowGetMetrics,
  logLineList,
  stepRunListEvents,
  workflowRunListStepRunEvents,
  stepRunListArchives,
  workflowGetWorkersCount,
  workflowRunList,
  workflowRunUpdateReplay,
  workflowRunGetMetrics,
  workflowRunGet,
  workflowRunGetShape,
  stepRunGet,
  stepRunUpdateRerun,
  stepRunUpdateCancel,
  stepRunGetSchema,
  workerList,
  workerUpdate,
  workerGet,
  webhookList,
  webhookCreate,
  webhookDelete,
  webhookRequestsList,
  workflowRunGetInput,
  workflowGetByName,
  chatChat,
  chatCallModel,
  chatMessages,
  chatModels,
  chatCompletions,
  workerConfig,
  mtmaiBloggenconfig,
  mtmaiWorkerConfig,
  blogList,
  blogCreate,
  blogGet,
  blogUpdate,
  siteList,
  siteCreate,
  siteGet,
  siteGetByHost,
  postListPublic,
  postGet,
  postList,
  postCreate,
  toolCall,
  toolsOperationGuide,
  toolsWebsearch,
  artifactList,
  artifactCreate,
  artifactGet,
  agentNodeList,
  agentCreate,
  agentNode,
  agentNodeUpdate,
  agentNodeRun,
  agentNodeForm,
  llmGet,
  docList,
  promptList,
  promptGet,
  assisantList,
  assisantGet,
  subscribeSubscribe,
  adminSeed,
  adminReleaseConn,
  frontendGetConfig,
  frontendGetSiderbar,
} from "../sdk.gen";
import type {
  UserUpdateLoginData,
  UserUpdateLoginError,
  UserUpdateLoginResponse,
  UserUpdateSlackOauthStartData,
  SnsUpdateData,
  SnsUpdateError,
  SnsUpdateResponse,
  SnsListData,
  SnsCreateData,
  SnsCreateError,
  SnsCreateResponse,
  AlertEmailGroupCreateData,
  AlertEmailGroupCreateError,
  AlertEmailGroupCreateResponse,
  AlertEmailGroupListData,
  TenantResourcePolicyGetData,
  AlertEmailGroupUpdateData,
  AlertEmailGroupUpdateError,
  AlertEmailGroupUpdateResponse,
  AlertEmailGroupDeleteData,
  AlertEmailGroupDeleteError,
  AlertEmailGroupDeleteResponse,
  SnsDeleteData,
  SnsDeleteError,
  SnsDeleteResponse,
  SlackWebhookListData,
  SlackWebhookDeleteData,
  SlackWebhookDeleteError,
  SlackWebhookDeleteResponse,
  UserUpdatePasswordData,
  UserUpdatePasswordError,
  UserUpdatePasswordResponse,
  UserCreateData,
  UserCreateError,
  UserCreateResponse,
  UserUpdateLogoutError,
  UserUpdateLogoutResponse,
  TenantInviteAcceptData,
  TenantInviteAcceptError,
  TenantInviteAcceptResponse,
  TenantInviteRejectData,
  TenantInviteRejectError,
  TenantInviteRejectResponse,
  TenantCreateData,
  TenantCreateError,
  TenantCreateResponse,
  TenantUpdateData,
  TenantUpdateError,
  TenantUpdateResponse,
  TenantAlertingSettingsGetData,
  TenantInviteCreateData,
  TenantInviteCreateError,
  TenantInviteCreateResponse,
  TenantInviteListData,
  TenantInviteUpdateData,
  TenantInviteUpdateError,
  TenantInviteUpdateResponse,
  TenantInviteDeleteData,
  TenantInviteDeleteError,
  TenantInviteDeleteResponse,
  ApiTokenCreateData,
  ApiTokenCreateError,
  ApiTokenCreateResponse,
  ApiTokenListData,
  ApiTokenUpdateRevokeData,
  ApiTokenUpdateRevokeError,
  ApiTokenUpdateRevokeResponse,
  TenantGetQueueMetricsData,
  TenantGetStepRunQueueMetricsData,
  EventListData,
  EventListError,
  EventListResponse,
  EventCreateData,
  EventCreateError,
  EventCreateResponse,
  EventCreateBulkData,
  EventCreateBulkError,
  EventCreateBulkResponse,
  EventUpdateReplayData,
  EventUpdateReplayError,
  EventUpdateReplayResponse,
  EventUpdateCancelData,
  EventUpdateCancelError,
  EventUpdateCancelResponse,
  RateLimitListData,
  RateLimitListError,
  RateLimitListResponse,
  TenantMemberListData,
  TenantMemberDeleteData,
  TenantMemberDeleteError,
  TenantMemberDeleteResponse,
  EventGetData,
  EventDataGetData,
  EventKeyListData,
  WorkflowListData,
  WorkflowScheduledListData,
  WorkflowScheduledListError,
  WorkflowScheduledListResponse,
  WorkflowScheduledGetData,
  WorkflowScheduledDeleteData,
  WorkflowScheduledDeleteError,
  WorkflowScheduledDeleteResponse,
  CronWorkflowListData,
  CronWorkflowListError,
  CronWorkflowListResponse,
  WorkflowRunCancelData,
  WorkflowRunCancelError,
  WorkflowRunCancelResponse,
  WorkflowGetData,
  WorkflowDeleteData,
  WorkflowDeleteError,
  WorkflowDeleteResponse,
  WorkflowUpdateData,
  WorkflowUpdateError,
  WorkflowUpdateResponse,
  WorkflowVersionGetData,
  WorkflowRunCreateData,
  WorkflowRunCreateError,
  WorkflowRunCreateResponse,
  WorkflowGetMetricsData,
  LogLineListData,
  LogLineListError,
  LogLineListResponse,
  StepRunListEventsData,
  StepRunListEventsError,
  StepRunListEventsResponse,
  WorkflowRunListStepRunEventsData,
  StepRunListArchivesData,
  StepRunListArchivesError,
  StepRunListArchivesResponse,
  WorkflowGetWorkersCountData,
  WorkflowRunListData,
  WorkflowRunListError,
  WorkflowRunListResponse,
  WorkflowRunUpdateReplayData,
  WorkflowRunUpdateReplayError,
  WorkflowRunUpdateReplayResponse,
  WorkflowRunGetMetricsData,
  WorkflowRunGetData,
  WorkflowRunGetShapeData,
  StepRunGetData,
  StepRunUpdateRerunData,
  StepRunUpdateRerunError,
  StepRunUpdateRerunResponse,
  StepRunUpdateCancelData,
  StepRunUpdateCancelError,
  StepRunUpdateCancelResponse,
  StepRunGetSchemaData,
  WorkerListData,
  WorkerUpdateData,
  WorkerUpdateError,
  WorkerUpdateResponse,
  WorkerGetData,
  WebhookListData,
  WebhookCreateData,
  WebhookCreateError,
  WebhookCreateResponse,
  WebhookDeleteData,
  WebhookDeleteError,
  WebhookDeleteResponse,
  WebhookRequestsListData,
  WorkflowRunGetInputData,
  WorkflowGetByNameData,
  ChatChatData,
  ChatChatError,
  ChatChatResponse,
  ChatCallModelData,
  ChatCallModelError,
  ChatCallModelResponse,
  ChatMessagesData,
  ChatModelsData,
  ChatCompletionsData,
  ChatCompletionsError,
  ChatCompletionsResponse,
  BlogListData,
  BlogCreateData,
  BlogCreateError,
  BlogCreateResponse,
  BlogGetData,
  BlogUpdateData,
  BlogUpdateError,
  BlogUpdateResponse,
  SiteListData,
  SiteCreateData,
  SiteCreateError,
  SiteCreateResponse,
  SiteGetData,
  SiteGetByHostData,
  PostListPublicData,
  PostGetData,
  PostListData,
  PostCreateData,
  PostCreateError,
  PostCreateResponse,
  ToolCallData,
  ToolCallError,
  ToolCallResponse,
  ToolsOperationGuideData,
  ToolsWebsearchData,
  ToolsWebsearchError,
  ToolsWebsearchResponse,
  ArtifactListData,
  ArtifactCreateData,
  ArtifactCreateError,
  ArtifactCreateResponse,
  ArtifactGetData,
  AgentNodeListData,
  AgentCreateData,
  AgentCreateError,
  AgentCreateResponse,
  AgentNodeData,
  AgentNodeUpdateData,
  AgentNodeUpdateError,
  AgentNodeUpdateResponse,
  AgentNodeRunData,
  AgentNodeRunError,
  AgentNodeRunResponse,
  AgentNodeFormData,
  AgentNodeFormError,
  AgentNodeFormResponse,
  LlmGetData,
  LlmGetError,
  LlmGetResponse,
  DocListData,
  PromptListData,
  PromptGetData,
  AssisantListData,
  AssisantGetData,
  SubscribeSubscribeData,
  SubscribeSubscribeError,
  SubscribeSubscribeResponse,
  AdminReleaseConnError,
  AdminReleaseConnResponse,
} from "../types.gen";

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const readinessGetQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("readinessGet", options),
];

export const readinessGetOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readinessGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readinessGetQueryKey(options),
  });
};

export const livenessGetQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("livenessGet", options),
];

export const livenessGetOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await livenessGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: livenessGetQueryKey(options),
  });
};

export const metadataGetQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("metadataGet", options),
];

export const metadataGetOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metadataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metadataGetQueryKey(options),
  });
};

export const cloudMetadataGetQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("cloudMetadataGet", options),
];

export const cloudMetadataGetOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cloudMetadataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cloudMetadataGetQueryKey(options),
  });
};

export const metadataListIntegrationsQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("metadataListIntegrations", options)];

export const metadataListIntegrationsOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metadataListIntegrations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metadataListIntegrationsQueryKey(options),
  });
};

export const userUpdateLoginQueryKey = (
  options?: OptionsLegacyParser<UserUpdateLoginData>,
) => [createQueryKey("userUpdateLogin", options)];

export const userUpdateLoginOptions = (
  options?: OptionsLegacyParser<UserUpdateLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateLoginQueryKey(options),
  });
};

export const userUpdateLoginMutation = (
  options?: Partial<OptionsLegacyParser<UserUpdateLoginData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserUpdateLoginResponse,
    UserUpdateLoginError,
    OptionsLegacyParser<UserUpdateLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdateLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateGoogleOauthStartQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("userUpdateGoogleOauthStart", options)];

export const userUpdateGoogleOauthStartOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGoogleOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGoogleOauthStartQueryKey(options),
  });
};

export const userUpdateGoogleOauthCallbackQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("userUpdateGoogleOauthCallback", options)];

export const userUpdateGoogleOauthCallbackOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGoogleOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGoogleOauthCallbackQueryKey(options),
  });
};

export const userUpdateGithubOauthStartQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("userUpdateGithubOauthStart", options)];

export const userUpdateGithubOauthStartOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGithubOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGithubOauthStartQueryKey(options),
  });
};

export const userUpdateGithubOauthCallbackQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("userUpdateGithubOauthCallback", options)];

export const userUpdateGithubOauthCallbackOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateGithubOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateGithubOauthCallbackQueryKey(options),
  });
};

export const userUpdateSlackOauthStartQueryKey = (
  options: OptionsLegacyParser<UserUpdateSlackOauthStartData>,
) => [createQueryKey("userUpdateSlackOauthStart", options)];

export const userUpdateSlackOauthStartOptions = (
  options: OptionsLegacyParser<UserUpdateSlackOauthStartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateSlackOauthStart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateSlackOauthStartQueryKey(options),
  });
};

export const userUpdateSlackOauthCallbackQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("userUpdateSlackOauthCallback", options)];

export const userUpdateSlackOauthCallbackOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateSlackOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateSlackOauthCallbackQueryKey(options),
  });
};

export const snsUpdateQueryKey = (
  options: OptionsLegacyParser<SnsUpdateData>,
) => [createQueryKey("snsUpdate", options)];

export const snsUpdateOptions = (
  options: OptionsLegacyParser<SnsUpdateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await snsUpdate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: snsUpdateQueryKey(options),
  });
};

export const snsUpdateMutation = (
  options?: Partial<OptionsLegacyParser<SnsUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SnsUpdateResponse,
    SnsUpdateError,
    OptionsLegacyParser<SnsUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await snsUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const snsListQueryKey = (options: OptionsLegacyParser<SnsListData>) => [
  createQueryKey("snsList", options),
];

export const snsListOptions = (options: OptionsLegacyParser<SnsListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await snsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: snsListQueryKey(options),
  });
};

export const snsCreateQueryKey = (
  options: OptionsLegacyParser<SnsCreateData>,
) => [createQueryKey("snsCreate", options)];

export const snsCreateOptions = (
  options: OptionsLegacyParser<SnsCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await snsCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: snsCreateQueryKey(options),
  });
};

export const snsCreateMutation = (
  options?: Partial<OptionsLegacyParser<SnsCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SnsCreateResponse,
    SnsCreateError,
    OptionsLegacyParser<SnsCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await snsCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const alertEmailGroupCreateQueryKey = (
  options: OptionsLegacyParser<AlertEmailGroupCreateData>,
) => [createQueryKey("alertEmailGroupCreate", options)];

export const alertEmailGroupCreateOptions = (
  options: OptionsLegacyParser<AlertEmailGroupCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alertEmailGroupCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alertEmailGroupCreateQueryKey(options),
  });
};

export const alertEmailGroupCreateMutation = (
  options?: Partial<OptionsLegacyParser<AlertEmailGroupCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupCreateResponse,
    AlertEmailGroupCreateError,
    OptionsLegacyParser<AlertEmailGroupCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const alertEmailGroupListQueryKey = (
  options: OptionsLegacyParser<AlertEmailGroupListData>,
) => [createQueryKey("alertEmailGroupList", options)];

export const alertEmailGroupListOptions = (
  options: OptionsLegacyParser<AlertEmailGroupListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alertEmailGroupList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alertEmailGroupListQueryKey(options),
  });
};

export const tenantResourcePolicyGetQueryKey = (
  options: OptionsLegacyParser<TenantResourcePolicyGetData>,
) => [createQueryKey("tenantResourcePolicyGet", options)];

export const tenantResourcePolicyGetOptions = (
  options: OptionsLegacyParser<TenantResourcePolicyGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantResourcePolicyGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantResourcePolicyGetQueryKey(options),
  });
};

export const alertEmailGroupUpdateMutation = (
  options?: Partial<OptionsLegacyParser<AlertEmailGroupUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupUpdateResponse,
    AlertEmailGroupUpdateError,
    OptionsLegacyParser<AlertEmailGroupUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const alertEmailGroupDeleteMutation = (
  options?: Partial<OptionsLegacyParser<AlertEmailGroupDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AlertEmailGroupDeleteResponse,
    AlertEmailGroupDeleteError,
    OptionsLegacyParser<AlertEmailGroupDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await alertEmailGroupDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const snsDeleteMutation = (
  options?: Partial<OptionsLegacyParser<SnsDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SnsDeleteResponse,
    SnsDeleteError,
    OptionsLegacyParser<SnsDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await snsDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const slackWebhookListQueryKey = (
  options: OptionsLegacyParser<SlackWebhookListData>,
) => [createQueryKey("slackWebhookList", options)];

export const slackWebhookListOptions = (
  options: OptionsLegacyParser<SlackWebhookListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await slackWebhookList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: slackWebhookListQueryKey(options),
  });
};

export const slackWebhookDeleteMutation = (
  options?: Partial<OptionsLegacyParser<SlackWebhookDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SlackWebhookDeleteResponse,
    SlackWebhookDeleteError,
    OptionsLegacyParser<SlackWebhookDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await slackWebhookDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userGetCurrentQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("userGetCurrent", options),
];

export const userGetCurrentOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userGetCurrent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userGetCurrentQueryKey(options),
  });
};

export const userUpdatePasswordQueryKey = (
  options?: OptionsLegacyParser<UserUpdatePasswordData>,
) => [createQueryKey("userUpdatePassword", options)];

export const userUpdatePasswordOptions = (
  options?: OptionsLegacyParser<UserUpdatePasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdatePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdatePasswordQueryKey(options),
  });
};

export const userUpdatePasswordMutation = (
  options?: Partial<OptionsLegacyParser<UserUpdatePasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserUpdatePasswordResponse,
    UserUpdatePasswordError,
    OptionsLegacyParser<UserUpdatePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdatePassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userCreateQueryKey = (
  options?: OptionsLegacyParser<UserCreateData>,
) => [createQueryKey("userCreate", options)];

export const userCreateOptions = (
  options?: OptionsLegacyParser<UserCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userCreateQueryKey(options),
  });
};

export const userCreateMutation = (
  options?: Partial<OptionsLegacyParser<UserCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UserCreateResponse,
    UserCreateError,
    OptionsLegacyParser<UserCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateLogoutQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("userUpdateLogout", options),
];

export const userUpdateLogoutOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userUpdateLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userUpdateLogoutQueryKey(options),
  });
};

export const userUpdateLogoutMutation = (
  options?: Partial<OptionsLegacyParser>,
) => {
  const mutationOptions: UseMutationOptions<
    UserUpdateLogoutResponse,
    UserUpdateLogoutError,
    OptionsLegacyParser
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdateLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantMembershipsListQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("tenantMembershipsList", options)];

export const tenantMembershipsListOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantMembershipsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantMembershipsListQueryKey(options),
  });
};

export const userListTenantInvitesQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("userListTenantInvites", options)];

export const userListTenantInvitesOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userListTenantInvites({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userListTenantInvitesQueryKey(options),
  });
};

export const tenantInviteAcceptQueryKey = (
  options?: OptionsLegacyParser<TenantInviteAcceptData>,
) => [createQueryKey("tenantInviteAccept", options)];

export const tenantInviteAcceptOptions = (
  options?: OptionsLegacyParser<TenantInviteAcceptData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteAccept({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteAcceptQueryKey(options),
  });
};

export const tenantInviteAcceptMutation = (
  options?: Partial<OptionsLegacyParser<TenantInviteAcceptData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteAcceptResponse,
    TenantInviteAcceptError,
    OptionsLegacyParser<TenantInviteAcceptData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteAccept({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteRejectQueryKey = (
  options?: OptionsLegacyParser<TenantInviteRejectData>,
) => [createQueryKey("tenantInviteReject", options)];

export const tenantInviteRejectOptions = (
  options?: OptionsLegacyParser<TenantInviteRejectData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteReject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteRejectQueryKey(options),
  });
};

export const tenantInviteRejectMutation = (
  options?: Partial<OptionsLegacyParser<TenantInviteRejectData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteRejectResponse,
    TenantInviteRejectError,
    OptionsLegacyParser<TenantInviteRejectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteReject({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantCreateQueryKey = (
  options: OptionsLegacyParser<TenantCreateData>,
) => [createQueryKey("tenantCreate", options)];

export const tenantCreateOptions = (
  options: OptionsLegacyParser<TenantCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantCreateQueryKey(options),
  });
};

export const tenantCreateMutation = (
  options?: Partial<OptionsLegacyParser<TenantCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantCreateResponse,
    TenantCreateError,
    OptionsLegacyParser<TenantCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantUpdateMutation = (
  options?: Partial<OptionsLegacyParser<TenantUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantUpdateResponse,
    TenantUpdateError,
    OptionsLegacyParser<TenantUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantAlertingSettingsGetQueryKey = (
  options: OptionsLegacyParser<TenantAlertingSettingsGetData>,
) => [createQueryKey("tenantAlertingSettingsGet", options)];

export const tenantAlertingSettingsGetOptions = (
  options: OptionsLegacyParser<TenantAlertingSettingsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantAlertingSettingsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantAlertingSettingsGetQueryKey(options),
  });
};

export const tenantInviteCreateQueryKey = (
  options: OptionsLegacyParser<TenantInviteCreateData>,
) => [createQueryKey("tenantInviteCreate", options)];

export const tenantInviteCreateOptions = (
  options: OptionsLegacyParser<TenantInviteCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteCreateQueryKey(options),
  });
};

export const tenantInviteCreateMutation = (
  options?: Partial<OptionsLegacyParser<TenantInviteCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteCreateResponse,
    TenantInviteCreateError,
    OptionsLegacyParser<TenantInviteCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteListQueryKey = (
  options: OptionsLegacyParser<TenantInviteListData>,
) => [createQueryKey("tenantInviteList", options)];

export const tenantInviteListOptions = (
  options: OptionsLegacyParser<TenantInviteListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantInviteList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantInviteListQueryKey(options),
  });
};

export const tenantInviteUpdateMutation = (
  options?: Partial<OptionsLegacyParser<TenantInviteUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteUpdateResponse,
    TenantInviteUpdateError,
    OptionsLegacyParser<TenantInviteUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantInviteDeleteMutation = (
  options?: Partial<OptionsLegacyParser<TenantInviteDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantInviteDeleteResponse,
    TenantInviteDeleteError,
    OptionsLegacyParser<TenantInviteDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantInviteDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiTokenCreateQueryKey = (
  options: OptionsLegacyParser<ApiTokenCreateData>,
) => [createQueryKey("apiTokenCreate", options)];

export const apiTokenCreateOptions = (
  options: OptionsLegacyParser<ApiTokenCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenCreateQueryKey(options),
  });
};

export const apiTokenCreateMutation = (
  options?: Partial<OptionsLegacyParser<ApiTokenCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiTokenCreateResponse,
    ApiTokenCreateError,
    OptionsLegacyParser<ApiTokenCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiTokenCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiTokenListQueryKey = (
  options: OptionsLegacyParser<ApiTokenListData>,
) => [createQueryKey("apiTokenList", options)];

export const apiTokenListOptions = (
  options: OptionsLegacyParser<ApiTokenListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenListQueryKey(options),
  });
};

export const apiTokenUpdateRevokeQueryKey = (
  options: OptionsLegacyParser<ApiTokenUpdateRevokeData>,
) => [createQueryKey("apiTokenUpdateRevoke", options)];

export const apiTokenUpdateRevokeOptions = (
  options: OptionsLegacyParser<ApiTokenUpdateRevokeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiTokenUpdateRevoke({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiTokenUpdateRevokeQueryKey(options),
  });
};

export const apiTokenUpdateRevokeMutation = (
  options?: Partial<OptionsLegacyParser<ApiTokenUpdateRevokeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ApiTokenUpdateRevokeResponse,
    ApiTokenUpdateRevokeError,
    OptionsLegacyParser<ApiTokenUpdateRevokeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiTokenUpdateRevoke({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tenantGetQueueMetricsQueryKey = (
  options: OptionsLegacyParser<TenantGetQueueMetricsData>,
) => [createQueryKey("tenantGetQueueMetrics", options)];

export const tenantGetQueueMetricsOptions = (
  options: OptionsLegacyParser<TenantGetQueueMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantGetQueueMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantGetQueueMetricsQueryKey(options),
  });
};

export const tenantGetStepRunQueueMetricsQueryKey = (
  options: OptionsLegacyParser<TenantGetStepRunQueueMetricsData>,
) => [createQueryKey("tenantGetStepRunQueueMetrics", options)];

export const tenantGetStepRunQueueMetricsOptions = (
  options: OptionsLegacyParser<TenantGetStepRunQueueMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantGetStepRunQueueMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantGetStepRunQueueMetricsQueryKey(options),
  });
};

export const eventListQueryKey = (
  options: OptionsLegacyParser<EventListData>,
) => [createQueryKey("eventList", options)];

export const eventListOptions = (
  options: OptionsLegacyParser<EventListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventListQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<
    QueryKey<OptionsLegacyParser>[0],
    "body" | "headers" | "path" | "query"
  >,
>(
  queryKey: QueryKey<OptionsLegacyParser>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path,
    };
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query,
    };
  }
  return params as unknown as typeof page;
};

export const eventListInfiniteQueryKey = (
  options: OptionsLegacyParser<EventListData>,
): QueryKey<OptionsLegacyParser<EventListData>> => [
  createQueryKey("eventList", options, true),
];

export const eventListInfiniteOptions = (
  options: OptionsLegacyParser<EventListData>,
) => {
  return infiniteQueryOptions<
    EventListResponse,
    EventListError,
    InfiniteData<EventListResponse>,
    QueryKey<OptionsLegacyParser<EventListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<EventListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<EventListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await eventList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: eventListInfiniteQueryKey(options),
    },
  );
};

export const eventCreateQueryKey = (
  options: OptionsLegacyParser<EventCreateData>,
) => [createQueryKey("eventCreate", options)];

export const eventCreateOptions = (
  options: OptionsLegacyParser<EventCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventCreateQueryKey(options),
  });
};

export const eventCreateMutation = (
  options?: Partial<OptionsLegacyParser<EventCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventCreateResponse,
    EventCreateError,
    OptionsLegacyParser<EventCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventCreateBulkQueryKey = (
  options: OptionsLegacyParser<EventCreateBulkData>,
) => [createQueryKey("eventCreateBulk", options)];

export const eventCreateBulkOptions = (
  options: OptionsLegacyParser<EventCreateBulkData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventCreateBulk({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventCreateBulkQueryKey(options),
  });
};

export const eventCreateBulkMutation = (
  options?: Partial<OptionsLegacyParser<EventCreateBulkData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventCreateBulkResponse,
    EventCreateBulkError,
    OptionsLegacyParser<EventCreateBulkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventCreateBulk({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventUpdateReplayQueryKey = (
  options: OptionsLegacyParser<EventUpdateReplayData>,
) => [createQueryKey("eventUpdateReplay", options)];

export const eventUpdateReplayOptions = (
  options: OptionsLegacyParser<EventUpdateReplayData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventUpdateReplay({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventUpdateReplayQueryKey(options),
  });
};

export const eventUpdateReplayMutation = (
  options?: Partial<OptionsLegacyParser<EventUpdateReplayData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventUpdateReplayResponse,
    EventUpdateReplayError,
    OptionsLegacyParser<EventUpdateReplayData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventUpdateReplay({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventUpdateCancelQueryKey = (
  options: OptionsLegacyParser<EventUpdateCancelData>,
) => [createQueryKey("eventUpdateCancel", options)];

export const eventUpdateCancelOptions = (
  options: OptionsLegacyParser<EventUpdateCancelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventUpdateCancel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventUpdateCancelQueryKey(options),
  });
};

export const eventUpdateCancelMutation = (
  options?: Partial<OptionsLegacyParser<EventUpdateCancelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    EventUpdateCancelResponse,
    EventUpdateCancelError,
    OptionsLegacyParser<EventUpdateCancelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await eventUpdateCancel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const rateLimitListQueryKey = (
  options: OptionsLegacyParser<RateLimitListData>,
) => [createQueryKey("rateLimitList", options)];

export const rateLimitListOptions = (
  options: OptionsLegacyParser<RateLimitListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rateLimitList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rateLimitListQueryKey(options),
  });
};

export const rateLimitListInfiniteQueryKey = (
  options: OptionsLegacyParser<RateLimitListData>,
): QueryKey<OptionsLegacyParser<RateLimitListData>> => [
  createQueryKey("rateLimitList", options, true),
];

export const rateLimitListInfiniteOptions = (
  options: OptionsLegacyParser<RateLimitListData>,
) => {
  return infiniteQueryOptions<
    RateLimitListResponse,
    RateLimitListError,
    InfiniteData<RateLimitListResponse>,
    QueryKey<OptionsLegacyParser<RateLimitListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<RateLimitListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<RateLimitListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await rateLimitList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: rateLimitListInfiniteQueryKey(options),
    },
  );
};

export const tenantMemberListQueryKey = (
  options: OptionsLegacyParser<TenantMemberListData>,
) => [createQueryKey("tenantMemberList", options)];

export const tenantMemberListOptions = (
  options: OptionsLegacyParser<TenantMemberListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tenantMemberList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tenantMemberListQueryKey(options),
  });
};

export const tenantMemberDeleteMutation = (
  options?: Partial<OptionsLegacyParser<TenantMemberDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TenantMemberDeleteResponse,
    TenantMemberDeleteError,
    OptionsLegacyParser<TenantMemberDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tenantMemberDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const eventGetQueryKey = (
  options: OptionsLegacyParser<EventGetData>,
) => [createQueryKey("eventGet", options)];

export const eventGetOptions = (options: OptionsLegacyParser<EventGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventGetQueryKey(options),
  });
};

export const eventDataGetQueryKey = (
  options: OptionsLegacyParser<EventDataGetData>,
) => [createQueryKey("eventDataGet", options)];

export const eventDataGetOptions = (
  options: OptionsLegacyParser<EventDataGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventDataGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventDataGetQueryKey(options),
  });
};

export const eventKeyListQueryKey = (
  options: OptionsLegacyParser<EventKeyListData>,
) => [createQueryKey("eventKeyList", options)];

export const eventKeyListOptions = (
  options: OptionsLegacyParser<EventKeyListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await eventKeyList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: eventKeyListQueryKey(options),
  });
};

export const workflowListQueryKey = (
  options: OptionsLegacyParser<WorkflowListData>,
) => [createQueryKey("workflowList", options)];

export const workflowListOptions = (
  options: OptionsLegacyParser<WorkflowListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowListQueryKey(options),
  });
};

export const workflowScheduledListQueryKey = (
  options: OptionsLegacyParser<WorkflowScheduledListData>,
) => [createQueryKey("workflowScheduledList", options)];

export const workflowScheduledListOptions = (
  options: OptionsLegacyParser<WorkflowScheduledListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowScheduledList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowScheduledListQueryKey(options),
  });
};

export const workflowScheduledListInfiniteQueryKey = (
  options: OptionsLegacyParser<WorkflowScheduledListData>,
): QueryKey<OptionsLegacyParser<WorkflowScheduledListData>> => [
  createQueryKey("workflowScheduledList", options, true),
];

export const workflowScheduledListInfiniteOptions = (
  options: OptionsLegacyParser<WorkflowScheduledListData>,
) => {
  return infiniteQueryOptions<
    WorkflowScheduledListResponse,
    WorkflowScheduledListError,
    InfiniteData<WorkflowScheduledListResponse>,
    QueryKey<OptionsLegacyParser<WorkflowScheduledListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<WorkflowScheduledListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<WorkflowScheduledListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await workflowScheduledList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: workflowScheduledListInfiniteQueryKey(options),
    },
  );
};

export const workflowScheduledGetQueryKey = (
  options: OptionsLegacyParser<WorkflowScheduledGetData>,
) => [createQueryKey("workflowScheduledGet", options)];

export const workflowScheduledGetOptions = (
  options: OptionsLegacyParser<WorkflowScheduledGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowScheduledGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowScheduledGetQueryKey(options),
  });
};

export const workflowScheduledDeleteMutation = (
  options?: Partial<OptionsLegacyParser<WorkflowScheduledDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowScheduledDeleteResponse,
    WorkflowScheduledDeleteError,
    OptionsLegacyParser<WorkflowScheduledDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowScheduledDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const cronWorkflowListQueryKey = (
  options: OptionsLegacyParser<CronWorkflowListData>,
) => [createQueryKey("cronWorkflowList", options)];

export const cronWorkflowListOptions = (
  options: OptionsLegacyParser<CronWorkflowListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cronWorkflowList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cronWorkflowListQueryKey(options),
  });
};

export const cronWorkflowListInfiniteQueryKey = (
  options: OptionsLegacyParser<CronWorkflowListData>,
): QueryKey<OptionsLegacyParser<CronWorkflowListData>> => [
  createQueryKey("cronWorkflowList", options, true),
];

export const cronWorkflowListInfiniteOptions = (
  options: OptionsLegacyParser<CronWorkflowListData>,
) => {
  return infiniteQueryOptions<
    CronWorkflowListResponse,
    CronWorkflowListError,
    InfiniteData<CronWorkflowListResponse>,
    QueryKey<OptionsLegacyParser<CronWorkflowListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<CronWorkflowListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<CronWorkflowListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await cronWorkflowList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: cronWorkflowListInfiniteQueryKey(options),
    },
  );
};

export const workflowRunCancelQueryKey = (
  options: OptionsLegacyParser<WorkflowRunCancelData>,
) => [createQueryKey("workflowRunCancel", options)];

export const workflowRunCancelOptions = (
  options: OptionsLegacyParser<WorkflowRunCancelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunCancel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunCancelQueryKey(options),
  });
};

export const workflowRunCancelMutation = (
  options?: Partial<OptionsLegacyParser<WorkflowRunCancelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowRunCancelResponse,
    WorkflowRunCancelError,
    OptionsLegacyParser<WorkflowRunCancelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowRunCancel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowGetQueryKey = (
  options: OptionsLegacyParser<WorkflowGetData>,
) => [createQueryKey("workflowGet", options)];

export const workflowGetOptions = (
  options: OptionsLegacyParser<WorkflowGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetQueryKey(options),
  });
};

export const workflowDeleteMutation = (
  options?: Partial<OptionsLegacyParser<WorkflowDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowDeleteResponse,
    WorkflowDeleteError,
    OptionsLegacyParser<WorkflowDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowUpdateMutation = (
  options?: Partial<OptionsLegacyParser<WorkflowUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowUpdateResponse,
    WorkflowUpdateError,
    OptionsLegacyParser<WorkflowUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowVersionGetQueryKey = (
  options: OptionsLegacyParser<WorkflowVersionGetData>,
) => [createQueryKey("workflowVersionGet", options)];

export const workflowVersionGetOptions = (
  options: OptionsLegacyParser<WorkflowVersionGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowVersionGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowVersionGetQueryKey(options),
  });
};

export const workflowRunCreateQueryKey = (
  options: OptionsLegacyParser<WorkflowRunCreateData>,
) => [createQueryKey("workflowRunCreate", options)];

export const workflowRunCreateOptions = (
  options: OptionsLegacyParser<WorkflowRunCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunCreateQueryKey(options),
  });
};

export const workflowRunCreateMutation = (
  options?: Partial<OptionsLegacyParser<WorkflowRunCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowRunCreateResponse,
    WorkflowRunCreateError,
    OptionsLegacyParser<WorkflowRunCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowRunCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowGetMetricsQueryKey = (
  options: OptionsLegacyParser<WorkflowGetMetricsData>,
) => [createQueryKey("workflowGetMetrics", options)];

export const workflowGetMetricsOptions = (
  options: OptionsLegacyParser<WorkflowGetMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGetMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetMetricsQueryKey(options),
  });
};

export const logLineListQueryKey = (
  options: OptionsLegacyParser<LogLineListData>,
) => [createQueryKey("logLineList", options)];

export const logLineListOptions = (
  options: OptionsLegacyParser<LogLineListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logLineList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logLineListQueryKey(options),
  });
};

export const logLineListInfiniteQueryKey = (
  options: OptionsLegacyParser<LogLineListData>,
): QueryKey<OptionsLegacyParser<LogLineListData>> => [
  createQueryKey("logLineList", options, true),
];

export const logLineListInfiniteOptions = (
  options: OptionsLegacyParser<LogLineListData>,
) => {
  return infiniteQueryOptions<
    LogLineListResponse,
    LogLineListError,
    InfiniteData<LogLineListResponse>,
    QueryKey<OptionsLegacyParser<LogLineListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<LogLineListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<LogLineListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await logLineList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: logLineListInfiniteQueryKey(options),
    },
  );
};

export const stepRunListEventsQueryKey = (
  options: OptionsLegacyParser<StepRunListEventsData>,
) => [createQueryKey("stepRunListEvents", options)];

export const stepRunListEventsOptions = (
  options: OptionsLegacyParser<StepRunListEventsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunListEvents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunListEventsQueryKey(options),
  });
};

export const stepRunListEventsInfiniteQueryKey = (
  options: OptionsLegacyParser<StepRunListEventsData>,
): QueryKey<OptionsLegacyParser<StepRunListEventsData>> => [
  createQueryKey("stepRunListEvents", options, true),
];

export const stepRunListEventsInfiniteOptions = (
  options: OptionsLegacyParser<StepRunListEventsData>,
) => {
  return infiniteQueryOptions<
    StepRunListEventsResponse,
    StepRunListEventsError,
    InfiniteData<StepRunListEventsResponse>,
    QueryKey<OptionsLegacyParser<StepRunListEventsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<StepRunListEventsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<StepRunListEventsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await stepRunListEvents({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: stepRunListEventsInfiniteQueryKey(options),
    },
  );
};

export const workflowRunListStepRunEventsQueryKey = (
  options: OptionsLegacyParser<WorkflowRunListStepRunEventsData>,
) => [createQueryKey("workflowRunListStepRunEvents", options)];

export const workflowRunListStepRunEventsOptions = (
  options: OptionsLegacyParser<WorkflowRunListStepRunEventsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunListStepRunEvents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunListStepRunEventsQueryKey(options),
  });
};

export const stepRunListArchivesQueryKey = (
  options: OptionsLegacyParser<StepRunListArchivesData>,
) => [createQueryKey("stepRunListArchives", options)];

export const stepRunListArchivesOptions = (
  options: OptionsLegacyParser<StepRunListArchivesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunListArchives({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunListArchivesQueryKey(options),
  });
};

export const stepRunListArchivesInfiniteQueryKey = (
  options: OptionsLegacyParser<StepRunListArchivesData>,
): QueryKey<OptionsLegacyParser<StepRunListArchivesData>> => [
  createQueryKey("stepRunListArchives", options, true),
];

export const stepRunListArchivesInfiniteOptions = (
  options: OptionsLegacyParser<StepRunListArchivesData>,
) => {
  return infiniteQueryOptions<
    StepRunListArchivesResponse,
    StepRunListArchivesError,
    InfiniteData<StepRunListArchivesResponse>,
    QueryKey<OptionsLegacyParser<StepRunListArchivesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<StepRunListArchivesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<StepRunListArchivesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await stepRunListArchives({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: stepRunListArchivesInfiniteQueryKey(options),
    },
  );
};

export const workflowGetWorkersCountQueryKey = (
  options: OptionsLegacyParser<WorkflowGetWorkersCountData>,
) => [createQueryKey("workflowGetWorkersCount", options)];

export const workflowGetWorkersCountOptions = (
  options: OptionsLegacyParser<WorkflowGetWorkersCountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGetWorkersCount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetWorkersCountQueryKey(options),
  });
};

export const workflowRunListQueryKey = (
  options: OptionsLegacyParser<WorkflowRunListData>,
) => [createQueryKey("workflowRunList", options)];

export const workflowRunListOptions = (
  options: OptionsLegacyParser<WorkflowRunListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunListQueryKey(options),
  });
};

export const workflowRunListInfiniteQueryKey = (
  options: OptionsLegacyParser<WorkflowRunListData>,
): QueryKey<OptionsLegacyParser<WorkflowRunListData>> => [
  createQueryKey("workflowRunList", options, true),
];

export const workflowRunListInfiniteOptions = (
  options: OptionsLegacyParser<WorkflowRunListData>,
) => {
  return infiniteQueryOptions<
    WorkflowRunListResponse,
    WorkflowRunListError,
    InfiniteData<WorkflowRunListResponse>,
    QueryKey<OptionsLegacyParser<WorkflowRunListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<WorkflowRunListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<WorkflowRunListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await workflowRunList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: workflowRunListInfiniteQueryKey(options),
    },
  );
};

export const workflowRunUpdateReplayQueryKey = (
  options: OptionsLegacyParser<WorkflowRunUpdateReplayData>,
) => [createQueryKey("workflowRunUpdateReplay", options)];

export const workflowRunUpdateReplayOptions = (
  options: OptionsLegacyParser<WorkflowRunUpdateReplayData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunUpdateReplay({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunUpdateReplayQueryKey(options),
  });
};

export const workflowRunUpdateReplayMutation = (
  options?: Partial<OptionsLegacyParser<WorkflowRunUpdateReplayData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkflowRunUpdateReplayResponse,
    WorkflowRunUpdateReplayError,
    OptionsLegacyParser<WorkflowRunUpdateReplayData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workflowRunUpdateReplay({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workflowRunGetMetricsQueryKey = (
  options: OptionsLegacyParser<WorkflowRunGetMetricsData>,
) => [createQueryKey("workflowRunGetMetrics", options)];

export const workflowRunGetMetricsOptions = (
  options: OptionsLegacyParser<WorkflowRunGetMetricsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGetMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetMetricsQueryKey(options),
  });
};

export const workflowRunGetQueryKey = (
  options: OptionsLegacyParser<WorkflowRunGetData>,
) => [createQueryKey("workflowRunGet", options)];

export const workflowRunGetOptions = (
  options: OptionsLegacyParser<WorkflowRunGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetQueryKey(options),
  });
};

export const workflowRunGetShapeQueryKey = (
  options: OptionsLegacyParser<WorkflowRunGetShapeData>,
) => [createQueryKey("workflowRunGetShape", options)];

export const workflowRunGetShapeOptions = (
  options: OptionsLegacyParser<WorkflowRunGetShapeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGetShape({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetShapeQueryKey(options),
  });
};

export const stepRunGetQueryKey = (
  options: OptionsLegacyParser<StepRunGetData>,
) => [createQueryKey("stepRunGet", options)];

export const stepRunGetOptions = (
  options: OptionsLegacyParser<StepRunGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunGetQueryKey(options),
  });
};

export const stepRunUpdateRerunQueryKey = (
  options: OptionsLegacyParser<StepRunUpdateRerunData>,
) => [createQueryKey("stepRunUpdateRerun", options)];

export const stepRunUpdateRerunOptions = (
  options: OptionsLegacyParser<StepRunUpdateRerunData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunUpdateRerun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunUpdateRerunQueryKey(options),
  });
};

export const stepRunUpdateRerunMutation = (
  options?: Partial<OptionsLegacyParser<StepRunUpdateRerunData>>,
) => {
  const mutationOptions: UseMutationOptions<
    StepRunUpdateRerunResponse,
    StepRunUpdateRerunError,
    OptionsLegacyParser<StepRunUpdateRerunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await stepRunUpdateRerun({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const stepRunUpdateCancelQueryKey = (
  options: OptionsLegacyParser<StepRunUpdateCancelData>,
) => [createQueryKey("stepRunUpdateCancel", options)];

export const stepRunUpdateCancelOptions = (
  options: OptionsLegacyParser<StepRunUpdateCancelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunUpdateCancel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunUpdateCancelQueryKey(options),
  });
};

export const stepRunUpdateCancelMutation = (
  options?: Partial<OptionsLegacyParser<StepRunUpdateCancelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    StepRunUpdateCancelResponse,
    StepRunUpdateCancelError,
    OptionsLegacyParser<StepRunUpdateCancelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await stepRunUpdateCancel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const stepRunGetSchemaQueryKey = (
  options: OptionsLegacyParser<StepRunGetSchemaData>,
) => [createQueryKey("stepRunGetSchema", options)];

export const stepRunGetSchemaOptions = (
  options: OptionsLegacyParser<StepRunGetSchemaData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await stepRunGetSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: stepRunGetSchemaQueryKey(options),
  });
};

export const workerListQueryKey = (
  options: OptionsLegacyParser<WorkerListData>,
) => [createQueryKey("workerList", options)];

export const workerListOptions = (
  options: OptionsLegacyParser<WorkerListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workerList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workerListQueryKey(options),
  });
};

export const workerUpdateMutation = (
  options?: Partial<OptionsLegacyParser<WorkerUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WorkerUpdateResponse,
    WorkerUpdateError,
    OptionsLegacyParser<WorkerUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await workerUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workerGetQueryKey = (
  options: OptionsLegacyParser<WorkerGetData>,
) => [createQueryKey("workerGet", options)];

export const workerGetOptions = (
  options: OptionsLegacyParser<WorkerGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workerGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workerGetQueryKey(options),
  });
};

export const webhookListQueryKey = (
  options: OptionsLegacyParser<WebhookListData>,
) => [createQueryKey("webhookList", options)];

export const webhookListOptions = (
  options: OptionsLegacyParser<WebhookListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await webhookList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhookListQueryKey(options),
  });
};

export const webhookCreateQueryKey = (
  options: OptionsLegacyParser<WebhookCreateData>,
) => [createQueryKey("webhookCreate", options)];

export const webhookCreateOptions = (
  options: OptionsLegacyParser<WebhookCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await webhookCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhookCreateQueryKey(options),
  });
};

export const webhookCreateMutation = (
  options?: Partial<OptionsLegacyParser<WebhookCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WebhookCreateResponse,
    WebhookCreateError,
    OptionsLegacyParser<WebhookCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await webhookCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhookDeleteMutation = (
  options?: Partial<OptionsLegacyParser<WebhookDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    WebhookDeleteResponse,
    WebhookDeleteError,
    OptionsLegacyParser<WebhookDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await webhookDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const webhookRequestsListQueryKey = (
  options: OptionsLegacyParser<WebhookRequestsListData>,
) => [createQueryKey("webhookRequestsList", options)];

export const webhookRequestsListOptions = (
  options: OptionsLegacyParser<WebhookRequestsListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await webhookRequestsList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: webhookRequestsListQueryKey(options),
  });
};

export const workflowRunGetInputQueryKey = (
  options: OptionsLegacyParser<WorkflowRunGetInputData>,
) => [createQueryKey("workflowRunGetInput", options)];

export const workflowRunGetInputOptions = (
  options: OptionsLegacyParser<WorkflowRunGetInputData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowRunGetInput({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowRunGetInputQueryKey(options),
  });
};

export const workflowGetByNameQueryKey = (
  options: OptionsLegacyParser<WorkflowGetByNameData>,
) => [createQueryKey("workflowGetByName", options)];

export const workflowGetByNameOptions = (
  options: OptionsLegacyParser<WorkflowGetByNameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workflowGetByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workflowGetByNameQueryKey(options),
  });
};

export const chatChatQueryKey = (
  options: OptionsLegacyParser<ChatChatData>,
) => [createQueryKey("chatChat", options)];

export const chatChatOptions = (options: OptionsLegacyParser<ChatChatData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatChat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: chatChatQueryKey(options),
  });
};

export const chatChatMutation = (
  options?: Partial<OptionsLegacyParser<ChatChatData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ChatChatResponse,
    ChatChatError,
    OptionsLegacyParser<ChatChatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await chatChat({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const chatCallModelQueryKey = (
  options: OptionsLegacyParser<ChatCallModelData>,
) => [createQueryKey("chatCallModel", options)];

export const chatCallModelOptions = (
  options: OptionsLegacyParser<ChatCallModelData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatCallModel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: chatCallModelQueryKey(options),
  });
};

export const chatCallModelMutation = (
  options?: Partial<OptionsLegacyParser<ChatCallModelData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ChatCallModelResponse,
    ChatCallModelError,
    OptionsLegacyParser<ChatCallModelData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await chatCallModel({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const chatMessagesQueryKey = (
  options: OptionsLegacyParser<ChatMessagesData>,
) => [createQueryKey("chatMessages", options)];

export const chatMessagesOptions = (
  options: OptionsLegacyParser<ChatMessagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatMessages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: chatMessagesQueryKey(options),
  });
};

export const chatModelsQueryKey = (
  options: OptionsLegacyParser<ChatModelsData>,
) => [createQueryKey("chatModels", options)];

export const chatModelsOptions = (
  options: OptionsLegacyParser<ChatModelsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: chatModelsQueryKey(options),
  });
};

export const chatCompletionsQueryKey = (
  options: OptionsLegacyParser<ChatCompletionsData>,
) => [createQueryKey("chatCompletions", options)];

export const chatCompletionsOptions = (
  options: OptionsLegacyParser<ChatCompletionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatCompletions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: chatCompletionsQueryKey(options),
  });
};

export const chatCompletionsMutation = (
  options?: Partial<OptionsLegacyParser<ChatCompletionsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ChatCompletionsResponse,
    ChatCompletionsError,
    OptionsLegacyParser<ChatCompletionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await chatCompletions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const workerConfigQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("workerConfig", options),
];

export const workerConfigOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workerConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: workerConfigQueryKey(options),
  });
};

export const mtmaiBloggenconfigQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("mtmaiBloggenconfig", options),
];

export const mtmaiBloggenconfigOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await mtmaiBloggenconfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: mtmaiBloggenconfigQueryKey(options),
  });
};

export const mtmaiWorkerConfigQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("mtmaiWorkerConfig", options),
];

export const mtmaiWorkerConfigOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await mtmaiWorkerConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: mtmaiWorkerConfigQueryKey(options),
  });
};

export const blogListQueryKey = (
  options: OptionsLegacyParser<BlogListData>,
) => [createQueryKey("blogList", options)];

export const blogListOptions = (options: OptionsLegacyParser<BlogListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await blogList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: blogListQueryKey(options),
  });
};

export const blogCreateQueryKey = (
  options: OptionsLegacyParser<BlogCreateData>,
) => [createQueryKey("blogCreate", options)];

export const blogCreateOptions = (
  options: OptionsLegacyParser<BlogCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await blogCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: blogCreateQueryKey(options),
  });
};

export const blogCreateMutation = (
  options?: Partial<OptionsLegacyParser<BlogCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BlogCreateResponse,
    BlogCreateError,
    OptionsLegacyParser<BlogCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await blogCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const blogGetQueryKey = (options: OptionsLegacyParser<BlogGetData>) => [
  createQueryKey("blogGet", options),
];

export const blogGetOptions = (options: OptionsLegacyParser<BlogGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await blogGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: blogGetQueryKey(options),
  });
};

export const blogUpdateMutation = (
  options?: Partial<OptionsLegacyParser<BlogUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BlogUpdateResponse,
    BlogUpdateError,
    OptionsLegacyParser<BlogUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await blogUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteListQueryKey = (
  options: OptionsLegacyParser<SiteListData>,
) => [createQueryKey("siteList", options)];

export const siteListOptions = (options: OptionsLegacyParser<SiteListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteListQueryKey(options),
  });
};

export const siteCreateQueryKey = (
  options: OptionsLegacyParser<SiteCreateData>,
) => [createQueryKey("siteCreate", options)];

export const siteCreateOptions = (
  options: OptionsLegacyParser<SiteCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteCreateQueryKey(options),
  });
};

export const siteCreateMutation = (
  options?: Partial<OptionsLegacyParser<SiteCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SiteCreateResponse,
    SiteCreateError,
    OptionsLegacyParser<SiteCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await siteCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const siteGetQueryKey = (options: OptionsLegacyParser<SiteGetData>) => [
  createQueryKey("siteGet", options),
];

export const siteGetOptions = (options: OptionsLegacyParser<SiteGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteGetQueryKey(options),
  });
};

export const siteGetByHostQueryKey = (
  options: OptionsLegacyParser<SiteGetByHostData>,
) => [createQueryKey("siteGetByHost", options)];

export const siteGetByHostOptions = (
  options: OptionsLegacyParser<SiteGetByHostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await siteGetByHost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: siteGetByHostQueryKey(options),
  });
};

export const postListPublicQueryKey = (
  options?: OptionsLegacyParser<PostListPublicData>,
) => [createQueryKey("postListPublic", options)];

export const postListPublicOptions = (
  options?: OptionsLegacyParser<PostListPublicData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postListPublic({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postListPublicQueryKey(options),
  });
};

export const postGetQueryKey = (options: OptionsLegacyParser<PostGetData>) => [
  createQueryKey("postGet", options),
];

export const postGetOptions = (options: OptionsLegacyParser<PostGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGetQueryKey(options),
  });
};

export const postListQueryKey = (
  options: OptionsLegacyParser<PostListData>,
) => [createQueryKey("postList", options)];

export const postListOptions = (options: OptionsLegacyParser<PostListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postListQueryKey(options),
  });
};

export const postCreateQueryKey = (
  options: OptionsLegacyParser<PostCreateData>,
) => [createQueryKey("postCreate", options)];

export const postCreateOptions = (
  options: OptionsLegacyParser<PostCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCreateQueryKey(options),
  });
};

export const postCreateMutation = (
  options?: Partial<OptionsLegacyParser<PostCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostCreateResponse,
    PostCreateError,
    OptionsLegacyParser<PostCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const toolCallQueryKey = (
  options: OptionsLegacyParser<ToolCallData>,
) => [createQueryKey("toolCall", options)];

export const toolCallOptions = (options: OptionsLegacyParser<ToolCallData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await toolCall({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: toolCallQueryKey(options),
  });
};

export const toolCallMutation = (
  options?: Partial<OptionsLegacyParser<ToolCallData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ToolCallResponse,
    ToolCallError,
    OptionsLegacyParser<ToolCallData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await toolCall({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const toolsOperationGuideQueryKey = (
  options: OptionsLegacyParser<ToolsOperationGuideData>,
) => [createQueryKey("toolsOperationGuide", options)];

export const toolsOperationGuideOptions = (
  options: OptionsLegacyParser<ToolsOperationGuideData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await toolsOperationGuide({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: toolsOperationGuideQueryKey(options),
  });
};

export const toolsWebsearchQueryKey = (
  options: OptionsLegacyParser<ToolsWebsearchData>,
) => [createQueryKey("toolsWebsearch", options)];

export const toolsWebsearchOptions = (
  options: OptionsLegacyParser<ToolsWebsearchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await toolsWebsearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: toolsWebsearchQueryKey(options),
  });
};

export const toolsWebsearchMutation = (
  options?: Partial<OptionsLegacyParser<ToolsWebsearchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ToolsWebsearchResponse,
    ToolsWebsearchError,
    OptionsLegacyParser<ToolsWebsearchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await toolsWebsearch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const artifactListQueryKey = (
  options: OptionsLegacyParser<ArtifactListData>,
) => [createQueryKey("artifactList", options)];

export const artifactListOptions = (
  options: OptionsLegacyParser<ArtifactListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactListQueryKey(options),
  });
};

export const artifactCreateQueryKey = (
  options: OptionsLegacyParser<ArtifactCreateData>,
) => [createQueryKey("artifactCreate", options)];

export const artifactCreateOptions = (
  options: OptionsLegacyParser<ArtifactCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactCreateQueryKey(options),
  });
};

export const artifactCreateMutation = (
  options?: Partial<OptionsLegacyParser<ArtifactCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ArtifactCreateResponse,
    ArtifactCreateError,
    OptionsLegacyParser<ArtifactCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await artifactCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const artifactGetQueryKey = (
  options: OptionsLegacyParser<ArtifactGetData>,
) => [createQueryKey("artifactGet", options)];

export const artifactGetOptions = (
  options: OptionsLegacyParser<ArtifactGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await artifactGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: artifactGetQueryKey(options),
  });
};

export const agentNodeListQueryKey = (
  options: OptionsLegacyParser<AgentNodeListData>,
) => [createQueryKey("agentNodeList", options)];

export const agentNodeListOptions = (
  options: OptionsLegacyParser<AgentNodeListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentNodeList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agentNodeListQueryKey(options),
  });
};

export const agentCreateQueryKey = (
  options: OptionsLegacyParser<AgentCreateData>,
) => [createQueryKey("agentCreate", options)];

export const agentCreateOptions = (
  options: OptionsLegacyParser<AgentCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agentCreateQueryKey(options),
  });
};

export const agentCreateMutation = (
  options?: Partial<OptionsLegacyParser<AgentCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AgentCreateResponse,
    AgentCreateError,
    OptionsLegacyParser<AgentCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agentCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const agentNodeQueryKey = (
  options: OptionsLegacyParser<AgentNodeData>,
) => [createQueryKey("agentNode", options)];

export const agentNodeOptions = (
  options: OptionsLegacyParser<AgentNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentNode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agentNodeQueryKey(options),
  });
};

export const agentNodeUpdateMutation = (
  options?: Partial<OptionsLegacyParser<AgentNodeUpdateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AgentNodeUpdateResponse,
    AgentNodeUpdateError,
    OptionsLegacyParser<AgentNodeUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agentNodeUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const agentNodeRunQueryKey = (
  options: OptionsLegacyParser<AgentNodeRunData>,
) => [createQueryKey("agentNodeRun", options)];

export const agentNodeRunOptions = (
  options: OptionsLegacyParser<AgentNodeRunData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentNodeRun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agentNodeRunQueryKey(options),
  });
};

export const agentNodeRunMutation = (
  options?: Partial<OptionsLegacyParser<AgentNodeRunData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AgentNodeRunResponse,
    AgentNodeRunError,
    OptionsLegacyParser<AgentNodeRunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agentNodeRun({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const agentNodeFormQueryKey = (
  options: OptionsLegacyParser<AgentNodeFormData>,
) => [createQueryKey("agentNodeForm", options)];

export const agentNodeFormOptions = (
  options: OptionsLegacyParser<AgentNodeFormData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentNodeForm({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: agentNodeFormQueryKey(options),
  });
};

export const agentNodeFormMutation = (
  options?: Partial<OptionsLegacyParser<AgentNodeFormData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AgentNodeFormResponse,
    AgentNodeFormError,
    OptionsLegacyParser<AgentNodeFormData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agentNodeForm({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const llmGetQueryKey = (options: OptionsLegacyParser<LlmGetData>) => [
  createQueryKey("llmGet", options),
];

export const llmGetOptions = (options: OptionsLegacyParser<LlmGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await llmGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: llmGetQueryKey(options),
  });
};

export const llmGetMutation = (
  options?: Partial<OptionsLegacyParser<LlmGetData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LlmGetResponse,
    LlmGetError,
    OptionsLegacyParser<LlmGetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await llmGet({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const docListQueryKey = (options: OptionsLegacyParser<DocListData>) => [
  createQueryKey("docList", options),
];

export const docListOptions = (options: OptionsLegacyParser<DocListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await docList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: docListQueryKey(options),
  });
};

export const promptListQueryKey = (
  options: OptionsLegacyParser<PromptListData>,
) => [createQueryKey("promptList", options)];

export const promptListOptions = (
  options: OptionsLegacyParser<PromptListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await promptList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: promptListQueryKey(options),
  });
};

export const promptGetQueryKey = (
  options: OptionsLegacyParser<PromptGetData>,
) => [createQueryKey("promptGet", options)];

export const promptGetOptions = (
  options: OptionsLegacyParser<PromptGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await promptGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: promptGetQueryKey(options),
  });
};

export const assisantListQueryKey = (
  options: OptionsLegacyParser<AssisantListData>,
) => [createQueryKey("assisantList", options)];

export const assisantListOptions = (
  options: OptionsLegacyParser<AssisantListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await assisantList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: assisantListQueryKey(options),
  });
};

export const assisantGetQueryKey = (
  options: OptionsLegacyParser<AssisantGetData>,
) => [createQueryKey("assisantGet", options)];

export const assisantGetOptions = (
  options: OptionsLegacyParser<AssisantGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await assisantGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: assisantGetQueryKey(options),
  });
};

export const subscribeSubscribeQueryKey = (
  options: OptionsLegacyParser<SubscribeSubscribeData>,
) => [createQueryKey("subscribeSubscribe", options)];

export const subscribeSubscribeOptions = (
  options: OptionsLegacyParser<SubscribeSubscribeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await subscribeSubscribe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: subscribeSubscribeQueryKey(options),
  });
};

export const subscribeSubscribeMutation = (
  options?: Partial<OptionsLegacyParser<SubscribeSubscribeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SubscribeSubscribeResponse,
    SubscribeSubscribeError,
    OptionsLegacyParser<SubscribeSubscribeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await subscribeSubscribe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminSeedQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("adminSeed", options),
];

export const adminSeedOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminSeed({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminSeedQueryKey(options),
  });
};

export const adminReleaseConnQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("adminReleaseConn", options),
];

export const adminReleaseConnOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminReleaseConn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminReleaseConnQueryKey(options),
  });
};

export const adminReleaseConnMutation = (
  options?: Partial<OptionsLegacyParser>,
) => {
  const mutationOptions: UseMutationOptions<
    AdminReleaseConnResponse,
    AdminReleaseConnError,
    OptionsLegacyParser
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await adminReleaseConn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const frontendGetConfigQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("frontendGetConfig", options),
];

export const frontendGetConfigOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await frontendGetConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: frontendGetConfigQueryKey(options),
  });
};

export const frontendGetSiderbarQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("frontendGetSiderbar", options),
];

export const frontendGetSiderbarOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await frontendGetSiderbar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: frontendGetSiderbarQueryKey(options),
  });
};
