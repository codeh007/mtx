// This file is auto-generated by @hey-api/openapi-ts

export type ApiMeta = {
  auth?: ApiMetaAuth;
  /**
   * the Pylon app ID for usepylon.com chat support
   */
  pylonAppId?: string;
  posthog?: ApiMetaPosthog;
  /**
   * whether or not users can sign up for this instance
   */
  allowSignup?: boolean;
  /**
   * whether or not users can invite other users to this instance
   */
  allowInvites?: boolean;
  /**
   * whether or not users can create new tenants
   */
  allowCreateTenant?: boolean;
  /**
   * whether or not users can change their password
   */
  allowChangePassword?: boolean;
};

export type ApiMetaAuth = {
  /**
   * the supported types of authentication
   */
  schemes?: Array<string>;
};

export type ApiMetaPosthog = {
  /**
   * the PostHog API key
   */
  apiKey?: string;
  /**
   * the PostHog API host
   */
  apiHost?: string;
};

export type ListApiMetaIntegration = Array<ApiMetaIntegration>;

export type ApiMetaIntegration = {
  /**
   * the name of the integration
   */
  name: string;
  /**
   * whether this integration is enabled on the instance
   */
  enabled: boolean;
};

export type ApiErrors = {
  errors: Array<ApiError>;
};

export type ApiError = {
  /**
   * a custom Hatchet error code
   */
  code?: number;
  /**
   * the field that this error is associated with, if applicable
   */
  field?: string;
  /**
   * a description for this error
   */
  description: string;
  /**
   * a link to the documentation for this error, if it exists
   */
  docs_link?: string;
};

export type PaginationResponse = {
  /**
   * the current page
   */
  current_page?: number;
  /**
   * the next page
   */
  next_page?: number;
  /**
   * the total number of pages for listing
   */
  num_pages?: number;
};

export type ApiResourceMeta = {
  /**
   * the id of this resource, in UUID format
   */
  id: string;
  /**
   * the time that this resource was created
   */
  createdAt: string;
  /**
   * the time that this resource was last updated
   */
  updatedAt: string;
};

export type User = {
  metadata: ApiResourceMeta;
  /**
   * The display name of the user.
   */
  name?: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * Whether the user has verified their email address.
   */
  emailVerified: boolean;
  /**
   * Whether the user has a password set.
   */
  hasPassword?: boolean;
  /**
   * A hash of the user's email address for use with Pylon Support Chat
   */
  emailHash?: string;
};

export type UserTenantPublic = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The display name of the user.
   */
  name?: string;
};

export type UserLoginRequest = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserChangePasswordRequest = {
  /**
   * The password of the user.
   */
  password: string;
  /**
   * The new password for the user.
   */
  newPassword: string;
};

export type UserRegisterRequest = {
  /**
   * The name of the user.
   */
  name: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserTenantMembershipsList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type Tenant = {
  metadata: ApiResourceMeta;
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * The version of the tenant.
   */
  version: TenantVersion;
};

export type TenantMember = {
  metadata: ApiResourceMeta;
  /**
   * The user associated with this tenant member.
   */
  user: UserTenantPublic;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant associated with this tenant member.
   */
  tenant?: Tenant;
};

export type TenantMemberList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type TenantMemberRole = "OWNER" | "ADMIN" | "MEMBER";

export const TenantMemberRole = {
  OWNER: "OWNER",
  ADMIN: "ADMIN",
  MEMBER: "MEMBER",
} as const;

export type TenantResource =
  | "WORKER"
  | "WORKER_SLOT"
  | "EVENT"
  | "WORKFLOW_RUN"
  | "TASK_RUN"
  | "CRON"
  | "SCHEDULE";

export const TenantResource = {
  WORKER: "WORKER",
  WORKER_SLOT: "WORKER_SLOT",
  EVENT: "EVENT",
  WORKFLOW_RUN: "WORKFLOW_RUN",
  TASK_RUN: "TASK_RUN",
  CRON: "CRON",
  SCHEDULE: "SCHEDULE",
} as const;

export type TenantResourceLimit = {
  metadata: ApiResourceMeta;
  /**
   * The resource associated with this limit.
   */
  resource: TenantResource;
  /**
   * The limit associated with this limit.
   */
  limitValue: number;
  /**
   * The alarm value associated with this limit to warn of approaching limit value.
   */
  alarmValue?: number;
  /**
   * The current value associated with this limit.
   */
  value: number;
  /**
   * The meter window for the limit. (i.e. 1 day, 1 week, 1 month)
   */
  window?: string;
  /**
   * The last time the limit was refilled.
   */
  lastRefill?: string;
};

export type TenantResourcePolicy = {
  /**
   * A list of resource limits for the tenant.
   */
  limits: Array<TenantResourceLimit>;
};

export type CreateTenantInviteRequest = {
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type UpdateTenantInviteRequest = {
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type TenantAlertingSettings = {
  metadata: ApiResourceMeta;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency: string;
  /**
   * The last time an alert was sent.
   */
  lastAlertedAt?: string;
};

export type TenantAlertEmailGroup = {
  metadata: ApiResourceMeta;
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantAlertEmailGroupList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantAlertEmailGroup>;
};

export type CreateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type UpdateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantInvite = {
  metadata: ApiResourceMeta;
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant id associated with this tenant invite.
   */
  tenantId: string;
  /**
   * The tenant name for the tenant.
   */
  tenantName?: string;
  /**
   * The time that this invite expires.
   */
  expires: string;
};

export type TenantInviteList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantInvite>;
};

export type QueueMetrics = {
  /**
   * The number of items in the queue.
   */
  numQueued: number;
  /**
   * The number of items running.
   */
  numRunning: number;
  /**
   * The number of items pending.
   */
  numPending: number;
};

export type TenantQueueMetrics = {
  /**
   * The total queue metrics.
   */
  total?: QueueMetrics;
  workflow?: {
    [key: string]: QueueMetrics;
  };
  queues?: {
    [key: string]: number;
  };
};

export type TenantStepRunQueueMetrics = {
  queues?: {
    [key: string]: unknown;
  };
};

export type AcceptInviteRequest = {
  invite: string;
};

export type RejectInviteRequest = {
  invite: string;
};

export type TenantList = {
  pagination?: PaginationResponse;
  rows?: Array<Tenant>;
};

export type CreateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
};

export type UpdateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name?: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency?: string;
  /**
   * The version of the tenant.
   */
  version?: TenantVersion;
};

export type Event = {
  metadata: ApiResourceMeta;
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The tenant associated with this event.
   */
  tenant?: Tenant;
  /**
   * The ID of the tenant associated with this event.
   */
  tenantId: string;
  /**
   * The workflow run summary for this event.
   */
  workflowRunSummary?: EventWorkflowRunSummary;
  /**
   * Additional metadata for the event.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type EventData = {
  /**
   * The data for the event (JSON bytes).
   */
  data: string;
};

export type CreateEventRequest = {
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The data for the event.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * Additional metadata for the event.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
  /**
   * The priority of the event.
   */
  priority?: number;
  /**
   * The scope for event filtering.
   */
  scope?: string;
};

export type BulkCreateEventRequest = {
  events: Array<CreateEventRequest>;
};

export type BulkCreateEventResponse = {
  metadata: ApiResourceMeta;
  /**
   * The events.
   */
  events: Array<Event>;
};

export type EventWorkflowRunSummary = {
  /**
   * The number of pending runs.
   */
  pending?: number;
  /**
   * The number of running runs.
   */
  running?: number;
  /**
   * The number of queued runs.
   */
  queued?: number;
  /**
   * The number of succeeded runs.
   */
  succeeded?: number;
  /**
   * The number of failed runs.
   */
  failed?: number;
  /**
   * The number of cancelled runs.
   */
  cancelled?: number;
};

export type EventOrderByField = "createdAt";

export const EventOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type EventOrderByDirection = "asc" | "desc";

export const EventOrderByDirection = {
  ASC: "asc",
  DESC: "desc",
} as const;

export type EventSearch = string;

export type EventKeyList = {
  pagination?: PaginationResponse;
  rows?: Array<EventKey>;
};

/**
 * The key for the event.
 */
export type EventKey = string;

/**
 * A workflow ID.
 */
export type WorkflowId = string;

export type EventList = {
  pagination?: PaginationResponse;
  rows?: Array<Event>;
};

export type V1EventList = {
  pagination?: PaginationResponse;
  rows?: Array<{
    metadata: ApiResourceMeta;
    /**
     * The key for the event.
     */
    key: string;
    /**
     * The tenant associated with this event.
     */
    tenant?: Tenant;
    /**
     * The ID of the tenant associated with this event.
     */
    tenantId: string;
    /**
     * The workflow run summary for this event.
     */
    workflowRunSummary: {
      /**
       * The number of running runs.
       */
      running: number;
      /**
       * The number of queued runs.
       */
      queued: number;
      /**
       * The number of succeeded runs.
       */
      succeeded: number;
      /**
       * The number of failed runs.
       */
      failed: number;
      /**
       * The number of cancelled runs.
       */
      cancelled: number;
    };
    /**
     * Additional metadata for the event.
     */
    additionalMetadata?: {
      [key: string]: unknown;
    };
  }>;
};

export type V1FilterList = {
  pagination?: PaginationResponse;
  rows?: Array<V1Filter>;
};

export type V1Filter = {
  metadata: ApiResourceMeta;
  /**
   * The ID of the tenant associated with this filter.
   */
  tenantId: string;
  /**
   * The workflow id associated with this filter.
   */
  workflowId: string;
  /**
   * The scope associated with this filter. Used for subsetting candidate filters at evaluation time
   */
  scope: string;
  /**
   * The expression associated with this filter.
   */
  expression: string;
  /**
   * Additional payload data associated with the filter
   */
  payload: {
    [key: string]: unknown;
  };
};

export type RateLimit = {
  /**
   * The key for the rate limit.
   */
  key: string;
  /**
   * The ID of the tenant associated with this rate limit.
   */
  tenantId: string;
  /**
   * The maximum number of requests allowed within the window.
   */
  limitValue: number;
  /**
   * The current number of requests made within the window.
   */
  value: number;
  /**
   * The window of time in which the limitValue is enforced.
   */
  window: string;
  /**
   * The last time the rate limit was refilled.
   */
  lastRefill: string;
};

export type RateLimitList = {
  pagination?: PaginationResponse;
  rows?: Array<RateLimit>;
};

export type RateLimitOrderByField = "key" | "value" | "limitValue";

export const RateLimitOrderByField = {
  KEY: "key",
  VALUE: "value",
  LIMIT_VALUE: "limitValue",
} as const;

export type RateLimitOrderByDirection = "asc" | "desc";

export const RateLimitOrderByDirection = {
  ASC: "asc",
  DESC: "desc",
} as const;

export type ReplayEventRequest = {
  eventIds: Array<string>;
};

export type CancelEventRequest = {
  eventIds: Array<string>;
};

export type Workflow = {
  metadata: ApiResourceMeta;
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * The description of the workflow.
   */
  description?: string;
  /**
   * Whether the workflow is paused.
   */
  isPaused?: boolean;
  versions?: Array<WorkflowVersionMeta>;
  /**
   * The tags of the workflow.
   */
  tags?: Array<WorkflowTag>;
  /**
   * The jobs of the workflow.
   */
  jobs?: Array<Job>;
  /**
   * The tenant id of the workflow.
   */
  tenantId: string;
};

export type WorkflowUpdateRequest = {
  /**
   * Whether the workflow is paused.
   */
  isPaused?: boolean;
};

export type WorkflowConcurrency = {
  /**
   * The maximum number of concurrent workflow runs.
   */
  maxRuns: number;
  /**
   * The strategy to use when the concurrency limit is reached.
   */
  limitStrategy: "CANCEL_IN_PROGRESS" | "DROP_NEWEST" | "QUEUE_NEWEST" | "GROUP_ROUND_ROBIN";
  /**
   * An action which gets the concurrency group for the WorkflowRun.
   */
  getConcurrencyGroup: string;
};

export type WorkflowVersionMeta = {
  metadata: ApiResourceMeta;
  /**
   * The version of the workflow.
   */
  version: string;
  order: number;
  workflowId: string;
  workflow?: Workflow;
};

export type WorkflowVersion = {
  metadata: ApiResourceMeta;
  /**
   * The version of the workflow.
   */
  version: string;
  order: number;
  workflowId: string;
  /**
   * The sticky strategy of the workflow.
   */
  sticky?: string;
  /**
   * The default priority of the workflow.
   */
  defaultPriority?: number;
  workflow?: Workflow;
  concurrency?: WorkflowConcurrency;
  triggers?: WorkflowTriggers;
  scheduleTimeout?: string;
  jobs?: Array<Job>;
};

export type WorkflowVersionDefinition = {
  /**
   * The raw YAML definition of the workflow.
   */
  rawDefinition: string;
};

export type WorkflowTag = {
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * The description of the workflow.
   */
  color: string;
};

export type WorkflowList = {
  metadata?: ApiResourceMeta;
  rows?: Array<Workflow>;
  pagination?: PaginationResponse;
};

export type WorkflowTriggers = {
  metadata?: ApiResourceMeta;
  workflow_version_id?: string;
  tenant_id?: string;
  events?: Array<WorkflowTriggerEventRef>;
  crons?: Array<WorkflowTriggerCronRef>;
};

export type WorkflowTriggerEventRef = {
  parent_id?: string;
  event_key?: string;
};

export type WorkflowTriggerCronRef = {
  parent_id?: string;
  cron?: string;
};

export type Job = {
  metadata: ApiResourceMeta;
  tenantId: string;
  versionId: string;
  name: string;
  /**
   * The description of the job.
   */
  description?: string;
  steps: Array<Step>;
  /**
   * The timeout of the job.
   */
  timeout?: string;
};

export type Step = {
  metadata: ApiResourceMeta;
  /**
   * The readable id of the step.
   */
  readableId: string;
  tenantId: string;
  jobId: string;
  action: string;
  /**
   * The timeout of the step.
   */
  timeout?: string;
  children?: Array<string>;
  parents?: Array<string>;
};

export type WorkflowWorkersCount = {
  freeSlotCount?: number;
  maxSlotCount?: number;
  workflowRunId?: string;
};

export type WorkflowRun = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowVersion?: WorkflowVersion;
  status: WorkflowRunStatus;
  displayName?: string;
  jobRuns?: Array<JobRun>;
  triggeredBy: WorkflowRunTriggeredBy;
  input?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  finishedAt?: string;
  duration?: number;
  parentId?: string;
  parentStepRunId?: string;
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type WorkflowRunShape = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowId?: string;
  workflowVersionId: string;
  workflowVersion?: WorkflowVersion;
  status: WorkflowRunStatus;
  displayName?: string;
  jobRuns?: Array<JobRun>;
  triggeredBy: WorkflowRunTriggeredBy;
  input?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  finishedAt?: string;
  duration?: number;
  parentId?: string;
  parentStepRunId?: string;
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type ReplayWorkflowRunsRequest = {
  workflowRunIds: Array<string>;
};

export type ReplayWorkflowRunsResponse = {
  workflowRuns: Array<WorkflowRun>;
};

export type WorkflowRunList = {
  rows?: Array<WorkflowRun>;
  pagination?: PaginationResponse;
};

export type ScheduledWorkflows = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowId: string;
  workflowName: string;
  triggerAt: string;
  input?: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
  workflowRunCreatedAt?: string;
  workflowRunName?: string;
  workflowRunStatus?: WorkflowRunStatus;
  workflowRunId?: string;
  method: "DEFAULT" | "API";
  priority?: number;
};

export type ScheduledWorkflowsList = {
  rows?: Array<ScheduledWorkflows>;
  pagination?: PaginationResponse;
};

export type ScheduledWorkflowsOrderByField = "triggerAt" | "createdAt";

export const ScheduledWorkflowsOrderByField = {
  TRIGGER_AT: "triggerAt",
  CREATED_AT: "createdAt",
} as const;

export type ScheduledRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "QUEUED"
  | "SCHEDULED";

export const ScheduledRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  QUEUED: "QUEUED",
  SCHEDULED: "SCHEDULED",
} as const;

export type CronWorkflows = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowId: string;
  workflowName: string;
  cron: string;
  name?: string;
  input?: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
  enabled: boolean;
  method: "DEFAULT" | "API";
  priority?: number;
};

export type CronWorkflowsList = {
  rows?: Array<CronWorkflows>;
  pagination?: PaginationResponse;
};

export type CronWorkflowsOrderByField = "name" | "createdAt";

export const CronWorkflowsOrderByField = {
  NAME: "name",
  CREATED_AT: "createdAt",
} as const;

export type WorkflowRunOrderByField = "createdAt" | "startedAt" | "finishedAt" | "duration";

export const WorkflowRunOrderByField = {
  CREATED_AT: "createdAt",
  STARTED_AT: "startedAt",
  FINISHED_AT: "finishedAt",
  DURATION: "duration",
} as const;

export type WorkflowRunOrderByDirection = "ASC" | "DESC";

export const WorkflowRunOrderByDirection = {
  ASC: "ASC",
  DESC: "DESC",
} as const;

export type WorkflowRunsMetrics = {
  counts?: WorkflowRunsMetricsCounts;
};

export type WorkflowRunsMetricsCounts = {
  PENDING?: number;
  RUNNING?: number;
  SUCCEEDED?: number;
  FAILED?: number;
  QUEUED?: number;
  CANCELLED?: number;
};

export type WorkflowRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "QUEUED"
  | "BACKOFF";

export const WorkflowRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  QUEUED: "QUEUED",
  BACKOFF: "BACKOFF",
} as const;

export type WorkflowRunStatusList = Array<WorkflowRunStatus>;

export type WorkflowKind = "FUNCTION" | "DURABLE" | "DAG";

export const WorkflowKind = {
  FUNCTION: "FUNCTION",
  DURABLE: "DURABLE",
  DAG: "DAG",
} as const;

export type WorkflowKindList = Array<WorkflowKind>;

export type WorkflowRunsCancelRequest = {
  workflowRunIds: Array<string>;
};

export type JobRunStatus = "PENDING" | "RUNNING" | "SUCCEEDED" | "FAILED" | "CANCELLED" | "BACKOFF";

export const JobRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  BACKOFF: "BACKOFF",
} as const;

export type StepRunStatus =
  | "PENDING"
  | "PENDING_ASSIGNMENT"
  | "ASSIGNED"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "CANCELLING"
  | "BACKOFF";

export const StepRunStatus = {
  PENDING: "PENDING",
  PENDING_ASSIGNMENT: "PENDING_ASSIGNMENT",
  ASSIGNED: "ASSIGNED",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  CANCELLING: "CANCELLING",
  BACKOFF: "BACKOFF",
} as const;

export type JobRun = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowRunId: string;
  workflowRun?: WorkflowRun;
  jobId: string;
  job?: Job;
  tickerId?: string;
  stepRuns?: Array<StepRun>;
  status: JobRunStatus;
  result?: {
    [key: string]: unknown;
  };
  startedAt?: string;
  finishedAt?: string;
  timeoutAt?: string;
  cancelledAt?: string;
  cancelledReason?: string;
  cancelledError?: string;
};

export type WorkflowRunTriggeredBy = {
  metadata: ApiResourceMeta;
  parentWorkflowRunId?: string;
  eventId?: string;
  cronParentId?: string;
  cronSchedule?: string;
};

export type StepRun = {
  metadata: ApiResourceMeta;
  tenantId: string;
  jobRunId: string;
  stepId: string;
  step?: Step;
  childWorkflowsCount?: number;
  parents?: Array<string>;
  childWorkflowRuns?: Array<string>;
  workerId?: string;
  input?: string;
  output?: string;
  status: StepRunStatus;
  requeueAfter?: string;
  result?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  startedAtEpoch?: number;
  finishedAt?: string;
  finishedAtEpoch?: number;
  timeoutAt?: string;
  timeoutAtEpoch?: number;
  cancelledAt?: string;
  cancelledAtEpoch?: number;
  cancelledReason?: string;
  cancelledError?: string;
};

export type StepRunEventReason =
  | "REQUEUED_NO_WORKER"
  | "REQUEUED_RATE_LIMIT"
  | "SCHEDULING_TIMED_OUT"
  | "ASSIGNED"
  | "STARTED"
  | "ACKNOWLEDGED"
  | "FINISHED"
  | "FAILED"
  | "RETRYING"
  | "CANCELLED"
  | "TIMEOUT_REFRESHED"
  | "REASSIGNED"
  | "TIMED_OUT"
  | "SLOT_RELEASED"
  | "RETRIED_BY_USER"
  | "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED"
  | "WORKFLOW_RUN_GROUP_KEY_FAILED";

export const StepRunEventReason = {
  REQUEUED_NO_WORKER: "REQUEUED_NO_WORKER",
  REQUEUED_RATE_LIMIT: "REQUEUED_RATE_LIMIT",
  SCHEDULING_TIMED_OUT: "SCHEDULING_TIMED_OUT",
  ASSIGNED: "ASSIGNED",
  STARTED: "STARTED",
  ACKNOWLEDGED: "ACKNOWLEDGED",
  FINISHED: "FINISHED",
  FAILED: "FAILED",
  RETRYING: "RETRYING",
  CANCELLED: "CANCELLED",
  TIMEOUT_REFRESHED: "TIMEOUT_REFRESHED",
  REASSIGNED: "REASSIGNED",
  TIMED_OUT: "TIMED_OUT",
  SLOT_RELEASED: "SLOT_RELEASED",
  RETRIED_BY_USER: "RETRIED_BY_USER",
  WORKFLOW_RUN_GROUP_KEY_SUCCEEDED: "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
  WORKFLOW_RUN_GROUP_KEY_FAILED: "WORKFLOW_RUN_GROUP_KEY_FAILED",
} as const;

export type StepRunEventSeverity = "INFO" | "WARNING" | "CRITICAL";

export const StepRunEventSeverity = {
  INFO: "INFO",
  WARNING: "WARNING",
  CRITICAL: "CRITICAL",
} as const;

export type StepRunEvent = {
  id: number;
  timeFirstSeen: string;
  timeLastSeen: string;
  stepRunId?: string;
  workflowRunId?: string;
  reason: StepRunEventReason;
  severity: StepRunEventSeverity;
  message: string;
  count: number;
  data?: {
    [key: string]: unknown;
  };
};

export type StepRunEventList = {
  pagination?: PaginationResponse;
  rows?: Array<StepRunEvent>;
};

export type StepRunArchive = {
  stepRunId: string;
  order: number;
  input?: string;
  output?: string;
  startedAt?: string;
  error?: string;
  retryCount: number;
  createdAt: string;
  startedAtEpoch?: number;
  finishedAt?: string;
  finishedAtEpoch?: number;
  timeoutAt?: string;
  timeoutAtEpoch?: number;
  cancelledAt?: string;
  cancelledAtEpoch?: number;
  cancelledReason?: string;
  cancelledError?: string;
};

export type StepRunArchiveList = {
  pagination?: PaginationResponse;
  rows?: Array<StepRunArchive>;
};

export type WorkerRuntimeInfo = {
  sdkVersion?: string;
  language?: WorkerRuntimeSdks;
  languageVersion?: string;
  os?: string;
  runtimeExtra?: string;
};

export type WorkerRuntimeSdks = "GOLANG" | "PYTHON" | "TYPESCRIPT";

export const WorkerRuntimeSdks = {
  GOLANG: "GOLANG",
  PYTHON: "PYTHON",
  TYPESCRIPT: "TYPESCRIPT",
} as const;

export type WorkerList = {
  pagination?: PaginationResponse;
  rows?: Array<Worker>;
};

export type SemaphoreSlots = {
  /**
   * The step run id.
   */
  stepRunId: string;
  /**
   * The action id.
   */
  actionId: string;
  /**
   * The time this slot was started.
   */
  startedAt?: string;
  /**
   * The time this slot will timeout.
   */
  timeoutAt?: string;
  /**
   * The workflow run id.
   */
  workflowRunId: string;
  status: StepRunStatus;
};

export type RecentStepRuns = {
  metadata: ApiResourceMeta;
  /**
   * The action id.
   */
  actionId: string;
  status: StepRunStatus;
  startedAt?: string;
  finishedAt?: string;
  cancelledAt?: string;
  workflowRunId: string;
};

export type Worker = {
  metadata: ApiResourceMeta;
  /**
   * The name of the worker.
   */
  name: string;
  type: "SELFHOSTED" | "MANAGED" | "WEBHOOK";
  /**
   * The time this worker last sent a heartbeat.
   */
  lastHeartbeatAt?: string;
  /**
   * The time this worker last sent a heartbeat.
   */
  lastListenerEstablished?: string;
  /**
   * The actions this worker can perform.
   */
  actions?: Array<string>;
  /**
   * The semaphore slot state for the worker.
   */
  slots?: Array<SemaphoreSlots>;
  /**
   * The recent step runs for the worker.
   */
  recentStepRuns?: Array<RecentStepRuns>;
  /**
   * The status of the worker.
   */
  status?: "ACTIVE" | "INACTIVE" | "PAUSED";
  /**
   * The maximum number of runs this worker can execute concurrently.
   */
  maxRuns?: number;
  /**
   * The number of runs this worker can execute concurrently.
   */
  availableRuns?: number;
  /**
   * the id of the assigned dispatcher, in UUID format
   */
  dispatcherId?: string;
  /**
   * The current label state of the worker.
   */
  labels?: Array<WorkerLabel>;
  /**
   * The webhook URL for the worker.
   */
  webhookUrl?: string;
  /**
   * The webhook ID for the worker.
   */
  webhookId?: string;
  runtimeInfo?: WorkerRuntimeInfo;
};

export type WorkerLabel = {
  metadata: ApiResourceMeta;
  /**
   * The key of the label.
   */
  key: string;
  /**
   * The value of the label.
   */
  value?: string;
};

export type UpdateWorkerRequest = {
  /**
   * Whether the worker is paused and cannot accept new runs.
   */
  isPaused?: boolean;
};

export type ApiToken = {
  metadata: ApiResourceMeta;
  /**
   * The name of the API token.
   */
  name: string;
  /**
   * When the API token expires.
   */
  expiresAt: string;
};

export type CreateApiTokenRequest = {
  /**
   * A name for the API token.
   */
  name: string;
  /**
   * The duration for which the token is valid.
   */
  expiresIn?: string;
};

export type CreateApiTokenResponse = {
  /**
   * The API token.
   */
  token: string;
};

export type ListApiTokensResponse = {
  pagination?: PaginationResponse;
  rows?: Array<ApiToken>;
};

export type RerunStepRunRequest = {
  input: {
    [key: string]: unknown;
  };
};

export type TriggerWorkflowRunRequest = {
  input: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type ScheduleWorkflowRunRequest = {
  input: {
    [key: string]: unknown;
  };
  additionalMetadata: {
    [key: string]: unknown;
  };
  triggerAt: string;
  priority?: number;
};

export type CreateCronWorkflowTriggerRequest = {
  input: {
    [key: string]: unknown;
  };
  additionalMetadata: {
    [key: string]: unknown;
  };
  cronName: string;
  cronExpression: string;
  priority?: number;
};

export type CreatePullRequestFromStepRun = {
  branchName: string;
};

export type GetStepRunDiffResponse = {
  diffs: Array<StepRunDiff>;
};

export type StepRunDiff = {
  key: string;
  original: string;
  modified: string;
};

export type ListPullRequestsResponse = {
  pullRequests: Array<PullRequest>;
};

export type PullRequest = {
  repositoryOwner: string;
  repositoryName: string;
  pullRequestID: number;
  pullRequestTitle: string;
  pullRequestNumber: number;
  pullRequestHeadBranch: string;
  pullRequestBaseBranch: string;
  pullRequestState: PullRequestState;
};

export type PullRequestState = "open" | "closed";

export const PullRequestState = {
  OPEN: "open",
  CLOSED: "closed",
} as const;

export type LogLine = {
  /**
   * The creation date of the log line.
   */
  createdAt: string;
  /**
   * The log message.
   */
  message: string;
  /**
   * The log metadata.
   */
  metadata: {
    [key: string]: unknown;
  };
};

export type LogLineLevel = "DEBUG" | "INFO" | "WARN" | "ERROR";

export const LogLineLevel = {
  DEBUG: "DEBUG",
  INFO: "INFO",
  WARN: "WARN",
  ERROR: "ERROR",
} as const;

export type LogLineList = {
  pagination?: PaginationResponse;
  rows?: Array<LogLine>;
};

export type LogLineOrderByField = "createdAt";

export const LogLineOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type LogLineOrderByDirection = "asc" | "desc";

export const LogLineOrderByDirection = {
  ASC: "asc",
  DESC: "desc",
} as const;

export type LogLineSearch = string;

export type LogLineLevelField = Array<LogLineLevel>;

export type SnsIntegration = {
  metadata: ApiResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The Amazon Resource Name (ARN) of the SNS topic.
   */
  topicArn: string;
  /**
   * The URL to send SNS messages to.
   */
  ingestUrl?: string;
};

export type ListSnsIntegrations = {
  pagination: PaginationResponse;
  rows: Array<SnsIntegration>;
};

export type SlackWebhook = {
  metadata: ApiResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The team name associated with this slack webhook.
   */
  teamName: string;
  /**
   * The team id associated with this slack webhook.
   */
  teamId: string;
  /**
   * The channel name associated with this slack webhook.
   */
  channelName: string;
  /**
   * The channel id associated with this slack webhook.
   */
  channelId: string;
};

export type ListSlackWebhooks = {
  pagination: PaginationResponse;
  rows: Array<SlackWebhook>;
};

export type CreateSnsIntegrationRequest = {
  /**
   * The Amazon Resource Name (ARN) of the SNS topic.
   */
  topicArn: string;
};

export type WorkflowMetrics = {
  /**
   * The number of runs for a specific group key (passed via filter)
   */
  groupKeyRunsCount?: number;
  /**
   * The total number of concurrency group keys.
   */
  groupKeyCount?: number;
};

export type WebhookWorker = {
  metadata: ApiResourceMeta;
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
};

export type WebhookWorkerRequestMethod = "GET" | "POST" | "PUT";

export const WebhookWorkerRequestMethod = {
  GET: "GET",
  POST: "POST",
  PUT: "PUT",
} as const;

export type WebhookWorkerRequest = {
  /**
   * The date and time the request was created.
   */
  created_at: string;
  /**
   * The HTTP method used for the request.
   */
  method: WebhookWorkerRequestMethod;
  /**
   * The HTTP status code of the response.
   */
  statusCode: number;
};

export type WebhookWorkerRequestListResponse = {
  /**
   * The list of webhook requests.
   */
  requests?: Array<WebhookWorkerRequest>;
};

export type WebhookWorkerCreated = {
  metadata: ApiResourceMeta;
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
  /**
   * The secret key for validation.
   */
  secret: string;
};

export type WebhookWorkerCreateRequest = {
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
  /**
   * The secret key for validation. If not provided, a random secret will be generated.
   */
  secret?: string;
};

export type WebhookWorkerCreateResponse = {
  worker?: WebhookWorkerCreated;
};

export type WebhookWorkerListResponse = {
  pagination?: PaginationResponse;
  rows?: Array<WebhookWorker>;
};

export type V1TaskSummaryList = {
  pagination: PaginationResponse;
  /**
   * The list of tasks
   */
  rows: Array<V1TaskSummary>;
};

export type V1WorkflowRunDisplayNameList = {
  pagination: PaginationResponse;
  /**
   * The list of display names
   */
  rows: Array<{
    metadata: ApiResourceMeta;
    displayName: string;
  }>;
};

export type V1TaskSummary = {
  metadata: ApiResourceMeta;
  /**
   * The action ID of the task.
   */
  actionId?: string;
  /**
   * The number of retries of the task.
   */
  retryCount?: number;
  /**
   * The attempt number of the task.
   */
  attempt?: number;
  /**
   * Additional metadata for the task run.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
  /**
   * The list of children tasks
   */
  children?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The timestamp the task was created.
   */
  createdAt: string;
  /**
   * The display name of the task run.
   */
  displayName: string;
  /**
   * The duration of the task run, in milliseconds.
   */
  duration?: number;
  /**
   * The error message of the task run (for the latest run)
   */
  errorMessage?: string;
  /**
   * The timestamp the task run finished.
   */
  finishedAt?: string;
  /**
   * The input of the task run.
   */
  input: {
    [key: string]: unknown;
  };
  /**
   * The number of spawned children tasks
   */
  numSpawnedChildren: number;
  /**
   * The output of the task run (for the latest run)
   */
  output: {
    [key: string]: unknown;
  };
  status: V1TaskStatus;
  /**
   * The timestamp the task run started.
   */
  startedAt?: string;
  /**
   * The step ID of the task.
   */
  stepId?: string;
  /**
   * The external ID of the task.
   */
  taskExternalId: string;
  /**
   * The ID of the task.
   */
  taskId: number;
  /**
   * The timestamp the task was inserted.
   */
  taskInsertedAt: string;
  /**
   * The ID of the tenant.
   */
  tenantId: string;
  /**
   * The type of the workflow (whether it's a DAG or a task)
   */
  type: "DAG" | "TASK";
  workflowId: string;
  workflowName?: string;
  /**
   * The external ID of the workflow run
   */
  workflowRunExternalId: string;
  /**
   * The version ID of the workflow
   */
  workflowVersionId?: string;
};

export type V1DagChildren = {
  dagId?: string;
  children?: Array<V1TaskSummary>;
};

export type V1TaskEventList = {
  pagination?: PaginationResponse;
  rows?: Array<V1TaskEvent>;
};

export type V1TaskStatus = "QUEUED" | "RUNNING" | "COMPLETED" | "CANCELLED" | "FAILED";

export const V1TaskStatus = {
  QUEUED: "QUEUED",
  RUNNING: "RUNNING",
  COMPLETED: "COMPLETED",
  CANCELLED: "CANCELLED",
  FAILED: "FAILED",
} as const;

export type V1TaskRunMetrics = Array<{
  status: V1TaskStatus;
  count: number;
}>;

export type V1TaskPointMetric = {
  time: string;
  SUCCEEDED: number;
  FAILED: number;
};

export type V1TaskPointMetrics = {
  results?: Array<V1TaskPointMetric>;
};

export type V1TaskFilter = {
  since: string;
  until?: string;
  statuses?: Array<V1TaskStatus>;
  workflowIds?: Array<string>;
  additionalMetadata?: Array<string>;
};

export type V1CancelTaskRequest = {
  /**
   * A list of external IDs, which can refer to either task or workflow run external IDs
   */
  externalIds?: Array<string>;
  filter?: V1TaskFilter;
};

export type V1ReplayTaskRequest = {
  /**
   * A list of external IDs, which can refer to either task or workflow run external IDs
   */
  externalIds?: Array<string>;
  filter?: V1TaskFilter;
};

export type V1WorkflowRun = {
  metadata: ApiResourceMeta;
  status: V1TaskStatus;
  /**
   * The timestamp the task run started.
   */
  startedAt?: string;
  /**
   * The timestamp the task run finished.
   */
  finishedAt?: string;
  /**
   * The duration of the task run, in milliseconds.
   */
  duration?: number;
  /**
   * The ID of the tenant.
   */
  tenantId: string;
  /**
   * Additional metadata for the task run.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
  /**
   * The display name of the task run.
   */
  displayName: string;
  workflowId: string;
  /**
   * The output of the task run (for the latest run)
   */
  output: {
    [key: string]: unknown;
  };
  /**
   * The error message of the task run (for the latest run)
   */
  errorMessage?: string;
  /**
   * The ID of the workflow version.
   */
  workflowVersionId?: string;
  /**
   * The input of the task run.
   */
  input: {
    [key: string]: unknown;
  };
  /**
   * The timestamp the task run was created.
   */
  createdAt?: string;
  parentTaskExternalId?: string;
};

export type V1WorkflowRunDetails = {
  run: V1WorkflowRun;
  /**
   * The list of task events for the workflow run
   */
  taskEvents: Array<V1TaskEvent>;
  shape: Array<{
    taskExternalId: string;
    stepId: string;
    childrenStepIds: Array<string>;
    taskName: string;
  }>;
  tasks: Array<V1TaskSummary>;
};

export type V1TaskRunStatus = "PENDING" | "RUNNING" | "COMPLETED" | "FAILED" | "CANCELLED";

export const V1TaskRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
} as const;

export type V1TriggerWorkflowRunRequest = {
  /**
   * The name of the workflow.
   */
  workflowName: string;
  input: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
  /**
   * The priority of the workflow run.
   */
  priority?: number;
};

export type V1LogLine = {
  /**
   * The creation date of the log line.
   */
  createdAt: string;
  /**
   * The log message.
   */
  message: string;
  /**
   * The log metadata.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The retry count of the log line.
   */
  retryCount?: number;
  /**
   * The attempt number of the log line.
   */
  attempt?: number;
  /**
   * The log level.
   */
  level?: V1LogLineLevel;
};

export type V1LogLineLevel = "DEBUG" | "INFO" | "WARN" | "ERROR";

export const V1LogLineLevel = {
  DEBUG: "DEBUG",
  INFO: "INFO",
  WARN: "WARN",
  ERROR: "ERROR",
} as const;

export type V1LogLineList = {
  pagination?: PaginationResponse;
  rows?: Array<V1LogLine>;
};

export type V1TaskTiming = {
  metadata: ApiResourceMeta;
  /**
   * The depth of the task in the waterfall.
   */
  depth: number;
  status: V1TaskStatus;
  /**
   * The display name of the task run.
   */
  taskDisplayName: string;
  /**
   * The external ID of the task.
   */
  taskExternalId: string;
  /**
   * The ID of the task.
   */
  taskId: number;
  /**
   * The timestamp the task was inserted.
   */
  taskInsertedAt: string;
  /**
   * The ID of the tenant.
   */
  tenantId: string;
  /**
   * The external ID of the parent task.
   */
  parentTaskExternalId?: string;
  /**
   * The timestamp the task run was queued.
   */
  queuedAt?: string;
  /**
   * The timestamp the task run started.
   */
  startedAt?: string;
  /**
   * The timestamp the task run finished.
   */
  finishedAt?: string;
  /**
   * The external ID of the workflow run.
   */
  workflowRunId?: string;
  /**
   * The number of retries of the task.
   */
  retryCount?: number;
  /**
   * The attempt number of the task.
   */
  attempt?: number;
};

export type V1TaskTimingList = {
  pagination: PaginationResponse;
  /**
   * The list of task timings
   */
  rows: Array<V1TaskTiming>;
};

export type V1CreateFilterRequest = {
  /**
   * The workflow id
   */
  workflowId: string;
  /**
   * The expression for the filter
   */
  expression: string;
  /**
   * The scope associated with this filter. Used for subsetting candidate filters at evaluation time
   */
  scope: string;
  /**
   * The payload for the filter
   */
  payload?: {
    [key: string]: unknown;
  };
};

export type TenantVersion = "V0" | "V1";

export const TenantVersion = {
  V0: "V0",
  V1: "V1",
} as const;

export type V1TaskEvent = {
  id: number;
  taskId: string;
  timestamp: string;
  eventType:
    | "REQUEUED_NO_WORKER"
    | "REQUEUED_RATE_LIMIT"
    | "SCHEDULING_TIMED_OUT"
    | "ASSIGNED"
    | "STARTED"
    | "FINISHED"
    | "FAILED"
    | "RETRYING"
    | "CANCELLED"
    | "TIMED_OUT"
    | "REASSIGNED"
    | "SLOT_RELEASED"
    | "TIMEOUT_REFRESHED"
    | "RETRIED_BY_USER"
    | "SENT_TO_WORKER"
    | "RATE_LIMIT_ERROR"
    | "ACKNOWLEDGED"
    | "CREATED"
    | "QUEUED"
    | "SKIPPED";
  message: string;
  errorMessage?: string;
  output?: string;
  workerId?: string;
  taskDisplayName?: string;
  /**
   * The number of retries of the task.
   */
  retryCount?: number;
  /**
   * The attempt number of the task.
   */
  attempt?: number;
};

export type ApiResourceMetaProperties = {
  metadata: ApiResourceMeta;
};

export type CommonResult = {
  Success: boolean;
  Message: string;
};

export type TenantParameter = string;

export type Model = ApiResourceMetaProperties & ModelProperties;

export type ModelFamily = "r1" | "openai" | "unknown";

export const ModelFamily = {
  R1: "r1",
  OPENAI: "openai",
  UNKNOWN: "unknown",
} as const;

export type ModelTypes = "OpenAIChatCompletionClient" | "AzureOpenAIChatCompletionClient";

export const ModelTypes = {
  OPEN_AI_CHAT_COMPLETION_CLIENT: "OpenAIChatCompletionClient",
  AZURE_OPEN_AI_CHAT_COMPLETION_CLIENT: "AzureOpenAIChatCompletionClient",
} as const;

export type ModelProperties = {
  name: string;
  model: string;
  provider: string;
  apiKey: string;
  apiBase: string;
  vendor: string;
  description?: string;
  family: string;
  vision: boolean;
  functionCalling: boolean;
  jsonOutput: boolean;
  tags?: Array<string>;
};

export type ModelList = {
  pagination?: PaginationResponse;
  rows?: Array<Model>;
};

export type FormField = {
  type: "text" | "number" | "boolean" | "array" | "object";
  name: string;
  default_value?: string;
  label?: string;
  description?: string;
  required?: boolean;
  min?: number;
  max?: number;
  placeholder?: string;
};

export type SchemaForm = {
  form_type?: "schema" | "custom";
  form_name?: string;
  title: string;
  description?: string;
  layout?: "vertical" | "horizontal";
  fields: Array<FormField>;
};

export type ModelRunProperties = {
  llmMessages?: {
    [key: string]: string;
  };
  llmResponse?: {
    [key: string]: string;
  };
};

export type ModelRun = ApiResourceMetaProperties & ModelRunProperties;

export type ModelRunList = {
  pagination?: PaginationResponse;
  rows?: Array<ModelRun>;
};

export type ModelRunUpsert = ModelRunProperties;

export type SiteProperties = {
  /**
   * 站点ID
   */
  id?: string;
  /**
   * 租户ID
   */
  tenant_id?: string;
  /**
   * 更新时间
   */
  updated_at?: string;
  /**
   * 是否启用
   */
  enabled?: boolean;
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
  /**
   * 是否启用自动化
   */
  automation_enabled: boolean;
  /**
   * 站点状态
   */
  state: {
    /**
     * 站点状态
     */
    status?: string;
  };
};

export type Site = SiteProperties;

export type SiteList = {
  pagination?: PaginationResponse;
  rows?: Array<Site>;
};

export type CreateSiteRequest = {
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
  /**
   * 入站域名(指定绑定入站域名)
   */
  host?: string;
};

export type CreateSiteResponse = Site;

export type UpdateSiteRequest = {
  /**
   * site 标题
   */
  title?: string;
};

export type SiteHostProperties = {
  /**
   * site-host 标题
   */
  title?: string;
  /**
   * site-host 描述
   */
  description?: string;
  /**
   * 绑定域名
   */
  host: string;
};

export type SiteHost = ApiResourceMetaProperties & SiteHostProperties;

export type SiteHostList = {
  pagination?: PaginationResponse;
  rows?: Array<SiteHost>;
};

export type CreateSiteHostRequest = SiteHostProperties;

export type UpdateSiteHostRequest = SiteHost;

export type FrontendConfig = {
  /**
   * Cookie access token
   */
  cookieAccessToken: string;
  /**
   * Dashboard path
   */
  dashPath: string;
  /**
   * Hot key debug
   */
  hotKeyDebug: string;
  /**
   * 实验性质，默认租户的access token
   */
  defaultTenantAccessToken: string;
};

export type SiderbarConfig = {
  /**
   * logo
   */
  logo?: string;
  sideritems?: Array<DashSidebarItem>;
  other?:
    | FlowNames
    | AgentEventType
    | PlatformAccountList
    | Content
    | Part
    | AdkSessionList
    | AgentRunnerInput
    | AgentRunnerOutput;
};

export type DashSidebarItem = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 默认展开
   */
  defaultExpanded?: boolean;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
  children?: Array<DashSidebarItemLeaf>;
};

export type DashSidebarItemLeaf = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
};

export type UpdateEndpointRequest = {
  name?: string;
  url?: string;
  token?: string;
};

export type Endpoint = {
  metadata: ApiResourceMeta;
  name: string;
  url: string;
  token: string;
  type: string;
};

export type EndpointList = {
  pagination?: PaginationResponse;
  rows?: Array<Endpoint>;
};

export type MtWorkerProperties = {
  id?: string;
  name?: string;
};

export type MtWorkerTask = {
  id?: string;
  name?: string;
};

export type AgentEventType =
  | "ThoughtEvent"
  | "TextMessage"
  | "PlatformAccountFlowInput"
  | "ChatMessageInput"
  | "SocialAddFollowersInput"
  | "SocialLoginInput"
  | "TenantInitInput"
  | "AskUserFunctionCallInput"
  | "StartNewChatInput";

export const AgentEventType = {
  THOUGHT_EVENT: "ThoughtEvent",
  TEXT_MESSAGE: "TextMessage",
  PLATFORM_ACCOUNT_FLOW_INPUT: "PlatformAccountFlowInput",
  CHAT_MESSAGE_INPUT: "ChatMessageInput",
  SOCIAL_ADD_FOLLOWERS_INPUT: "SocialAddFollowersInput",
  SOCIAL_LOGIN_INPUT: "SocialLoginInput",
  TENANT_INIT_INPUT: "TenantInitInput",
  ASK_USER_FUNCTION_CALL_INPUT: "AskUserFunctionCallInput",
  START_NEW_CHAT_INPUT: "StartNewChatInput",
} as const;

export type FlowNames =
  | "sys"
  | "tenant"
  | "assistant"
  | "ag"
  | "browser"
  | "resource"
  | "instagram"
  | "social"
  | "team"
  | "adk";

export const FlowNames = {
  SYS: "sys",
  TENANT: "tenant",
  ASSISTANT: "assistant",
  AG: "ag",
  BROWSER: "browser",
  RESOURCE: "resource",
  INSTAGRAM: "instagram",
  SOCIAL: "social",
  TEAM: "team",
  ADK: "adk",
} as const;

export type AgentRunnerInput = {
  content?: string;
};

export type AgentRunnerOutput = {
  content?: string;
};

export type AgentProperties = {
  name: string;
  description: string;
  provider: string;
  config: {
    [key: string]: unknown;
  };
  teamId: string;
};

export type Agent = ApiResourceMetaProperties & AgentProperties;

export type AgentList = {
  pagination?: PaginationResponse;
  rows?: Array<Agent>;
};

export type AgentTopicTypes =
  | "user"
  | "human"
  | "instagram"
  | "browser"
  | "socioety"
  | "code"
  | "router"
  | "research"
  | "writer"
  | "tenant"
  | "closure"
  | "response";

export const AgentTopicTypes = {
  USER: "user",
  HUMAN: "human",
  INSTAGRAM: "instagram",
  BROWSER: "browser",
  SOCIOETY: "socioety",
  CODE: "code",
  ROUTER: "router",
  RESEARCH: "research",
  WRITER: "writer",
  TENANT: "tenant",
  CLOSURE: "closure",
  RESPONSE: "response",
} as const;

/**
 * 浏览器(browser use)任务
 */
export type BrowserTask = {
  content: string;
};

/**
 * 打开浏览器备用,一般用于调试目的Open a browser and navigate to a URL.
 */
export type BrowserOpenTask = {
  url: string;
};

/**
 * 浏览器配置(未完成)
 */
export type BrowserConfig = {
  persistent?: boolean;
};

export type ScheduledItem = {
  id: string;
  type: "cron" | "scheduled" | "delayed";
  trigger: string;
  nextTrigger: string;
  description: string;
};

export type AdkSessionState = {
  type?: "RootAgentState";
};

export type ToolTypes = "code_executor" | "social_login";

export const ToolTypes = {
  CODE_EXECUTOR: "code_executor",
  SOCIAL_LOGIN: "social_login",
} as const;

export type CodeExecutionInput = {
  /**
   * The contents of the Python code block that should be executed
   */
  code: string;
};

export type CodeExecutionResult = {
  /**
   * The result of the code execution
   */
  output: string;
  /**
   * Whether the code execution was successful
   */
  success: boolean;
};

export type SocialLoginResult = {
  /**
   * Whether the social login was successful
   */
  success: boolean;
};

export type Platform = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type PlatformList = {
  pagination?: PaginationResponse;
  rows?: Array<Platform>;
};

export type PlatformUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type PlatformAccountProperties = {
  label?: string;
  description?: string;
  username: string;
  email?: string;
  password: string;
  token?: string;
  type?: string;
  platform: string;
  enabled?: boolean;
  tags?: Array<string>;
  state?: {
    [key: string]: unknown;
  };
  error?: string;
};

export type PlatformAccountCreate = PlatformAccountProperties;

export type PlatformAccount = ApiResourceMetaProperties & PlatformAccountProperties;

export type PlatformAccountList = {
  pagination?: PaginationResponse;
  rows?: Array<PlatformAccount>;
};

export type PlatformAccountUpsert = PlatformAccountProperties;

export type AdkEventProperties = {
  id: string;
  app_name: string;
  user_id: string;
  session_id: string;
  invocation_id: string;
  author: string;
  branch?: string;
  timestamp: string;
  content: Content;
  actions: {
    [key: string]: unknown;
  };
};

export type AdkEventList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkEvent>;
};

export type AdkEvent = ApiResourceMetaProperties & AdkEventProperties;

export type AdkEventUpsert = AdkEventProperties;

export type AdkEventOrderByField = "createdAt";

export const AdkEventOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type AdkAppProperties = {
  id: string;
  app_name: string;
  user_id: string;
  session_id: string;
  invocation_id: string;
  author: string;
  branch: string;
  timestamp: string;
  content: {
    [key: string]: unknown;
  };
  actions: {
    [key: string]: unknown;
  };
};

export type AdkAppList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkApp>;
};

export type AdkApp = ApiResourceMetaProperties & AdkAppProperties;

export type AdkAppUpsert = AdkAppProperties;

export type AdkAppTypes = "root" | "instagram_agent" | "assistant" | "open_deep_research";

export const AdkAppTypes = {
  ROOT: "root",
  INSTAGRAM_AGENT: "instagram_agent",
  ASSISTANT: "assistant",
  OPEN_DEEP_RESEARCH: "open_deep_research",
} as const;

export type AdkSessionProperties = {
  id: string;
  app_name: string;
  user_id: string;
  state: AdkSessionState;
  title?: string;
  create_time: string;
  update_time: string;
};

export type AdkSession = ApiResourceMetaProperties & AdkSessionProperties;

export type AdkSessionList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkSession>;
};

export type AdkSessionUpsert = AdkSessionProperties;

export type AdkUserStateProperties = {
  id: string;
  app_name: string;
  user_id: string;
  session_id: string;
  invocation_id: string;
  author: string;
  branch: string;
  timestamp: string;
  content: {
    [key: string]: unknown;
  };
  actions: {
    [key: string]: unknown;
  };
};

export type AdkUserState = ApiResourceMetaProperties & AdkUserStateProperties;

export type AdkUserStateList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkUserState>;
};

export type AdkUserStateUpsert = AdkUserStateProperties;

export type Content = {
  role?: string;
  parts?: Array<Part>;
};

export type UserContent = {
  role: "user";
  parts: Array<Part>;
};

export type ModelContent = {
  role: "model";
  parts: Array<Part>;
};

export type Part = {
  /**
   * Optional. Text part (can be code)..
   */
  text?: string;
  /**
   * Metadata for a given video..
   */
  video_metadata?: {
    [key: string]: unknown;
  };
  /**
   * Indicates if the part is thought from the model..
   */
  thought?: boolean;
  code_execution_result?: {
    [key: string]: unknown;
  };
  /**
   * Optional. Executable code..
   */
  executable_code?: string;
  /**
   * Optional. File data..
   */
  file_data?: {
    [key: string]: unknown;
  };
  function_call?: {
    [key: string]: unknown;
  };
  function_response?: {
    [key: string]: unknown;
  };
  /**
   * Optional. Inlined bytes data..
   */
  inline_data?: {
    [key: string]: unknown;
  };
};

export type FunctionResponse = {
  /**
   * The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.
   */
  id?: string;
  /**
   * The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].
   */
  name: string;
  /**
   * Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.
   */
  response: {
    [key: string]: unknown;
  };
};

export type Artifact = {
  metadata: ApiResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  state: {
    [key: string]: unknown;
  };
  nextId?: string;
  prevId?: string;
};

export type ArtifactList = {
  pagination?: PaginationResponse;
  rows?: Array<Artifact>;
};

export type Post = {
  metadata: ApiResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog
   */
  content: string;
};

export type PostList = {
  pagination?: PaginationResponse;
  rows?: Array<Post>;
};

export type CreatePostRequest = {
  siteId: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
  /**
   * The slug of the post
   */
  slug: string;
  authorId?: string;
  status?: "draft" | "published";
};

export type DemoResponse = {
  /**
   * The message to return
   */
  message: string;
};

export type V1TaskGetData = {
  body?: never;
  path: {
    /**
     * The task id
     */
    task: string;
  };
  query?: {
    /**
     * The attempt number
     */
    attempt?: number;
  };
  url: "/api/v1/stable/tasks/{task}";
};

export type V1TaskGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The task was not found
   */
  404: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1TaskGetError = V1TaskGetErrors[keyof V1TaskGetErrors];

export type V1TaskGetResponses = {
  /**
   * Successfully retrieved the task
   */
  200: V1TaskSummary;
};

export type V1TaskGetResponse = V1TaskGetResponses[keyof V1TaskGetResponses];

export type V1TaskEventListData = {
  body?: never;
  path: {
    /**
     * The task id
     */
    task: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
  };
  url: "/api/v1/stable/tasks/{task}/task-events";
};

export type V1TaskEventListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The task was not found
   */
  404: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1TaskEventListError = V1TaskEventListErrors[keyof V1TaskEventListErrors];

export type V1TaskEventListResponses = {
  /**
   * Successfully retrieved the events
   */
  200: V1TaskEventList;
};

export type V1TaskEventListResponse = V1TaskEventListResponses[keyof V1TaskEventListResponses];

export type V1LogLineListData = {
  body?: never;
  path: {
    /**
     * The task id
     */
    task: string;
  };
  query?: never;
  url: "/api/v1/stable/tasks/{task}/logs";
};

export type V1LogLineListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type V1LogLineListError = V1LogLineListErrors[keyof V1LogLineListErrors];

export type V1LogLineListResponses = {
  /**
   * Successfully listed the events
   */
  200: V1LogLineList;
};

export type V1LogLineListResponse = V1LogLineListResponses[keyof V1LogLineListResponses];

export type V1TaskCancelData = {
  /**
   * The tasks to cancel
   */
  body: V1CancelTaskRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/stable/tenants/{tenant}/tasks/cancel";
};

export type V1TaskCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The task was not found
   */
  404: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1TaskCancelError = V1TaskCancelErrors[keyof V1TaskCancelErrors];

export type V1TaskCancelResponses = {
  /**
   * Successfully cancelled the tasks
   */
  200: unknown;
};

export type V1TaskReplayData = {
  /**
   * The tasks to replay
   */
  body: V1ReplayTaskRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/stable/tenants/{tenant}/tasks/replay";
};

export type V1TaskReplayErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The task was not found
   */
  404: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1TaskReplayError = V1TaskReplayErrors[keyof V1TaskReplayErrors];

export type V1TaskReplayResponses = {
  /**
   * Successfully replayed the tasks
   */
  200: unknown;
};

export type V1DagListTasksData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The external id of the DAG
     */
    dag_ids: Array<string>;
    /**
     * The tenant id
     */
    tenant: string;
  };
  url: "/api/v1/stable/dags/tasks";
};

export type V1DagListTasksErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1DagListTasksError = V1DagListTasksErrors[keyof V1DagListTasksErrors];

export type V1DagListTasksResponses = {
  /**
   * The list of tasks
   */
  200: Array<V1DagChildren>;
};

export type V1DagListTasksResponse = V1DagListTasksResponses[keyof V1DagListTasksResponses];

export type V1WorkflowRunListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * A list of statuses to filter by
     */
    statuses?: Array<V1TaskStatus>;
    /**
     * The earliest date to filter by
     */
    since: string;
    /**
     * The latest date to filter by
     */
    until?: string;
    /**
     * Additional metadata k-v pairs to filter by
     */
    additional_metadata?: Array<string>;
    /**
     * The workflow ids to find runs for
     */
    workflow_ids?: Array<string>;
    /**
     * The worker id to filter by
     */
    worker_id?: string;
    /**
     * Whether to include DAGs or only to include tasks
     */
    only_tasks: boolean;
    /**
     * The parent task external id to filter by
     */
    parent_task_external_id?: string;
    /**
     * The external id of the event that triggered the workflow run
     */
    triggering_event_external_id?: string;
  };
  url: "/api/v1/stable/tenants/{tenant}/workflow-runs";
};

export type V1WorkflowRunListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1WorkflowRunListError = V1WorkflowRunListErrors[keyof V1WorkflowRunListErrors];

export type V1WorkflowRunListResponses = {
  /**
   * Successfully listed the tasks
   */
  200: V1TaskSummaryList;
};

export type V1WorkflowRunListResponse =
  V1WorkflowRunListResponses[keyof V1WorkflowRunListResponses];

export type V1WorkflowRunDisplayNamesListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query: {
    /**
     * The external ids of the workflow runs to get display names for
     */
    external_ids: Array<string>;
  };
  url: "/api/v1/stable/tenants/{tenant}/workflow-runs/display-names";
};

export type V1WorkflowRunDisplayNamesListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1WorkflowRunDisplayNamesListError =
  V1WorkflowRunDisplayNamesListErrors[keyof V1WorkflowRunDisplayNamesListErrors];

export type V1WorkflowRunDisplayNamesListResponses = {
  /**
   * Successfully listed the tasks
   */
  200: V1WorkflowRunDisplayNameList;
};

export type V1WorkflowRunDisplayNamesListResponse =
  V1WorkflowRunDisplayNamesListResponses[keyof V1WorkflowRunDisplayNamesListResponses];

export type V1WorkflowRunCreateData = {
  /**
   * The workflow run to create
   */
  body: V1TriggerWorkflowRunRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/stable/tenants/{tenant}/workflow-runs/trigger";
};

export type V1WorkflowRunCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type V1WorkflowRunCreateError = V1WorkflowRunCreateErrors[keyof V1WorkflowRunCreateErrors];

export type V1WorkflowRunCreateResponses = {
  /**
   * Successfully created the workflow run
   */
  200: V1WorkflowRunDetails;
};

export type V1WorkflowRunCreateResponse =
  V1WorkflowRunCreateResponses[keyof V1WorkflowRunCreateResponses];

export type V1WorkflowRunGetData = {
  body?: never;
  path: {
    /**
     * The workflow run id to get
     */
    "v1-workflow-run": string;
  };
  query?: never;
  url: "/api/v1/stable/workflow-runs/{v1-workflow-run}";
};

export type V1WorkflowRunGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1WorkflowRunGetError = V1WorkflowRunGetErrors[keyof V1WorkflowRunGetErrors];

export type V1WorkflowRunGetResponses = {
  /**
   * Successfully listed the tasks
   */
  200: V1WorkflowRunDetails;
};

export type V1WorkflowRunGetResponse = V1WorkflowRunGetResponses[keyof V1WorkflowRunGetResponses];

export type V1WorkflowRunTaskEventsListData = {
  body?: never;
  path: {
    /**
     * The workflow run id to find runs for
     */
    "v1-workflow-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
  };
  url: "/api/v1/stable/workflow-runs/{v1-workflow-run}/task-events";
};

export type V1WorkflowRunTaskEventsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1WorkflowRunTaskEventsListError =
  V1WorkflowRunTaskEventsListErrors[keyof V1WorkflowRunTaskEventsListErrors];

export type V1WorkflowRunTaskEventsListResponses = {
  /**
   * Successfully listed the tasks
   */
  200: V1TaskEventList;
};

export type V1WorkflowRunTaskEventsListResponse =
  V1WorkflowRunTaskEventsListResponses[keyof V1WorkflowRunTaskEventsListResponses];

export type V1WorkflowRunGetTimingsData = {
  body?: never;
  path: {
    /**
     * The workflow run id to get
     */
    "v1-workflow-run": string;
  };
  query?: {
    /**
     * The depth to retrieve children
     */
    depth?: number;
  };
  url: "/api/v1/stable/workflow-runs/{v1-workflow-run}/task-timings";
};

export type V1WorkflowRunGetTimingsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1WorkflowRunGetTimingsError =
  V1WorkflowRunGetTimingsErrors[keyof V1WorkflowRunGetTimingsErrors];

export type V1WorkflowRunGetTimingsResponses = {
  /**
   * Successfully listed the tasks
   */
  200: V1TaskTimingList;
};

export type V1WorkflowRunGetTimingsResponse =
  V1WorkflowRunGetTimingsResponses[keyof V1WorkflowRunGetTimingsResponses];

export type V1TaskListStatusMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query: {
    /**
     * The start time to get metrics for
     */
    since: string;
    /**
     * The end time to get metrics for
     */
    until?: string;
    /**
     * The workflow id to find runs for
     */
    workflow_ids?: Array<string>;
    /**
     * The parent task's external id
     */
    parent_task_external_id?: string;
    /**
     * The id of the event that triggered the task
     */
    triggering_event_external_id?: string;
  };
  url: "/api/v1/stable/tenants/{tenant}/task-metrics";
};

export type V1TaskListStatusMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1TaskListStatusMetricsError =
  V1TaskListStatusMetricsErrors[keyof V1TaskListStatusMetricsErrors];

export type V1TaskListStatusMetricsResponses = {
  /**
   * Successfully retrieved the task run metrics
   */
  200: V1TaskRunMetrics;
};

export type V1TaskListStatusMetricsResponse =
  V1TaskListStatusMetricsResponses[keyof V1TaskListStatusMetricsResponses];

export type V1TaskGetPointMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The time after the task was created
     */
    createdAfter?: string;
    /**
     * The time before the task was completed
     */
    finishedBefore?: string;
  };
  url: "/api/v1/stable/tenants/{tenant}/task-point-metrics";
};

export type V1TaskGetPointMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not implemented
   */
  501: ApiErrors;
};

export type V1TaskGetPointMetricsError =
  V1TaskGetPointMetricsErrors[keyof V1TaskGetPointMetricsErrors];

export type V1TaskGetPointMetricsResponses = {
  /**
   * Successfully retrieved the task point metrics
   */
  200: V1TaskPointMetrics;
};

export type V1TaskGetPointMetricsResponse =
  V1TaskGetPointMetricsResponses[keyof V1TaskGetPointMetricsResponses];

export type V1EventListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * A list of keys to filter by
     */
    keys?: Array<EventKey>;
  };
  url: "/api/v1/stable/tenants/{tenant}/events";
};

export type V1EventListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type V1EventListError = V1EventListErrors[keyof V1EventListErrors];

export type V1EventListResponses = {
  /**
   * Successfully listed the events
   */
  200: V1EventList;
};

export type V1EventListResponse = V1EventListResponses[keyof V1EventListResponses];

export type V1FilterListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The workflow ids to filter by
     */
    workflowIds?: Array<string>;
    /**
     * The scopes to subset candidate filters by
     */
    scopes?: Array<string>;
  };
  url: "/api/v1/stable/tenants/{tenant}/filters";
};

export type V1FilterListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type V1FilterListError = V1FilterListErrors[keyof V1FilterListErrors];

export type V1FilterListResponses = {
  /**
   * Successfully listed the filters
   */
  200: V1FilterList;
};

export type V1FilterListResponse = V1FilterListResponses[keyof V1FilterListResponses];

export type V1FilterCreateData = {
  /**
   * The input to the filter creation
   */
  body: V1CreateFilterRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/stable/tenants/{tenant}/filters";
};

export type V1FilterCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type V1FilterCreateError = V1FilterCreateErrors[keyof V1FilterCreateErrors];

export type V1FilterCreateResponses = {
  /**
   * Successfully created the cron job workflow trigger
   */
  200: V1Filter;
};

export type V1FilterCreateResponse = V1FilterCreateResponses[keyof V1FilterCreateResponses];

export type V1FilterDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The filter id to delete
     */
    "v1-filter": string;
  };
  query?: never;
  url: "/api/v1/stable/tenants/{tenant}/filters/{v1-filter}";
};

export type V1FilterDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type V1FilterDeleteError = V1FilterDeleteErrors[keyof V1FilterDeleteErrors];

export type V1FilterDeleteResponses = {
  /**
   * Successfully created the cron job workflow trigger
   */
  200: V1Filter;
};

export type V1FilterDeleteResponse = V1FilterDeleteResponses[keyof V1FilterDeleteResponses];

export type V1FilterGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The filter id
     */
    "v1-filter": string;
  };
  query?: never;
  url: "/api/v1/stable/tenants/{tenant}/filters/{v1-filter}";
};

export type V1FilterGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type V1FilterGetError = V1FilterGetErrors[keyof V1FilterGetErrors];

export type V1FilterGetResponses = {
  /**
   * Successfully got the filter
   */
  200: V1Filter;
};

export type V1FilterGetResponse = V1FilterGetResponses[keyof V1FilterGetResponses];

export type ReadinessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/ready";
};

export type ReadinessGetErrors = {
  /**
   * Not ready to accept traffic
   */
  500: unknown;
};

export type ReadinessGetResponses = {
  /**
   * Healthy
   */
  200: unknown;
};

export type LivenessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/live";
};

export type LivenessGetErrors = {
  /**
   * Not liveness
   */
  500: unknown;
};

export type LivenessGetResponses = {
  /**
   * Healthy
   */
  200: unknown;
};

export type MetadataGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/meta";
};

export type MetadataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type MetadataGetError = MetadataGetErrors[keyof MetadataGetErrors];

export type MetadataGetResponses = {
  /**
   * Successfully retrieved the metadata
   */
  200: ApiMeta;
};

export type MetadataGetResponse = MetadataGetResponses[keyof MetadataGetResponses];

export type CloudMetadataGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/cloud/metadata";
};

export type CloudMetadataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type CloudMetadataGetError = CloudMetadataGetErrors[keyof CloudMetadataGetErrors];

export type CloudMetadataGetResponses = {
  /**
   * Cloud unavailable
   */
  200: ApiErrors;
};

export type CloudMetadataGetResponse = CloudMetadataGetResponses[keyof CloudMetadataGetResponses];

export type MetadataListIntegrationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/meta/integrations";
};

export type MetadataListIntegrationsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type MetadataListIntegrationsError =
  MetadataListIntegrationsErrors[keyof MetadataListIntegrationsErrors];

export type MetadataListIntegrationsResponses = {
  /**
   * Successfully retrieved the list of integrations
   */
  200: ListApiMetaIntegration;
};

export type MetadataListIntegrationsResponse =
  MetadataListIntegrationsResponses[keyof MetadataListIntegrationsResponses];

export type UserUpdateLoginData = {
  body?: UserLoginRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/login";
};

export type UserUpdateLoginErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdateLoginError = UserUpdateLoginErrors[keyof UserUpdateLoginErrors];

export type UserUpdateLoginResponses = {
  /**
   * Successfully logged in
   */
  200: User;
};

export type UserUpdateLoginResponse = UserUpdateLoginResponses[keyof UserUpdateLoginResponses];

export type UserUpdateGoogleOauthStartData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/google/start";
};

export type UserUpdateGoogleOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/google/callback";
};

export type UserUpdateGithubOauthStartData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/github/start";
};

export type UserUpdateGithubOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/github/callback";
};

export type UserUpdateSlackOauthStartData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/slack/start";
};

export type UserUpdateSlackOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/slack/callback";
};

export type SnsUpdateData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The event key
     */
    event: string;
  };
  query?: never;
  url: "/api/v1/sns/{tenant}/{event}";
};

export type SnsUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsUpdateError = SnsUpdateErrors[keyof SnsUpdateErrors];

export type SnsUpdateResponses = {
  /**
   * Successfully processed webhook
   */
  200: unknown;
};

export type SnsListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sns";
};

export type SnsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsListError = SnsListErrors[keyof SnsListErrors];

export type SnsListResponses = {
  /**
   * Successfully retrieved SNS integrations
   */
  200: ListSnsIntegrations;
};

export type SnsListResponse = SnsListResponses[keyof SnsListResponses];

export type SnsCreateData = {
  body?: CreateSnsIntegrationRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sns";
};

export type SnsCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsCreateError = SnsCreateErrors[keyof SnsCreateErrors];

export type SnsCreateResponses = {
  /**
   * Successfully created SNS integration
   */
  201: SnsIntegration;
};

export type SnsCreateResponse = SnsCreateResponses[keyof SnsCreateResponses];

export type AlertEmailGroupListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting-email-groups";
};

export type AlertEmailGroupListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupListError = AlertEmailGroupListErrors[keyof AlertEmailGroupListErrors];

export type AlertEmailGroupListResponses = {
  /**
   * Successfully retrieved the tenant alert email groups
   */
  200: TenantAlertEmailGroupList;
};

export type AlertEmailGroupListResponse =
  AlertEmailGroupListResponses[keyof AlertEmailGroupListResponses];

export type AlertEmailGroupCreateData = {
  /**
   * The tenant alert email group to create
   */
  body: CreateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting-email-groups";
};

export type AlertEmailGroupCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupCreateError =
  AlertEmailGroupCreateErrors[keyof AlertEmailGroupCreateErrors];

export type AlertEmailGroupCreateResponses = {
  /**
   * Successfully created the tenant alert email group
   */
  201: TenantAlertEmailGroup;
};

export type AlertEmailGroupCreateResponse =
  AlertEmailGroupCreateResponses[keyof AlertEmailGroupCreateResponses];

export type TenantResourcePolicyGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/resource-policy";
};

export type TenantResourcePolicyGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantResourcePolicyGetError =
  TenantResourcePolicyGetErrors[keyof TenantResourcePolicyGetErrors];

export type TenantResourcePolicyGetResponses = {
  /**
   * Successfully retrieved the tenant resource policy
   */
  200: TenantResourcePolicy;
};

export type TenantResourcePolicyGetResponse =
  TenantResourcePolicyGetResponses[keyof TenantResourcePolicyGetResponses];

export type AlertEmailGroupDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
  query?: never;
  url: "/api/v1/alerting-email-groups/{alert-email-group}";
};

export type AlertEmailGroupDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupDeleteError =
  AlertEmailGroupDeleteErrors[keyof AlertEmailGroupDeleteErrors];

export type AlertEmailGroupDeleteResponses = {
  /**
   * Successfully deleted the tenant alert email group
   */
  204: void;
};

export type AlertEmailGroupDeleteResponse =
  AlertEmailGroupDeleteResponses[keyof AlertEmailGroupDeleteResponses];

export type AlertEmailGroupUpdateData = {
  /**
   * The tenant alert email group to update
   */
  body: UpdateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
  query?: never;
  url: "/api/v1/alerting-email-groups/{alert-email-group}";
};

export type AlertEmailGroupUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupUpdateError =
  AlertEmailGroupUpdateErrors[keyof AlertEmailGroupUpdateErrors];

export type AlertEmailGroupUpdateResponses = {
  /**
   * Successfully updated the tenant alert email group
   */
  200: TenantAlertEmailGroup;
};

export type AlertEmailGroupUpdateResponse =
  AlertEmailGroupUpdateResponses[keyof AlertEmailGroupUpdateResponses];

export type SnsDeleteData = {
  body?: never;
  path: {
    /**
     * The SNS integration id
     */
    sns: string;
  };
  query?: never;
  url: "/api/v1/sns/{sns}";
};

export type SnsDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsDeleteError = SnsDeleteErrors[keyof SnsDeleteErrors];

export type SnsDeleteResponses = {
  /**
   * Successfully deleted SNS integration
   */
  204: void;
};

export type SnsDeleteResponse = SnsDeleteResponses[keyof SnsDeleteResponses];

export type SlackWebhookListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/slack";
};

export type SlackWebhookListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SlackWebhookListError = SlackWebhookListErrors[keyof SlackWebhookListErrors];

export type SlackWebhookListResponses = {
  /**
   * Successfully retrieved Slack webhooks
   */
  200: ListSlackWebhooks;
};

export type SlackWebhookListResponse = SlackWebhookListResponses[keyof SlackWebhookListResponses];

export type SlackWebhookDeleteData = {
  body?: never;
  path: {
    /**
     * The Slack webhook id
     */
    slack: string;
  };
  query?: never;
  url: "/api/v1/slack/{slack}";
};

export type SlackWebhookDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SlackWebhookDeleteError = SlackWebhookDeleteErrors[keyof SlackWebhookDeleteErrors];

export type SlackWebhookDeleteResponses = {
  /**
   * Successfully deleted Slack webhook
   */
  204: void;
};

export type SlackWebhookDeleteResponse =
  SlackWebhookDeleteResponses[keyof SlackWebhookDeleteResponses];

export type UserGetCurrentData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/current";
};

export type UserGetCurrentErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserGetCurrentError = UserGetCurrentErrors[keyof UserGetCurrentErrors];

export type UserGetCurrentResponses = {
  /**
   * Successfully retrieved the user
   */
  200: User;
};

export type UserGetCurrentResponse = UserGetCurrentResponses[keyof UserGetCurrentResponses];

export type UserUpdatePasswordData = {
  body?: UserChangePasswordRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/password";
};

export type UserUpdatePasswordErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdatePasswordError = UserUpdatePasswordErrors[keyof UserUpdatePasswordErrors];

export type UserUpdatePasswordResponses = {
  /**
   * Successfully changed password
   */
  200: User;
};

export type UserUpdatePasswordResponse =
  UserUpdatePasswordResponses[keyof UserUpdatePasswordResponses];

export type UserCreateData = {
  body?: UserRegisterRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/register";
};

export type UserCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserCreateError = UserCreateErrors[keyof UserCreateErrors];

export type UserCreateResponses = {
  /**
   * Successfully registered the user
   */
  200: User;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserUpdateLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/logout";
};

export type UserUpdateLogoutErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdateLogoutError = UserUpdateLogoutErrors[keyof UserUpdateLogoutErrors];

export type UserUpdateLogoutResponses = {
  /**
   * Successfully logged out
   */
  200: User;
};

export type UserUpdateLogoutResponse = UserUpdateLogoutResponses[keyof UserUpdateLogoutResponses];

export type TenantMembershipsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/memberships";
};

export type TenantMembershipsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type TenantMembershipsListError =
  TenantMembershipsListErrors[keyof TenantMembershipsListErrors];

export type TenantMembershipsListResponses = {
  /**
   * Successfully listed the tenant memberships
   */
  200: UserTenantMembershipsList;
};

export type TenantMembershipsListResponse =
  TenantMembershipsListResponses[keyof TenantMembershipsListResponses];

export type UserListTenantInvitesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites";
};

export type UserListTenantInvitesErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type UserListTenantInvitesError =
  UserListTenantInvitesErrors[keyof UserListTenantInvitesErrors];

export type UserListTenantInvitesResponses = {
  /**
   * Successfully listed the tenant invites
   */
  200: TenantInviteList;
};

export type UserListTenantInvitesResponse =
  UserListTenantInvitesResponses[keyof UserListTenantInvitesResponses];

export type TenantInviteAcceptData = {
  body?: AcceptInviteRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites/accept";
};

export type TenantInviteAcceptErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteAcceptError = TenantInviteAcceptErrors[keyof TenantInviteAcceptErrors];

export type TenantInviteAcceptResponses = {
  /**
   * Successfully accepted the tenant invite
   */
  200: unknown;
};

export type TenantInviteRejectData = {
  body?: RejectInviteRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites/reject";
};

export type TenantInviteRejectErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteRejectError = TenantInviteRejectErrors[keyof TenantInviteRejectErrors];

export type TenantInviteRejectResponses = {
  /**
   * Successfully rejected the tenant invite
   */
  200: unknown;
};

export type TenantCreateData = {
  /**
   * The tenant to create
   */
  body: CreateTenantRequest;
  path?: never;
  query?: never;
  url: "/api/v1/tenants";
};

export type TenantCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantCreateError = TenantCreateErrors[keyof TenantCreateErrors];

export type TenantCreateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Tenant;
};

export type TenantCreateResponse = TenantCreateResponses[keyof TenantCreateResponses];

export type TenantUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateTenantRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}";
};

export type TenantUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantUpdateError = TenantUpdateErrors[keyof TenantUpdateErrors];

export type TenantUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Tenant;
};

export type TenantUpdateResponse = TenantUpdateResponses[keyof TenantUpdateResponses];

export type TenantAlertingSettingsGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting/settings";
};

export type TenantAlertingSettingsGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantAlertingSettingsGetError =
  TenantAlertingSettingsGetErrors[keyof TenantAlertingSettingsGetErrors];

export type TenantAlertingSettingsGetResponses = {
  /**
   * Successfully retrieved the tenant alerting settings
   */
  200: TenantAlertingSettings;
};

export type TenantAlertingSettingsGetResponse =
  TenantAlertingSettingsGetResponses[keyof TenantAlertingSettingsGetResponses];

export type TenantInviteListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites";
};

export type TenantInviteListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteListError = TenantInviteListErrors[keyof TenantInviteListErrors];

export type TenantInviteListResponses = {
  /**
   * Successfully retrieved the tenant invites
   */
  200: TenantInviteList;
};

export type TenantInviteListResponse = TenantInviteListResponses[keyof TenantInviteListResponses];

export type TenantInviteCreateData = {
  /**
   * The tenant invite to create
   */
  body: CreateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites";
};

export type TenantInviteCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteCreateError = TenantInviteCreateErrors[keyof TenantInviteCreateErrors];

export type TenantInviteCreateResponses = {
  /**
   * Successfully created the tenant invite
   */
  201: TenantInvite;
};

export type TenantInviteCreateResponse =
  TenantInviteCreateResponses[keyof TenantInviteCreateResponses];

export type TenantInviteDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}";
};

export type TenantInviteDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type TenantInviteDeleteError = TenantInviteDeleteErrors[keyof TenantInviteDeleteErrors];

export type TenantInviteDeleteResponses = {
  /**
   * Successfully deleted the tenant invite
   */
  200: TenantInvite;
};

export type TenantInviteDeleteResponse =
  TenantInviteDeleteResponses[keyof TenantInviteDeleteResponses];

export type TenantInviteUpdateData = {
  /**
   * The tenant invite to update
   */
  body: UpdateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}";
};

export type TenantInviteUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type TenantInviteUpdateError = TenantInviteUpdateErrors[keyof TenantInviteUpdateErrors];

export type TenantInviteUpdateResponses = {
  /**
   * Successfully updated the tenant invite
   */
  200: TenantInvite;
};

export type TenantInviteUpdateResponse =
  TenantInviteUpdateResponses[keyof TenantInviteUpdateResponses];

export type ApiTokenListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/api-tokens";
};

export type ApiTokenListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenListError = ApiTokenListErrors[keyof ApiTokenListErrors];

export type ApiTokenListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: ListApiTokensResponse;
};

export type ApiTokenListResponse = ApiTokenListResponses[keyof ApiTokenListResponses];

export type ApiTokenCreateData = {
  body?: CreateApiTokenRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/api-tokens";
};

export type ApiTokenCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenCreateError = ApiTokenCreateErrors[keyof ApiTokenCreateErrors];

export type ApiTokenCreateResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: CreateApiTokenResponse;
};

export type ApiTokenCreateResponse = ApiTokenCreateResponses[keyof ApiTokenCreateResponses];

export type ApiTokenUpdateRevokeData = {
  body?: never;
  path: {
    /**
     * The API token
     */
    "api-token": string;
  };
  query?: never;
  url: "/api/v1/api-tokens/{api-token}";
};

export type ApiTokenUpdateRevokeErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenUpdateRevokeError =
  ApiTokenUpdateRevokeErrors[keyof ApiTokenUpdateRevokeErrors];

export type ApiTokenUpdateRevokeResponses = {
  /**
   * Successfully revoked the token
   */
  204: void;
};

export type ApiTokenUpdateRevokeResponse =
  ApiTokenUpdateRevokeResponses[keyof ApiTokenUpdateRevokeResponses];

export type TenantGetQueueMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of workflow IDs to filter by
     */
    workflows?: Array<WorkflowId>;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
  };
  url: "/api/v1/tenants/{tenant}/queue-metrics";
};

export type TenantGetQueueMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantGetQueueMetricsError =
  TenantGetQueueMetricsErrors[keyof TenantGetQueueMetricsErrors];

export type TenantGetQueueMetricsResponses = {
  /**
   * Successfully retrieved the workflow version metrics
   */
  200: TenantQueueMetrics;
};

export type TenantGetQueueMetricsResponse =
  TenantGetQueueMetricsResponses[keyof TenantGetQueueMetricsResponses];

export type TenantGetStepRunQueueMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-run-queue-metrics";
};

export type TenantGetStepRunQueueMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantGetStepRunQueueMetricsError =
  TenantGetStepRunQueueMetricsErrors[keyof TenantGetStepRunQueueMetricsErrors];

export type TenantGetStepRunQueueMetricsResponses = {
  /**
   * Successfully retrieved the step run queue metrics
   */
  200: TenantStepRunQueueMetrics;
};

export type TenantGetStepRunQueueMetricsResponse =
  TenantGetStepRunQueueMetricsResponses[keyof TenantGetStepRunQueueMetricsResponses];

export type EventListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * A list of keys to filter by
     */
    keys?: Array<EventKey>;
    /**
     * A list of workflow IDs to filter by
     */
    workflows?: Array<WorkflowId>;
    /**
     * A list of workflow run statuses to filter by
     */
    statuses?: WorkflowRunStatusList;
    /**
     * The search query to filter for
     */
    search?: EventSearch;
    /**
     * What to order by
     */
    orderByField?: EventOrderByField;
    /**
     * The order direction
     */
    orderByDirection?: EventOrderByDirection;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * A list of event ids to filter by
     */
    eventIds?: Array<string>;
  };
  url: "/api/v1/tenants/{tenant}/events";
};

export type EventListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventListError = EventListErrors[keyof EventListErrors];

export type EventListResponses = {
  /**
   * Successfully listed the events
   */
  200: EventList;
};

export type EventListResponse = EventListResponses[keyof EventListResponses];

export type EventCreateData = {
  /**
   * The event to create
   */
  body: CreateEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events";
};

export type EventCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventCreateError = EventCreateErrors[keyof EventCreateErrors];

export type EventCreateResponses = {
  /**
   * Successfully created the event
   */
  200: Event;
};

export type EventCreateResponse = EventCreateResponses[keyof EventCreateResponses];

export type EventCreateBulkData = {
  /**
   * The events to create
   */
  body: BulkCreateEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/bulk";
};

export type EventCreateBulkErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventCreateBulkError = EventCreateBulkErrors[keyof EventCreateBulkErrors];

export type EventCreateBulkResponses = {
  /**
   * Successfully created the events
   */
  200: BulkCreateEventResponse;
};

export type EventCreateBulkResponse = EventCreateBulkResponses[keyof EventCreateBulkResponses];

export type EventUpdateReplayData = {
  /**
   * The event ids to replay
   */
  body: ReplayEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/replay";
};

export type EventUpdateReplayErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventUpdateReplayError = EventUpdateReplayErrors[keyof EventUpdateReplayErrors];

export type EventUpdateReplayResponses = {
  /**
   * Successfully replayed the events
   */
  200: EventList;
};

export type EventUpdateReplayResponse =
  EventUpdateReplayResponses[keyof EventUpdateReplayResponses];

export type EventUpdateCancelData = {
  /**
   * The event ids to replay
   */
  body: CancelEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/cancel";
};

export type EventUpdateCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventUpdateCancelError = EventUpdateCancelErrors[keyof EventUpdateCancelErrors];

export type EventUpdateCancelResponses = {
  /**
   * Successfully canceled runs for the events
   */
  200: {
    workflowRunIds?: Array<string>;
  };
};

export type EventUpdateCancelResponse =
  EventUpdateCancelResponses[keyof EventUpdateCancelResponses];

export type RateLimitListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The search query to filter for
     */
    search?: string;
    /**
     * What to order by
     */
    orderByField?: RateLimitOrderByField;
    /**
     * The order direction
     */
    orderByDirection?: RateLimitOrderByDirection;
  };
  url: "/api/v1/tenants/{tenant}/rate-limits";
};

export type RateLimitListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type RateLimitListError = RateLimitListErrors[keyof RateLimitListErrors];

export type RateLimitListResponses = {
  /**
   * Successfully listed the rate limits
   */
  200: RateLimitList;
};

export type RateLimitListResponse = RateLimitListResponses[keyof RateLimitListResponses];

export type TenantMemberListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/members";
};

export type TenantMemberListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantMemberListError = TenantMemberListErrors[keyof TenantMemberListErrors];

export type TenantMemberListResponses = {
  /**
   * Successfully retrieved the tenant members
   */
  200: TenantMemberList;
};

export type TenantMemberListResponse = TenantMemberListResponses[keyof TenantMemberListResponses];

export type TenantMemberDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant member id
     */
    member: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/members/{member}";
};

export type TenantMemberDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantMemberDeleteError = TenantMemberDeleteErrors[keyof TenantMemberDeleteErrors];

export type TenantMemberDeleteResponses = {
  /**
   * Successfully deleted the tenant members
   */
  204: TenantMember;
};

export type TenantMemberDeleteResponse =
  TenantMemberDeleteResponses[keyof TenantMemberDeleteResponses];

export type EventGetData = {
  body?: never;
  path: {
    /**
     * The event id
     */
    event: string;
  };
  query?: never;
  url: "/api/v1/events/{event}";
};

export type EventGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventGetError = EventGetErrors[keyof EventGetErrors];

export type EventGetResponses = {
  /**
   * Successfully retrieved the event data
   */
  200: Event;
};

export type EventGetResponse = EventGetResponses[keyof EventGetResponses];

export type EventDataGetData = {
  body?: never;
  path: {
    /**
     * The event id
     */
    event: string;
  };
  query?: never;
  url: "/api/v1/events/{event}/data";
};

export type EventDataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventDataGetError = EventDataGetErrors[keyof EventDataGetErrors];

export type EventDataGetResponses = {
  /**
   * Successfully retrieved the event data
   */
  200: EventData;
};

export type EventDataGetResponse = EventDataGetResponses[keyof EventDataGetResponses];

export type EventKeyListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/keys";
};

export type EventKeyListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventKeyListError = EventKeyListErrors[keyof EventKeyListErrors];

export type EventKeyListResponses = {
  /**
   * Successfully listed the event keys
   */
  200: EventKeyList;
};

export type EventKeyListResponse = EventKeyListResponses[keyof EventKeyListResponses];

export type WorkflowListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * Search by name
     */
    name?: string;
  };
  url: "/api/v1/tenants/{tenant}/workflows";
};

export type WorkflowListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowListError = WorkflowListErrors[keyof WorkflowListErrors];

export type WorkflowListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: WorkflowList;
};

export type WorkflowListResponse = WorkflowListResponses[keyof WorkflowListResponses];

export type ScheduledWorkflowRunCreateData = {
  /**
   * The input to the scheduled workflow run
   */
  body: ScheduleWorkflowRunRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow name
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/{workflow}/scheduled";
};

export type ScheduledWorkflowRunCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type ScheduledWorkflowRunCreateError =
  ScheduledWorkflowRunCreateErrors[keyof ScheduledWorkflowRunCreateErrors];

export type ScheduledWorkflowRunCreateResponses = {
  /**
   * Successfully created the scheduled workflow run
   */
  200: ScheduledWorkflows;
};

export type ScheduledWorkflowRunCreateResponse =
  ScheduledWorkflowRunCreateResponses[keyof ScheduledWorkflowRunCreateResponses];

export type WorkflowScheduledListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The order by field
     */
    orderByField?: ScheduledWorkflowsOrderByField;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * A list of scheduled run statuses to filter by
     */
    statuses?: Array<ScheduledRunStatus>;
  };
  url: "/api/v1/tenants/{tenant}/workflows/scheduled";
};

export type WorkflowScheduledListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowScheduledListError =
  WorkflowScheduledListErrors[keyof WorkflowScheduledListErrors];

export type WorkflowScheduledListResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: ScheduledWorkflowsList;
};

export type WorkflowScheduledListResponse =
  WorkflowScheduledListResponses[keyof WorkflowScheduledListResponses];

export type WorkflowScheduledDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The scheduled workflow id
     */
    "scheduled-workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/scheduled/{scheduled-workflow-run}";
};

export type WorkflowScheduledDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type WorkflowScheduledDeleteError =
  WorkflowScheduledDeleteErrors[keyof WorkflowScheduledDeleteErrors];

export type WorkflowScheduledDeleteResponses = {
  /**
   * Successfully deleted the scheduled workflow run
   */
  204: void;
};

export type WorkflowScheduledDeleteResponse =
  WorkflowScheduledDeleteResponses[keyof WorkflowScheduledDeleteResponses];

export type WorkflowScheduledGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The scheduled workflow id
     */
    "scheduled-workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/scheduled/{scheduled-workflow-run}";
};

export type WorkflowScheduledGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Forbidden
   */
  404: ApiErrors;
};

export type WorkflowScheduledGetError =
  WorkflowScheduledGetErrors[keyof WorkflowScheduledGetErrors];

export type WorkflowScheduledGetResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: ScheduledWorkflows;
};

export type WorkflowScheduledGetResponse =
  WorkflowScheduledGetResponses[keyof WorkflowScheduledGetResponses];

export type CronWorkflowTriggerCreateData = {
  /**
   * The input to the cron job workflow trigger
   */
  body: CreateCronWorkflowTriggerRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow name
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/{workflow}/crons";
};

export type CronWorkflowTriggerCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type CronWorkflowTriggerCreateError =
  CronWorkflowTriggerCreateErrors[keyof CronWorkflowTriggerCreateErrors];

export type CronWorkflowTriggerCreateResponses = {
  /**
   * Successfully created the cron job workflow trigger
   */
  200: CronWorkflows;
};

export type CronWorkflowTriggerCreateResponse =
  CronWorkflowTriggerCreateResponses[keyof CronWorkflowTriggerCreateResponses];

export type CronWorkflowListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The workflow name to get runs for.
     */
    workflowName?: string;
    /**
     * The cron name to get runs for.
     */
    cronName?: string;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The order by field
     */
    orderByField?: CronWorkflowsOrderByField;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
  };
  url: "/api/v1/tenants/{tenant}/workflows/crons";
};

export type CronWorkflowListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type CronWorkflowListError = CronWorkflowListErrors[keyof CronWorkflowListErrors];

export type CronWorkflowListResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: CronWorkflowsList;
};

export type CronWorkflowListResponse = CronWorkflowListResponses[keyof CronWorkflowListResponses];

export type WorkflowCronDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The cron job id
     */
    "cron-workflow": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/crons/{cron-workflow}";
};

export type WorkflowCronDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type WorkflowCronDeleteError = WorkflowCronDeleteErrors[keyof WorkflowCronDeleteErrors];

export type WorkflowCronDeleteResponses = {
  /**
   * Successfully deleted the cron job workflow run
   */
  204: void;
};

export type WorkflowCronDeleteResponse =
  WorkflowCronDeleteResponses[keyof WorkflowCronDeleteResponses];

export type WorkflowCronGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The cron job id
     */
    "cron-workflow": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/crons/{cron-workflow}";
};

export type WorkflowCronGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Forbidden
   */
  404: ApiErrors;
};

export type WorkflowCronGetError = WorkflowCronGetErrors[keyof WorkflowCronGetErrors];

export type WorkflowCronGetResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: CronWorkflows;
};

export type WorkflowCronGetResponse = WorkflowCronGetResponses[keyof WorkflowCronGetResponses];

export type WorkflowRunCancelData = {
  /**
   * The input to cancel the workflow runs
   */
  body: WorkflowRunsCancelRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/cancel";
};

export type WorkflowRunCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunCancelError = WorkflowRunCancelErrors[keyof WorkflowRunCancelErrors];

export type WorkflowRunCancelResponses = {
  /**
   * Successfully cancelled the workflow runs
   */
  200: {
    workflowRunIds?: Array<string>;
  };
};

export type WorkflowRunCancelResponse =
  WorkflowRunCancelResponses[keyof WorkflowRunCancelResponses];

export type WorkflowDeleteData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/workflows/{workflow}";
};

export type WorkflowDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowDeleteError = WorkflowDeleteErrors[keyof WorkflowDeleteErrors];

export type WorkflowDeleteResponses = {
  /**
   * Successfully deleted the workflow
   */
  204: void;
};

export type WorkflowDeleteResponse = WorkflowDeleteResponses[keyof WorkflowDeleteResponses];

export type WorkflowGetData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/workflows/{workflow}";
};

export type WorkflowGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowGetError = WorkflowGetErrors[keyof WorkflowGetErrors];

export type WorkflowGetResponses = {
  /**
   * Successfully retrieved the workflow
   */
  200: Workflow;
};

export type WorkflowGetResponse = WorkflowGetResponses[keyof WorkflowGetResponses];

export type WorkflowUpdateData = {
  /**
   * The input to update the workflow
   */
  body: WorkflowUpdateRequest;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/workflows/{workflow}";
};

export type WorkflowUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowUpdateError = WorkflowUpdateErrors[keyof WorkflowUpdateErrors];

export type WorkflowUpdateResponses = {
  /**
   * Successfully updated the workflow
   */
  200: Workflow;
};

export type WorkflowUpdateResponse = WorkflowUpdateResponses[keyof WorkflowUpdateResponses];

export type WorkflowVersionGetData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * The workflow version. If not supplied, the latest version is fetched.
     */
    version?: string;
  };
  url: "/api/v1/workflows/{workflow}/versions";
};

export type WorkflowVersionGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowVersionGetError = WorkflowVersionGetErrors[keyof WorkflowVersionGetErrors];

export type WorkflowVersionGetResponses = {
  /**
   * Successfully retrieved the workflow version
   */
  200: WorkflowVersion;
};

export type WorkflowVersionGetResponse =
  WorkflowVersionGetResponses[keyof WorkflowVersionGetResponses];

export type WorkflowRunCreateData = {
  /**
   * The input to the workflow run
   */
  body: TriggerWorkflowRunRequest;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * The workflow version. If not supplied, the latest version is fetched.
     */
    version?: string;
  };
  url: "/api/v1/workflows/{workflow}/trigger";
};

export type WorkflowRunCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type WorkflowRunCreateError = WorkflowRunCreateErrors[keyof WorkflowRunCreateErrors];

export type WorkflowRunCreateResponses = {
  /**
   * Successfully created the workflow run
   */
  200: WorkflowRun;
};

export type WorkflowRunCreateResponse =
  WorkflowRunCreateResponses[keyof WorkflowRunCreateResponses];

export type WorkflowGetMetricsData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * A status of workflow run statuses to filter by
     */
    status?: WorkflowRunStatus;
    /**
     * A group key to filter metrics by
     */
    groupKey?: string;
  };
  url: "/api/v1/workflows/{workflow}/metrics";
};

export type WorkflowGetMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowGetMetricsError = WorkflowGetMetricsErrors[keyof WorkflowGetMetricsErrors];

export type WorkflowGetMetricsResponses = {
  /**
   * Successfully retrieved the workflow version metrics
   */
  200: WorkflowMetrics;
};

export type WorkflowGetMetricsResponse =
  WorkflowGetMetricsResponses[keyof WorkflowGetMetricsResponses];

export type LogLineListData = {
  body?: never;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * A list of levels to filter by
     */
    levels?: LogLineLevelField;
    /**
     * The search query to filter for
     */
    search?: LogLineSearch;
    /**
     * What to order by
     */
    orderByField?: LogLineOrderByField;
    /**
     * The order direction
     */
    orderByDirection?: LogLineOrderByDirection;
  };
  url: "/api/v1/step-runs/{step-run}/logs";
};

export type LogLineListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type LogLineListError = LogLineListErrors[keyof LogLineListErrors];

export type LogLineListResponses = {
  /**
   * Successfully listed the events
   */
  200: LogLineList;
};

export type LogLineListResponse = LogLineListResponses[keyof LogLineListResponses];

export type StepRunListEventsData = {
  body?: never;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
  };
  url: "/api/v1/step-runs/{step-run}/events";
};

export type StepRunListEventsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunListEventsError = StepRunListEventsErrors[keyof StepRunListEventsErrors];

export type StepRunListEventsResponses = {
  /**
   * Successfully retrieved the events
   */
  200: StepRunEventList;
};

export type StepRunListEventsResponse =
  StepRunListEventsResponses[keyof StepRunListEventsResponses];

export type WorkflowRunListStepRunEventsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: {
    /**
     * Last ID of the last event
     */
    lastId?: number;
  };
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/step-run-events";
};

export type WorkflowRunListStepRunEventsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type WorkflowRunListStepRunEventsError =
  WorkflowRunListStepRunEventsErrors[keyof WorkflowRunListStepRunEventsErrors];

export type WorkflowRunListStepRunEventsResponses = {
  /**
   * Successfully retrieved the events
   */
  200: StepRunEventList;
};

export type WorkflowRunListStepRunEventsResponse =
  WorkflowRunListStepRunEventsResponses[keyof WorkflowRunListStepRunEventsResponses];

export type StepRunListArchivesData = {
  body?: never;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
  };
  url: "/api/v1/step-runs/{step-run}/archives";
};

export type StepRunListArchivesErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunListArchivesError = StepRunListArchivesErrors[keyof StepRunListArchivesErrors];

export type StepRunListArchivesResponses = {
  /**
   * Successfully retrieved the events
   */
  200: StepRunArchiveList;
};

export type StepRunListArchivesResponse =
  StepRunListArchivesResponses[keyof StepRunListArchivesResponses];

export type WorkflowGetWorkersCountData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/{workflow}/worker-count";
};

export type WorkflowGetWorkersCountErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowGetWorkersCountError =
  WorkflowGetWorkersCountErrors[keyof WorkflowGetWorkersCountErrors];

export type WorkflowGetWorkersCountResponses = {
  /**
   * Successfully retrieved the workflow worker count
   */
  200: WorkflowWorkersCount;
};

export type WorkflowGetWorkersCountResponse =
  WorkflowGetWorkersCountResponses[keyof WorkflowGetWorkersCountResponses];

export type WorkflowRunListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The event id to get runs for.
     */
    eventId?: string;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * A list of workflow run statuses to filter by
     */
    statuses?: WorkflowRunStatusList;
    /**
     * A list of workflow kinds to filter by
     */
    kinds?: WorkflowKindList;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The time after the workflow run was created
     */
    createdAfter?: string;
    /**
     * The time before the workflow run was created
     */
    createdBefore?: string;
    /**
     * The time after the workflow run was finished
     */
    finishedAfter?: string;
    /**
     * The time before the workflow run was finished
     */
    finishedBefore?: string;
    /**
     * The order by field
     */
    orderByField?: WorkflowRunOrderByField;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
  };
  url: "/api/v1/tenants/{tenant}/workflows/runs";
};

export type WorkflowRunListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunListError = WorkflowRunListErrors[keyof WorkflowRunListErrors];

export type WorkflowRunListResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: WorkflowRunList;
};

export type WorkflowRunListResponse = WorkflowRunListResponses[keyof WorkflowRunListResponses];

export type WorkflowRunUpdateReplayData = {
  /**
   * The workflow run ids to replay
   */
  body: ReplayWorkflowRunsRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/replay";
};

export type WorkflowRunUpdateReplayErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type WorkflowRunUpdateReplayError =
  WorkflowRunUpdateReplayErrors[keyof WorkflowRunUpdateReplayErrors];

export type WorkflowRunUpdateReplayResponses = {
  /**
   * Successfully replayed the workflow runs
   */
  200: ReplayWorkflowRunsResponse;
};

export type WorkflowRunUpdateReplayResponse =
  WorkflowRunUpdateReplayResponses[keyof WorkflowRunUpdateReplayResponses];

export type WorkflowRunGetMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The event id to get runs for.
     */
    eventId?: string;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The time after the workflow run was created
     */
    createdAfter?: string;
    /**
     * The time before the workflow run was created
     */
    createdBefore?: string;
  };
  url: "/api/v1/tenants/{tenant}/workflows/runs/metrics";
};

export type WorkflowRunGetMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunGetMetricsError =
  WorkflowRunGetMetricsErrors[keyof WorkflowRunGetMetricsErrors];

export type WorkflowRunGetMetricsResponses = {
  /**
   * Successfully retrieved the workflow runs metrics
   */
  200: WorkflowRunsMetrics;
};

export type WorkflowRunGetMetricsResponse =
  WorkflowRunGetMetricsResponses[keyof WorkflowRunGetMetricsResponses];

export type WorkflowRunGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}";
};

export type WorkflowRunGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunGetError = WorkflowRunGetErrors[keyof WorkflowRunGetErrors];

export type WorkflowRunGetResponses = {
  /**
   * Successfully retrieved the workflow run
   */
  200: WorkflowRun;
};

export type WorkflowRunGetResponse = WorkflowRunGetResponses[keyof WorkflowRunGetResponses];

export type WorkflowRunGetShapeData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/shape";
};

export type WorkflowRunGetShapeErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunGetShapeError = WorkflowRunGetShapeErrors[keyof WorkflowRunGetShapeErrors];

export type WorkflowRunGetShapeResponses = {
  /**
   * Successfully retrieved the workflow run
   */
  200: WorkflowRunShape;
};

export type WorkflowRunGetShapeResponse =
  WorkflowRunGetShapeResponses[keyof WorkflowRunGetShapeResponses];

export type StepRunGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}";
};

export type StepRunGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunGetError = StepRunGetErrors[keyof StepRunGetErrors];

export type StepRunGetResponses = {
  /**
   * Successfully retrieved the step run
   */
  200: StepRun;
};

export type StepRunGetResponse = StepRunGetResponses[keyof StepRunGetResponses];

export type StepRunUpdateRerunData = {
  /**
   * The input to the rerun
   */
  body: RerunStepRunRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/rerun";
};

export type StepRunUpdateRerunErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type StepRunUpdateRerunError = StepRunUpdateRerunErrors[keyof StepRunUpdateRerunErrors];

export type StepRunUpdateRerunResponses = {
  /**
   * Successfully replayed the events
   */
  200: StepRun;
};

export type StepRunUpdateRerunResponse =
  StepRunUpdateRerunResponses[keyof StepRunUpdateRerunResponses];

export type StepRunUpdateCancelData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/cancel";
};

export type StepRunUpdateCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type StepRunUpdateCancelError = StepRunUpdateCancelErrors[keyof StepRunUpdateCancelErrors];

export type StepRunUpdateCancelResponses = {
  /**
   * Successfully dispatched the cancellation
   */
  200: StepRun;
};

export type StepRunUpdateCancelResponse =
  StepRunUpdateCancelResponses[keyof StepRunUpdateCancelResponses];

export type StepRunGetSchemaData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/schema";
};

export type StepRunGetSchemaErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunGetSchemaError = StepRunGetSchemaErrors[keyof StepRunGetSchemaErrors];

export type StepRunGetSchemaResponses = {
  /**
   * Successfully retrieved the step run schema
   */
  200: {
    [key: string]: unknown;
  };
};

export type StepRunGetSchemaResponse = StepRunGetSchemaResponses[keyof StepRunGetSchemaResponses];

export type WorkerListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/worker";
};

export type WorkerListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkerListError = WorkerListErrors[keyof WorkerListErrors];

export type WorkerListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: WorkerList;
};

export type WorkerListResponse = WorkerListResponses[keyof WorkerListResponses];

export type WorkerGetData = {
  body?: never;
  path: {
    /**
     * The worker id
     */
    worker: string;
  };
  query?: never;
  url: "/api/v1/workers/{worker}";
};

export type WorkerGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkerGetError = WorkerGetErrors[keyof WorkerGetErrors];

export type WorkerGetResponses = {
  /**
   * Successfully retrieved the worker
   */
  200: Worker;
};

export type WorkerGetResponse = WorkerGetResponses[keyof WorkerGetResponses];

export type WorkerUpdateData = {
  /**
   * The worker update
   */
  body: UpdateWorkerRequest;
  path: {
    /**
     * The worker id
     */
    worker: string;
  };
  query?: never;
  url: "/api/v1/workers/{worker}";
};

export type WorkerUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkerUpdateError = WorkerUpdateErrors[keyof WorkerUpdateErrors];

export type WorkerUpdateResponses = {
  /**
   * Successfully updated the worker
   */
  200: Worker;
};

export type WorkerUpdateResponse = WorkerUpdateResponses[keyof WorkerUpdateResponses];

export type WebhookListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/webhook-workers";
};

export type WebhookListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookListError = WebhookListErrors[keyof WebhookListErrors];

export type WebhookListResponses = {
  /**
   * The list of webhook workers
   */
  200: WebhookWorkerListResponse;
};

export type WebhookListResponse = WebhookListResponses[keyof WebhookListResponses];

export type WebhookCreateData = {
  body?: WebhookWorkerCreateRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/webhook-workers";
};

export type WebhookCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookCreateError = WebhookCreateErrors[keyof WebhookCreateErrors];

export type WebhookCreateResponses = {
  /**
   * Successfully created the webhook
   */
  200: WebhookWorkerCreated;
};

export type WebhookCreateResponse = WebhookCreateResponses[keyof WebhookCreateResponses];

export type WebhookDeleteData = {
  body?: never;
  path: {
    /**
     * The webhook id
     */
    webhook: string;
  };
  query?: never;
  url: "/api/v1/webhook-workers/{webhook}";
};

export type WebhookDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookDeleteError = WebhookDeleteErrors[keyof WebhookDeleteErrors];

export type WebhookDeleteResponses = {
  /**
   * Successfully deleted the webhook
   */
  200: unknown;
};

export type WebhookRequestsListData = {
  body?: never;
  path: {
    /**
     * The webhook id
     */
    webhook: string;
  };
  query?: never;
  url: "/api/v1/webhook-workers/{webhook}/requests";
};

export type WebhookRequestsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookRequestsListError = WebhookRequestsListErrors[keyof WebhookRequestsListErrors];

export type WebhookRequestsListResponses = {
  /**
   * The list of webhook requests
   */
  200: WebhookWorkerRequestListResponse;
};

export type WebhookRequestsListResponse =
  WebhookRequestsListResponses[keyof WebhookRequestsListResponses];

export type WorkflowRunGetInputData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/input";
};

export type WorkflowRunGetInputErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Workflow run not found
   */
  404: ApiErrors;
};

export type WorkflowRunGetInputError = WorkflowRunGetInputErrors[keyof WorkflowRunGetInputErrors];

export type WorkflowRunGetInputResponses = {
  /**
   * Successfully retrieved the workflow run input
   */
  200: {
    [key: string]: unknown;
  };
};

export type WorkflowRunGetInputResponse =
  WorkflowRunGetInputResponses[keyof WorkflowRunGetInputResponses];

export type MonitoringPostRunProbeData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/monitoring/{tenant}/probe";
};

export type MonitoringPostRunProbeErrors = {
  /**
   * Not authorized to perform this action
   */
  403: ApiErrors;
};

export type MonitoringPostRunProbeError =
  MonitoringPostRunProbeErrors[keyof MonitoringPostRunProbeErrors];

export type MonitoringPostRunProbeResponses = {
  /**
   * Successfully executed the probe.
   */
  200: unknown;
};

export type InfoGetVersionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/version";
};

export type InfoGetVersionResponses = {
  /**
   * The version of the server
   */
  200: {
    version: string;
  };
};

export type InfoGetVersionResponse = InfoGetVersionResponses[keyof InfoGetVersionResponses];

export type SiteListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites";
};

export type SiteListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteListError = SiteListErrors[keyof SiteListErrors];

export type SiteListResponses = {
  200: SiteList;
};

export type SiteListResponse = SiteListResponses[keyof SiteListResponses];

export type SiteCreateData = {
  body: CreateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites";
};

export type SiteCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteCreateError = SiteCreateErrors[keyof SiteCreateErrors];

export type SiteCreateResponses = {
  200: Site;
};

export type SiteCreateResponse = SiteCreateResponses[keyof SiteCreateResponses];

export type SiteGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}";
};

export type SiteGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteGetError = SiteGetErrors[keyof SiteGetErrors];

export type SiteGetResponses = {
  200: Site;
};

export type SiteGetResponse = SiteGetResponses[keyof SiteGetResponses];

export type SiteUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}";
};

export type SiteUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteUpdateError = SiteUpdateErrors[keyof SiteUpdateErrors];

export type SiteUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Site;
};

export type SiteUpdateResponse = SiteUpdateResponses[keyof SiteUpdateResponses];

export type SiteGetByHostData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * host name
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/byHost/{host}";
};

export type SiteGetByHostErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteGetByHostError = SiteGetByHostErrors[keyof SiteGetByHostErrors];

export type SiteGetByHostResponses = {
  200: Site;
};

export type SiteGetByHostResponse = SiteGetByHostResponses[keyof SiteGetByHostResponses];

export type SiteHostListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site?: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The host name
     */
    host?: string;
  };
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts";
};

export type SiteHostListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteHostListError = SiteHostListErrors[keyof SiteHostListErrors];

export type SiteHostListResponses = {
  200: SiteHostList;
};

export type SiteHostListResponse = SiteHostListResponses[keyof SiteHostListResponses];

export type SiteHostCreateData = {
  /**
   * 创建agentnode
   */
  body: SiteHostProperties;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts";
};

export type SiteHostCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteHostCreateError = SiteHostCreateErrors[keyof SiteHostCreateErrors];

export type SiteHostCreateResponses = {
  200: SiteHost;
};

export type SiteHostCreateResponse = SiteHostCreateResponses[keyof SiteHostCreateResponses];

export type SiteHostGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site: string;
    /**
     * The site-host id
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts/{host}";
};

export type SiteHostGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteHostGetError = SiteHostGetErrors[keyof SiteHostGetErrors];

export type SiteHostGetResponses = {
  200: SiteHost;
};

export type SiteHostGetResponse = SiteHostGetResponses[keyof SiteHostGetResponses];

export type SiteHostUpdateData = {
  /**
   * The tenant properties to update
   */
  body: SiteHost;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site id
     */
    site: string;
    /**
     * The site-host id
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts/{host}";
};

export type SiteHostUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteHostUpdateError = SiteHostUpdateErrors[keyof SiteHostUpdateErrors];

export type SiteHostUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: SiteHost;
};

export type SiteHostUpdateResponse = SiteHostUpdateResponses[keyof SiteHostUpdateResponses];

export type FrontendGetConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/frontend/config";
};

export type FrontendGetConfigResponses = {
  /**
   * frontend core config
   */
  200: FrontendConfig;
};

export type FrontendGetConfigResponse =
  FrontendGetConfigResponses[keyof FrontendGetConfigResponses];

export type FrontendGetSiderbarData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/frontend/siderbar";
};

export type FrontendGetSiderbarResponses = {
  /**
   * frontend siderbar config
   */
  200: SiderbarConfig;
};

export type FrontendGetSiderbarResponse =
  FrontendGetSiderbarResponses[keyof FrontendGetSiderbarResponses];

export type EndpointListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/endpoint";
};

export type EndpointListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type EndpointListError = EndpointListErrors[keyof EndpointListErrors];

export type EndpointListResponses = {
  200: EndpointList;
};

export type EndpointListResponse = EndpointListResponses[keyof EndpointListResponses];

export type EndpointUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateEndpointRequest;
  path?: never;
  query?: never;
  url: "/api/v1/endpoint";
};

export type EndpointUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type EndpointUpdateError = EndpointUpdateErrors[keyof EndpointUpdateErrors];

export type EndpointUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Endpoint;
};

export type EndpointUpdateResponse = EndpointUpdateResponses[keyof EndpointUpdateResponses];

export type MtworkerGetTasksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/mtworker/tasks";
};

export type MtworkerGetTasksResponses = {
  /**
   * 获取mtworker任务成功
   */
  200: MtWorkerTask;
};

export type MtworkerGetTasksResponse = MtworkerGetTasksResponses[keyof MtworkerGetTasksResponses];

export type PostListPublicData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/posts/public";
};

export type PostListPublicErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PostListPublicError = PostListPublicErrors[keyof PostListPublicErrors];

export type PostListPublicResponses = {
  200: PostList;
};

export type PostListPublicResponse = PostListPublicResponses[keyof PostListPublicResponses];

export type PostGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The post id
     */
    post: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/posts/{post}";
};

export type PostGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PostGetError = PostGetErrors[keyof PostGetErrors];

export type PostGetResponses = {
  200: Post;
};

export type PostGetResponse = PostGetResponses[keyof PostGetResponses];

export type PostListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/tenants/{tenant}/posts";
};

export type PostListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PostListError = PostListErrors[keyof PostListErrors];

export type PostListResponses = {
  200: PostList;
};

export type PostListResponse = PostListResponses[keyof PostListResponses];

export type PostCreateData = {
  body: CreatePostRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/posts";
};

export type PostCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type PostCreateError = PostCreateErrors[keyof PostCreateErrors];

export type PostCreateResponses = {
  200: Post;
};

export type PostCreateResponse = PostCreateResponses[keyof PostCreateResponses];

export type ArtifactListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts";
};

export type ArtifactListResponses = {
  /**
   * Successfully retrieved the tenant artifacts list
   */
  200: ArtifactList;
};

export type ArtifactListResponse = ArtifactListResponses[keyof ArtifactListResponses];

export type ArtifactGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant id
     */
    artifact: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts/{artifact}";
};

export type ArtifactGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type ArtifactGetError = ArtifactGetErrors[keyof ArtifactGetErrors];

export type ArtifactGetResponses = {
  /**
   * Successfully retrieved the step run
   */
  200: Artifact;
};

export type ArtifactGetResponse = ArtifactGetResponses[keyof ArtifactGetResponses];

export type DemoGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/demo";
};

export type DemoGetResponses = {
  200: DemoResponse;
};

export type DemoGetResponse = DemoGetResponses[keyof DemoGetResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
