// This file is auto-generated by @hey-api/openapi-ts

export type ApiMeta = {
  auth?: ApiMetaAuth;
  /**
   * the Pylon app ID for usepylon.com chat support
   */
  pylonAppId?: string;
  posthog?: ApiMetaPosthog;
  /**
   * whether or not users can sign up for this instance
   */
  allowSignup?: boolean;
  /**
   * whether or not users can invite other users to this instance
   */
  allowInvites?: boolean;
  /**
   * whether or not users can create new tenants
   */
  allowCreateTenant?: boolean;
  /**
   * whether or not users can change their password
   */
  allowChangePassword?: boolean;
};

export type ApiMetaAuth = {
  /**
   * the supported types of authentication
   */
  schemes?: Array<string>;
};

export type ApiMetaPosthog = {
  /**
   * the PostHog API key
   */
  apiKey?: string;
  /**
   * the PostHog API host
   */
  apiHost?: string;
};

export type ListApiMetaIntegration = Array<ApiMetaIntegration>;

export type ApiMetaIntegration = {
  /**
   * the name of the integration
   */
  name: string;
  /**
   * whether this integration is enabled on the instance
   */
  enabled: boolean;
};

export type ApiErrors = {
  errors: Array<ApiError>;
};

export type ApiError = {
  /**
   * a custom Hatchet error code
   */
  code?: number;
  /**
   * the field that this error is associated with, if applicable
   */
  field?: string;
  /**
   * a description for this error
   */
  description: string;
  /**
   * a link to the documentation for this error, if it exists
   */
  docs_link?: string;
};

export type PaginationResponse = {
  /**
   * the current page
   */
  current_page?: number;
  /**
   * the next page
   */
  next_page?: number;
  /**
   * the total number of pages for listing
   */
  num_pages?: number;
};

export type ApiResourceMeta = {
  /**
   * the id of this resource, in UUID format
   */
  id: string;
  /**
   * the time that this resource was created
   */
  createdAt: string;
  /**
   * the time that this resource was last updated
   */
  updatedAt: string;
};

export type User = {
  metadata: ApiResourceMeta;
  /**
   * The display name of the user.
   */
  name?: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * Whether the user has verified their email address.
   */
  emailVerified: boolean;
  /**
   * Whether the user has a password set.
   */
  hasPassword?: boolean;
  /**
   * A hash of the user's email address for use with Pylon Support Chat
   */
  emailHash?: string;
  /**
   * The user's token for use with Pylon Support Chat
   */
  userToken?: string;
};

export type UserTenantPublic = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The display name of the user.
   */
  name?: string;
};

export type UserLoginRequest = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserChangePasswordRequest = {
  /**
   * The password of the user.
   */
  password: string;
  /**
   * The new password for the user.
   */
  newPassword: string;
};

export type UserRegisterRequest = {
  /**
   * The name of the user.
   */
  name: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserTenantMembershipsList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type Tenant = {
  metadata: ApiResourceMeta;
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
};

export type TenantMember = {
  metadata: ApiResourceMeta;
  /**
   * The user associated with this tenant member.
   */
  user: UserTenantPublic;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant associated with this tenant member.
   */
  tenant?: Tenant;
};

export type TenantMemberList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type TenantMemberRole = "OWNER" | "ADMIN" | "MEMBER";

export const TenantMemberRole = {
  OWNER: "OWNER",
  ADMIN: "ADMIN",
  MEMBER: "MEMBER",
} as const;

export type TenantResource =
  | "WORKER"
  | "EVENT"
  | "WORKFLOW_RUN"
  | "CRON"
  | "SCHEDULE";

export const TenantResource = {
  WORKER: "WORKER",
  EVENT: "EVENT",
  WORKFLOW_RUN: "WORKFLOW_RUN",
  CRON: "CRON",
  SCHEDULE: "SCHEDULE",
} as const;

export type TenantResourceLimit = {
  metadata: ApiResourceMeta;
  /**
   * The resource associated with this limit.
   */
  resource: TenantResource;
  /**
   * The limit associated with this limit.
   */
  limitValue: number;
  /**
   * The alarm value associated with this limit to warn of approaching limit value.
   */
  alarmValue?: number;
  /**
   * The current value associated with this limit.
   */
  value: number;
  /**
   * The meter window for the limit. (i.e. 1 day, 1 week, 1 month)
   */
  window?: string;
  /**
   * The last time the limit was refilled.
   */
  lastRefill?: string;
};

export type TenantResourcePolicy = {
  /**
   * A list of resource limits for the tenant.
   */
  limits: Array<TenantResourceLimit>;
};

export type CreateTenantInviteRequest = {
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type UpdateTenantInviteRequest = {
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type TenantAlertingSettings = {
  metadata: ApiResourceMeta;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency: string;
  /**
   * The last time an alert was sent.
   */
  lastAlertedAt?: string;
};

export type TenantAlertEmailGroup = {
  metadata: ApiResourceMeta;
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantAlertEmailGroupList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantAlertEmailGroup>;
};

export type CreateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type UpdateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantInvite = {
  metadata: ApiResourceMeta;
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant id associated with this tenant invite.
   */
  tenantId: string;
  /**
   * The tenant name for the tenant.
   */
  tenantName?: string;
  /**
   * The time that this invite expires.
   */
  expires: string;
};

export type TenantInviteList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantInvite>;
};

export type QueueMetrics = {
  /**
   * The number of items in the queue.
   */
  numQueued: number;
  /**
   * The number of items running.
   */
  numRunning: number;
  /**
   * The number of items pending.
   */
  numPending: number;
};

export type TenantQueueMetrics = {
  /**
   * The total queue metrics.
   */
  total?: QueueMetrics;
  workflow?: {
    [key: string]: QueueMetrics;
  };
  queues?: {
    [key: string]: number;
  };
};

export type TenantStepRunQueueMetrics = {
  queues?: {
    [key: string]: number;
  };
};

export type AcceptInviteRequest = {
  invite: string;
};

export type RejectInviteRequest = {
  invite: string;
};

export type TenantList = {
  pagination?: PaginationResponse;
  rows?: Array<Tenant>;
};

export type CreateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
};

export type UpdateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name?: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency?: string;
};

export type Event = {
  metadata: ApiResourceMeta;
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The tenant associated with this event.
   */
  tenant?: Tenant;
  /**
   * The ID of the tenant associated with this event.
   */
  tenantId: string;
  /**
   * The workflow run summary for this event.
   */
  workflowRunSummary?: EventWorkflowRunSummary;
  /**
   * Additional metadata for the event.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type EventData = {
  /**
   * The data for the event (JSON bytes).
   */
  data: string;
};

export type CreateEventRequest = {
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The data for the event.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * Additional metadata for the event.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type BulkCreateEventRequest = {
  events: Array<CreateEventRequest>;
};

export type BulkCreateEventResponse = {
  metadata: ApiResourceMeta;
  /**
   * The events.
   */
  events: Array<Event>;
};

export type EventWorkflowRunSummary = {
  /**
   * The number of pending runs.
   */
  pending?: number;
  /**
   * The number of running runs.
   */
  running?: number;
  /**
   * The number of queued runs.
   */
  queued?: number;
  /**
   * The number of succeeded runs.
   */
  succeeded?: number;
  /**
   * The number of failed runs.
   */
  failed?: number;
};

export type EventOrderByField = "createdAt";

export const EventOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type EventOrderByDirection = "asc" | "desc";

export const EventOrderByDirection = {
  ASC: "asc",
  DESC: "desc",
} as const;

export type EventSearch = string;

export type EventKeyList = {
  pagination?: PaginationResponse;
  rows?: Array<EventKey>;
};

/**
 * The key for the event.
 */
export type EventKey = string;

/**
 * A workflow ID.
 */
export type WorkflowId = string;

export type EventList = {
  pagination?: PaginationResponse;
  rows?: Array<Event>;
};

export type RateLimit = {
  /**
   * The key for the rate limit.
   */
  key: string;
  /**
   * The ID of the tenant associated with this rate limit.
   */
  tenantId: string;
  /**
   * The maximum number of requests allowed within the window.
   */
  limitValue: number;
  /**
   * The current number of requests made within the window.
   */
  value: number;
  /**
   * The window of time in which the limitValue is enforced.
   */
  window: string;
  /**
   * The last time the rate limit was refilled.
   */
  lastRefill: string;
};

export type RateLimitList = {
  pagination?: PaginationResponse;
  rows?: Array<RateLimit>;
};

export type RateLimitOrderByField = "key" | "value" | "limitValue";

export const RateLimitOrderByField = {
  KEY: "key",
  VALUE: "value",
  LIMIT_VALUE: "limitValue",
} as const;

export type RateLimitOrderByDirection = "asc" | "desc";

export const RateLimitOrderByDirection = {
  ASC: "asc",
  DESC: "desc",
} as const;

export type ReplayEventRequest = {
  eventIds: Array<string>;
};

export type CancelEventRequest = {
  eventIds: Array<string>;
};

export type Workflow = {
  metadata: ApiResourceMeta;
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * The description of the workflow.
   */
  description?: string;
  /**
   * Whether the workflow is paused.
   */
  isPaused?: boolean;
  versions?: Array<WorkflowVersionMeta>;
  /**
   * The tags of the workflow.
   */
  tags?: Array<WorkflowTag>;
  /**
   * The jobs of the workflow.
   */
  jobs?: Array<Job>;
};

export type WorkflowUpdateRequest = {
  /**
   * Whether the workflow is paused.
   */
  isPaused?: boolean;
};

export type WorkflowConcurrency = {
  /**
   * The maximum number of concurrent workflow runs.
   */
  maxRuns: number;
  /**
   * The strategy to use when the concurrency limit is reached.
   */
  limitStrategy:
    | "CANCEL_IN_PROGRESS"
    | "DROP_NEWEST"
    | "QUEUE_NEWEST"
    | "GROUP_ROUND_ROBIN";
  /**
   * An action which gets the concurrency group for the WorkflowRun.
   */
  getConcurrencyGroup: string;
};

export type WorkflowVersionMeta = {
  metadata: ApiResourceMeta;
  /**
   * The version of the workflow.
   */
  version: string;
  order: number;
  workflowId: string;
  workflow?: Workflow;
};

export type WorkflowVersion = {
  metadata: ApiResourceMeta;
  /**
   * The version of the workflow.
   */
  version: string;
  order: number;
  workflowId: string;
  /**
   * The sticky strategy of the workflow.
   */
  sticky?: string;
  /**
   * The default priority of the workflow.
   */
  defaultPriority?: number;
  workflow?: Workflow;
  concurrency?: WorkflowConcurrency;
  triggers?: WorkflowTriggers;
  scheduleTimeout?: string;
  jobs?: Array<Job>;
};

export type WorkflowVersionDefinition = {
  /**
   * The raw YAML definition of the workflow.
   */
  rawDefinition: string;
};

export type WorkflowTag = {
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * The description of the workflow.
   */
  color: string;
};

export type WorkflowList = {
  metadata?: ApiResourceMeta;
  rows?: Array<Workflow>;
  pagination?: PaginationResponse;
};

export type WorkflowTriggers = {
  metadata?: ApiResourceMeta;
  workflow_version_id?: string;
  tenant_id?: string;
  events?: Array<WorkflowTriggerEventRef>;
  crons?: Array<WorkflowTriggerCronRef>;
};

export type WorkflowTriggerEventRef = {
  parent_id?: string;
  event_key?: string;
};

export type WorkflowTriggerCronRef = {
  parent_id?: string;
  cron?: string;
};

export type Job = {
  metadata: ApiResourceMeta;
  tenantId: string;
  versionId: string;
  name: string;
  /**
   * The description of the job.
   */
  description?: string;
  steps: Array<Step>;
  /**
   * The timeout of the job.
   */
  timeout?: string;
};

export type Step = {
  metadata: ApiResourceMeta;
  /**
   * The readable id of the step.
   */
  readableId: string;
  tenantId: string;
  jobId: string;
  action: string;
  /**
   * The timeout of the step.
   */
  timeout?: string;
  children?: Array<string>;
  parents?: Array<string>;
};

export type WorkflowWorkersCount = {
  freeSlotCount?: number;
  maxSlotCount?: number;
  workflowRunId?: string;
};

export type WorkflowRun = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowVersion?: WorkflowVersion;
  status: WorkflowRunStatus;
  displayName?: string;
  jobRuns?: Array<JobRun>;
  triggeredBy: WorkflowRunTriggeredBy;
  input?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  finishedAt?: string;
  duration?: number;
  parentId?: string;
  parentStepRunId?: string;
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type WorkflowRunShape = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowId?: string;
  workflowVersionId: string;
  workflowVersion?: WorkflowVersion;
  status: WorkflowRunStatus;
  displayName?: string;
  jobRuns?: Array<JobRun>;
  triggeredBy: WorkflowRunTriggeredBy;
  input?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  finishedAt?: string;
  duration?: number;
  parentId?: string;
  parentStepRunId?: string;
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type ReplayWorkflowRunsRequest = {
  workflowRunIds: Array<string>;
};

export type ReplayWorkflowRunsResponse = {
  workflowRuns: Array<WorkflowRun>;
};

export type WorkflowRunList = {
  rows?: Array<WorkflowRun>;
  pagination?: PaginationResponse;
};

export type ScheduledWorkflows = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowId: string;
  workflowName: string;
  triggerAt: string;
  input?: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
  workflowRunCreatedAt?: string;
  workflowRunName?: string;
  workflowRunStatus?: WorkflowRunStatus;
  workflowRunId?: string;
};

export type ScheduledWorkflowsList = {
  rows?: Array<ScheduledWorkflows>;
  pagination?: PaginationResponse;
};

export type ScheduledWorkflowsOrderByField = "triggerAt" | "createdAt";

export const ScheduledWorkflowsOrderByField = {
  TRIGGER_AT: "triggerAt",
  CREATED_AT: "createdAt",
} as const;

export type ScheduledRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "QUEUED"
  | "SCHEDULED";

export const ScheduledRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  QUEUED: "QUEUED",
  SCHEDULED: "SCHEDULED",
} as const;

export type CronWorkflows = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowId: string;
  workflowName: string;
  cron: string;
  input?: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type CronWorkflowsList = {
  rows?: Array<CronWorkflows>;
  pagination?: PaginationResponse;
};

export type CronWorkflowsOrderByField = "createdAt";

export const CronWorkflowsOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type WorkflowRunOrderByField =
  | "createdAt"
  | "startedAt"
  | "finishedAt"
  | "duration";

export const WorkflowRunOrderByField = {
  CREATED_AT: "createdAt",
  STARTED_AT: "startedAt",
  FINISHED_AT: "finishedAt",
  DURATION: "duration",
} as const;

export type WorkflowRunOrderByDirection = "ASC" | "DESC";

export const WorkflowRunOrderByDirection = {
  ASC: "ASC",
  DESC: "DESC",
} as const;

export type WorkflowRunsMetrics = {
  counts?: WorkflowRunsMetricsCounts;
};

export type WorkflowRunsMetricsCounts = {
  PENDING?: number;
  RUNNING?: number;
  SUCCEEDED?: number;
  FAILED?: number;
  QUEUED?: number;
};

export type WorkflowRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "QUEUED";

export const WorkflowRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  QUEUED: "QUEUED",
} as const;

export type WorkflowRunStatusList = Array<WorkflowRunStatus>;

export type WorkflowKind = "FUNCTION" | "DURABLE" | "DAG";

export const WorkflowKind = {
  FUNCTION: "FUNCTION",
  DURABLE: "DURABLE",
  DAG: "DAG",
} as const;

export type WorkflowKindList = Array<WorkflowKind>;

export type WorkflowRunsCancelRequest = {
  workflowRunIds: Array<string>;
};

export type JobRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED";

export const JobRunStatus = {
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
} as const;

export type StepRunStatus =
  | "PENDING"
  | "PENDING_ASSIGNMENT"
  | "ASSIGNED"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "CANCELLING";

export const StepRunStatus = {
  PENDING: "PENDING",
  PENDING_ASSIGNMENT: "PENDING_ASSIGNMENT",
  ASSIGNED: "ASSIGNED",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  CANCELLING: "CANCELLING",
} as const;

export type JobRun = {
  metadata: ApiResourceMeta;
  tenantId: string;
  workflowRunId: string;
  workflowRun?: WorkflowRun;
  jobId: string;
  job?: Job;
  tickerId?: string;
  stepRuns?: Array<StepRun>;
  status: JobRunStatus;
  result?: {
    [key: string]: unknown;
  };
  startedAt?: string;
  finishedAt?: string;
  timeoutAt?: string;
  cancelledAt?: string;
  cancelledReason?: string;
  cancelledError?: string;
};

export type WorkflowRunTriggeredBy = {
  metadata: ApiResourceMeta;
  parentWorkflowRunId?: string;
  eventId?: string;
  cronParentId?: string;
  cronSchedule?: string;
};

export type StepRun = {
  metadata: ApiResourceMeta;
  tenantId: string;
  jobRunId: string;
  stepId: string;
  step?: Step;
  childWorkflowsCount?: number;
  parents?: Array<string>;
  childWorkflowRuns?: Array<string>;
  workerId?: string;
  input?: string;
  output?: string;
  status: StepRunStatus;
  requeueAfter?: string;
  result?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  startedAtEpoch?: number;
  finishedAt?: string;
  finishedAtEpoch?: number;
  timeoutAt?: string;
  timeoutAtEpoch?: number;
  cancelledAt?: string;
  cancelledAtEpoch?: number;
  cancelledReason?: string;
  cancelledError?: string;
};

export type StepRunEventReason =
  | "REQUEUED_NO_WORKER"
  | "REQUEUED_RATE_LIMIT"
  | "SCHEDULING_TIMED_OUT"
  | "ASSIGNED"
  | "STARTED"
  | "ACKNOWLEDGED"
  | "FINISHED"
  | "FAILED"
  | "RETRYING"
  | "CANCELLED"
  | "TIMEOUT_REFRESHED"
  | "REASSIGNED"
  | "TIMED_OUT"
  | "SLOT_RELEASED"
  | "RETRIED_BY_USER"
  | "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED"
  | "WORKFLOW_RUN_GROUP_KEY_FAILED";

export const StepRunEventReason = {
  REQUEUED_NO_WORKER: "REQUEUED_NO_WORKER",
  REQUEUED_RATE_LIMIT: "REQUEUED_RATE_LIMIT",
  SCHEDULING_TIMED_OUT: "SCHEDULING_TIMED_OUT",
  ASSIGNED: "ASSIGNED",
  STARTED: "STARTED",
  ACKNOWLEDGED: "ACKNOWLEDGED",
  FINISHED: "FINISHED",
  FAILED: "FAILED",
  RETRYING: "RETRYING",
  CANCELLED: "CANCELLED",
  TIMEOUT_REFRESHED: "TIMEOUT_REFRESHED",
  REASSIGNED: "REASSIGNED",
  TIMED_OUT: "TIMED_OUT",
  SLOT_RELEASED: "SLOT_RELEASED",
  RETRIED_BY_USER: "RETRIED_BY_USER",
  WORKFLOW_RUN_GROUP_KEY_SUCCEEDED: "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
  WORKFLOW_RUN_GROUP_KEY_FAILED: "WORKFLOW_RUN_GROUP_KEY_FAILED",
} as const;

export type StepRunEventSeverity = "INFO" | "WARNING" | "CRITICAL";

export const StepRunEventSeverity = {
  INFO: "INFO",
  WARNING: "WARNING",
  CRITICAL: "CRITICAL",
} as const;

export type StepRunEvent = {
  id: number;
  timeFirstSeen: string;
  timeLastSeen: string;
  stepRunId?: string;
  workflowRunId?: string;
  reason: StepRunEventReason;
  severity: StepRunEventSeverity;
  message: string;
  count: number;
  data?: {
    [key: string]: unknown;
  };
};

export type StepRunEventList = {
  pagination?: PaginationResponse;
  rows?: Array<StepRunEvent>;
};

export type StepRunArchive = {
  stepRunId: string;
  order: number;
  input?: string;
  output?: string;
  startedAt?: string;
  error?: string;
  retryCount: number;
  createdAt: string;
  startedAtEpoch?: number;
  finishedAt?: string;
  finishedAtEpoch?: number;
  timeoutAt?: string;
  timeoutAtEpoch?: number;
  cancelledAt?: string;
  cancelledAtEpoch?: number;
  cancelledReason?: string;
  cancelledError?: string;
};

export type StepRunArchiveList = {
  pagination?: PaginationResponse;
  rows?: Array<StepRunArchive>;
};

export type WorkerRuntimeInfo = {
  sdkVersion?: string;
  language?: WorkerRuntimeSdks;
  languageVersion?: string;
  os?: string;
  runtimeExtra?: string;
};

export type WorkerRuntimeSdks = "GOLANG" | "PYTHON" | "TYPESCRIPT";

export const WorkerRuntimeSdks = {
  GOLANG: "GOLANG",
  PYTHON: "PYTHON",
  TYPESCRIPT: "TYPESCRIPT",
} as const;

export type WorkerList = {
  pagination?: PaginationResponse;
  rows?: Array<Worker>;
};

export type SemaphoreSlots = {
  /**
   * The step run id.
   */
  stepRunId: string;
  /**
   * The action id.
   */
  actionId: string;
  /**
   * The time this slot was started.
   */
  startedAt?: string;
  /**
   * The time this slot will timeout.
   */
  timeoutAt?: string;
  /**
   * The workflow run id.
   */
  workflowRunId: string;
  status: StepRunStatus;
};

export type RecentStepRuns = {
  metadata: ApiResourceMeta;
  /**
   * The action id.
   */
  actionId: string;
  status: StepRunStatus;
  startedAt?: string;
  finishedAt?: string;
  cancelledAt?: string;
  workflowRunId: string;
};

export type Worker = {
  metadata: ApiResourceMeta;
  /**
   * The name of the worker.
   */
  name: string;
  type: "SELFHOSTED" | "MANAGED" | "WEBHOOK";
  /**
   * The time this worker last sent a heartbeat.
   */
  lastHeartbeatAt?: string;
  /**
   * The time this worker last sent a heartbeat.
   */
  lastListenerEstablished?: string;
  /**
   * The actions this worker can perform.
   */
  actions?: Array<string>;
  /**
   * The semaphore slot state for the worker.
   */
  slots?: Array<SemaphoreSlots>;
  /**
   * The recent step runs for the worker.
   */
  recentStepRuns?: Array<RecentStepRuns>;
  /**
   * The status of the worker.
   */
  status?: "ACTIVE" | "INACTIVE" | "PAUSED";
  /**
   * The maximum number of runs this worker can execute concurrently.
   */
  maxRuns?: number;
  /**
   * The number of runs this worker can execute concurrently.
   */
  availableRuns?: number;
  /**
   * the id of the assigned dispatcher, in UUID format
   */
  dispatcherId?: string;
  /**
   * The current label state of the worker.
   */
  labels?: Array<WorkerLabel>;
  /**
   * The webhook URL for the worker.
   */
  webhookUrl?: string;
  /**
   * The webhook ID for the worker.
   */
  webhookId?: string;
  runtimeInfo?: WorkerRuntimeInfo;
};

export type WorkerLabel = {
  metadata: ApiResourceMeta;
  /**
   * The key of the label.
   */
  key: string;
  /**
   * The value of the label.
   */
  value?: string;
};

export type UpdateWorkerRequest = {
  /**
   * Whether the worker is paused and cannot accept new runs.
   */
  isPaused?: boolean;
};

export type ApiToken = {
  metadata: ApiResourceMeta;
  /**
   * The name of the API token.
   */
  name: string;
  /**
   * When the API token expires.
   */
  expiresAt: string;
};

export type CreateApiTokenRequest = {
  /**
   * A name for the API token.
   */
  name: string;
  /**
   * The duration for which the token is valid.
   */
  expiresIn?: string;
};

export type CreateApiTokenResponse = {
  /**
   * The API token.
   */
  token: string;
};

export type ListApiTokensResponse = {
  pagination?: PaginationResponse;
  rows?: Array<ApiToken>;
};

export type RerunStepRunRequest = {
  input: {
    [key: string]: unknown;
  };
};

export type TriggerWorkflowRunRequest = {
  input: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type CreatePullRequestFromStepRun = {
  branchName: string;
};

export type GetStepRunDiffResponse = {
  diffs: Array<StepRunDiff>;
};

export type StepRunDiff = {
  key: string;
  original: string;
  modified: string;
};

export type ListPullRequestsResponse = {
  pullRequests: Array<PullRequest>;
};

export type PullRequest = {
  repositoryOwner: string;
  repositoryName: string;
  pullRequestID: number;
  pullRequestTitle: string;
  pullRequestNumber: number;
  pullRequestHeadBranch: string;
  pullRequestBaseBranch: string;
  pullRequestState: PullRequestState;
};

export type PullRequestState = "open" | "closed";

export const PullRequestState = {
  OPEN: "open",
  CLOSED: "closed",
} as const;

export type LogLine = {
  /**
   * The creation date of the log line.
   */
  createdAt: string;
  /**
   * The log message.
   */
  message: string;
  /**
   * The log metadata.
   */
  metadata: {
    [key: string]: unknown;
  };
};

export type LogLineLevel = "DEBUG" | "INFO" | "WARN" | "ERROR";

export const LogLineLevel = {
  DEBUG: "DEBUG",
  INFO: "INFO",
  WARN: "WARN",
  ERROR: "ERROR",
} as const;

export type LogLineList = {
  pagination?: PaginationResponse;
  rows?: Array<LogLine>;
};

export type LogLineOrderByField = "createdAt";

export const LogLineOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type LogLineOrderByDirection = "asc" | "desc";

export const LogLineOrderByDirection = {
  ASC: "asc",
  DESC: "desc",
} as const;

export type LogLineSearch = string;

export type LogLineLevelField = Array<LogLineLevel>;

export type SnsIntegration = {
  metadata: ApiResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The Amazon Resource Name (ARN) of the SNS topic.
   */
  topicArn: string;
  /**
   * The URL to send SNS messages to.
   */
  ingestUrl?: string;
};

export type ListSnsIntegrations = {
  pagination: PaginationResponse;
  rows: Array<SnsIntegration>;
};

export type SlackWebhook = {
  metadata: ApiResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The team name associated with this slack webhook.
   */
  teamName: string;
  /**
   * The team id associated with this slack webhook.
   */
  teamId: string;
  /**
   * The channel name associated with this slack webhook.
   */
  channelName: string;
  /**
   * The channel id associated with this slack webhook.
   */
  channelId: string;
};

export type ListSlackWebhooks = {
  pagination: PaginationResponse;
  rows: Array<SlackWebhook>;
};

export type CreateSnsIntegrationRequest = {
  /**
   * The Amazon Resource Name (ARN) of the SNS topic.
   */
  topicArn: string;
};

export type WorkflowMetrics = {
  /**
   * The number of runs for a specific group key (passed via filter)
   */
  groupKeyRunsCount?: number;
  /**
   * The total number of concurrency group keys.
   */
  groupKeyCount?: number;
};

export type WebhookWorker = {
  metadata: ApiResourceMeta;
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
};

export type WebhookWorkerRequestMethod = "GET" | "POST" | "PUT";

export const WebhookWorkerRequestMethod = {
  GET: "GET",
  POST: "POST",
  PUT: "PUT",
} as const;

export type WebhookWorkerRequest = {
  /**
   * The date and time the request was created.
   */
  created_at: string;
  /**
   * The HTTP method used for the request.
   */
  method: WebhookWorkerRequestMethod;
  /**
   * The HTTP status code of the response.
   */
  statusCode: number;
};

export type WebhookWorkerRequestListResponse = {
  /**
   * The list of webhook requests.
   */
  requests?: Array<WebhookWorkerRequest>;
};

export type WebhookWorkerCreated = {
  metadata: ApiResourceMeta;
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
  /**
   * The secret key for validation.
   */
  secret: string;
};

export type WebhookWorkerCreateRequest = {
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
  /**
   * The secret key for validation. If not provided, a random secret will be generated.
   */
  secret?: string;
};

export type WebhookWorkerCreateResponse = {
  worker?: WebhookWorkerCreated;
};

export type WebhookWorkerListResponse = {
  pagination?: PaginationResponse;
  rows?: Array<WebhookWorker>;
};

export type ApiResourceMetaProperties = {
  metadata?: ApiResourceMeta;
};

export type CommonResult = {
  Success: boolean;
  Message: string;
};

export type ChatReq = {
  threadId?: string;
  profile?: string;
  messages: Array<ChatMessage>;
  runner?: string;
  /**
   * 附加的表单数据
   */
  params?: {
    [key: string]: unknown;
  };
};

/**
 * 单个聊天消息
 */
export type ChatMessage = {
  metadata: ApiResourceMeta;
  role: ChatMessageRole;
  content: string;
  source?: string;
  config?: {
    message_type?: string;
    source?: string;
  };
};

export type ChatMessageRole = "system" | "user" | "assistant";

export const ChatMessageRole = {
  SYSTEM: "system",
  USER: "user",
  ASSISTANT: "assistant",
} as const;

/**
 * 聊天消息列表
 */
export type ChatMessages = {
  messages?: Array<ChatMessage>;
};

export type ChatHistoryList = {
  pagination?: PaginationResponse;
  rows?: Array<ChatMessage>;
};

export type ChatCompletionsReq = {
  model?: string;
  messages?: Array<ChatMessage>;
};

/**
 * 聊天 Session
 */
export type ChatSession = {
  metadata?: ApiResourceMeta;
  name: string;
  version: string;
  team?: string;
};

/**
 * 更新聊天 Session
 */
export type ChatSessionUpdate = {
  metadata?: ApiResourceMeta;
  name?: string;
};

/**
 * 聊天 Session 列表
 */
export type ChatSessionList = {
  metadata?: ApiResourceMeta;
  rows?: Array<ChatSession>;
};

export type WorkerConfig = {
  workerToken?: string;
};

/**
 * 博客站点生成基本配置
 */
export type BlogGenConfig = {
  /**
   * 站点名称.
   */
  name: string;
  /**
   * 博客站点介绍.
   */
  description: string;
  /**
   * 站点关键字列表
   */
  seo_keywords?: string;
  /**
   * 站点建议日更帖子数量
   */
  dayPublishCountHint?: number;
};

/**
 * topics 生成结果
 */
export type GenTopicResult = {
  /**
   * 主题列表，按优先顺序，更好的更靠前
   */
  topics: Array<string>;
};

/**
 * 文章生成输入
 */
export type GenArticleInput = {
  topic: string;
};

/**
 * 运行新任务的结果
 */
export type RunNewTaskResponse = {
  description?: string;
};

/**
 * 可用的操作名称枚举：
 * - **startBlogTask**: 启动单个博客自动化操作任务
 * - **stopBlogTask**: 停止单个博客自动化操作任务
 *
 */
export type OperationEnum = "startBlogTask" | "stopBlogTask";

/**
 * 可用的操作名称枚举：
 * - **startBlogTask**: 启动单个博客自动化操作任务
 * - **stopBlogTask**: 停止单个博客自动化操作任务
 *
 */
export const OperationEnum = {
  START_BLOG_TASK: "startBlogTask",
  STOP_BLOG_TASK: "stopBlogTask",
} as const;

export type OperataionGuideResponse = {
  /**
   * 详细的操作手册描述
   */
  message?: string;
};

export type CreateBlogPostRequest = {
  /**
   * The blog id.
   */
  blogId: string;
  /**
   * The authord id.
   */
  authorId?: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
};

export type BlogList = {
  pagination?: PaginationResponse;
  rows?: Array<Blog>;
};

export type Blog = {
  metadata: ApiResourceMeta;
  title: string;
  description?: string;
  /**
   * The tenant associated with this tenant blog.
   */
  tenant?: Tenant;
  config?: {
    /**
     * The number of posts to publish per day.
     */
    dayPublishCount?: number;
    /**
     * The description of the blog.
     */
    description?: string;
  };
  /**
   * The status of the blog.
   */
  status?: string;
  /**
   * Whether the blog is enabled.
   */
  enabled?: boolean;
  /**
   * The slug of the blog.
   */
  slug?: string;
};

export type CreateBlogRequest = {
  /**
   * blog title to create.
   */
  title?: string;
};

export type UpdateBlogRequest = {
  title: string;
  description?: string;
};

export type BlogPost = {
  metadata: ApiResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog
   */
  content: string;
  state?: {
    /**
     * post title
     */
    title?: string;
    /**
     * post topic
     */
    topic?: string;
    /**
     * post outlines
     */
    outlines?: Array<{
      /**
       * post outline title
       */
      title?: string;
      /**
       * post outline content
       */
      content?: string;
    }>;
  };
};

export type BlogPostList = {
  pagination?: PaginationResponse;
  rows?: Array<BlogPost>;
};

export type UpdatePostRequest = {
  /**
   * The blog id.
   */
  blogId: string;
  /**
   * The authord id.
   */
  authorId?: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
};

export type ArtifactList = {
  pagination?: PaginationResponse;
  rows?: Array<Artifact>;
};

export type Artifact = {
  metadata: ApiResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  state: {
    [key: string]: unknown;
  };
  nextId?: string;
  prevId?: string;
};

export type CreateArtifacttRequest = {
  /**
   * The blog id.
   */
  artId: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  state: {
    [key: string]: unknown;
  };
};

/**
 * agent 节点输出
 */
export type AgentNodeOutput = {
  metadata: ApiResourceMeta;
  /**
   * 是否是最终步骤
   */
  isFinal: boolean;
  /**
   * 更多步骤
   */
  moreSteps: Array<AgentStep>;
  /**
   * 输出
   */
  output: {
    [key: string]: unknown;
  };
  /**
   * 错误
   */
  error?: string;
};

/**
 * agent 节点输入
 */
export type AgentNodeInput = {
  metadata: ApiResourceMeta;
  /**
   * 输入
   */
  inputs: {
    [key: string]: unknown;
  };
  /**
   * 中间步骤
   */
  intermediateSteps?: Array<AgentStep>;
};

export type AgentNodeList = {
  pagination?: PaginationResponse;
  rows?: Array<AgentNode>;
};

export type AgentNode = {
  metadata: ApiResourceMeta;
  /**
   * agent 节点名称, 或者作为工具名称
   */
  title: string;
  /**
   * agent 节点描述, 或者作为工具描述
   */
  description: string;
  /**
   * 节点类型，决定了由哪个agent来进行调度
   */
  type?: string;
  /**
   * agent 的配置
   */
  Config?: {
    [key: string]: unknown;
  };
  state?: AgentState;
  /**
   * agent 节点执行步骤, 一般表示之前执行的步骤
   */
  steps: Array<AgentStep>;
  finish?: AgentFinish;
  /**
   * 上级节点
   */
  parentId?: string;
  agentNodeOutput?: AgentNodeOutput;
  tools?: string;
  /**
   * 记忆ID，表示这个agent的记忆
   */
  memoryId?: string;
  /**
   * 输入
   */
  input?: string;
  /**
   * 输出
   */
  output?: string;
};

/**
 * agentnode run
 */
export type AgentNodeRun = {
  metadata: ApiResourceMeta;
  title?: string;
  description?: string;
  state?: {
    [key: string]: unknown;
  };
  workflowRunId: string;
  nodeId: string;
  input?: {
    [key: string]: unknown;
  };
  output?: {
    [key: string]: unknown;
  };
};

/**
 * agent运行节点请求
 */
export type AgentNodeRunInput = {
  messages: Array<ChatMessage>;
  flowName?: string;
  /**
   * 运行器名称(对应 autogent 的 angent 入口名称)
   */
  runner?: string;
  /**
   * agent 节点ID(threadId)
   */
  nodeId?: string;
  /**
   * 团队ID
   */
  teamId?: string;
  /**
   * 是否使用stream 传输事件
   */
  isStream?: boolean;
  params?:
    | ResearchRequest
    | ScrapeGraphParams
    | BrowserParams
    | CanvasGraphParams;
};

export type TextHighlight = {
  fullMarkdown: string;
  markdownBlock: string;
  selectedText: string;
};

export type CodeHighlight = {
  startCharIndex: number;
  endCharIndex: number;
};

export type ArtifactV3 = {
  currentIndex?: number;
  contents?: Array<ArtifactMarkdownV3 | ArtifactCodeV3>;
};

export type ArtifactCodeV3 = {
  index: number;
  type: string;
  title: string;
  language: ProgrammingLanguageOptions;
  code: string;
};

export type ArtifactMarkdownV3 = {
  index: number;
  type: string;
  title: string;
  fullMarkdown: string;
};

export type CustomQuickAction = {
  /**
   * A UUID for the quick action. Used to identify the quick action.
   */
  id: string;
  /**
   * The title of the quick action. Used in the UI to display the quick action.
   */
  title: string;
  /**
   * The prompt to use when the quick action is invoked.
   */
  prompt: string;
  /**
   * Whether or not to include the user's reflections in the prompt.
   */
  includeReflections: boolean;
  /**
   * Whether or not to include the default prefix in the prompt.
   */
  includePrefix: boolean;
  /**
   * Whether or not to include the last 5 (or less) messages in the prompt.
   */
  includeRecentHistory: boolean;
};

/**
 * 生成内容的反思规则
 */
export type Reflections = {
  /**
   * 生成内容时要遵循的样式规则
   */
  styleRules: Array<string>;
  /**
   * 生成内容时要记住的关于用户的关键内容
   */
  content: Array<string>;
};

export type LanguageOptions =
  | "chinese"
  | "english"
  | "spanish"
  | "french"
  | "hindi";

export const LanguageOptions = {
  CHINESE: "chinese",
  ENGLISH: "english",
  SPANISH: "spanish",
  FRENCH: "french",
  HINDI: "hindi",
} as const;

/**
 * 工具内容长度,(文章,代码内容长度)
 */
export type ArtifactLengthOptions = "shortest" | "short" | "long" | "longest";

/**
 * 工具内容长度,(文章,代码内容长度)
 */
export const ArtifactLengthOptions = {
  SHORTEST: "shortest",
  SHORT: "short",
  LONG: "long",
  LONGEST: "longest",
} as const;

export type RewriteArtifactMetaToolResponse =
  | {
      type: "text";
      title?: string;
      language: ProgrammingLanguageOptions;
    }
  | {
      type: "code";
      title: string;
      language: ProgrammingLanguageOptions;
    };

export type ArtifactToolResponse = {
  artifact?: string;
  title?: string;
  language?: string;
  type?: string;
};

/**
 * 阅读级别
 */
export type ReadingLevelOptions =
  | "pirate"
  | "child"
  | "teenager"
  | "college"
  | "phd";

/**
 * 阅读级别
 */
export const ReadingLevelOptions = {
  PIRATE: "pirate",
  CHILD: "child",
  TEENAGER: "teenager",
  COLLEGE: "college",
  PHD: "phd",
} as const;

export type ProgrammingLanguageOptions =
  | "typescript"
  | "javascript"
  | "cpp"
  | "java"
  | "php"
  | "python"
  | "html"
  | "sql"
  | "json"
  | "rust"
  | "xml"
  | "clojure"
  | "csharp"
  | "other";

export const ProgrammingLanguageOptions = {
  TYPESCRIPT: "typescript",
  JAVASCRIPT: "javascript",
  CPP: "cpp",
  JAVA: "java",
  PHP: "php",
  PYTHON: "python",
  HTML: "html",
  SQL: "sql",
  JSON: "json",
  RUST: "rust",
  XML: "xml",
  CLOJURE: "clojure",
  CSHARP: "csharp",
  OTHER: "other",
} as const;

export type CanvasGraphParams = {
  /**
   * 步骤限制(没用上)
   */
  stepLimit?: number;
  messages?: Array<ChatMessage>;
  action?: NodeRunAction;
  /**
   * 语言
   */
  language?: string;
  /**
   * 自定义快速动作ID
   */
  customQuickActionId?: string;
  /**
   * 工件ID
   */
  artifactId?: string;
  /**
   * 是否修复bug
   */
  fixBugs?: boolean;
  highlightedCode?: CodeHighlight;
  highlightedText?: TextHighlight;
  /**
   * 是否使用表情符号重新生成
   */
  regenerateWithEmojis?: boolean;
  /**
   * 阅读级别
   */
  readingLevel?: ReadingLevelOptions;
  /**
   * 工具内容长度,(文章,代码内容长度)
   */
  artifactLength?: ArtifactLengthOptions;
  artifact?: ArtifactV3;
  addComments?: boolean;
  addLogs?: boolean;
  portLanguage?: ProgrammingLanguageOptions;
};

export type Run = {
  metadata: ApiResourceMeta;
  status: RunStatus;
  task: AgentMessageConfig;
  team_result: TeamResult;
  messages: Array<ChatMessage>;
  error_message?: string;
};

export type RunList = {
  pagination?: PaginationResponse;
  rows?: Array<Run>;
};

export type RunUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type Team = {
  metadata: ApiResourceMeta;
  name: string;
  userId: string;
  version?: string;
  component: TeamComponent;
};

export type TeamList = {
  pagination?: PaginationResponse;
  rows?: Array<Team>;
};

export type TeamUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  userId: string;
  version: string;
  config: ComponentModel;
};

export type ComponentModel = {
  /**
   * Describes how the component can be instantiated.
   */
  provider: string;
  /**
   * Logical type of the component. If missing, the component assumes the default type of the provider.
   */
  component_type: ComponentTypes;
  /**
   * Version of the component specification. If missing, the component assumes whatever is the current version of the library used to load it. This is obviously dangerous and should be used for user authored ephmeral config. For all other configs version should be specified.
   */
  version?: number;
  /**
   * Version of the component. If missing, the component assumes the default version of the provider.
   */
  component_version?: number;
  /**
   * Description of the component.
   */
  description?: string;
  /**
   * Human readable label for the component. If missing the component assumes the class name of the provider.
   */
  label?: string;
  /**
   * The schema validated config field is passed to a given class's implmentation of :py:meth:`autogen_core.ComponentConfigImpl._from_config` to create a new instance of the component class.
   */
  config: {
    [key: string]: unknown;
  };
};

export type GalleryComponents = {
  agents: Array<ComponentModel>;
  models: Array<ComponentModel>;
  tools: Array<ComponentModel>;
  terminations: Array<ComponentModel>;
};

export type GalleryItems = {
  teams: Array<ComponentModel>;
  components: GalleryComponents;
};

export type Gallery = {
  metadata: ApiResourceMeta;
  name: string;
  url: string;
  userId: string;
  meta: {
    author: string;
    created_at: string;
    updated_at: string;
    version: string;
    description?: string;
    tags?: Array<unknown>;
    license?: string;
    homepage?: string;
    category?: string;
    last_synced?: string;
  };
  items: GalleryItems;
};

export type GalleryList = {
  pagination?: PaginationResponse;
  rows?: Array<Gallery>;
};

export type GalleryUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  userId: string;
};

export type AgEvent = {
  metadata?: ApiResourceMeta;
  userId?: string;
  data: {
    [key: string]: unknown;
  };
  framework: string;
  stepRunId: string;
  meta?: {
    [key: string]: unknown;
  };
};

export type EventTypes =
  | "WorkflowRunStart"
  | "WorkflowRunEnd"
  | "StepRun"
  | "TextMessage"
  | "ModelClientStreamingChunkEvent";

export const EventTypes = {
  WORKFLOW_RUN_START: "WorkflowRunStart",
  WORKFLOW_RUN_END: "WorkflowRunEnd",
  STEP_RUN: "StepRun",
  TEXT_MESSAGE: "TextMessage",
  MODEL_CLIENT_STREAMING_CHUNK_EVENT: "ModelClientStreamingChunkEvent",
} as const;

export type AgEventList = {
  pagination?: PaginationResponse;
  rows?: Array<AgEvent>;
};

export type AgEventCreate = ApiResourceMetaProperties & AgEvent;

export type AgEventUpdate = ApiResourceMetaProperties & AgEvent;

export type EventBase = {
  type: string;
};

/**
 * 用户调用工作流后, 后端返回工作流启动状态的事件, 一般用于根据 Id,从 stream api 中进一步拉取更加详细的事件
 */
export type StartWorkflowRunEvent = EventBase & {
  workflowRunId?: string;
};

export type Outline = {
  /**
   * Title of the Wikipedia page
   */
  pageTitle: string;
  /**
   * Titles and descriptions for each section of the Wikipedia page
   */
  sections: Array<Section>;
};

/**
 * agent 任务工具
 */
export type AgentTaskTool = {
  metadata: ApiResourceMeta;
  /**
   * 工具名称
   */
  name: string;
  /**
   * 工具描述
   */
  description: string;
};

/**
 * 任务执行步骤
 */
export type AgentTaskStep = {
  metadata: ApiResourceMeta;
  /**
   * 工具名称
   */
  name: string;
  /**
   * 步骤启动时间
   */
  createAt: string;
  /**
   * 步骤输入类型(human,ai,tool)
   */
  inputType?: string;
  /**
   * 步骤输入
   */
  input: string;
  /**
   * 步骤输出
   */
  output: string;
  /**
   * 是否是最终步骤
   */
  isFinal?: boolean;
  /**
   * 步骤执行原因
   */
  reason: string;
};

/**
 * agent 执行步骤
 */
export type AgentStep = {
  metadata: ApiResourceMeta;
  Action: AgentAction;
  /**
   * 步骤观察
   */
  Observation: string;
};

/**
 * agent 执行动作
 */
export type AgentAction = {
  /**
   * 工具名称
   */
  Tool: string;
  /**
   * 工具输入
   */
  ToolInput: string;
  /**
   * 工具日志
   */
  Log: string;
  /**
   * 工具ID
   */
  ToolID: string;
};

/**
 * agent 完成
 */
export type AgentFinish = {
  /**
   * 返回值
   */
  ReturnValues: {
    [key: string]: unknown;
  };
  /**
   * 日志
   */
  Log: string;
};

/**
 * 创建agent节点请求
 */
export type AgentNodeCreateRequest = {
  /**
   * agent 节点名称, 或者作为工具名称
   */
  title?: string;
  /**
   * agent 节点提示词
   */
  prompt: string;
  /**
   * agent 节点描述, 或者作为工具描述
   */
  description?: string;
};

/**
 * 创建agent节点请求
 */
export type AgentNodeUpdateRequest = {
  /**
   * agent 节点名称, 或者作为工具名称
   */
  title?: string;
  /**
   * agent 节点提示词
   */
  prompt: string;
  /**
   * agent 节点类型
   */
  type?: string;
  /**
   * agent 节点描述
   */
  description?: string;
  /**
   * agent 节点状态
   */
  state?: {
    [key: string]: unknown;
  };
};

export type ScrapeGraphParams = {
  input?: string;
};

export type ModelFamily = "r1" | "openai" | "unknown";

export const ModelFamily = {
  R1: "r1",
  OPENAI: "openai",
  UNKNOWN: "unknown",
} as const;

export type ModelInfo = {
  family: ModelFamily;
  vision: boolean;
  function_calling: boolean;
  json_output: boolean;
};

export type BrowserParams = {
  input?: string;
};

export type TerminationTypes =
  | "MaxMessageTermination"
  | "StopMessageTermination"
  | "TextMentionTermination"
  | "TimeoutTermination";

export const TerminationTypes = {
  MAX_MESSAGE_TERMINATION: "MaxMessageTermination",
  STOP_MESSAGE_TERMINATION: "StopMessageTermination",
  TEXT_MENTION_TERMINATION: "TextMentionTermination",
  TIMEOUT_TERMINATION: "TimeoutTermination",
} as const;

export type ComponentTypes =
  | "team"
  | "agent"
  | "model"
  | "tool"
  | "termination";

export const ComponentTypes = {
  TEAM: "team",
  AGENT: "agent",
  MODEL: "model",
  TOOL: "tool",
  TERMINATION: "termination",
} as const;

export type RequestUsage = {
  prompt_tokens: number;
  completion_tokens: number;
};

export type FunctionCall = {
  id: string;
  arguments: string;
  name: string;
};

export type FunctionExecutionResult = {
  call_id: string;
  content: string;
};

export type BaseMessageConfig = {
  source?: string;
  models_usage?: RequestUsage;
};

export type ImageContent = {
  url: string;
  alt?: string;
  data?: string;
};

export type TextMessageConfig = BaseMessageConfig & {
  content?: string;
};

export type MultiModalMessageConfig = BaseMessageConfig & {
  content?: Array<string | ImageContent>;
};

export type StopMessageConfig = BaseMessageConfig & {
  content: string;
};

export type HandoffMessageConfig = BaseMessageConfig & {
  content: string;
  target: string;
};

export type ToolCallMessageConfig = BaseMessageConfig & {
  content: Array<FunctionCall>;
};

export type ToolCallResultMessageConfig = BaseMessageConfig & {
  content: Array<FunctionExecutionResult>;
};

export type TeamResult = {
  task_result: {
    [key: string]: unknown;
  };
  usage: string;
  duration: number;
};

export type InnerMessageConfig =
  | ToolCallMessageConfig
  | ToolCallResultMessageConfig;

export type ChatMessageConfig =
  | TextMessageConfig
  | MultiModalMessageConfig
  | StopMessageConfig
  | HandoffMessageConfig;

export type AgentMessageConfig =
  | TextMessageConfig
  | MultiModalMessageConfig
  | StopMessageConfig
  | HandoffMessageConfig
  | ToolCallMessageConfig
  | ToolCallResultMessageConfig;

export type SessionRuns = {
  runs: Array<Run>;
};

export type MemoryConfig = ComponentModel;

export type ModelContext = ComponentModel;

export type TaskResult = {
  messages: Array<AgentMessageConfig>;
  stop_reason?: string;
};

export type AgentTypes =
  | "AssistantAgent"
  | "UserProxyAgent"
  | "MultimodalWebSurfer"
  | "FileSurfer"
  | "MagenticOneCoderAgent";

export const AgentTypes = {
  ASSISTANT_AGENT: "AssistantAgent",
  USER_PROXY_AGENT: "UserProxyAgent",
  MULTIMODAL_WEB_SURFER: "MultimodalWebSurfer",
  FILE_SURFER: "FileSurfer",
  MAGENTIC_ONE_CODER_AGENT: "MagenticOneCoderAgent",
} as const;

export type ToolTypes = "PythonFunction";

export const ToolTypes = {
  PYTHON_FUNCTION: "PythonFunction",
} as const;

export type ModelTypes =
  | "OpenAIChatCompletionClient"
  | "AzureOpenAIChatCompletionClient";

export const ModelTypes = {
  OPEN_AI_CHAT_COMPLETION_CLIENT: "OpenAIChatCompletionClient",
  AZURE_OPEN_AI_CHAT_COMPLETION_CLIENT: "AzureOpenAIChatCompletionClient",
} as const;

export type AzureOpenAiModelConfig = ModelConfig & {
  model_type: "AzureOpenAIChatCompletionClient";
  azure_deployment: string;
  api_version: string;
  azure_endpoint: string;
  azure_ad_token_provider: string;
};

export type OpenAiModelConfig = ModelConfig & {
  model_type: "OpenAIChatCompletionClient";
};

export type ToolComponent = ComponentModel & {
  config: ToolConfig;
};

export type ToolConfig = {
  name: string;
  description?: string;
  source_code?: string;
  global_imports?: Array<string>;
  has_cancellation_support?: boolean;
};

export type ModelComponent = ComponentModel & {
  config: ModelConfig;
};

export type ModelConfig = {
  model: string;
  model_type: ModelTypes;
  api_key?: string;
  base_url?: string;
  timeout?: number;
  max_retries?: number;
  frequency_penalty?: number;
  logit_bias?: number;
  max_tokens?: number;
  n?: number;
  presence_penalty?: number;
  response_format?: ResponseFormat;
  seed?: number;
  stop?: Array<string>;
  temperature?: number;
  top_p?: number;
  user?: string;
  organization?: string;
  default_headers?: {
    [key: string]: unknown;
  };
  model_info?: ModelInfo;
};

export type ResponseFormat = "json_object" | "text";

export const ResponseFormat = {
  JSON_OBJECT: "json_object",
  TEXT: "text",
} as const;

export type RunStatus =
  | "created"
  | "active"
  | "awaiting_input"
  | "timeout"
  | "complete"
  | "error"
  | "stopped";

export const RunStatus = {
  CREATED: "created",
  ACTIVE: "active",
  AWAITING_INPUT: "awaiting_input",
  TIMEOUT: "timeout",
  COMPLETE: "complete",
  ERROR: "error",
  STOPPED: "stopped",
} as const;

export type AgentComponent = ComponentModel & {
  config: AgentConfig;
};

export type AgentConfig = {
  name: string;
  description: string;
  model_context?: ModelContext;
  memory?: MemoryConfig;
  model_client_stream: boolean;
  system_message?: string;
  model_client: ModelComponent;
  tools: Array<ToolComponent>;
  handoffs: Array<string>;
  reflect_on_tool_use: boolean;
  tool_call_summary_format: string;
};

export type Section = {
  /**
   * Title of the section
   */
  section_title: string;
  /**
   * Content of the section
   */
  description: string;
  /**
   * Titles and descriptions for each subsection of the Wikipedia page
   */
  subsections?: Array<Subsection>;
};

export type Subsection = {
  /**
   * Title of the subsection
   */
  subsectionTitle: string;
  /**
   * Content of the subsection
   */
  description: string;
};

/**
 * 节点运行
 */
export type NodeRunAction = {
  /**
   * 动作
   */
  action?: string;
  /**
   * 输入
   */
  input?: {
    [key: string]: unknown;
  };
};

export type RoundRobinGroupChatConfig = {
  team_type?: "RoundRobinGroupChat";
};

export type SelectorGroupChatConfig = ComponentModel & {
  team_type?: "SelectorGroupChat";
  selector_prompt?: string;
  model_client?: ModelConfig;
};

export type TeamComponent = ComponentModel & {
  config?: TeamConfig;
};

export type TerminationComponent = ComponentModel & {
  config: TerminationConfig;
};

export type TerminationConfig = {
  termination_type?: TerminationTypes;
  conditions?: Array<TerminationConditions>;
};

export type MaxMessageTerminationConfigComponent = ComponentModel & {
  config: MaxMessageTerminationConfig;
};

export type MaxMessageTerminationConfig = {
  termination_type: "MaxMessageTermination";
  max_messages: number;
};

export type TextMentionTerminationComponent = ComponentModel & {
  config?: TextMentionTerminationConfig;
};

export type TextMentionTerminationConfig = {
  termination_type: "TextMentionTermination";
  text: string;
};

export type TerminationConditions =
  | MaxMessageTerminationConfigComponent
  | TextMentionTerminationComponent;

export type TeamTypes =
  | "RoundRobinGroupChat"
  | "SelectorGroupChat"
  | "MagenticOneGroupChat";

export const TeamTypes = {
  ROUND_ROBIN_GROUP_CHAT: "RoundRobinGroupChat",
  SELECTOR_GROUP_CHAT: "SelectorGroupChat",
  MAGENTIC_ONE_GROUP_CHAT: "MagenticOneGroupChat",
} as const;

export type TeamConfig = {
  max_turns?: number;
  participants?: Array<AgentComponent>;
  termination_condition?: TerminationComponent;
};

export type BaseState = {
  metadata: ApiResourceMeta;
  /**
   * 线程ID
   */
  threadId?: string;
  /**
   * 聊天消息
   */
  messages: Array<ChatMessage>;
};

export type AgentState = AssisantState | GenArticleState | PostizState;

export type AssisantState = BaseState & {
  /**
   * 名称
   */
  name: string;
  /**
   * 描述
   */
  description: string;
};

export type GenArticleState = BaseState & {
  /**
   * 当前关联的主题
   */
  topic: string;
  /**
   * 关键提示语
   */
  prompt?: string;
  /**
   * 文章主标题
   */
  title?: string;
  /**
   * 文章副标题
   */
  subTitle?: string;
  /**
   * 文章大纲列表
   */
  oulines?: Array<{
    title: string;
    /**
     * 大纲描述
     */
    description?: string;
  }>;
};

export type PostizChannel = {
  /**
   * 聊天消息
   */
  messages?: Array<ChatMessage>;
  fresearch?: string;
  orgId?: string;
  hook?: string;
  content?: string;
  date?: string;
  category?: string;
  popularPosts?: string;
  topic?: string;
  isPicture?: boolean;
  format?: string;
  tone?: string;
  question?: string;
};

export type PostizState = {
  channel?: PostizChannel;
};

/**
 * 研究输入(目前写死为调用社交媒体)
 */
export type ResearchRequest = {
  isStream: boolean;
  threadId: string;
} & {
  /**
   * 详细描述要调研详情
   */
  input: string;
};

/**
 * 研究输出(目前写死为调用社交媒体)
 */
export type ResearchResponse = {
  /**
   * 研究结果
   */
  output: string;
};

export type TenantParameter = string;

export type Prompt = {
  metadata: ApiResourceMeta;
  title: string;
  content: string;
  tags: Array<string>;
};

export type PromptList = {
  pagination?: PaginationResponse;
  rows?: Array<Artifact>;
};

export type SubscribeRequest = {
  /**
   * 消息
   */
  protocol?: string;
  /**
   * 消息
   */
  runId?: string;
  /**
   * 消息
   */
  streamKey?: string;
  /**
   * 元数据
   */
  meta?: {
    [key: string]: unknown;
  };
};

export type ToolCallResult = {
  /**
   * 结果id
   */
  id?: string;
  /**
   * 结果数据
   */
  data?: string;
};

export type WebSearchResult = {
  /**
   * 结果描述
   */
  message?: string;
};

export type ModelList = {
  pagination?: PaginationResponse;
  rows?: Array<ModelComponent>;
};

export type UpdateModel = {
  metadata?: ApiResourceMeta;
  name?: string;
};

export type TokenChunk = {
  /**
   * 消息ID
   */
  id: string;
  /**
   * 消息内容
   */
  content: string;
};

export type EvtNodeStep = {
  /**
   * 节点名称
   */
  name: string;
  /**
   * 节点输入
   */
  input: string;
};

export type FormField = {
  name: string;
  type: string;
};

export type SchemaForm = {
  title: string;
  description?: string;
  fields: Array<FormField>;
};

/**
 * site
 */
export type Site = {
  metadata: ApiResourceMeta;
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
};

export type SiteList = {
  pagination?: PaginationResponse;
  rows?: Array<Site>;
};

export type CreateSiteRequest = {
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
  /**
   * 入站域名(指定绑定入站域名)
   */
  host?: string;
};

export type CreateSiteResponse = Site;

export type UpdateSiteRequest = {
  /**
   * site 标题
   */
  title?: string;
};

/**
 * site-host
 */
export type SiteHost = {
  metadata: ApiResourceMeta;
  /**
   * site-host 标题
   */
  title: string;
  /**
   * site-host 描述
   */
  description: string;
  /**
   * 绑定域名
   */
  host: string;
};

export type SiteHostList = {
  pagination?: PaginationResponse;
  rows?: Array<SiteHost>;
};

export type CreateSiteHostRequest = {
  /**
   * 站点ID
   */
  siteId: string;
  /**
   * site-host 标题
   */
  title: string;
  /**
   * site-host 描述
   */
  description: string;
  /**
   * 绑定域名
   */
  host: string;
};

export type CreateSiteHostResponse = SiteHost;

export type UpdateSiteHostRequest = SiteHost;

export type UpdateSiteHostResponse = SiteHost;

export type Post = {
  metadata: ApiResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog
   */
  content: string;
};

export type PostList = {
  pagination?: PaginationResponse;
  rows?: Array<Post>;
};

export type CreatePostRequest = {
  siteId: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
  /**
   * The slug of the post
   */
  slug: string;
  authorId?: string;
  status?: "draft" | "published";
};

export type FrontendConfig = {
  /**
   * Cookie access token
   */
  cookieAccessToken: string;
  /**
   * Dashboard path
   */
  dashPath: string;
  /**
   * Hot key debug
   */
  hotKeyDebug: string;
  /**
   * 实验性质，默认租户的access token
   */
  defaultTenantAccessToken: string;
};

export type SiderbarConfig = {
  /**
   * logo
   */
  logo?: string;
  sideritems?: Array<DashSidebarItem>;
};

export type DashSidebarItem = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 默认展开
   */
  defaultExpanded?: boolean;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
  children?: Array<DashSidebarItemLeaf>;
};

export type DashSidebarItemLeaf = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
};

export type HfAccount = {
  metadata: ApiResourceMeta;
  /**
   * The username of the hf account.
   */
  username: string;
  /**
   * The token of the hf account.
   */
  token: string;
};

/**
 * 环境变量
 */
export type Env = {
  metadata: ApiResourceMeta;
  /**
   * 环境变量名称
   */
  name: string;
  /**
   * 环境变量值
   */
  value: string;
};

export type EnvList = {
  pagination?: PaginationResponse;
  rows?: Array<Env>;
};

export type Endpoint = {
  metadata: ApiResourceMeta;
  name: string;
  url: string;
  token: string;
  type: string;
};

export type EndpointList = {
  pagination?: PaginationResponse;
  rows?: Array<Endpoint>;
};

export type UpdateEndpointRequest = {
  name?: string;
  url?: string;
  token?: string;
};

export type Platform = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type PlatformList = {
  pagination?: PaginationResponse;
  rows?: Array<Platform>;
};

export type PlatformUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type PlatformAccount = {
  metadata: ApiResourceMeta;
  username: string;
  email?: string;
  password?: string;
  token?: string;
  type?: string;
  platform: string;
  enabled?: boolean;
  comment?: string;
  tags?: Array<string>;
  properties?: {
    [key: string]: unknown;
  };
};

export type PlatformAccountList = {
  pagination?: PaginationResponse;
  rows?: Array<PlatformAccount>;
};

export type PlatformAccountUpdate = {
  metadata?: ApiResourceMeta;
  username?: string;
  email?: string;
  password?: string;
  token?: string;
  type?: string;
  platform?: string;
  enabled?: boolean;
  comment?: string;
  tags?: Array<string>;
  properties?: {
    [key: string]: unknown;
  };
};

export type Browser = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type BrowserList = {
  pagination?: PaginationResponse;
  rows?: Array<Browser>;
};

export type BrowserUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type Proxy = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type ProxyList = {
  pagination?: PaginationResponse;
  rows?: Array<Proxy>;
};

export type ProxyUpdate = {
  metadata: ApiResourceMeta;
  name: string;
  description?: string;
  url: string;
  loginUrl?: string;
  properties?: {
    [key: string]: unknown;
  };
  tags?: Array<string>;
};

export type ReadinessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/ready";
};

export type ReadinessGetErrors = {
  /**
   * Not ready to accept traffic
   */
  500: unknown;
};

export type ReadinessGetResponses = {
  /**
   * Healthy
   */
  200: unknown;
};

export type LivenessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/live";
};

export type LivenessGetErrors = {
  /**
   * Not liveness
   */
  500: unknown;
};

export type LivenessGetResponses = {
  /**
   * Healthy
   */
  200: unknown;
};

export type MetadataGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/meta";
};

export type MetadataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type MetadataGetError = MetadataGetErrors[keyof MetadataGetErrors];

export type MetadataGetResponses = {
  /**
   * Successfully retrieved the metadata
   */
  200: ApiMeta;
};

export type MetadataGetResponse =
  MetadataGetResponses[keyof MetadataGetResponses];

export type CloudMetadataGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/cloud/metadata";
};

export type CloudMetadataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type CloudMetadataGetError =
  CloudMetadataGetErrors[keyof CloudMetadataGetErrors];

export type CloudMetadataGetResponses = {
  /**
   * Cloud unavailable
   */
  200: ApiErrors;
};

export type CloudMetadataGetResponse =
  CloudMetadataGetResponses[keyof CloudMetadataGetResponses];

export type MetadataListIntegrationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/meta/integrations";
};

export type MetadataListIntegrationsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type MetadataListIntegrationsError =
  MetadataListIntegrationsErrors[keyof MetadataListIntegrationsErrors];

export type MetadataListIntegrationsResponses = {
  /**
   * Successfully retrieved the list of integrations
   */
  200: ListApiMetaIntegration;
};

export type MetadataListIntegrationsResponse =
  MetadataListIntegrationsResponses[keyof MetadataListIntegrationsResponses];

export type UserUpdateLoginData = {
  body?: UserLoginRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/login";
};

export type UserUpdateLoginErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdateLoginError =
  UserUpdateLoginErrors[keyof UserUpdateLoginErrors];

export type UserUpdateLoginResponses = {
  /**
   * Successfully logged in
   */
  200: User;
};

export type UserUpdateLoginResponse =
  UserUpdateLoginResponses[keyof UserUpdateLoginResponses];

export type UserUpdateGoogleOauthStartData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/google/start";
};

export type UserUpdateGoogleOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/google/callback";
};

export type UserUpdateGithubOauthStartData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/github/start";
};

export type UserUpdateGithubOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/github/callback";
};

export type UserUpdateSlackOauthStartData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/slack/start";
};

export type UserUpdateSlackOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/slack/callback";
};

export type SnsUpdateData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The event key
     */
    event: string;
  };
  query?: never;
  url: "/api/v1/sns/{tenant}/{event}";
};

export type SnsUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsUpdateError = SnsUpdateErrors[keyof SnsUpdateErrors];

export type SnsUpdateResponses = {
  /**
   * Successfully processed webhook
   */
  200: unknown;
};

export type SnsListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sns";
};

export type SnsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsListError = SnsListErrors[keyof SnsListErrors];

export type SnsListResponses = {
  /**
   * Successfully retrieved SNS integrations
   */
  200: ListSnsIntegrations;
};

export type SnsListResponse = SnsListResponses[keyof SnsListResponses];

export type SnsCreateData = {
  body?: CreateSnsIntegrationRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sns";
};

export type SnsCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsCreateError = SnsCreateErrors[keyof SnsCreateErrors];

export type SnsCreateResponses = {
  /**
   * Successfully created SNS integration
   */
  201: SnsIntegration;
};

export type SnsCreateResponse = SnsCreateResponses[keyof SnsCreateResponses];

export type AlertEmailGroupListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting-email-groups";
};

export type AlertEmailGroupListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupListError =
  AlertEmailGroupListErrors[keyof AlertEmailGroupListErrors];

export type AlertEmailGroupListResponses = {
  /**
   * Successfully retrieved the tenant alert email groups
   */
  200: TenantAlertEmailGroupList;
};

export type AlertEmailGroupListResponse =
  AlertEmailGroupListResponses[keyof AlertEmailGroupListResponses];

export type AlertEmailGroupCreateData = {
  /**
   * The tenant alert email group to create
   */
  body: CreateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting-email-groups";
};

export type AlertEmailGroupCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupCreateError =
  AlertEmailGroupCreateErrors[keyof AlertEmailGroupCreateErrors];

export type AlertEmailGroupCreateResponses = {
  /**
   * Successfully created the tenant alert email group
   */
  201: TenantAlertEmailGroup;
};

export type AlertEmailGroupCreateResponse =
  AlertEmailGroupCreateResponses[keyof AlertEmailGroupCreateResponses];

export type TenantResourcePolicyGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/resource-policy";
};

export type TenantResourcePolicyGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantResourcePolicyGetError =
  TenantResourcePolicyGetErrors[keyof TenantResourcePolicyGetErrors];

export type TenantResourcePolicyGetResponses = {
  /**
   * Successfully retrieved the tenant resource policy
   */
  200: TenantResourcePolicy;
};

export type TenantResourcePolicyGetResponse =
  TenantResourcePolicyGetResponses[keyof TenantResourcePolicyGetResponses];

export type AlertEmailGroupDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
  query?: never;
  url: "/api/v1/alerting-email-groups/{alert-email-group}";
};

export type AlertEmailGroupDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupDeleteError =
  AlertEmailGroupDeleteErrors[keyof AlertEmailGroupDeleteErrors];

export type AlertEmailGroupDeleteResponses = {
  /**
   * Successfully deleted the tenant alert email group
   */
  204: void;
};

export type AlertEmailGroupDeleteResponse =
  AlertEmailGroupDeleteResponses[keyof AlertEmailGroupDeleteResponses];

export type AlertEmailGroupUpdateData = {
  /**
   * The tenant alert email group to update
   */
  body: UpdateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
  query?: never;
  url: "/api/v1/alerting-email-groups/{alert-email-group}";
};

export type AlertEmailGroupUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupUpdateError =
  AlertEmailGroupUpdateErrors[keyof AlertEmailGroupUpdateErrors];

export type AlertEmailGroupUpdateResponses = {
  /**
   * Successfully updated the tenant alert email group
   */
  200: TenantAlertEmailGroup;
};

export type AlertEmailGroupUpdateResponse =
  AlertEmailGroupUpdateResponses[keyof AlertEmailGroupUpdateResponses];

export type SnsDeleteData = {
  body?: never;
  path: {
    /**
     * The SNS integration id
     */
    sns: string;
  };
  query?: never;
  url: "/api/v1/sns/{sns}";
};

export type SnsDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SnsDeleteError = SnsDeleteErrors[keyof SnsDeleteErrors];

export type SnsDeleteResponses = {
  /**
   * Successfully deleted SNS integration
   */
  204: void;
};

export type SnsDeleteResponse = SnsDeleteResponses[keyof SnsDeleteResponses];

export type SlackWebhookListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/slack";
};

export type SlackWebhookListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SlackWebhookListError =
  SlackWebhookListErrors[keyof SlackWebhookListErrors];

export type SlackWebhookListResponses = {
  /**
   * Successfully retrieved Slack webhooks
   */
  200: ListSlackWebhooks;
};

export type SlackWebhookListResponse =
  SlackWebhookListResponses[keyof SlackWebhookListResponses];

export type SlackWebhookDeleteData = {
  body?: never;
  path: {
    /**
     * The Slack webhook id
     */
    slack: string;
  };
  query?: never;
  url: "/api/v1/slack/{slack}";
};

export type SlackWebhookDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type SlackWebhookDeleteError =
  SlackWebhookDeleteErrors[keyof SlackWebhookDeleteErrors];

export type SlackWebhookDeleteResponses = {
  /**
   * Successfully deleted Slack webhook
   */
  204: void;
};

export type SlackWebhookDeleteResponse =
  SlackWebhookDeleteResponses[keyof SlackWebhookDeleteResponses];

export type UserGetCurrentData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/current";
};

export type UserGetCurrentErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserGetCurrentError =
  UserGetCurrentErrors[keyof UserGetCurrentErrors];

export type UserGetCurrentResponses = {
  /**
   * Successfully retrieved the user
   */
  200: User;
};

export type UserGetCurrentResponse =
  UserGetCurrentResponses[keyof UserGetCurrentResponses];

export type UserUpdatePasswordData = {
  body?: UserChangePasswordRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/password";
};

export type UserUpdatePasswordErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdatePasswordError =
  UserUpdatePasswordErrors[keyof UserUpdatePasswordErrors];

export type UserUpdatePasswordResponses = {
  /**
   * Successfully changed password
   */
  200: User;
};

export type UserUpdatePasswordResponse =
  UserUpdatePasswordResponses[keyof UserUpdatePasswordResponses];

export type UserCreateData = {
  body?: UserRegisterRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/register";
};

export type UserCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserCreateError = UserCreateErrors[keyof UserCreateErrors];

export type UserCreateResponses = {
  /**
   * Successfully registered the user
   */
  200: User;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserUpdateLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/logout";
};

export type UserUpdateLogoutErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdateLogoutError =
  UserUpdateLogoutErrors[keyof UserUpdateLogoutErrors];

export type UserUpdateLogoutResponses = {
  /**
   * Successfully logged out
   */
  200: User;
};

export type UserUpdateLogoutResponse =
  UserUpdateLogoutResponses[keyof UserUpdateLogoutResponses];

export type TenantMembershipsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/memberships";
};

export type TenantMembershipsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type TenantMembershipsListError =
  TenantMembershipsListErrors[keyof TenantMembershipsListErrors];

export type TenantMembershipsListResponses = {
  /**
   * Successfully listed the tenant memberships
   */
  200: UserTenantMembershipsList;
};

export type TenantMembershipsListResponse =
  TenantMembershipsListResponses[keyof TenantMembershipsListResponses];

export type UserListTenantInvitesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites";
};

export type UserListTenantInvitesErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type UserListTenantInvitesError =
  UserListTenantInvitesErrors[keyof UserListTenantInvitesErrors];

export type UserListTenantInvitesResponses = {
  /**
   * Successfully listed the tenant invites
   */
  200: TenantInviteList;
};

export type UserListTenantInvitesResponse =
  UserListTenantInvitesResponses[keyof UserListTenantInvitesResponses];

export type TenantInviteAcceptData = {
  body?: AcceptInviteRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites/accept";
};

export type TenantInviteAcceptErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteAcceptError =
  TenantInviteAcceptErrors[keyof TenantInviteAcceptErrors];

export type TenantInviteAcceptResponses = {
  /**
   * Successfully accepted the tenant invite
   */
  200: unknown;
};

export type TenantInviteRejectData = {
  body?: RejectInviteRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites/reject";
};

export type TenantInviteRejectErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteRejectError =
  TenantInviteRejectErrors[keyof TenantInviteRejectErrors];

export type TenantInviteRejectResponses = {
  /**
   * Successfully rejected the tenant invite
   */
  200: unknown;
};

export type TenantCreateData = {
  /**
   * The tenant to create
   */
  body: CreateTenantRequest;
  path?: never;
  query?: never;
  url: "/api/v1/tenants";
};

export type TenantCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantCreateError = TenantCreateErrors[keyof TenantCreateErrors];

export type TenantCreateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Tenant;
};

export type TenantCreateResponse =
  TenantCreateResponses[keyof TenantCreateResponses];

export type TenantUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateTenantRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}";
};

export type TenantUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantUpdateError = TenantUpdateErrors[keyof TenantUpdateErrors];

export type TenantUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Tenant;
};

export type TenantUpdateResponse =
  TenantUpdateResponses[keyof TenantUpdateResponses];

export type TenantAlertingSettingsGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting/settings";
};

export type TenantAlertingSettingsGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantAlertingSettingsGetError =
  TenantAlertingSettingsGetErrors[keyof TenantAlertingSettingsGetErrors];

export type TenantAlertingSettingsGetResponses = {
  /**
   * Successfully retrieved the tenant alerting settings
   */
  200: TenantAlertingSettings;
};

export type TenantAlertingSettingsGetResponse =
  TenantAlertingSettingsGetResponses[keyof TenantAlertingSettingsGetResponses];

export type TenantInviteListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites";
};

export type TenantInviteListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteListError =
  TenantInviteListErrors[keyof TenantInviteListErrors];

export type TenantInviteListResponses = {
  /**
   * Successfully retrieved the tenant invites
   */
  200: TenantInviteList;
};

export type TenantInviteListResponse =
  TenantInviteListResponses[keyof TenantInviteListResponses];

export type TenantInviteCreateData = {
  /**
   * The tenant invite to create
   */
  body: CreateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites";
};

export type TenantInviteCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteCreateError =
  TenantInviteCreateErrors[keyof TenantInviteCreateErrors];

export type TenantInviteCreateResponses = {
  /**
   * Successfully created the tenant invite
   */
  201: TenantInvite;
};

export type TenantInviteCreateResponse =
  TenantInviteCreateResponses[keyof TenantInviteCreateResponses];

export type TenantInviteDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}";
};

export type TenantInviteDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type TenantInviteDeleteError =
  TenantInviteDeleteErrors[keyof TenantInviteDeleteErrors];

export type TenantInviteDeleteResponses = {
  /**
   * Successfully deleted the tenant invite
   */
  200: TenantInvite;
};

export type TenantInviteDeleteResponse =
  TenantInviteDeleteResponses[keyof TenantInviteDeleteResponses];

export type TenantInviteUpdateData = {
  /**
   * The tenant invite to update
   */
  body: UpdateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}";
};

export type TenantInviteUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type TenantInviteUpdateError =
  TenantInviteUpdateErrors[keyof TenantInviteUpdateErrors];

export type TenantInviteUpdateResponses = {
  /**
   * Successfully updated the tenant invite
   */
  200: TenantInvite;
};

export type TenantInviteUpdateResponse =
  TenantInviteUpdateResponses[keyof TenantInviteUpdateResponses];

export type ApiTokenListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/api-tokens";
};

export type ApiTokenListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenListError = ApiTokenListErrors[keyof ApiTokenListErrors];

export type ApiTokenListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: ListApiTokensResponse;
};

export type ApiTokenListResponse =
  ApiTokenListResponses[keyof ApiTokenListResponses];

export type ApiTokenCreateData = {
  body?: CreateApiTokenRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/api-tokens";
};

export type ApiTokenCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenCreateError =
  ApiTokenCreateErrors[keyof ApiTokenCreateErrors];

export type ApiTokenCreateResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: CreateApiTokenResponse;
};

export type ApiTokenCreateResponse =
  ApiTokenCreateResponses[keyof ApiTokenCreateResponses];

export type ApiTokenUpdateRevokeData = {
  body?: never;
  path: {
    /**
     * The API token
     */
    "api-token": string;
  };
  query?: never;
  url: "/api/v1/api-tokens/{api-token}";
};

export type ApiTokenUpdateRevokeErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenUpdateRevokeError =
  ApiTokenUpdateRevokeErrors[keyof ApiTokenUpdateRevokeErrors];

export type ApiTokenUpdateRevokeResponses = {
  /**
   * Successfully revoked the token
   */
  204: void;
};

export type ApiTokenUpdateRevokeResponse =
  ApiTokenUpdateRevokeResponses[keyof ApiTokenUpdateRevokeResponses];

export type TenantGetQueueMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of workflow IDs to filter by
     */
    workflows?: Array<WorkflowId>;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
  };
  url: "/api/v1/tenants/{tenant}/queue-metrics";
};

export type TenantGetQueueMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantGetQueueMetricsError =
  TenantGetQueueMetricsErrors[keyof TenantGetQueueMetricsErrors];

export type TenantGetQueueMetricsResponses = {
  /**
   * Successfully retrieved the workflow version metrics
   */
  200: TenantQueueMetrics;
};

export type TenantGetQueueMetricsResponse =
  TenantGetQueueMetricsResponses[keyof TenantGetQueueMetricsResponses];

export type TenantGetStepRunQueueMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-run-queue-metrics";
};

export type TenantGetStepRunQueueMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantGetStepRunQueueMetricsError =
  TenantGetStepRunQueueMetricsErrors[keyof TenantGetStepRunQueueMetricsErrors];

export type TenantGetStepRunQueueMetricsResponses = {
  /**
   * Successfully retrieved the step run queue metrics
   */
  200: TenantStepRunQueueMetrics;
};

export type TenantGetStepRunQueueMetricsResponse =
  TenantGetStepRunQueueMetricsResponses[keyof TenantGetStepRunQueueMetricsResponses];

export type EventListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * A list of keys to filter by
     */
    keys?: Array<EventKey>;
    /**
     * A list of workflow IDs to filter by
     */
    workflows?: Array<WorkflowId>;
    /**
     * A list of workflow run statuses to filter by
     */
    statuses?: WorkflowRunStatusList;
    /**
     * The search query to filter for
     */
    search?: EventSearch;
    /**
     * What to order by
     */
    orderByField?: EventOrderByField;
    /**
     * The order direction
     */
    orderByDirection?: EventOrderByDirection;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * A list of event ids to filter by
     */
    eventIds?: Array<string>;
  };
  url: "/api/v1/tenants/{tenant}/events";
};

export type EventListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventListError = EventListErrors[keyof EventListErrors];

export type EventListResponses = {
  /**
   * Successfully listed the events
   */
  200: EventList;
};

export type EventListResponse = EventListResponses[keyof EventListResponses];

export type EventCreateData = {
  /**
   * The event to create
   */
  body: CreateEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events";
};

export type EventCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventCreateError = EventCreateErrors[keyof EventCreateErrors];

export type EventCreateResponses = {
  /**
   * Successfully created the event
   */
  200: Event;
};

export type EventCreateResponse =
  EventCreateResponses[keyof EventCreateResponses];

export type EventCreateBulkData = {
  /**
   * The events to create
   */
  body: BulkCreateEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/bulk";
};

export type EventCreateBulkErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventCreateBulkError =
  EventCreateBulkErrors[keyof EventCreateBulkErrors];

export type EventCreateBulkResponses = {
  /**
   * Successfully created the events
   */
  200: BulkCreateEventResponse;
};

export type EventCreateBulkResponse =
  EventCreateBulkResponses[keyof EventCreateBulkResponses];

export type EventUpdateReplayData = {
  /**
   * The event ids to replay
   */
  body: ReplayEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/replay";
};

export type EventUpdateReplayErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventUpdateReplayError =
  EventUpdateReplayErrors[keyof EventUpdateReplayErrors];

export type EventUpdateReplayResponses = {
  /**
   * Successfully replayed the events
   */
  200: EventList;
};

export type EventUpdateReplayResponse =
  EventUpdateReplayResponses[keyof EventUpdateReplayResponses];

export type EventUpdateCancelData = {
  /**
   * The event ids to replay
   */
  body: CancelEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/cancel";
};

export type EventUpdateCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type EventUpdateCancelError =
  EventUpdateCancelErrors[keyof EventUpdateCancelErrors];

export type EventUpdateCancelResponses = {
  /**
   * Successfully canceled runs for the events
   */
  200: {
    workflowRunIds?: Array<string>;
  };
};

export type EventUpdateCancelResponse =
  EventUpdateCancelResponses[keyof EventUpdateCancelResponses];

export type RateLimitListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The search query to filter for
     */
    search?: string;
    /**
     * What to order by
     */
    orderByField?: RateLimitOrderByField;
    /**
     * The order direction
     */
    orderByDirection?: RateLimitOrderByDirection;
  };
  url: "/api/v1/tenants/{tenant}/rate-limits";
};

export type RateLimitListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type RateLimitListError = RateLimitListErrors[keyof RateLimitListErrors];

export type RateLimitListResponses = {
  /**
   * Successfully listed the rate limits
   */
  200: RateLimitList;
};

export type RateLimitListResponse =
  RateLimitListResponses[keyof RateLimitListResponses];

export type TenantMemberListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/members";
};

export type TenantMemberListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantMemberListError =
  TenantMemberListErrors[keyof TenantMemberListErrors];

export type TenantMemberListResponses = {
  /**
   * Successfully retrieved the tenant members
   */
  200: TenantMemberList;
};

export type TenantMemberListResponse =
  TenantMemberListResponses[keyof TenantMemberListResponses];

export type TenantMemberDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant member id
     */
    member: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/members/{member}";
};

export type TenantMemberDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantMemberDeleteError =
  TenantMemberDeleteErrors[keyof TenantMemberDeleteErrors];

export type TenantMemberDeleteResponses = {
  /**
   * Successfully deleted the tenant members
   */
  204: TenantMember;
};

export type TenantMemberDeleteResponse =
  TenantMemberDeleteResponses[keyof TenantMemberDeleteResponses];

export type EventGetData = {
  body?: never;
  path: {
    /**
     * The event id
     */
    event: string;
  };
  query?: never;
  url: "/api/v1/events/{event}";
};

export type EventGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventGetError = EventGetErrors[keyof EventGetErrors];

export type EventGetResponses = {
  /**
   * Successfully retrieved the event data
   */
  200: Event;
};

export type EventGetResponse = EventGetResponses[keyof EventGetResponses];

export type EventDataGetData = {
  body?: never;
  path: {
    /**
     * The event id
     */
    event: string;
  };
  query?: never;
  url: "/api/v1/events/{event}/data";
};

export type EventDataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventDataGetError = EventDataGetErrors[keyof EventDataGetErrors];

export type EventDataGetResponses = {
  /**
   * Successfully retrieved the event data
   */
  200: EventData;
};

export type EventDataGetResponse =
  EventDataGetResponses[keyof EventDataGetResponses];

export type EventKeyListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/events/keys";
};

export type EventKeyListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type EventKeyListError = EventKeyListErrors[keyof EventKeyListErrors];

export type EventKeyListResponses = {
  /**
   * Successfully listed the event keys
   */
  200: EventKeyList;
};

export type EventKeyListResponse =
  EventKeyListResponses[keyof EventKeyListResponses];

export type WorkflowListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows";
};

export type WorkflowListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowListError = WorkflowListErrors[keyof WorkflowListErrors];

export type WorkflowListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: WorkflowList;
};

export type WorkflowListResponse =
  WorkflowListResponses[keyof WorkflowListResponses];

export type WorkflowScheduledListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The order by field
     */
    orderByField?: ScheduledWorkflowsOrderByField;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * A list of scheduled run statuses to filter by
     */
    statuses?: Array<ScheduledRunStatus>;
  };
  url: "/api/v1/tenants/{tenant}/workflows/scheduled";
};

export type WorkflowScheduledListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowScheduledListError =
  WorkflowScheduledListErrors[keyof WorkflowScheduledListErrors];

export type WorkflowScheduledListResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: ScheduledWorkflowsList;
};

export type WorkflowScheduledListResponse =
  WorkflowScheduledListResponses[keyof WorkflowScheduledListResponses];

export type WorkflowScheduledDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The scheduled workflow id
     */
    scheduledId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/scheduled/{scheduledId}";
};

export type WorkflowScheduledDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type WorkflowScheduledDeleteError =
  WorkflowScheduledDeleteErrors[keyof WorkflowScheduledDeleteErrors];

export type WorkflowScheduledDeleteResponses = {
  /**
   * Successfully deleted the scheduled workflow run
   */
  204: void;
};

export type WorkflowScheduledDeleteResponse =
  WorkflowScheduledDeleteResponses[keyof WorkflowScheduledDeleteResponses];

export type WorkflowScheduledGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The scheduled workflow id
     */
    scheduledId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/scheduled/{scheduledId}";
};

export type WorkflowScheduledGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Forbidden
   */
  404: ApiErrors;
};

export type WorkflowScheduledGetError =
  WorkflowScheduledGetErrors[keyof WorkflowScheduledGetErrors];

export type WorkflowScheduledGetResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: ScheduledWorkflows;
};

export type WorkflowScheduledGetResponse =
  WorkflowScheduledGetResponses[keyof WorkflowScheduledGetResponses];

export type CronWorkflowListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The order by field
     */
    orderByField?: CronWorkflowsOrderByField;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
  };
  url: "/api/v1/tenants/{tenant}/workflows/crons";
};

export type CronWorkflowListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type CronWorkflowListError =
  CronWorkflowListErrors[keyof CronWorkflowListErrors];

export type CronWorkflowListResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: CronWorkflowsList;
};

export type CronWorkflowListResponse =
  CronWorkflowListResponses[keyof CronWorkflowListResponses];

export type WorkflowRunCancelData = {
  /**
   * The input to cancel the workflow runs
   */
  body: WorkflowRunsCancelRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/cancel";
};

export type WorkflowRunCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunCancelError =
  WorkflowRunCancelErrors[keyof WorkflowRunCancelErrors];

export type WorkflowRunCancelResponses = {
  /**
   * Successfully cancelled the workflow runs
   */
  200: {
    workflowRunIds?: Array<string>;
  };
};

export type WorkflowRunCancelResponse =
  WorkflowRunCancelResponses[keyof WorkflowRunCancelResponses];

export type WorkflowDeleteData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/workflows/{workflow}";
};

export type WorkflowDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowDeleteError =
  WorkflowDeleteErrors[keyof WorkflowDeleteErrors];

export type WorkflowDeleteResponses = {
  /**
   * Successfully deleted the workflow
   */
  204: void;
};

export type WorkflowDeleteResponse =
  WorkflowDeleteResponses[keyof WorkflowDeleteResponses];

export type WorkflowGetData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/workflows/{workflow}";
};

export type WorkflowGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowGetError = WorkflowGetErrors[keyof WorkflowGetErrors];

export type WorkflowGetResponses = {
  /**
   * Successfully retrieved the workflow
   */
  200: Workflow;
};

export type WorkflowGetResponse =
  WorkflowGetResponses[keyof WorkflowGetResponses];

export type WorkflowUpdateData = {
  /**
   * The input to update the workflow
   */
  body: WorkflowUpdateRequest;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/workflows/{workflow}";
};

export type WorkflowUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowUpdateError =
  WorkflowUpdateErrors[keyof WorkflowUpdateErrors];

export type WorkflowUpdateResponses = {
  /**
   * Successfully updated the workflow
   */
  200: Workflow;
};

export type WorkflowUpdateResponse =
  WorkflowUpdateResponses[keyof WorkflowUpdateResponses];

export type WorkflowVersionGetData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * The workflow version. If not supplied, the latest version is fetched.
     */
    version?: string;
  };
  url: "/api/v1/workflows/{workflow}/versions";
};

export type WorkflowVersionGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowVersionGetError =
  WorkflowVersionGetErrors[keyof WorkflowVersionGetErrors];

export type WorkflowVersionGetResponses = {
  /**
   * Successfully retrieved the workflow version
   */
  200: WorkflowVersion;
};

export type WorkflowVersionGetResponse =
  WorkflowVersionGetResponses[keyof WorkflowVersionGetResponses];

export type WorkflowRunCreateData = {
  /**
   * The input to the workflow run
   */
  body: TriggerWorkflowRunRequest;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * The workflow version. If not supplied, the latest version is fetched.
     */
    version?: string;
  };
  url: "/api/v1/workflows/{workflow}/trigger";
};

export type WorkflowRunCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type WorkflowRunCreateError =
  WorkflowRunCreateErrors[keyof WorkflowRunCreateErrors];

export type WorkflowRunCreateResponses = {
  /**
   * Successfully created the workflow run
   */
  200: WorkflowRun;
};

export type WorkflowRunCreateResponse =
  WorkflowRunCreateResponses[keyof WorkflowRunCreateResponses];

export type WorkflowGetMetricsData = {
  body?: never;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * A status of workflow run statuses to filter by
     */
    status?: WorkflowRunStatus;
    /**
     * A group key to filter metrics by
     */
    groupKey?: string;
  };
  url: "/api/v1/workflows/{workflow}/metrics";
};

export type WorkflowGetMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowGetMetricsError =
  WorkflowGetMetricsErrors[keyof WorkflowGetMetricsErrors];

export type WorkflowGetMetricsResponses = {
  /**
   * Successfully retrieved the workflow version metrics
   */
  200: WorkflowMetrics;
};

export type WorkflowGetMetricsResponse =
  WorkflowGetMetricsResponses[keyof WorkflowGetMetricsResponses];

export type LogLineListData = {
  body?: never;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * A list of levels to filter by
     */
    levels?: LogLineLevelField;
    /**
     * The search query to filter for
     */
    search?: LogLineSearch;
    /**
     * What to order by
     */
    orderByField?: LogLineOrderByField;
    /**
     * The order direction
     */
    orderByDirection?: LogLineOrderByDirection;
  };
  url: "/api/v1/step-runs/{step-run}/logs";
};

export type LogLineListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type LogLineListError = LogLineListErrors[keyof LogLineListErrors];

export type LogLineListResponses = {
  /**
   * Successfully listed the events
   */
  200: LogLineList;
};

export type LogLineListResponse =
  LogLineListResponses[keyof LogLineListResponses];

export type StepRunListEventsData = {
  body?: never;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
  };
  url: "/api/v1/step-runs/{step-run}/events";
};

export type StepRunListEventsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunListEventsError =
  StepRunListEventsErrors[keyof StepRunListEventsErrors];

export type StepRunListEventsResponses = {
  /**
   * Successfully retrieved the events
   */
  200: StepRunEventList;
};

export type StepRunListEventsResponse =
  StepRunListEventsResponses[keyof StepRunListEventsResponses];

export type WorkflowRunListStepRunEventsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: {
    /**
     * Last ID of the last event
     */
    lastId?: number;
  };
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/step-run-events";
};

export type WorkflowRunListStepRunEventsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type WorkflowRunListStepRunEventsError =
  WorkflowRunListStepRunEventsErrors[keyof WorkflowRunListStepRunEventsErrors];

export type WorkflowRunListStepRunEventsResponses = {
  /**
   * Successfully retrieved the events
   */
  200: StepRunEventList;
};

export type WorkflowRunListStepRunEventsResponse =
  WorkflowRunListStepRunEventsResponses[keyof WorkflowRunListStepRunEventsResponses];

export type StepRunListArchivesData = {
  body?: never;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
  };
  url: "/api/v1/step-runs/{step-run}/archives";
};

export type StepRunListArchivesErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunListArchivesError =
  StepRunListArchivesErrors[keyof StepRunListArchivesErrors];

export type StepRunListArchivesResponses = {
  /**
   * Successfully retrieved the events
   */
  200: StepRunArchiveList;
};

export type StepRunListArchivesResponse =
  StepRunListArchivesResponses[keyof StepRunListArchivesResponses];

export type WorkflowGetWorkersCountData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/{workflow}/worker-count";
};

export type WorkflowGetWorkersCountErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowGetWorkersCountError =
  WorkflowGetWorkersCountErrors[keyof WorkflowGetWorkersCountErrors];

export type WorkflowGetWorkersCountResponses = {
  /**
   * Successfully retrieved the workflow worker count
   */
  200: WorkflowWorkersCount;
};

export type WorkflowGetWorkersCountResponse =
  WorkflowGetWorkersCountResponses[keyof WorkflowGetWorkersCountResponses];

export type WorkflowRunListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The event id to get runs for.
     */
    eventId?: string;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * A list of workflow run statuses to filter by
     */
    statuses?: WorkflowRunStatusList;
    /**
     * A list of workflow kinds to filter by
     */
    kinds?: WorkflowKindList;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The time after the workflow run was created
     */
    createdAfter?: string;
    /**
     * The time before the workflow run was created
     */
    createdBefore?: string;
    /**
     * The time after the workflow run was finished
     */
    finishedAfter?: string;
    /**
     * The time before the workflow run was finished
     */
    finishedBefore?: string;
    /**
     * The order by field
     */
    orderByField?: WorkflowRunOrderByField;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
  };
  url: "/api/v1/tenants/{tenant}/workflows/runs";
};

export type WorkflowRunListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunListError =
  WorkflowRunListErrors[keyof WorkflowRunListErrors];

export type WorkflowRunListResponses = {
  /**
   * Successfully retrieved the workflow runs
   */
  200: WorkflowRunList;
};

export type WorkflowRunListResponse =
  WorkflowRunListResponses[keyof WorkflowRunListResponses];

export type WorkflowRunUpdateReplayData = {
  /**
   * The workflow run ids to replay
   */
  body: ReplayWorkflowRunsRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/replay";
};

export type WorkflowRunUpdateReplayErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Resource limit exceeded
   */
  429: ApiErrors;
};

export type WorkflowRunUpdateReplayError =
  WorkflowRunUpdateReplayErrors[keyof WorkflowRunUpdateReplayErrors];

export type WorkflowRunUpdateReplayResponses = {
  /**
   * Successfully replayed the workflow runs
   */
  200: ReplayWorkflowRunsResponse;
};

export type WorkflowRunUpdateReplayResponse =
  WorkflowRunUpdateReplayResponses[keyof WorkflowRunUpdateReplayResponses];

export type WorkflowRunGetMetricsData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The event id to get runs for.
     */
    eventId?: string;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The time after the workflow run was created
     */
    createdAfter?: string;
    /**
     * The time before the workflow run was created
     */
    createdBefore?: string;
  };
  url: "/api/v1/tenants/{tenant}/workflows/runs/metrics";
};

export type WorkflowRunGetMetricsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunGetMetricsError =
  WorkflowRunGetMetricsErrors[keyof WorkflowRunGetMetricsErrors];

export type WorkflowRunGetMetricsResponses = {
  /**
   * Successfully retrieved the workflow runs metrics
   */
  200: WorkflowRunsMetrics;
};

export type WorkflowRunGetMetricsResponse =
  WorkflowRunGetMetricsResponses[keyof WorkflowRunGetMetricsResponses];

export type WorkflowRunGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}";
};

export type WorkflowRunGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunGetError =
  WorkflowRunGetErrors[keyof WorkflowRunGetErrors];

export type WorkflowRunGetResponses = {
  /**
   * Successfully retrieved the workflow run
   */
  200: WorkflowRun;
};

export type WorkflowRunGetResponse =
  WorkflowRunGetResponses[keyof WorkflowRunGetResponses];

export type WorkflowRunGetShapeData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/shape";
};

export type WorkflowRunGetShapeErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkflowRunGetShapeError =
  WorkflowRunGetShapeErrors[keyof WorkflowRunGetShapeErrors];

export type WorkflowRunGetShapeResponses = {
  /**
   * Successfully retrieved the workflow run
   */
  200: WorkflowRunShape;
};

export type WorkflowRunGetShapeResponse =
  WorkflowRunGetShapeResponses[keyof WorkflowRunGetShapeResponses];

export type StepRunGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}";
};

export type StepRunGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunGetError = StepRunGetErrors[keyof StepRunGetErrors];

export type StepRunGetResponses = {
  /**
   * Successfully retrieved the step run
   */
  200: StepRun;
};

export type StepRunGetResponse = StepRunGetResponses[keyof StepRunGetResponses];

export type StepRunUpdateRerunData = {
  /**
   * The input to the rerun
   */
  body: RerunStepRunRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/rerun";
};

export type StepRunUpdateRerunErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type StepRunUpdateRerunError =
  StepRunUpdateRerunErrors[keyof StepRunUpdateRerunErrors];

export type StepRunUpdateRerunResponses = {
  /**
   * Successfully replayed the events
   */
  200: StepRun;
};

export type StepRunUpdateRerunResponse =
  StepRunUpdateRerunResponses[keyof StepRunUpdateRerunResponses];

export type StepRunUpdateCancelData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/cancel";
};

export type StepRunUpdateCancelErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type StepRunUpdateCancelError =
  StepRunUpdateCancelErrors[keyof StepRunUpdateCancelErrors];

export type StepRunUpdateCancelResponses = {
  /**
   * Successfully dispatched the cancellation
   */
  200: StepRun;
};

export type StepRunUpdateCancelResponse =
  StepRunUpdateCancelResponses[keyof StepRunUpdateCancelResponses];

export type StepRunGetSchemaData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/step-runs/{step-run}/schema";
};

export type StepRunGetSchemaErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type StepRunGetSchemaError =
  StepRunGetSchemaErrors[keyof StepRunGetSchemaErrors];

export type StepRunGetSchemaResponses = {
  /**
   * Successfully retrieved the step run schema
   */
  200: {
    [key: string]: unknown;
  };
};

export type StepRunGetSchemaResponse =
  StepRunGetSchemaResponses[keyof StepRunGetSchemaResponses];

export type WorkerListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/worker";
};

export type WorkerListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkerListError = WorkerListErrors[keyof WorkerListErrors];

export type WorkerListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: WorkerList;
};

export type WorkerListResponse = WorkerListResponses[keyof WorkerListResponses];

export type WorkerGetData = {
  body?: never;
  path: {
    /**
     * The worker id
     */
    worker: string;
  };
  query?: never;
  url: "/api/v1/workers/{worker}";
};

export type WorkerGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkerGetError = WorkerGetErrors[keyof WorkerGetErrors];

export type WorkerGetResponses = {
  /**
   * Successfully retrieved the worker
   */
  200: Worker;
};

export type WorkerGetResponse = WorkerGetResponses[keyof WorkerGetResponses];

export type WorkerUpdateData = {
  /**
   * The worker update
   */
  body: UpdateWorkerRequest;
  path: {
    /**
     * The worker id
     */
    worker: string;
  };
  query?: never;
  url: "/api/v1/workers/{worker}";
};

export type WorkerUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type WorkerUpdateError = WorkerUpdateErrors[keyof WorkerUpdateErrors];

export type WorkerUpdateResponses = {
  /**
   * Successfully updated the worker
   */
  200: Worker;
};

export type WorkerUpdateResponse =
  WorkerUpdateResponses[keyof WorkerUpdateResponses];

export type WebhookListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/webhook-workers";
};

export type WebhookListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookListError = WebhookListErrors[keyof WebhookListErrors];

export type WebhookListResponses = {
  /**
   * The list of webhook workers
   */
  200: WebhookWorkerListResponse;
};

export type WebhookListResponse =
  WebhookListResponses[keyof WebhookListResponses];

export type WebhookCreateData = {
  body?: WebhookWorkerCreateRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/webhook-workers";
};

export type WebhookCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookCreateError = WebhookCreateErrors[keyof WebhookCreateErrors];

export type WebhookCreateResponses = {
  /**
   * Successfully created the webhook
   */
  200: WebhookWorkerCreated;
};

export type WebhookCreateResponse =
  WebhookCreateResponses[keyof WebhookCreateResponses];

export type WebhookDeleteData = {
  body?: never;
  path: {
    /**
     * The webhook id
     */
    webhook: string;
  };
  query?: never;
  url: "/api/v1/webhook-workers/{webhook}";
};

export type WebhookDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookDeleteError = WebhookDeleteErrors[keyof WebhookDeleteErrors];

export type WebhookDeleteResponses = {
  /**
   * Successfully deleted the webhook
   */
  200: unknown;
};

export type WebhookRequestsListData = {
  body?: never;
  path: {
    /**
     * The webhook id
     */
    webhook: string;
  };
  query?: never;
  url: "/api/v1/webhook-workers/{webhook}/requests";
};

export type WebhookRequestsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type WebhookRequestsListError =
  WebhookRequestsListErrors[keyof WebhookRequestsListErrors];

export type WebhookRequestsListResponses = {
  /**
   * The list of webhook requests
   */
  200: WebhookWorkerRequestListResponse;
};

export type WebhookRequestsListResponse =
  WebhookRequestsListResponses[keyof WebhookRequestsListResponses];

export type WorkflowRunGetInputData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflow-runs/{workflow-run}/input";
};

export type WorkflowRunGetInputErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Workflow run not found
   */
  404: ApiErrors;
};

export type WorkflowRunGetInputError =
  WorkflowRunGetInputErrors[keyof WorkflowRunGetInputErrors];

export type WorkflowRunGetInputResponses = {
  /**
   * Successfully retrieved the workflow run input
   */
  200: {
    [key: string]: unknown;
  };
};

export type WorkflowRunGetInputResponse =
  WorkflowRunGetInputResponses[keyof WorkflowRunGetInputResponses];

export type WorkflowGetByNameData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/workflows/byName/{name}";
};

export type WorkflowGetByNameErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type WorkflowGetByNameError =
  WorkflowGetByNameErrors[keyof WorkflowGetByNameErrors];

export type WorkflowGetByNameResponses = {
  /**
   * Successfully retrieved the workflow
   */
  200: Workflow;
};

export type WorkflowGetByNameResponse =
  WorkflowGetByNameResponses[keyof WorkflowGetByNameResponses];

export type ChatListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/chats";
};

export type ChatListResponses = {
  200: ChatSessionList;
};

export type ChatListResponse = ChatListResponses[keyof ChatListResponses];

export type ChatCreateChatSessionData = {
  body: ChatSessionUpdate;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/chats";
};

export type ChatCreateChatSessionErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type ChatCreateChatSessionError =
  ChatCreateChatSessionErrors[keyof ChatCreateChatSessionErrors];

export type ChatCreateChatSessionResponses = {
  200: ChatSession;
};

export type ChatCreateChatSessionResponse =
  ChatCreateChatSessionResponses[keyof ChatCreateChatSessionResponses];

export type ChatGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The chat id
     */
    chat: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/chats/{chat}";
};

export type ChatGetResponses = {
  200: ChatSession;
};

export type ChatGetResponse = ChatGetResponses[keyof ChatGetResponses];

export type ChatUpdateChatSessionData = {
  body: ChatSessionUpdate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The session id
     */
    chat: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/chats/{chat}";
};

export type ChatUpdateChatSessionErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type ChatUpdateChatSessionError =
  ChatUpdateChatSessionErrors[keyof ChatUpdateChatSessionErrors];

export type ChatUpdateChatSessionResponses = {
  200: ChatSession;
};

export type ChatUpdateChatSessionResponse =
  ChatUpdateChatSessionResponses[keyof ChatUpdateChatSessionResponses];

export type ChatMessagesData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * 聊天 ID
     */
    chatId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/chats/{chatId}/messages";
};

export type ChatMessagesResponses = {
  /**
   * 返回聊天消息
   */
  200: ChatMessages;
};

export type ChatMessagesResponse =
  ChatMessagesResponses[keyof ChatMessagesResponses];

export type WorkerConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/worker/config";
};

export type WorkerConfigResponses = {
  /**
   * 返回模型列表
   */
  200: WorkerConfig;
};

export type WorkerConfigResponse =
  WorkerConfigResponses[keyof WorkerConfigResponses];

export type MtmaiBloggenconfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/mtmai/bloggenconfig";
};

export type MtmaiBloggenconfigResponses = {
  /**
   * 博客生成配置
   */
  200: BlogGenConfig;
};

export type MtmaiBloggenconfigResponse =
  MtmaiBloggenconfigResponses[keyof MtmaiBloggenconfigResponses];

export type MtmaiWorkerConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/mtmai/worker_config";
};

export type MtmaiWorkerConfigResponses = {
  /**
   * worker 启动时所需的关键配置
   */
  200: {
    /**
     * token
     */
    token: string;
    /**
     * grpcHostPort
     */
    grpcHostPort: string;
    /**
     * searxng url
     */
    searxng?: string;
  };
};

export type MtmaiWorkerConfigResponse =
  MtmaiWorkerConfigResponses[keyof MtmaiWorkerConfigResponses];

export type BlogListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/blogs";
};

export type BlogListResponses = {
  /**
   * Successfully retrieved the tenant blog list
   */
  200: BlogList;
};

export type BlogListResponse = BlogListResponses[keyof BlogListResponses];

export type BlogCreateData = {
  /**
   * 创建博客
   */
  body: CreateBlogRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/blogs";
};

export type BlogCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type BlogCreateError = BlogCreateErrors[keyof BlogCreateErrors];

export type BlogCreateResponses = {
  /**
   * Successfully created the blog
   */
  200: Blog;
};

export type BlogCreateResponse = BlogCreateResponses[keyof BlogCreateResponses];

export type BlogGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The blog id
     */
    blog: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/blogs/{blog}";
};

export type BlogGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type BlogGetError = BlogGetErrors[keyof BlogGetErrors];

export type BlogGetResponses = {
  200: Blog;
};

export type BlogGetResponse = BlogGetResponses[keyof BlogGetResponses];

export type BlogUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateBlogRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The blog id
     */
    blog: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/blogs/{blog}";
};

export type BlogUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type BlogUpdateError = BlogUpdateErrors[keyof BlogUpdateErrors];

export type BlogUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Blog;
};

export type BlogUpdateResponse = BlogUpdateResponses[keyof BlogUpdateResponses];

export type SiteListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites";
};

export type SiteListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteListError = SiteListErrors[keyof SiteListErrors];

export type SiteListResponses = {
  200: SiteList;
};

export type SiteListResponse = SiteListResponses[keyof SiteListResponses];

export type SiteCreateData = {
  /**
   * 创建agentnode
   */
  body: CreateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites";
};

export type SiteCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteCreateError = SiteCreateErrors[keyof SiteCreateErrors];

export type SiteCreateResponses = {
  200: Site;
};

export type SiteCreateResponse = SiteCreateResponses[keyof SiteCreateResponses];

export type SiteGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}";
};

export type SiteGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteGetError = SiteGetErrors[keyof SiteGetErrors];

export type SiteGetResponses = {
  200: Site;
};

export type SiteGetResponse = SiteGetResponses[keyof SiteGetResponses];

export type SiteUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}";
};

export type SiteUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteUpdateError = SiteUpdateErrors[keyof SiteUpdateErrors];

export type SiteUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Site;
};

export type SiteUpdateResponse = SiteUpdateResponses[keyof SiteUpdateResponses];

export type SiteGetByHostData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * host name
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/byHost/{host}";
};

export type SiteGetByHostErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteGetByHostError = SiteGetByHostErrors[keyof SiteGetByHostErrors];

export type SiteGetByHostResponses = {
  200: Site;
};

export type SiteGetByHostResponse =
  SiteGetByHostResponses[keyof SiteGetByHostResponses];

export type SiteHostListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The host name
     */
    host?: string;
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/tenants/{tenant}/site-hosts";
};

export type SiteHostListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteHostListError = SiteHostListErrors[keyof SiteHostListErrors];

export type SiteHostListResponses = {
  200: SiteHostList;
};

export type SiteHostListResponse =
  SiteHostListResponses[keyof SiteHostListResponses];

export type SiteHostCreateData = {
  /**
   * 创建agentnode
   */
  body: CreateSiteHostRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/site-hosts";
};

export type SiteHostCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteHostCreateError =
  SiteHostCreateErrors[keyof SiteHostCreateErrors];

export type SiteHostCreateResponses = {
  200: SiteHost;
};

export type SiteHostCreateResponse =
  SiteHostCreateResponses[keyof SiteHostCreateResponses];

export type SiteHostGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site-host id
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/site-hosts/{host}";
};

export type SiteHostGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteHostGetError = SiteHostGetErrors[keyof SiteHostGetErrors];

export type SiteHostGetResponses = {
  200: SiteHost;
};

export type SiteHostGetResponse =
  SiteHostGetResponses[keyof SiteHostGetResponses];

export type SiteHostUpdateData = {
  /**
   * The tenant properties to update
   */
  body: SiteHost;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site-host id
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/site-hosts/{host}";
};

export type SiteHostUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteHostUpdateError =
  SiteHostUpdateErrors[keyof SiteHostUpdateErrors];

export type SiteHostUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: SiteHost;
};

export type SiteHostUpdateResponse =
  SiteHostUpdateResponses[keyof SiteHostUpdateResponses];

export type PostListPublicData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/posts/public";
};

export type PostListPublicErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PostListPublicError =
  PostListPublicErrors[keyof PostListPublicErrors];

export type PostListPublicResponses = {
  200: PostList;
};

export type PostListPublicResponse =
  PostListPublicResponses[keyof PostListPublicResponses];

export type PostGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The post id
     */
    post: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/posts/{post}";
};

export type PostGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PostGetError = PostGetErrors[keyof PostGetErrors];

export type PostGetResponses = {
  200: Post;
};

export type PostGetResponse = PostGetResponses[keyof PostGetResponses];

export type PostListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/tenants/{tenant}/posts";
};

export type PostListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PostListError = PostListErrors[keyof PostListErrors];

export type PostListResponses = {
  200: PostList;
};

export type PostListResponse = PostListResponses[keyof PostListResponses];

export type PostCreateData = {
  body: CreatePostRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/posts";
};

export type PostCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type PostCreateError = PostCreateErrors[keyof PostCreateErrors];

export type PostCreateResponses = {
  200: Post;
};

export type PostCreateResponse = PostCreateResponses[keyof PostCreateResponses];

export type ArtifactListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts";
};

export type ArtifactListResponses = {
  /**
   * Successfully retrieved the tenant artifacts list
   */
  200: ArtifactList;
};

export type ArtifactListResponse =
  ArtifactListResponses[keyof ArtifactListResponses];

export type ArtifactCreateData = {
  /**
   * 创建artifact
   */
  body: CreateArtifacttRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts";
};

export type ArtifactCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type ArtifactCreateError =
  ArtifactCreateErrors[keyof ArtifactCreateErrors];

export type ArtifactCreateResponses = {
  /**
   * Successfully created the blog post
   */
  200: Artifact;
};

export type ArtifactCreateResponse =
  ArtifactCreateResponses[keyof ArtifactCreateResponses];

export type ArtifactGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant id
     */
    artifact: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts/{artifact}";
};

export type ArtifactGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type ArtifactGetError = ArtifactGetErrors[keyof ArtifactGetErrors];

export type ArtifactGetResponses = {
  /**
   * Successfully retrieved the step run
   */
  200: Artifact;
};

export type ArtifactGetResponse =
  ArtifactGetResponses[keyof ArtifactGetResponses];

export type TeamListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/teams";
};

export type TeamListResponses = {
  200: TeamList;
};

export type TeamListResponse = TeamListResponses[keyof TeamListResponses];

export type TeamCreateData = {
  body: Team;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/teams";
};

export type TeamCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TeamCreateError = TeamCreateErrors[keyof TeamCreateErrors];

export type TeamCreateResponses = {
  200: Team;
};

export type TeamCreateResponse = TeamCreateResponses[keyof TeamCreateResponses];

export type TeamGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The team id
     */
    team: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/teams/{team}";
};

export type TeamGetResponses = {
  200: Team;
};

export type TeamGetResponse = TeamGetResponses[keyof TeamGetResponses];

export type GalleryListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/galleries";
};

export type GalleryListResponses = {
  200: GalleryList;
};

export type GalleryListResponse =
  GalleryListResponses[keyof GalleryListResponses];

export type GalleryCreateData = {
  body: Gallery;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/galleries";
};

export type GalleryCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type GalleryCreateError = GalleryCreateErrors[keyof GalleryCreateErrors];

export type GalleryCreateResponses = {
  200: Gallery;
};

export type GalleryCreateResponse =
  GalleryCreateResponses[keyof GalleryCreateResponses];

export type GalleryGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The gallery id
     */
    gallery: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/gallery/{gallery}";
};

export type GalleryGetResponses = {
  200: Gallery;
};

export type GalleryGetResponse = GalleryGetResponses[keyof GalleryGetResponses];

export type AgentNodeListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/nodes";
};

export type AgentNodeListResponses = {
  /**
   * Successfully retrieved the list of nodes
   */
  200: AgentNodeList;
};

export type AgentNodeListResponse =
  AgentNodeListResponses[keyof AgentNodeListResponses];

export type AgentCreateData = {
  /**
   * 创建agentnode
   */
  body: AgentNodeCreateRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/nodes";
};

export type AgentCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AgentCreateError = AgentCreateErrors[keyof AgentCreateErrors];

export type AgentCreateResponses = {
  /**
   * Successfully created the blog post
   */
  200: AgentNode;
};

export type AgentCreateResponse =
  AgentCreateResponses[keyof AgentCreateResponses];

export type AgentNodeData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The node id
     */
    node: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/nodes/{node}";
};

export type AgentNodeResponses = {
  /**
   * agent node full state
   */
  200: AgentNode;
};

export type AgentNodeResponse = AgentNodeResponses[keyof AgentNodeResponses];

export type AgentNodeUpdateData = {
  /**
   * 创建agentnode
   */
  body: AgentNodeUpdateRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The node id
     */
    node: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/nodes/{node}";
};

export type AgentNodeUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AgentNodeUpdateError =
  AgentNodeUpdateErrors[keyof AgentNodeUpdateErrors];

export type AgentNodeUpdateResponses = {
  /**
   * Successfully created the blog post
   */
  200: AgentNode;
};

export type AgentNodeUpdateResponse =
  AgentNodeUpdateResponses[keyof AgentNodeUpdateResponses];

export type AgentNodeRunData = {
  /**
   * 创建agentnode
   */
  body: AgentNodeRunInput;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/nodes/run";
};

export type AgentNodeRunErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AgentNodeRunError = AgentNodeRunErrors[keyof AgentNodeRunErrors];

export type AgentNodeRunResponses = {
  200: AgentNodeRun;
};

export type AgentNodeRunResponse =
  AgentNodeRunResponses[keyof AgentNodeRunResponses];

export type AgentStreamData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The stream id
     */
    stream: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/stream/{stream}";
};

export type AgentStreamErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AgentStreamError = AgentStreamErrors[keyof AgentStreamErrors];

export type AgentStreamResponses = {
  200: string;
};

export type AgentStreamResponse =
  AgentStreamResponses[keyof AgentStreamResponses];

export type AgEventListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/agEvents";
};

export type AgEventListResponses = {
  200: AgEventList;
};

export type AgEventListResponse =
  AgEventListResponses[keyof AgEventListResponses];

export type AgEventCreateData = {
  body: AgEventCreate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/agEvents";
};

export type AgEventCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AgEventCreateError = AgEventCreateErrors[keyof AgEventCreateErrors];

export type AgEventCreateResponses = {
  200: AgEvent;
};

export type AgEventCreateResponse =
  AgEventCreateResponses[keyof AgEventCreateResponses];

export type AgEventGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The gallery id
     */
    agEvent: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/agEvents/{agEvent}";
};

export type AgEventGetResponses = {
  200: AgEvent;
};

export type AgEventGetResponse = AgEventGetResponses[keyof AgEventGetResponses];

export type RunListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/runs";
};

export type RunListResponses = {
  200: RunList;
};

export type RunListResponse = RunListResponses[keyof RunListResponses];

export type RunCreateData = {
  body: Run;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/runs";
};

export type RunCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type RunCreateError = RunCreateErrors[keyof RunCreateErrors];

export type RunCreateResponses = {
  200: Run;
};

export type RunCreateResponse = RunCreateResponses[keyof RunCreateResponses];

export type RunGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The run id
     */
    run: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/runs/{run}";
};

export type RunGetResponses = {
  200: Run;
};

export type RunGetResponse = RunGetResponses[keyof RunGetResponses];

export type PromptListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/prompts";
};

export type PromptListResponses = {
  /**
   * 提示词列表
   */
  200: PromptList;
};

export type PromptListResponse = PromptListResponses[keyof PromptListResponses];

export type PromptGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The prompt id
     */
    prompt: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/prompts/{prompt}";
};

export type PromptGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
  /**
   * A malformed or bad request
   */
  404: unknown;
};

export type PromptGetError = PromptGetErrors[keyof PromptGetErrors];

export type PromptGetResponses = {
  /**
   * 获取单个提示词
   */
  200: string;
};

export type PromptGetResponse = PromptGetResponses[keyof PromptGetResponses];

export type AdminReleaseConnData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/admin/releaseConn";
};

export type AdminReleaseConnErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type AdminReleaseConnError =
  AdminReleaseConnErrors[keyof AdminReleaseConnErrors];

export type AdminReleaseConnResponses = {
  200: CommonResult;
};

export type AdminReleaseConnResponse =
  AdminReleaseConnResponses[keyof AdminReleaseConnResponses];

export type FrontendGetConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/frontend/config";
};

export type FrontendGetConfigResponses = {
  /**
   * frontend core config
   */
  200: FrontendConfig;
};

export type FrontendGetConfigResponse =
  FrontendGetConfigResponses[keyof FrontendGetConfigResponses];

export type FrontendGetSiderbarData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/frontend/siderbar";
};

export type FrontendGetSiderbarResponses = {
  /**
   * frontend siderbar config
   */
  200: SiderbarConfig;
};

export type FrontendGetSiderbarResponse =
  FrontendGetSiderbarResponses[keyof FrontendGetSiderbarResponses];

export type HfAccountGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/hf/account";
};

export type HfAccountGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type HfAccountGetError = HfAccountGetErrors[keyof HfAccountGetErrors];

export type HfAccountGetResponses = {
  /**
   * Successfully created the blog post
   */
  200: HfAccount;
};

export type HfAccountGetResponse =
  HfAccountGetResponses[keyof HfAccountGetResponses];

export type EnvListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/env";
};

export type EnvListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type EnvListError = EnvListErrors[keyof EnvListErrors];

export type EnvListResponses = {
  200: EnvList;
};

export type EnvListResponse = EnvListResponses[keyof EnvListResponses];

export type EnvUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateBlogRequest;
  path?: never;
  query?: never;
  url: "/api/v1/env";
};

export type EnvUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type EnvUpdateError = EnvUpdateErrors[keyof EnvUpdateErrors];

export type EnvUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Blog;
};

export type EnvUpdateResponse = EnvUpdateResponses[keyof EnvUpdateResponses];

export type EnvGetData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: "/api/v1/env/{name}";
};

export type EnvGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type EnvGetError = EnvGetErrors[keyof EnvGetErrors];

export type EnvGetResponses = {
  /**
   * bash env text
   */
  200: Env;
};

export type EnvGetResponse = EnvGetResponses[keyof EnvGetResponses];

export type KvUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateBlogRequest;
  path?: never;
  query?: never;
  url: "/api/v1/kv";
};

export type KvUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type KvUpdateError = KvUpdateErrors[keyof KvUpdateErrors];

export type KvUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Blog;
};

export type KvUpdateResponse = KvUpdateResponses[keyof KvUpdateResponses];

export type KvGetData = {
  body?: never;
  path: {
    /**
     * kv key
     */
    key: string;
  };
  query?: never;
  url: "/api/v1/kv/{key}";
};

export type KvGetErrors = {
  /**
   * Not found
   */
  404: ApiErrors;
};

export type KvGetError = KvGetErrors[keyof KvGetErrors];

export type KvGetResponses = {
  200: string;
};

export type KvGetResponse = KvGetResponses[keyof KvGetResponses];

export type EndpointListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/endpoint";
};

export type EndpointListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type EndpointListError = EndpointListErrors[keyof EndpointListErrors];

export type EndpointListResponses = {
  200: EndpointList;
};

export type EndpointListResponse =
  EndpointListResponses[keyof EndpointListResponses];

export type EndpointUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateEndpointRequest;
  path?: never;
  query?: never;
  url: "/api/v1/endpoint";
};

export type EndpointUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type EndpointUpdateError =
  EndpointUpdateErrors[keyof EndpointUpdateErrors];

export type EndpointUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Endpoint;
};

export type EndpointUpdateResponse =
  EndpointUpdateResponses[keyof EndpointUpdateResponses];

export type PlatformListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/platforms";
};

export type PlatformListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PlatformListError = PlatformListErrors[keyof PlatformListErrors];

export type PlatformListResponses = {
  200: PlatformList;
};

export type PlatformListResponse =
  PlatformListResponses[keyof PlatformListResponses];

export type PlatformCreateData = {
  body: Platform;
  path?: never;
  query?: never;
  url: "/api/v1/platforms";
};

export type PlatformCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type PlatformCreateError =
  PlatformCreateErrors[keyof PlatformCreateErrors];

export type PlatformCreateResponses = {
  200: Platform;
};

export type PlatformCreateResponse =
  PlatformCreateResponses[keyof PlatformCreateResponses];

export type PlatformGetData = {
  body?: never;
  path: {
    /**
     * The platform id
     */
    platform: string;
  };
  query?: never;
  url: "/api/v1/platforms/{platform}";
};

export type PlatformGetResponses = {
  200: Platform;
};

export type PlatformGetResponse =
  PlatformGetResponses[keyof PlatformGetResponses];

export type PlatformUpdateData = {
  /**
   * The platform properties to update
   */
  body: Platform;
  path: {
    /**
     * The platform id
     */
    platform: string;
  };
  query?: never;
  url: "/api/v1/platforms/{platform}";
};

export type PlatformUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type PlatformUpdateError =
  PlatformUpdateErrors[keyof PlatformUpdateErrors];

export type PlatformUpdateResponses = {
  /**
   * Successfully created the platform
   */
  200: Platform;
};

export type PlatformUpdateResponse =
  PlatformUpdateResponses[keyof PlatformUpdateResponses];

export type PlatformAccountListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/platform_accounts";
};

export type PlatformAccountListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type PlatformAccountListError =
  PlatformAccountListErrors[keyof PlatformAccountListErrors];

export type PlatformAccountListResponses = {
  200: PlatformAccountList;
};

export type PlatformAccountListResponse =
  PlatformAccountListResponses[keyof PlatformAccountListResponses];

export type PlatformAccountCreateData = {
  body: PlatformAccount;
  path?: never;
  query?: never;
  url: "/api/v1/platform_accounts";
};

export type PlatformAccountCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type PlatformAccountCreateError =
  PlatformAccountCreateErrors[keyof PlatformAccountCreateErrors];

export type PlatformAccountCreateResponses = {
  200: PlatformAccount;
};

export type PlatformAccountCreateResponse =
  PlatformAccountCreateResponses[keyof PlatformAccountCreateResponses];

export type PlatformAccountGetData = {
  body?: never;
  path: {
    /**
     * The platform_account id
     */
    platform_account: string;
  };
  query?: never;
  url: "/api/v1/platform_accounts/{platform_account}";
};

export type PlatformAccountGetResponses = {
  200: PlatformAccount;
};

export type PlatformAccountGetResponse =
  PlatformAccountGetResponses[keyof PlatformAccountGetResponses];

export type PlatformAccountUpdateData = {
  /**
   * The platform_account properties to update
   */
  body: PlatformAccount;
  path: {
    /**
     * The platform_account id
     */
    platform_account: string;
  };
  query?: never;
  url: "/api/v1/platform_accounts/{platform_account}";
};

export type PlatformAccountUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type PlatformAccountUpdateError =
  PlatformAccountUpdateErrors[keyof PlatformAccountUpdateErrors];

export type PlatformAccountUpdateResponses = {
  /**
   * Successfully created the platform_account
   */
  200: PlatformAccount;
};

export type PlatformAccountUpdateResponse =
  PlatformAccountUpdateResponses[keyof PlatformAccountUpdateResponses];

export type BrowserListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/browsers";
};

export type BrowserListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type BrowserListError = BrowserListErrors[keyof BrowserListErrors];

export type BrowserListResponses = {
  200: BrowserList;
};

export type BrowserListResponse =
  BrowserListResponses[keyof BrowserListResponses];

export type BrowserCreateData = {
  body: Browser;
  path?: never;
  query?: never;
  url: "/api/v1/browsers";
};

export type BrowserCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type BrowserCreateError = BrowserCreateErrors[keyof BrowserCreateErrors];

export type BrowserCreateResponses = {
  200: Browser;
};

export type BrowserCreateResponse =
  BrowserCreateResponses[keyof BrowserCreateResponses];

export type BrowserGetData = {
  body?: never;
  path: {
    /**
     * The platform id
     */
    browser: string;
  };
  query?: never;
  url: "/api/v1/browsers/{browser}";
};

export type BrowserGetResponses = {
  200: Browser;
};

export type BrowserGetResponse = BrowserGetResponses[keyof BrowserGetResponses];

export type BrowserUpdateData = {
  /**
   * The browser properties to update
   */
  body: Browser;
  path: {
    /**
     * The platform id
     */
    browser: string;
  };
  query?: never;
  url: "/api/v1/browsers/{browser}";
};

export type BrowserUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type BrowserUpdateError = BrowserUpdateErrors[keyof BrowserUpdateErrors];

export type BrowserUpdateResponses = {
  /**
   * Successfully created the browser
   */
  200: Browser;
};

export type BrowserUpdateResponse =
  BrowserUpdateResponses[keyof BrowserUpdateResponses];

export type ProxyListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/proxies";
};

export type ProxyListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type ProxyListError = ProxyListErrors[keyof ProxyListErrors];

export type ProxyListResponses = {
  200: ProxyList;
};

export type ProxyListResponse = ProxyListResponses[keyof ProxyListResponses];

export type ProxyCreateData = {
  body: Proxy;
  path?: never;
  query?: never;
  url: "/api/v1/proxies";
};

export type ProxyCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type ProxyCreateError = ProxyCreateErrors[keyof ProxyCreateErrors];

export type ProxyCreateResponses = {
  200: Proxy;
};

export type ProxyCreateResponse =
  ProxyCreateResponses[keyof ProxyCreateResponses];

export type ProxyGetData = {
  body?: never;
  path: {
    /**
     * The platform id
     */
    proxy: string;
  };
  query?: never;
  url: "/api/v1/proxies/{proxy}";
};

export type ProxyGetResponses = {
  200: Proxy;
};

export type ProxyGetResponse = ProxyGetResponses[keyof ProxyGetResponses];

export type ProxyUpdateData = {
  /**
   * The proxy properties to update
   */
  body: Proxy;
  path: {
    /**
     * The platform id
     */
    proxy: string;
  };
  query?: never;
  url: "/api/v1/proxies/{proxy}";
};

export type ProxyUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ProxyUpdateError = ProxyUpdateErrors[keyof ProxyUpdateErrors];

export type ProxyUpdateResponses = {
  /**
   * Successfully created the proxy
   */
  200: Proxy;
};

export type ProxyUpdateResponse =
  ProxyUpdateResponses[keyof ProxyUpdateResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
