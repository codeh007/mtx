// This file is auto-generated by @hey-api/openapi-ts

export type AcceptInviteRequest = {
  invite: string;
};

/**
 * agent 执行动作
 */
export type AgentAction = {
  /**
   * 工具名称
   */
  Tool: string;
  /**
   * 工具输入
   */
  ToolInput: string;
  /**
   * 工具日志
   */
  Log: string;
  /**
   * 工具ID
   */
  ToolID: string;
};

/**
 * agent 完成
 */
export type AgentFinish = {
  /**
   * 返回值
   */
  ReturnValues: {
    [key: string]: unknown;
  };
  /**
   * 日志
   */
  Log: string;
};

export type AgentNode = {
  metadata: APIResourceMeta;
  /**
   * agent 节点名称, 或者作为工具名称
   */
  title: string;
  /**
   * agent 节点描述, 或者作为工具描述
   */
  description: string;
  /**
   * 节点类型，决定了由哪个agent来进行调度
   */
  type?: string;
  /**
   * agent 的配置
   */
  Config?: {
    [key: string]: unknown;
  };
  state?: AgentState;
  /**
   * agent 节点执行步骤, 一般表示之前执行的步骤
   */
  steps: Array<AgentStep>;
  finish?: AgentFinish;
  /**
   * 上级节点
   */
  parentId?: string;
  agentNodeOutput?: AgentNodeOutput;
  tools?: string;
  /**
   * 记忆ID，表示这个agent的记忆
   */
  memoryId?: string;
  /**
   * 输入
   */
  input?: string;
  /**
   * 输出
   */
  output?: string;
};

/**
 * 创建agent节点请求
 */
export type AgentNodeCreateRequest = {
  /**
   * agent 节点名称, 或者作为工具名称
   */
  title?: string;
  /**
   * agent 节点提示词
   */
  prompt: string;
  /**
   * agent 节点描述, 或者作为工具描述
   */
  description?: string;
};

/**
 * agent 节点输入
 */
export type AgentNodeInput = {
  metadata: APIResourceMeta;
  /**
   * 输入
   */
  inputs: {
    [key: string]: unknown;
  };
  /**
   * 中间步骤
   */
  intermediateSteps?: Array<AgentStep>;
};

export type AgentNodeList = {
  pagination?: PaginationResponse;
  rows?: Array<AgentNode>;
};

/**
 * agent 节点输出
 */
export type AgentNodeOutput = {
  metadata: APIResourceMeta;
  /**
   * 是否是最终步骤
   */
  isFinal: boolean;
  /**
   * 更多步骤
   */
  moreSteps: Array<AgentStep>;
  /**
   * 输出
   */
  output: {
    [key: string]: unknown;
  };
  /**
   * 错误
   */
  error?: string;
};

/**
 * agentnode run
 */
export type AgentNodeRun = {
  metadata: APIResourceMeta;
  title?: string;
  description?: string;
  state?: {
    [key: string]: unknown;
  };
  workflowRunId: string;
  nodeId: string;
  input?: {
    [key: string]: unknown;
  };
  output?: {
    [key: string]: unknown;
  };
};

/**
 * agent运行节点请求
 */
export type AgentNodeRunRequest = {
  flowName: FlowNames;
  /**
   * agent 节点ID(threadId)
   */
  nodeId?: string;
  /**
   * 是否使用stream 传输事件
   */
  isStream?: boolean;
  params: ResearchRequest | CrewAIParams | ScrapeGraphParams;
  config?: unknown;
  /**
   * 步骤限制(没用上)
   */
  stepLimit?: number;
  messages?: Array<ChatMessage>;
  /**
   * 节点运行
   */
  action?: {
    /**
     * 动作
     */
    action?: string;
    /**
     * 输入
     */
    input?: {
      [key: string]: unknown;
    };
  };
  /**
   * 语言
   */
  language?: string;
  /**
   * 自定义快速动作ID
   */
  customQuickActionId?: string;
  /**
   * 工件ID
   */
  artifactId?: string;
  /**
   * 是否使用表情符号重新生成
   */
  regenerateWithEmojis?: boolean;
  /**
   * 阅读级别
   */
  readingLevel?: "pirate" | "child" | "teenager" | "college" | "phd";
  /**
   * 工具内容长度,(文章,代码内容长度)
   */
  artifactLength?: "shortest" | "short" | "long" | "longest";
};

/**
 * 阅读级别
 */
export type readingLevel = "pirate" | "child" | "teenager" | "college" | "phd";

/**
 * 工具内容长度,(文章,代码内容长度)
 */
export type artifactLength = "shortest" | "short" | "long" | "longest";

/**
 * 创建agent节点请求
 */
export type AgentNodeUpdateRequest = {
  /**
   * agent 节点名称, 或者作为工具名称
   */
  title?: string;
  /**
   * agent 节点提示词
   */
  prompt: string;
  /**
   * agent 节点类型
   */
  type?: string;
  /**
   * agent 节点描述
   */
  description?: string;
  /**
   * agent 节点状态
   */
  state?: {
    [key: string]: unknown;
  };
};

export type AgentRunForm = {
  form: SchemaForm;
};

export type AgentState =
  | AssisantState
  | GenArticleState
  | BlogTaskState
  | PostizState
  | TokenChunk
  | EvtNodeStep;

/**
 * agent 执行步骤
 */
export type AgentStep = {
  metadata: APIResourceMeta;
  Action: AgentAction;
  /**
   * 步骤观察
   */
  Observation: string;
};

/**
 * 任务执行步骤
 */
export type AgentTaskStep = {
  metadata: APIResourceMeta;
  /**
   * 工具名称
   */
  name: string;
  /**
   * 步骤启动时间
   */
  createAt: string;
  /**
   * 步骤输入类型(human,ai,tool)
   */
  inputType?: string;
  /**
   * 步骤输入
   */
  input: string;
  /**
   * 步骤输出
   */
  output: string;
  /**
   * 是否是最终步骤
   */
  isFinal?: boolean;
  /**
   * 步骤执行原因
   */
  reason: string;
};

/**
 * agent 任务工具
 */
export type AgentTaskTool = {
  metadata: APIResourceMeta;
  /**
   * 工具名称
   */
  name: string;
  /**
   * 工具描述
   */
  description: string;
};

export type APIError = {
  /**
   * a custom Hatchet error code
   */
  code?: number;
  /**
   * the field that this error is associated with, if applicable
   */
  field?: string;
  /**
   * a description for this error
   */
  description: string;
  /**
   * a link to the documentation for this error, if it exists
   */
  docs_link?: string;
};

export type APIErrors = {
  errors: Array<APIError>;
};

export type APIMeta = {
  auth?: APIMetaAuth;
  /**
   * the Pylon app ID for usepylon.com chat support
   */
  pylonAppId?: string;
  posthog?: APIMetaPosthog;
  /**
   * whether or not users can sign up for this instance
   */
  allowSignup?: boolean;
  /**
   * whether or not users can invite other users to this instance
   */
  allowInvites?: boolean;
  /**
   * whether or not users can create new tenants
   */
  allowCreateTenant?: boolean;
  /**
   * whether or not users can change their password
   */
  allowChangePassword?: boolean;
};

export type APIMetaAuth = {
  /**
   * the supported types of authentication
   */
  schemes?: Array<string>;
};

export type APIMetaIntegration = {
  /**
   * the name of the integration
   */
  name: string;
  /**
   * whether this integration is enabled on the instance
   */
  enabled: boolean;
};

export type APIMetaPosthog = {
  /**
   * the PostHog API key
   */
  apiKey?: string;
  /**
   * the PostHog API host
   */
  apiHost?: string;
};

export type APIResourceMeta = {
  /**
   * the id of this resource, in UUID format
   */
  id: string;
  /**
   * the time that this resource was created
   */
  createdAt: string;
  /**
   * the time that this resource was last updated
   */
  updatedAt: string;
};

export type APIToken = {
  metadata: APIResourceMeta;
  /**
   * The name of the API token.
   */
  name: string;
  /**
   * When the API token expires.
   */
  expiresAt: string;
};

export type Artifact = {
  metadata: APIResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  state: {
    [key: string]: unknown;
  };
  nextId?: string;
  prevId?: string;
};

export type ArtifactList = {
  pagination?: PaginationResponse;
  rows?: Array<Artifact>;
};

export type Assisant = {
  metadata: APIResourceMeta;
  /**
   * 助手名称
   */
  name?: string;
  updated_at?: string;
  /**
   * 如果后端使用 langgraph ，则返回 langgraph 的 graph_id
   */
  graph_id?: string;
  config?: {
    /**
     * 助手名称
     */
    name?: string;
    tags?: Array<string>;
    /**
     * 递归限制
     */
    recursion_limit?: number;
    configurable?: {
      /**
       * langgraph 中对应的 threadId
       */
      threadId?: string;
      /**
       * langgraph 中对应的 checkpointId
       */
      checkpointId?: string;
      [key: string]: unknown | string;
    };
  };
  tags: Array<string>;
};

export type AssisantList = {
  pagination?: PaginationResponse;
  rows?: Array<Assisant>;
};

export type AssisantState = BaseState & {
  /**
   * 名称
   */
  name: string;
  /**
   * 描述
   */
  description: string;
};

export type BaseState = {
  metadata: APIResourceMeta;
  /**
   * 线程ID
   */
  threadId?: string;
  /**
   * 聊天消息
   */
  messages: Array<ChatMessage>;
};

export type Blog = {
  metadata: APIResourceMeta;
  title: string;
  description?: string;
  /**
   * The tenant associated with this tenant blog.
   */
  tenant?: Tenant;
  config?: {
    /**
     * The number of posts to publish per day.
     */
    dayPublishCount?: number;
    /**
     * The description of the blog.
     */
    description?: string;
  };
  /**
   * The status of the blog.
   */
  status?: string;
  /**
   * Whether the blog is enabled.
   */
  enabled?: boolean;
  /**
   * The slug of the blog.
   */
  slug?: string;
};

/**
 * 博客站点生成基本配置
 */
export type BlogGenConfig = {
  /**
   * 站点名称.
   */
  name: string;
  /**
   * 博客站点介绍.
   */
  description: string;
  /**
   * 站点关键字列表
   */
  seo_keywords?: string;
  /**
   * 站点建议日更帖子数量
   */
  dayPublishCountHint?: number;
};

export type BlogList = {
  pagination?: PaginationResponse;
  rows?: Array<Blog>;
};

export type BlogPost = {
  metadata: APIResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog
   */
  content: string;
  state?: {
    /**
     * post title
     */
    title?: string;
    /**
     * post topic
     */
    topic?: string;
    /**
     * post outlines
     */
    outlines?: Array<{
      /**
       * post outline title
       */
      title?: string;
      /**
       * post outline content
       */
      content?: string;
    }>;
  };
};

export type BlogPostList = {
  pagination?: PaginationResponse;
  rows?: Array<BlogPost>;
};

export type BlogTaskState = BaseState & {
  llm?: LlmConfig;
  /**
   * 关键提示语
   */
  prompt?: string;
  /**
   * 博客站点功能定位描述
   */
  blogDescription: string;
  /**
   * 博客的SEO关键字
   */
  blogKeywords: Array<string>;
  /**
   * 当前生成文章使用的主题
   */
  curTopicToGen?: string;
  /**
   * 当前正在生成的文章
   */
  curArticleState?: GenArticleState;
  /**
   * 当前步骤描述
   */
  stepDescription?: string;
  /**
   * 运行状态
   */
  runningState?: string;
  /**
   * 已经完成的日更天子数量
   */
  dayPublishdCount: number;
  /**
   * 建议日更数
   */
  dayPublishCountHint: number;
};

export type BulkCreateEventRequest = {
  events: Array<CreateEventRequest>;
};

export type BulkCreateEventResponse = {
  metadata: APIResourceMeta;
  /**
   * The events.
   */
  events: Array<Event>;
};

/**
 * 调用 Agent 参数
 */
export type CallAgent = {
  /**
   * 大语言模型 api 配置
   */
  llm?: LlmConfig;
  /**
   * 输入参数
   */
  input: {
    [key: string]: unknown;
  };
  /**
   * agents 列表
   */
  agents: Array<CrewAiAgent>;
  /**
   * 任务列表
   */
  tasks: Array<CrewAiTask>;
  /**
   * 是否调试模式
   */
  debug?: boolean;
};

/**
 * 调用Agent的输出结果
 */
export type CallAgentResult = {
  data?: {
    [key: string]: unknown;
  };
};

export type CancelEventRequest = {
  eventIds: Array<string>;
};

export type ChatCompletionsReq = {
  model?: string;
  messages?: Array<ChatMessage>;
};

export type ChatHistoryList = {
  pagination?: PaginationResponse;
  rows?: Array<ChatMessage>;
};

/**
 * 单个聊天消息
 */
export type ChatMessage = {
  id: string;
  role: ChatMessageRole;
  content: string;
  createdAt: string;
  threadId: string;
};

export type ChatMessageRole = "system" | "user" | "assistant";

/**
 * 聊天消息列表
 */
export type ChatMessages = {
  messages?: Array<ChatMessage>;
};

export type ChatModel = {
  id: string;
  label: string;
  description?: string;
  icon?: string;
  apiIdentifier?: string;
};

export type ChatModelList = {
  pagination?: PaginationResponse;
  rows?: Array<ChatModel>;
};

export type ChatReq = {
  threadId?: string;
  profile?: string;
  messages: Array<ChatMessage>;
  /**
   * 附加的表单数据
   */
  params?: {
    [key: string]: unknown;
  };
};

export type CommonResult = {
  Success: boolean;
  Message: string;
};

export type CreateAPITokenRequest = {
  /**
   * A name for the API token.
   */
  name: string;
  /**
   * The duration for which the token is valid.
   */
  expiresIn?: string;
};

export type CreateAPITokenResponse = {
  /**
   * The API token.
   */
  token: string;
};

export type CreateArtifacttRequest = {
  /**
   * The blog id.
   */
  artId: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  state: {
    [key: string]: unknown;
  };
};

export type CreateBlogPostRequest = {
  /**
   * The blog id.
   */
  blogId: string;
  /**
   * The authord id.
   */
  authorId?: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
};

export type CreateBlogRequest = {
  /**
   * blog title to create.
   */
  title?: string;
};

export type CreateEventRequest = {
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The data for the event.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * Additional metadata for the event.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type CreatePostRequest = {
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
};

export type CreatePostResponse = Post;

export type CreatePullRequestFromStepRun = {
  branchName: string;
};

export type CreateSiteRequest = {
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
  /**
   * 入站域名(指定绑定入站域名)
   */
  host?: string;
};

export type CreateSiteResponse = Site;

export type CreateSNSIntegrationRequest = {
  /**
   * The Amazon Resource Name (ARN) of the SNS topic.
   */
  topicArn: string;
};

export type CreateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type CreateTenantInviteRequest = {
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type CreateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
};

/**
 * crawai agent 定义
 */
export type CrewAiAgent = {
  /**
   * name
   */
  name: string;
  /**
   * role
   */
  role: string;
  /**
   * role
   */
  backstory: string;
  /**
   * goal
   */
  goal: string;
  /**
   * maxRetryLimit
   */
  maxRetryLimit?: number;
  /**
   * maxRpm
   */
  maxRpm?: number;
};

export type CrewAIParams = {
  input?: string;
};

/**
 * 任务定义
 */
export type CrewAiTask = {
  /**
   * 任务描述
   */
  description: string;
  /**
   * 期待输出
   */
  expectedOutput: string;
  /**
   * 任务输出json格式名称
   */
  outputJsonSchemaName?: string;
  /**
   * agent
   */
  agent: string;
};

export type CronWorkflows = {
  metadata: APIResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowId: string;
  workflowName: string;
  cron: string;
  input?: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type CronWorkflowsList = {
  rows?: Array<CronWorkflows>;
  pagination?: PaginationResponse;
};

export type CronWorkflowsOrderByField = "createdAt";

export type DashSidebarItem = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 默认展开
   */
  defaultExpanded?: boolean;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
  children?: Array<DashSidebarItem>;
};

/**
 * 文档
 */
export type Document = {
  /**
   * 页面内容
   */
  PageContent: string;
  /**
   * 元数据
   */
  Metadata: {
    [key: string]: unknown;
  };
  /**
   * 分数
   */
  Score: number;
};

export type DocumentList = {
  pagination?: PaginationResponse;
  rows?: Array<Document>;
};

export type Event = {
  metadata: APIResourceMeta;
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The tenant associated with this event.
   */
  tenant?: Tenant;
  /**
   * The ID of the tenant associated with this event.
   */
  tenantId: string;
  /**
   * The workflow run summary for this event.
   */
  workflowRunSummary?: EventWorkflowRunSummary;
  /**
   * Additional metadata for the event.
   */
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type EventData = {
  /**
   * The data for the event (JSON bytes).
   */
  data: string;
};

/**
 * The key for the event.
 */
export type EventKey = string;

export type EventKeyList = {
  pagination?: PaginationResponse;
  rows?: Array<EventKey>;
};

export type EventList = {
  pagination?: PaginationResponse;
  rows?: Array<Event>;
};

export type EventOrderByDirection = "asc" | "desc";

export type EventOrderByField = "createdAt";

export type EventSearch = string;

export type EventWorkflowRunSummary = {
  /**
   * The number of pending runs.
   */
  pending?: number;
  /**
   * The number of running runs.
   */
  running?: number;
  /**
   * The number of queued runs.
   */
  queued?: number;
  /**
   * The number of succeeded runs.
   */
  succeeded?: number;
  /**
   * The number of failed runs.
   */
  failed?: number;
};

export type EvtNodeStep = {
  /**
   * 节点名称
   */
  name: string;
  /**
   * 节点输入
   */
  input: string;
};

export type FlowNames =
  | "research"
  | "blogAuto"
  | "tenant"
  | "resourceAction"
  | "oneShotDemo";

export type FormField = {
  name: string;
  type: string;
};

export type FrontendConfig = {
  /**
   * Cookie access token
   */
  cookieAccessToken: string;
  /**
   * Dashboard path
   */
  dashPath: string;
  /**
   * Hot key debug
   */
  hotKeyDebug: string;
  /**
   * 实验性质，默认租户的access token
   */
  defaultTenantAccessToken: string;
};

/**
 * 文章生成输入
 */
export type GenArticleInput = {
  topic: string;
};

export type GenArticleState = BaseState & {
  /**
   * 关联的上级博客生成任务
   */
  blogTaskState?: BlogTaskState;
  /**
   * 当前关联的主题
   */
  topic: string;
  /**
   * 关键提示语
   */
  prompt?: string;
  /**
   * 文章主标题
   */
  title?: string;
  /**
   * 文章副标题
   */
  subTitle?: string;
  /**
   * 文章大纲列表
   */
  oulines?: Array<{
    title: string;
    /**
     * 大纲描述
     */
    description?: string;
  }>;
};

/**
 * topics 生成结果
 */
export type GenTopicResult = {
  /**
   * 主题列表，按优先顺序，更好的更靠前
   */
  topics: Array<string>;
};

export type GetStepRunDiffResponse = {
  diffs: Array<StepRunDiff>;
};

export type Job = {
  metadata: APIResourceMeta;
  tenantId: string;
  versionId: string;
  name: string;
  /**
   * The description of the job.
   */
  description?: string;
  steps: Array<Step>;
  /**
   * The timeout of the job.
   */
  timeout?: string;
};

export type JobRun = {
  metadata: APIResourceMeta;
  tenantId: string;
  workflowRunId: string;
  workflowRun?: WorkflowRun;
  jobId: string;
  job?: Job;
  tickerId?: string;
  stepRuns?: Array<StepRun>;
  status: JobRunStatus;
  result?: {
    [key: string]: unknown;
  };
  startedAt?: string;
  finishedAt?: string;
  timeoutAt?: string;
  cancelledAt?: string;
  cancelledReason?: string;
  cancelledError?: string;
};

export type JobRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED";

export type ListAPIMetaIntegration = Array<APIMetaIntegration>;

export type ListAPITokensResponse = {
  pagination?: PaginationResponse;
  rows?: Array<APIToken>;
};

export type ListPullRequestsResponse = {
  pullRequests: Array<PullRequest>;
};

export type ListSlackWebhooks = {
  pagination: PaginationResponse;
  rows: Array<SlackWebhook>;
};

export type ListSNSIntegrations = {
  pagination: PaginationResponse;
  rows: Array<SNSIntegration>;
};

/**
 * llm config
 */
export type LlmConfig = {
  metadata: APIResourceMeta;
  base_url: string;
  api_key: string;
  /**
   * llm model name
   */
  model: string;
};

export type LogLine = {
  /**
   * The creation date of the log line.
   */
  createdAt: string;
  /**
   * The log message.
   */
  message: string;
  /**
   * The log metadata.
   */
  metadata: {
    [key: string]: unknown;
  };
};

export type LogLineLevel = "DEBUG" | "INFO" | "WARN" | "ERROR";

export type LogLineLevelField = Array<LogLineLevel>;

export type LogLineList = {
  pagination?: PaginationResponse;
  rows?: Array<LogLine>;
};

export type LogLineOrderByDirection = "asc" | "desc";

export type LogLineOrderByField = "createdAt";

export type LogLineSearch = string;

export type OperataionGuideResponse = {
  /**
   * 详细的操作手册描述
   */
  message?: string;
};

/**
 * 可用的操作名称枚举：
 * - **startBlogTask**: 启动单个博客自动化操作任务
 * - **stopBlogTask**: 停止单个博客自动化操作任务
 *
 */
export type OperationEnum = "startBlogTask" | "stopBlogTask";

export type PaginationResponse = {
  /**
   * the current page
   */
  current_page?: number;
  /**
   * the next page
   */
  next_page?: number;
  /**
   * the total number of pages for listing
   */
  num_pages?: number;
};

export type Post = {
  metadata: APIResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog
   */
  content: string;
};

export type PostizChannel = {
  /**
   * 聊天消息
   */
  messages?: Array<ChatMessage>;
  fresearch?: string;
  orgId?: string;
  hook?: string;
  content?: string;
  date?: string;
  category?: string;
  popularPosts?: string;
  topic?: string;
  isPicture?: boolean;
  format?: string;
  tone?: string;
  question?: string;
};

export type PostizState = {
  channel?: PostizChannel;
};

export type PostList = {
  pagination?: PaginationResponse;
  rows?: Array<Post>;
};

export type PostListRequest = {
  /**
   * The site id
   */
  siteId?: string;
  hostName?: string;
};

export type Prompt = {
  metadata: APIResourceMeta;
  title: string;
  content: string;
  tags: Array<string>;
};

export type PromptList = {
  pagination?: PaginationResponse;
  rows?: Array<Artifact>;
};

export type PullRequest = {
  repositoryOwner: string;
  repositoryName: string;
  pullRequestID: number;
  pullRequestTitle: string;
  pullRequestNumber: number;
  pullRequestHeadBranch: string;
  pullRequestBaseBranch: string;
  pullRequestState: PullRequestState;
};

export type PullRequestState = "open" | "closed";

export type QueueMetrics = {
  /**
   * The number of items in the queue.
   */
  numQueued: number;
  /**
   * The number of items running.
   */
  numRunning: number;
  /**
   * The number of items pending.
   */
  numPending: number;
};

export type RateLimit = {
  /**
   * The key for the rate limit.
   */
  key: string;
  /**
   * The ID of the tenant associated with this rate limit.
   */
  tenantId: string;
  /**
   * The maximum number of requests allowed within the window.
   */
  limitValue: number;
  /**
   * The current number of requests made within the window.
   */
  value: number;
  /**
   * The window of time in which the limitValue is enforced.
   */
  window: string;
  /**
   * The last time the rate limit was refilled.
   */
  lastRefill: string;
};

export type RateLimitList = {
  pagination?: PaginationResponse;
  rows?: Array<RateLimit>;
};

export type RateLimitOrderByDirection = "asc" | "desc";

export type RateLimitOrderByField = "key" | "value" | "limitValue";

export type RecentStepRuns = {
  metadata: APIResourceMeta;
  /**
   * The action id.
   */
  actionId: string;
  status: StepRunStatus;
  startedAt?: string;
  finishedAt?: string;
  cancelledAt?: string;
  workflowRunId: string;
};

export type RejectInviteRequest = {
  invite: string;
};

export type ReplayEventRequest = {
  eventIds: Array<string>;
};

export type ReplayWorkflowRunsRequest = {
  workflowRunIds: Array<string>;
};

export type ReplayWorkflowRunsResponse = {
  workflowRuns: Array<WorkflowRun>;
};

export type RerunStepRunRequest = {
  input: {
    [key: string]: unknown;
  };
};

/**
 * 研究输入(目前写死为调用社交媒体)
 */
export type ResearchRequest = {
  isStream: boolean;
  threadId: string;
} & {
  /**
   * 详细描述要调研详情
   */
  input: string;
};

/**
 * 研究输出(目前写死为调用社交媒体)
 */
export type ResearchResponse = {
  /**
   * 研究结果
   */
  output: string;
};

/**
 * 根状态
 */
export type RootConfig = {
  /**
   * token
   */
  token?: string;
};

/**
 * 运行新任务的结果
 */
export type RunNewTaskResponse = {
  description?: string;
};

export type ScheduledRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "QUEUED"
  | "SCHEDULED";

export type ScheduledWorkflows = {
  metadata: APIResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowId: string;
  workflowName: string;
  triggerAt: string;
  input?: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
  workflowRunCreatedAt?: string;
  workflowRunName?: string;
  workflowRunStatus?: WorkflowRunStatus;
  workflowRunId?: string;
};

export type ScheduledWorkflowsList = {
  rows?: Array<ScheduledWorkflows>;
  pagination?: PaginationResponse;
};

export type ScheduledWorkflowsOrderByField = "triggerAt" | "createdAt";

export type SchemaForm = {
  title: string;
  description?: string;
  fields: Array<FormField>;
};

export type ScrapeGraphParams = {
  input?: string;
};

export type SemaphoreSlots = {
  /**
   * The step run id.
   */
  stepRunId: string;
  /**
   * The action id.
   */
  actionId: string;
  /**
   * The time this slot was started.
   */
  startedAt?: string;
  /**
   * The time this slot will timeout.
   */
  timeoutAt?: string;
  /**
   * The workflow run id.
   */
  workflowRunId: string;
  status: StepRunStatus;
};

export type SiderbarConfig = {
  /**
   * logo
   */
  logo?: string;
  sideritems?: Array<DashSidebarItem>;
};

/**
 * site
 */
export type Site = {
  metadata: APIResourceMeta;
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
};

export type SiteList = {
  pagination?: PaginationResponse;
  rows?: Array<Site>;
};

export type SlackWebhook = {
  metadata: APIResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The team name associated with this slack webhook.
   */
  teamName: string;
  /**
   * The team id associated with this slack webhook.
   */
  teamId: string;
  /**
   * The channel name associated with this slack webhook.
   */
  channelName: string;
  /**
   * The channel id associated with this slack webhook.
   */
  channelId: string;
};

export type SNSIntegration = {
  metadata: APIResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The Amazon Resource Name (ARN) of the SNS topic.
   */
  topicArn: string;
  /**
   * The URL to send SNS messages to.
   */
  ingestUrl?: string;
};

export type Step = {
  metadata: APIResourceMeta;
  /**
   * The readable id of the step.
   */
  readableId: string;
  tenantId: string;
  jobId: string;
  action: string;
  /**
   * The timeout of the step.
   */
  timeout?: string;
  children?: Array<string>;
  parents?: Array<string>;
};

export type StepRun = {
  metadata: APIResourceMeta;
  tenantId: string;
  jobRunId: string;
  jobRun?: JobRun;
  stepId: string;
  step?: Step;
  childWorkflowsCount?: number;
  parents?: Array<string>;
  childWorkflowRuns?: Array<string>;
  workerId?: string;
  input?: string;
  output?: string;
  status: StepRunStatus;
  requeueAfter?: string;
  result?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  startedAtEpoch?: number;
  finishedAt?: string;
  finishedAtEpoch?: number;
  timeoutAt?: string;
  timeoutAtEpoch?: number;
  cancelledAt?: string;
  cancelledAtEpoch?: number;
  cancelledReason?: string;
  cancelledError?: string;
};

export type StepRunArchive = {
  stepRunId: string;
  order: number;
  input?: string;
  output?: string;
  startedAt?: string;
  error?: string;
  retryCount: number;
  createdAt: string;
  startedAtEpoch?: number;
  finishedAt?: string;
  finishedAtEpoch?: number;
  timeoutAt?: string;
  timeoutAtEpoch?: number;
  cancelledAt?: string;
  cancelledAtEpoch?: number;
  cancelledReason?: string;
  cancelledError?: string;
};

export type StepRunArchiveList = {
  pagination?: PaginationResponse;
  rows?: Array<StepRunArchive>;
};

export type StepRunDiff = {
  key: string;
  original: string;
  modified: string;
};

export type StepRunEvent = {
  id: number;
  timeFirstSeen: string;
  timeLastSeen: string;
  stepRunId?: string;
  workflowRunId?: string;
  reason: StepRunEventReason;
  severity: StepRunEventSeverity;
  message: string;
  count: number;
  data?: {
    [key: string]: unknown;
  };
};

export type StepRunEventList = {
  pagination?: PaginationResponse;
  rows?: Array<StepRunEvent>;
};

export type StepRunEventReason =
  | "REQUEUED_NO_WORKER"
  | "REQUEUED_RATE_LIMIT"
  | "SCHEDULING_TIMED_OUT"
  | "ASSIGNED"
  | "STARTED"
  | "ACKNOWLEDGED"
  | "FINISHED"
  | "FAILED"
  | "RETRYING"
  | "CANCELLED"
  | "TIMEOUT_REFRESHED"
  | "REASSIGNED"
  | "TIMED_OUT"
  | "SLOT_RELEASED"
  | "RETRIED_BY_USER"
  | "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED"
  | "WORKFLOW_RUN_GROUP_KEY_FAILED";

export type StepRunEventSeverity = "INFO" | "WARNING" | "CRITICAL";

export type StepRunStatus =
  | "PENDING"
  | "PENDING_ASSIGNMENT"
  | "ASSIGNED"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "CANCELLING";

export type SubscribeRequest = {
  /**
   * 消息
   */
  protocol?: string;
  /**
   * 消息
   */
  runId?: string;
  /**
   * 消息
   */
  streamKey?: string;
  /**
   * 元数据
   */
  meta?: {
    [key: string]: unknown;
  };
};

export type Tenant = {
  metadata: APIResourceMeta;
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
};

export type TenantAlertEmailGroup = {
  metadata: APIResourceMeta;
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantAlertEmailGroupList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantAlertEmailGroup>;
};

export type TenantAlertingSettings = {
  metadata: APIResourceMeta;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency: string;
  /**
   * The last time an alert was sent.
   */
  lastAlertedAt?: string;
};

export type TenantInvite = {
  metadata: APIResourceMeta;
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant id associated with this tenant invite.
   */
  tenantId: string;
  /**
   * The tenant name for the tenant.
   */
  tenantName?: string;
  /**
   * The time that this invite expires.
   */
  expires: string;
};

export type TenantInviteList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantInvite>;
};

export type TenantList = {
  pagination?: PaginationResponse;
  rows?: Array<Tenant>;
};

export type TenantMember = {
  metadata: APIResourceMeta;
  /**
   * The user associated with this tenant member.
   */
  user: UserTenantPublic;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant associated with this tenant member.
   */
  tenant?: Tenant;
};

export type TenantMemberList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type TenantMemberRole = "OWNER" | "ADMIN" | "MEMBER";

export type TenantParameter = string;

export type TenantQueueMetrics = {
  /**
   * The total queue metrics.
   */
  total?: QueueMetrics;
  workflow?: {
    [key: string]: QueueMetrics;
  };
  queues?: {
    [key: string]: number;
  };
};

export type TenantResource =
  | "WORKER"
  | "EVENT"
  | "WORKFLOW_RUN"
  | "CRON"
  | "SCHEDULE";

export type TenantResourceLimit = {
  metadata: APIResourceMeta;
  /**
   * The resource associated with this limit.
   */
  resource: TenantResource;
  /**
   * The limit associated with this limit.
   */
  limitValue: number;
  /**
   * The alarm value associated with this limit to warn of approaching limit value.
   */
  alarmValue?: number;
  /**
   * The current value associated with this limit.
   */
  value: number;
  /**
   * The meter window for the limit. (i.e. 1 day, 1 week, 1 month)
   */
  window?: string;
  /**
   * The last time the limit was refilled.
   */
  lastRefill?: string;
};

export type TenantResourcePolicy = {
  /**
   * A list of resource limits for the tenant.
   */
  limits: Array<TenantResourceLimit>;
};

export type TenantStepRunQueueMetrics = {
  queues?: {
    [key: string]: number;
  };
};

export type TokenChunk = {
  /**
   * 消息ID
   */
  id: string;
  /**
   * 消息内容
   */
  content: string;
};

export type ToolCallResult = {
  /**
   * 结果id
   */
  id?: string;
  /**
   * 结果数据
   */
  data?: string;
};

export type TriggerWorkflowRunRequest = {
  input: {
    [key: string]: unknown;
  };
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type UpdateBlogRequest = {
  title: string;
  description?: string;
};

export type UpdatePostRequest = {
  /**
   * The blog id.
   */
  blogId: string;
  /**
   * The authord id.
   */
  authorId?: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
};

export type UpdateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type UpdateTenantInviteRequest = {
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type UpdateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name?: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency?: string;
};

export type UpdateWorkerRequest = {
  /**
   * Whether the worker is paused and cannot accept new runs.
   */
  isPaused?: boolean;
};

export type User = {
  metadata: APIResourceMeta;
  /**
   * The display name of the user.
   */
  name?: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * Whether the user has verified their email address.
   */
  emailVerified: boolean;
  /**
   * Whether the user has a password set.
   */
  hasPassword?: boolean;
  /**
   * A hash of the user's email address for use with Pylon Support Chat
   */
  emailHash?: string;
  /**
   * The user's token for use with Pylon Support Chat
   */
  userToken?: string;
};

export type UserChangePasswordRequest = {
  /**
   * The password of the user.
   */
  password: string;
  /**
   * The new password for the user.
   */
  newPassword: string;
};

export type UserLoginRequest = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserRegisterRequest = {
  /**
   * The name of the user.
   */
  name: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserTenantMembershipsList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type UserTenantPublic = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The display name of the user.
   */
  name?: string;
};

export type WebhookWorker = {
  metadata: APIResourceMeta;
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
};

export type WebhookWorkerCreated = {
  metadata: APIResourceMeta;
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
  /**
   * The secret key for validation.
   */
  secret: string;
};

export type WebhookWorkerCreateRequest = {
  /**
   * The name of the webhook worker.
   */
  name: string;
  /**
   * The webhook url.
   */
  url: string;
  /**
   * The secret key for validation. If not provided, a random secret will be generated.
   */
  secret?: string;
};

export type WebhookWorkerCreateResponse = {
  worker?: WebhookWorkerCreated;
};

export type WebhookWorkerListResponse = {
  pagination?: PaginationResponse;
  rows?: Array<WebhookWorker>;
};

export type WebhookWorkerRequest = {
  /**
   * The date and time the request was created.
   */
  created_at: string;
  /**
   * The HTTP method used for the request.
   */
  method: WebhookWorkerRequestMethod;
  /**
   * The HTTP status code of the response.
   */
  statusCode: number;
};

export type WebhookWorkerRequestListResponse = {
  /**
   * The list of webhook requests.
   */
  requests?: Array<WebhookWorkerRequest>;
};

export type WebhookWorkerRequestMethod = "GET" | "POST" | "PUT";

export type WebSearchResult = {
  /**
   * 结果描述
   */
  message?: string;
};

export type Worker = {
  metadata: APIResourceMeta;
  /**
   * The name of the worker.
   */
  name: string;
  type: "SELFHOSTED" | "MANAGED" | "WEBHOOK";
  /**
   * The time this worker last sent a heartbeat.
   */
  lastHeartbeatAt?: string;
  /**
   * The time this worker last sent a heartbeat.
   */
  lastListenerEstablished?: string;
  /**
   * The actions this worker can perform.
   */
  actions?: Array<string>;
  /**
   * The semaphore slot state for the worker.
   */
  slots?: Array<SemaphoreSlots>;
  /**
   * The recent step runs for the worker.
   */
  recentStepRuns?: Array<RecentStepRuns>;
  /**
   * The status of the worker.
   */
  status?: "ACTIVE" | "INACTIVE" | "PAUSED";
  /**
   * The maximum number of runs this worker can execute concurrently.
   */
  maxRuns?: number;
  /**
   * The number of runs this worker can execute concurrently.
   */
  availableRuns?: number;
  /**
   * the id of the assigned dispatcher, in UUID format
   */
  dispatcherId?: string;
  /**
   * The current label state of the worker.
   */
  labels?: Array<WorkerLabel>;
  /**
   * The webhook URL for the worker.
   */
  webhookUrl?: string;
  /**
   * The webhook ID for the worker.
   */
  webhookId?: string;
  runtimeInfo?: WorkerRuntimeInfo;
};

export type type = "SELFHOSTED" | "MANAGED" | "WEBHOOK";

/**
 * The status of the worker.
 */
export type status = "ACTIVE" | "INACTIVE" | "PAUSED";

export type WorkerConfig = {
  workerToken?: string;
};

export type WorkerLabel = {
  metadata: APIResourceMeta;
  /**
   * The key of the label.
   */
  key: string;
  /**
   * The value of the label.
   */
  value?: string;
};

export type WorkerList = {
  pagination?: PaginationResponse;
  rows?: Array<Worker>;
};

export type WorkerRuntimeInfo = {
  sdkVersion?: string;
  language?: WorkerRuntimeSDKs;
  languageVersion?: string;
  os?: string;
  runtimeExtra?: string;
};

export type WorkerRuntimeSDKs = "GOLANG" | "PYTHON" | "TYPESCRIPT";

export type Workflow = {
  metadata: APIResourceMeta;
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * The description of the workflow.
   */
  description?: string;
  /**
   * Whether the workflow is paused.
   */
  isPaused?: boolean;
  versions?: Array<WorkflowVersionMeta>;
  /**
   * The tags of the workflow.
   */
  tags?: Array<WorkflowTag>;
  /**
   * The jobs of the workflow.
   */
  jobs?: Array<Job>;
};

export type WorkflowConcurrency = {
  /**
   * The maximum number of concurrent workflow runs.
   */
  maxRuns: number;
  /**
   * The strategy to use when the concurrency limit is reached.
   */
  limitStrategy:
    | "CANCEL_IN_PROGRESS"
    | "DROP_NEWEST"
    | "QUEUE_NEWEST"
    | "GROUP_ROUND_ROBIN";
  /**
   * An action which gets the concurrency group for the WorkflowRun.
   */
  getConcurrencyGroup: string;
};

/**
 * The strategy to use when the concurrency limit is reached.
 */
export type limitStrategy =
  | "CANCEL_IN_PROGRESS"
  | "DROP_NEWEST"
  | "QUEUE_NEWEST"
  | "GROUP_ROUND_ROBIN";

/**
 * A workflow ID.
 */
export type WorkflowID = string;

export type WorkflowKind = "FUNCTION" | "DURABLE" | "DAG";

export type WorkflowKindList = Array<WorkflowKind>;

export type WorkflowList = {
  metadata?: APIResourceMeta;
  rows?: Array<Workflow>;
  pagination?: PaginationResponse;
};

export type WorkflowMetrics = {
  /**
   * The number of runs for a specific group key (passed via filter)
   */
  groupKeyRunsCount?: number;
  /**
   * The total number of concurrency group keys.
   */
  groupKeyCount?: number;
};

export type WorkflowRun = {
  metadata: APIResourceMeta;
  tenantId: string;
  workflowVersionId: string;
  workflowVersion?: WorkflowVersion;
  status: WorkflowRunStatus;
  displayName?: string;
  jobRuns?: Array<JobRun>;
  triggeredBy: WorkflowRunTriggeredBy;
  input?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  finishedAt?: string;
  duration?: number;
  parentId?: string;
  parentStepRunId?: string;
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type WorkflowRunList = {
  rows?: Array<WorkflowRun>;
  pagination?: PaginationResponse;
};

export type WorkflowRunOrderByDirection = "ASC" | "DESC";

export type WorkflowRunOrderByField =
  | "createdAt"
  | "startedAt"
  | "finishedAt"
  | "duration";

export type WorkflowRunsCancelRequest = {
  workflowRunIds: Array<string>;
};

export type WorkflowRunShape = {
  metadata: APIResourceMeta;
  tenantId: string;
  workflowId?: string;
  workflowVersionId: string;
  workflowVersion?: WorkflowVersion;
  status: WorkflowRunStatus;
  displayName?: string;
  jobRuns?: Array<JobRun>;
  triggeredBy: WorkflowRunTriggeredBy;
  input?: {
    [key: string]: unknown;
  };
  error?: string;
  startedAt?: string;
  finishedAt?: string;
  duration?: number;
  parentId?: string;
  parentStepRunId?: string;
  additionalMetadata?: {
    [key: string]: unknown;
  };
};

export type WorkflowRunsMetrics = {
  counts?: WorkflowRunsMetricsCounts;
};

export type WorkflowRunsMetricsCounts = {
  PENDING?: number;
  RUNNING?: number;
  SUCCEEDED?: number;
  FAILED?: number;
  QUEUED?: number;
};

export type WorkflowRunStatus =
  | "PENDING"
  | "RUNNING"
  | "SUCCEEDED"
  | "FAILED"
  | "CANCELLED"
  | "QUEUED";

export type WorkflowRunStatusList = Array<WorkflowRunStatus>;

export type WorkflowRunTriggeredBy = {
  metadata: APIResourceMeta;
  parentWorkflowRunId?: string;
  eventId?: string;
  cronParentId?: string;
  cronSchedule?: string;
};

export type WorkflowTag = {
  /**
   * The name of the workflow.
   */
  name: string;
  /**
   * The description of the workflow.
   */
  color: string;
};

export type WorkflowTriggerCronRef = {
  parent_id?: string;
  cron?: string;
};

export type WorkflowTriggerEventRef = {
  parent_id?: string;
  event_key?: string;
};

export type WorkflowTriggers = {
  metadata?: APIResourceMeta;
  workflow_version_id?: string;
  tenant_id?: string;
  events?: Array<WorkflowTriggerEventRef>;
  crons?: Array<WorkflowTriggerCronRef>;
};

export type WorkflowUpdateRequest = {
  /**
   * Whether the workflow is paused.
   */
  isPaused?: boolean;
};

export type WorkflowVersion = {
  metadata: APIResourceMeta;
  /**
   * The version of the workflow.
   */
  version: string;
  order: number;
  workflowId: string;
  /**
   * The sticky strategy of the workflow.
   */
  sticky?: string;
  /**
   * The default priority of the workflow.
   */
  defaultPriority?: number;
  workflow?: Workflow;
  concurrency?: WorkflowConcurrency;
  triggers?: WorkflowTriggers;
  scheduleTimeout?: string;
  jobs?: Array<Job>;
};

export type WorkflowVersionDefinition = {
  /**
   * The raw YAML definition of the workflow.
   */
  rawDefinition: string;
};

export type WorkflowVersionMeta = {
  metadata: APIResourceMeta;
  /**
   * The version of the workflow.
   */
  version: string;
  order: number;
  workflowId: string;
  workflow?: Workflow;
};

export type WorkflowWorkersCount = {
  freeSlotCount?: number;
  maxSlotCount?: number;
  workflowRunId?: string;
};

export type ReadinessGetResponse = unknown;

export type ReadinessGetError = unknown;

export type LivenessGetResponse = unknown;

export type LivenessGetError = unknown;

export type MetadataGetResponse = APIMeta;

export type MetadataGetError = APIErrors;

export type CloudMetadataGetResponse = APIErrors;

export type CloudMetadataGetError = APIErrors;

export type MetadataListIntegrationsResponse = ListAPIMetaIntegration;

export type MetadataListIntegrationsError = APIErrors;

export type UserUpdateLoginData = {
  body?: UserLoginRequest;
};

export type UserUpdateLoginResponse = User;

export type UserUpdateLoginError = APIErrors;

export type UserUpdateSlackOauthStartData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SnsUpdateData = {
  path: {
    /**
     * The event key
     */
    event: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SnsUpdateResponse = unknown;

export type SnsUpdateError = APIErrors;

export type SnsListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SnsListResponse = ListSNSIntegrations;

export type SnsListError = APIErrors;

export type SnsCreateData = {
  body?: CreateSNSIntegrationRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SnsCreateResponse = SNSIntegration;

export type SnsCreateError = APIErrors;

export type AlertEmailGroupCreateData = {
  /**
   * The tenant alert email group to create
   */
  body: CreateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type AlertEmailGroupCreateResponse = TenantAlertEmailGroup;

export type AlertEmailGroupCreateError = APIErrors | APIError;

export type AlertEmailGroupListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type AlertEmailGroupListResponse = TenantAlertEmailGroupList;

export type AlertEmailGroupListError = APIErrors | APIError;

export type TenantResourcePolicyGetData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantResourcePolicyGetResponse = TenantResourcePolicy;

export type TenantResourcePolicyGetError = APIErrors | APIError;

export type AlertEmailGroupUpdateData = {
  /**
   * The tenant alert email group to update
   */
  body: UpdateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
};

export type AlertEmailGroupUpdateResponse = TenantAlertEmailGroup;

export type AlertEmailGroupUpdateError = APIErrors | APIError;

export type AlertEmailGroupDeleteData = {
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
};

export type AlertEmailGroupDeleteResponse = void;

export type AlertEmailGroupDeleteError = APIErrors | APIError;

export type SnsDeleteData = {
  path: {
    /**
     * The SNS integration id
     */
    sns: string;
  };
};

export type SnsDeleteResponse = void;

export type SnsDeleteError = APIErrors;

export type SlackWebhookListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SlackWebhookListResponse = ListSlackWebhooks;

export type SlackWebhookListError = APIErrors;

export type SlackWebhookDeleteData = {
  path: {
    /**
     * The Slack webhook id
     */
    slack: string;
  };
};

export type SlackWebhookDeleteResponse = void;

export type SlackWebhookDeleteError = APIErrors;

export type UserGetCurrentResponse = User;

export type UserGetCurrentError = APIErrors;

export type UserUpdatePasswordData = {
  body?: UserChangePasswordRequest;
};

export type UserUpdatePasswordResponse = User;

export type UserUpdatePasswordError = APIErrors;

export type UserCreateData = {
  body?: UserRegisterRequest;
};

export type UserCreateResponse = User;

export type UserCreateError = APIErrors;

export type UserUpdateLogoutResponse = User;

export type UserUpdateLogoutError = APIErrors;

export type TenantMembershipsListResponse = UserTenantMembershipsList;

export type TenantMembershipsListError = APIErrors;

export type UserListTenantInvitesResponse = TenantInviteList;

export type UserListTenantInvitesError = APIErrors;

export type TenantInviteAcceptData = {
  body?: AcceptInviteRequest;
};

export type TenantInviteAcceptResponse = unknown;

export type TenantInviteAcceptError = APIErrors | APIError;

export type TenantInviteRejectData = {
  body?: RejectInviteRequest;
};

export type TenantInviteRejectResponse = unknown;

export type TenantInviteRejectError = APIErrors | APIError;

export type TenantCreateData = {
  /**
   * The tenant to create
   */
  body: CreateTenantRequest;
};

export type TenantCreateResponse = Tenant;

export type TenantCreateError = APIErrors | APIError;

export type TenantUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateTenantRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantUpdateResponse = Tenant;

export type TenantUpdateError = APIErrors | APIError;

export type TenantAlertingSettingsGetData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantAlertingSettingsGetResponse = TenantAlertingSettings;

export type TenantAlertingSettingsGetError = APIErrors | APIError;

export type TenantInviteCreateData = {
  /**
   * The tenant invite to create
   */
  body: CreateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantInviteCreateResponse = TenantInvite;

export type TenantInviteCreateError = APIErrors | APIError;

export type TenantInviteListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantInviteListResponse = TenantInviteList;

export type TenantInviteListError = APIErrors | APIError;

export type TenantInviteUpdateData = {
  /**
   * The tenant invite to update
   */
  body: UpdateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
};

export type TenantInviteUpdateResponse = TenantInvite;

export type TenantInviteUpdateError = APIErrors;

export type TenantInviteDeleteData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
};

export type TenantInviteDeleteResponse = TenantInvite;

export type TenantInviteDeleteError = APIErrors;

export type ApiTokenCreateData = {
  body?: CreateAPITokenRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ApiTokenCreateResponse = CreateAPITokenResponse;

export type ApiTokenCreateError = APIErrors;

export type ApiTokenListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ApiTokenListResponse = ListAPITokensResponse;

export type ApiTokenListError = APIErrors;

export type ApiTokenUpdateRevokeData = {
  path: {
    /**
     * The API token
     */
    "api-token": string;
  };
};

export type ApiTokenUpdateRevokeResponse = void;

export type ApiTokenUpdateRevokeError = APIErrors;

export type TenantGetQueueMetricsData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * A list of workflow IDs to filter by
     */
    workflows?: Array<WorkflowID>;
  };
};

export type TenantGetQueueMetricsResponse = TenantQueueMetrics;

export type TenantGetQueueMetricsError = APIErrors;

export type TenantGetStepRunQueueMetricsData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantGetStepRunQueueMetricsResponse = TenantStepRunQueueMetrics;

export type TenantGetStepRunQueueMetricsError = APIErrors;

export type EventListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * A list of event ids to filter by
     */
    eventIds?: Array<string>;
    /**
     * A list of keys to filter by
     */
    keys?: Array<EventKey>;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The order direction
     */
    orderByDirection?: EventOrderByDirection;
    /**
     * What to order by
     */
    orderByField?: EventOrderByField;
    /**
     * The search query to filter for
     */
    search?: EventSearch;
    /**
     * A list of workflow run statuses to filter by
     */
    statuses?: WorkflowRunStatusList;
    /**
     * A list of workflow IDs to filter by
     */
    workflows?: Array<WorkflowID>;
  };
};

export type EventListResponse = EventList;

export type EventListError = APIErrors;

export type EventCreateData = {
  /**
   * The event to create
   */
  body: CreateEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type EventCreateResponse = Event;

export type EventCreateError = APIErrors;

export type EventCreateBulkData = {
  /**
   * The events to create
   */
  body: BulkCreateEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type EventCreateBulkResponse = BulkCreateEventResponse;

export type EventCreateBulkError = APIErrors;

export type EventUpdateReplayData = {
  /**
   * The event ids to replay
   */
  body: ReplayEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type EventUpdateReplayResponse = EventList;

export type EventUpdateReplayError = APIErrors;

export type EventUpdateCancelData = {
  /**
   * The event ids to replay
   */
  body: CancelEventRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type EventUpdateCancelResponse = {
  workflowRunIds?: Array<string>;
};

export type EventUpdateCancelError = APIErrors;

export type RateLimitListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The order direction
     */
    orderByDirection?: RateLimitOrderByDirection;
    /**
     * What to order by
     */
    orderByField?: RateLimitOrderByField;
    /**
     * The search query to filter for
     */
    search?: string;
  };
};

export type RateLimitListResponse = RateLimitList;

export type RateLimitListError = APIErrors;

export type TenantMemberListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantMemberListResponse = TenantMemberList;

export type TenantMemberListError = APIErrors | APIError;

export type TenantMemberDeleteData = {
  path: {
    /**
     * The tenant member id
     */
    member: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type TenantMemberDeleteResponse = TenantMember;

export type TenantMemberDeleteError = APIErrors;

export type EventGetData = {
  path: {
    /**
     * The event id
     */
    event: string;
  };
};

export type EventGetResponse = Event;

export type EventGetError = APIErrors;

export type EventDataGetData = {
  path: {
    /**
     * The event id
     */
    event: string;
  };
};

export type EventDataGetResponse = EventData;

export type EventDataGetError = APIErrors;

export type EventKeyListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type EventKeyListResponse = EventKeyList;

export type EventKeyListError = APIErrors;

export type WorkflowListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkflowListResponse = WorkflowList;

export type WorkflowListError = APIErrors;

export type WorkflowScheduledListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
    /**
     * The order by field
     */
    orderByField?: ScheduledWorkflowsOrderByField;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * A list of scheduled run statuses to filter by
     */
    statuses?: Array<ScheduledRunStatus>;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
  };
};

export type WorkflowScheduledListResponse = ScheduledWorkflowsList;

export type WorkflowScheduledListError = APIErrors;

export type WorkflowScheduledGetData = {
  path: {
    /**
     * The scheduled workflow id
     */
    scheduledId: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkflowScheduledGetResponse = ScheduledWorkflows;

export type WorkflowScheduledGetError = APIErrors;

export type WorkflowScheduledDeleteData = {
  path: {
    /**
     * The scheduled workflow id
     */
    scheduledId: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkflowScheduledDeleteResponse = void;

export type WorkflowScheduledDeleteError = APIErrors | APIError;

export type CronWorkflowListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
    /**
     * The order by field
     */
    orderByField?: CronWorkflowsOrderByField;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
  };
};

export type CronWorkflowListResponse = CronWorkflowsList;

export type CronWorkflowListError = APIErrors;

export type WorkflowRunCancelData = {
  /**
   * The input to cancel the workflow runs
   */
  body: WorkflowRunsCancelRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkflowRunCancelResponse = {
  workflowRunIds?: Array<string>;
};

export type WorkflowRunCancelError = APIErrors;

export type WorkflowGetData = {
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
};

export type WorkflowGetResponse = Workflow;

export type WorkflowGetError = APIErrors;

export type WorkflowDeleteData = {
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
};

export type WorkflowDeleteResponse = void;

export type WorkflowDeleteError = APIErrors;

export type WorkflowUpdateData = {
  /**
   * The input to update the workflow
   */
  body: WorkflowUpdateRequest;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
};

export type WorkflowUpdateResponse = Workflow;

export type WorkflowUpdateError = APIErrors;

export type WorkflowVersionGetData = {
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * The workflow version. If not supplied, the latest version is fetched.
     */
    version?: string;
  };
};

export type WorkflowVersionGetResponse = WorkflowVersion;

export type WorkflowVersionGetError = APIErrors;

export type WorkflowRunCreateData = {
  /**
   * The input to the workflow run
   */
  body: TriggerWorkflowRunRequest;
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * The workflow version. If not supplied, the latest version is fetched.
     */
    version?: string;
  };
};

export type WorkflowRunCreateResponse = WorkflowRun;

export type WorkflowRunCreateError = APIErrors;

export type WorkflowGetMetricsData = {
  path: {
    /**
     * The workflow id
     */
    workflow: string;
  };
  query?: {
    /**
     * A group key to filter metrics by
     */
    groupKey?: string;
    /**
     * A status of workflow run statuses to filter by
     */
    status?: WorkflowRunStatus;
  };
};

export type WorkflowGetMetricsResponse = WorkflowMetrics;

export type WorkflowGetMetricsError = APIErrors;

export type LogLineListData = {
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * A list of levels to filter by
     */
    levels?: LogLineLevelField;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The order direction
     */
    orderByDirection?: LogLineOrderByDirection;
    /**
     * What to order by
     */
    orderByField?: LogLineOrderByField;
    /**
     * The search query to filter for
     */
    search?: LogLineSearch;
  };
};

export type LogLineListResponse = LogLineList;

export type LogLineListError = APIErrors;

export type StepRunListEventsData = {
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
  };
};

export type StepRunListEventsResponse = StepRunEventList;

export type StepRunListEventsError = APIErrors;

export type WorkflowRunListStepRunEventsData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
  query?: {
    /**
     * Last ID of the last event
     */
    lastId?: number;
  };
};

export type WorkflowRunListStepRunEventsResponse = StepRunEventList;

export type WorkflowRunListStepRunEventsError = APIErrors;

export type StepRunListArchivesData = {
  path: {
    /**
     * The step run id
     */
    "step-run": string;
  };
  query?: {
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
  };
};

export type StepRunListArchivesResponse = StepRunArchiveList;

export type StepRunListArchivesError = APIErrors;

export type WorkflowGetWorkersCountData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow id
     */
    workflow: string;
  };
};

export type WorkflowGetWorkersCountResponse = WorkflowWorkersCount;

export type WorkflowGetWorkersCountError = APIErrors;

export type WorkflowRunListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The time after the workflow run was created
     */
    createdAfter?: string;
    /**
     * The time before the workflow run was created
     */
    createdBefore?: string;
    /**
     * The event id to get runs for.
     */
    eventId?: string;
    /**
     * The time after the workflow run was finished
     */
    finishedAfter?: string;
    /**
     * The time before the workflow run was finished
     */
    finishedBefore?: string;
    /**
     * A list of workflow kinds to filter by
     */
    kinds?: WorkflowKindList;
    /**
     * The number to limit by
     */
    limit?: number;
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The order by direction
     */
    orderByDirection?: WorkflowRunOrderByDirection;
    /**
     * The order by field
     */
    orderByField?: WorkflowRunOrderByField;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * A list of workflow run statuses to filter by
     */
    statuses?: WorkflowRunStatusList;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
  };
};

export type WorkflowRunListResponse = WorkflowRunList;

export type WorkflowRunListError = APIErrors;

export type WorkflowRunUpdateReplayData = {
  /**
   * The workflow run ids to replay
   */
  body: ReplayWorkflowRunsRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkflowRunUpdateReplayResponse = ReplayWorkflowRunsResponse;

export type WorkflowRunUpdateReplayError = APIErrors;

export type WorkflowRunGetMetricsData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * A list of metadata key value pairs to filter by
     */
    additionalMetadata?: Array<string>;
    /**
     * The time after the workflow run was created
     */
    createdAfter?: string;
    /**
     * The time before the workflow run was created
     */
    createdBefore?: string;
    /**
     * The event id to get runs for.
     */
    eventId?: string;
    /**
     * The parent step run id
     */
    parentStepRunId?: string;
    /**
     * The parent workflow run id
     */
    parentWorkflowRunId?: string;
    /**
     * The workflow id to get runs for.
     */
    workflowId?: string;
  };
};

export type WorkflowRunGetMetricsResponse = WorkflowRunsMetrics;

export type WorkflowRunGetMetricsError = APIErrors;

export type WorkflowRunGetData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
};

export type WorkflowRunGetResponse = WorkflowRun;

export type WorkflowRunGetError = APIErrors;

export type WorkflowRunGetShapeData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
};

export type WorkflowRunGetShapeResponse = WorkflowRunShape;

export type WorkflowRunGetShapeError = APIErrors;

export type StepRunGetData = {
  path: {
    /**
     * The step run id
     */
    "step-run": string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type StepRunGetResponse = StepRun;

export type StepRunGetError = APIErrors;

export type StepRunUpdateRerunData = {
  /**
   * The input to the rerun
   */
  body: RerunStepRunRequest;
  path: {
    /**
     * The step run id
     */
    "step-run": string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type StepRunUpdateRerunResponse = StepRun;

export type StepRunUpdateRerunError = APIErrors;

export type StepRunUpdateCancelData = {
  path: {
    /**
     * The step run id
     */
    "step-run": string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type StepRunUpdateCancelResponse = StepRun;

export type StepRunUpdateCancelError = APIErrors;

export type StepRunGetSchemaData = {
  path: {
    /**
     * The step run id
     */
    "step-run": string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type StepRunGetSchemaResponse = {
  [key: string]: unknown;
};

export type StepRunGetSchemaError = APIErrors;

export type WorkerListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkerListResponse = WorkerList;

export type WorkerListError = APIErrors;

export type WorkerUpdateData = {
  /**
   * The worker update
   */
  body: UpdateWorkerRequest;
  path: {
    /**
     * The worker id
     */
    worker: string;
  };
};

export type WorkerUpdateResponse = Worker;

export type WorkerUpdateError = APIErrors;

export type WorkerGetData = {
  path: {
    /**
     * The worker id
     */
    worker: string;
  };
};

export type WorkerGetResponse = Worker;

export type WorkerGetError = APIErrors;

export type WebhookListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WebhookListResponse = WebhookWorkerListResponse;

export type WebhookListError = APIErrors;

export type WebhookCreateData = {
  body?: WebhookWorkerCreateRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WebhookCreateResponse = WebhookWorkerCreated;

export type WebhookCreateError = APIErrors;

export type WebhookDeleteData = {
  path: {
    /**
     * The webhook id
     */
    webhook: string;
  };
};

export type WebhookDeleteResponse = unknown;

export type WebhookDeleteError = APIErrors;

export type WebhookRequestsListData = {
  path: {
    /**
     * The webhook id
     */
    webhook: string;
  };
};

export type WebhookRequestsListResponse = WebhookWorkerRequestListResponse;

export type WebhookRequestsListError = APIErrors;

export type WorkflowRunGetInputData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The workflow run id
     */
    "workflow-run": string;
  };
};

export type WorkflowRunGetInputResponse = {
  [key: string]: unknown;
};

export type WorkflowRunGetInputError = APIErrors;

export type WorkflowGetByNameData = {
  path: {
    /**
     * The workflow name
     */
    name: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type WorkflowGetByNameResponse = Workflow;

export type WorkflowGetByNameError = APIErrors;

export type ChatChatData = {
  body?: ChatReq;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ChatChatResponse = string;

export type ChatChatError = APIErrors | APIError;

export type ChatCallModelData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ChatCallModelResponse = string;

export type ChatCallModelError = APIErrors | APIError;

export type ChatMessagesData = {
  path: {
    /**
     * 聊天 ID
     */
    chatId: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ChatMessagesResponse = ChatMessages;

export type ChatMessagesError = unknown;

export type ChatModelsData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ChatModelsResponse = ChatModelList;

export type ChatModelsError = APIErrors | APIError;

export type ChatCompletionsData = {
  body?: ChatCompletionsReq;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ChatCompletionsResponse = {
  [key: string]: unknown;
};

export type ChatCompletionsError = APIErrors | APIError;

export type WorkerConfigResponse = WorkerConfig;

export type WorkerConfigError = unknown;

export type MtmaiBloggenconfigResponse = BlogGenConfig;

export type MtmaiBloggenconfigError = unknown;

export type MtmaiWorkerConfigResponse = {
  /**
   * token
   */
  token?: string;
};

export type MtmaiWorkerConfigError = unknown;

export type BlogListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type BlogListResponse = BlogList;

export type BlogListError = unknown;

export type BlogCreateData = {
  /**
   * 创建博客
   */
  body: CreateBlogRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type BlogCreateResponse = Blog;

export type BlogCreateError = APIErrors | APIError;

export type BlogGetData = {
  path: {
    /**
     * The blog id
     */
    blog: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type BlogGetResponse = Blog;

export type BlogGetError = APIErrors;

export type BlogUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateBlogRequest;
  path: {
    /**
     * The blog id
     */
    blog: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type BlogUpdateResponse = Blog;

export type BlogUpdateError = APIErrors | APIError;

export type SiteListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SiteListResponse = SiteList;

export type SiteListError = APIErrors;

export type SiteCreateData = {
  /**
   * 创建agentnode
   */
  body: CreateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type SiteCreateResponse = Site;

export type SiteCreateError = APIErrors | APIError;

export type SiteGetData = {
  path: {
    /**
     * The site id
     */
    site: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SiteGetResponse = Site;

export type SiteGetError = APIErrors;

export type SiteGetByHostData = {
  path: {
    /**
     * host name
     */
    host: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SiteGetByHostResponse = Site;

export type SiteGetByHostError = APIErrors;

export type PostListPublicData = unknown;

export type PostListPublicResponse = PostList;

export type PostListPublicError = APIErrors;

export type PostGetData = {
  path: {
    /**
     * The post id
     */
    post: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type PostGetResponse = Post;

export type PostGetError = APIErrors;

export type PostListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type PostListResponse = PostList;

export type PostListError = APIErrors;

export type PostCreateData = {
  body: CreatePostRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type PostCreateResponse = Post;

export type PostCreateError = APIErrors | APIError;

export type ToolCallData = {
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The tool name
     */
    tool: string;
  };
};

export type ToolCallResponse = ToolCallResult;

export type ToolCallError = unknown;

export type ToolsOperationGuideData = {
  query: {
    /**
     * operation name
     */
    operation: string;
  };
};

export type ToolsOperationGuideResponse = OperataionGuideResponse;

export type ToolsOperationGuideError = unknown;

export type ToolsWebsearchData = {
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type ToolsWebsearchResponse = WebSearchResult;

export type ToolsWebsearchError = unknown;

export type ArtifactListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ArtifactListResponse = ArtifactList;

export type ArtifactListError = unknown;

export type ArtifactCreateData = {
  /**
   * 创建artifact
   */
  body: CreateArtifacttRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ArtifactCreateResponse = Artifact;

export type ArtifactCreateError = APIErrors | APIError;

export type ArtifactGetData = {
  path: {
    /**
     * The tenant id
     */
    artifact: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type ArtifactGetResponse = Artifact;

export type ArtifactGetError = APIErrors;

export type AgentNodeListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type AgentNodeListResponse = AgentNodeList;

export type AgentNodeListError = unknown;

export type AgentCreateData = {
  /**
   * 创建agentnode
   */
  body: AgentNodeCreateRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type AgentCreateResponse = AgentNode;

export type AgentCreateError = APIErrors | APIError;

export type AgentNodeData = {
  path: {
    /**
     * The node id
     */
    node: string;
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type AgentNodeResponse = AgentNode;

export type AgentNodeError = unknown;

export type AgentNodeUpdateData = {
  /**
   * 创建agentnode
   */
  body: AgentNodeUpdateRequest;
  path: {
    /**
     * The node id
     */
    node: string;
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type AgentNodeUpdateResponse = AgentNode;

export type AgentNodeUpdateError = APIErrors | APIError;

export type AgentNodeRunData = {
  /**
   * 创建agentnode
   */
  body: AgentNodeRunRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type AgentNodeRunResponse = AgentNodeRun;

export type AgentNodeRunError = APIErrors | APIError;

export type AgentNodeFormData = {
  path: {
    /**
     * The node id
     */
    node: string;
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type AgentNodeFormResponse = AgentRunForm;

export type AgentNodeFormError = APIErrors | APIError;

export type LlmGetData = {
  /**
   * 获取LLM
   */
  body: AgentNodeRunRequest;
  path: {
    /**
     * The slug
     */
    slug: string;
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
};

export type LlmGetResponse = LlmConfig;

export type LlmGetError = APIErrors | APIError;

export type DocListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type DocListResponse = Document;

export type DocListError = unknown;

export type PromptListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type PromptListResponse = PromptList;

export type PromptListError = unknown;

export type PromptGetData = {
  path: {
    /**
     * The prompt id
     */
    prompt: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type PromptGetResponse = string;

export type PromptGetError = APIErrors | APIError | unknown;

export type AssisantListData = {
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type AssisantListResponse = PromptList;

export type AssisantListError = unknown;

export type AssisantGetData = {
  path: {
    /**
     * The assisant id
     */
    assisant: string;
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type AssisantGetResponse = Assisant;

export type AssisantGetError = unknown;

export type SubscribeSubscribeData = {
  body?: SubscribeRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
};

export type SubscribeSubscribeResponse = string;

export type SubscribeSubscribeError = APIErrors | APIError;

export type AdminSeedResponse = CommonResult;

export type AdminSeedError = unknown;

export type AdminReleaseConnResponse = CommonResult;

export type AdminReleaseConnError = APIErrors;

export type FrontendGetConfigResponse = FrontendConfig;

export type FrontendGetConfigError = unknown;

export type FrontendGetSiderbarResponse = SiderbarConfig;

export type FrontendGetSiderbarError = unknown;
