// This file is auto-generated by @hey-api/openapi-ts

export type ApiMeta = {
  auth?: ApiMetaAuth;
  /**
   * the Pylon app ID for usepylon.com chat support
   */
  pylonAppId?: string;
  posthog?: ApiMetaPosthog;
  /**
   * whether or not users can sign up for this instance
   */
  allowSignup?: boolean;
  /**
   * whether or not users can invite other users to this instance
   */
  allowInvites?: boolean;
  /**
   * whether or not users can create new tenants
   */
  allowCreateTenant?: boolean;
  /**
   * whether or not users can change their password
   */
  allowChangePassword?: boolean;
};

export type ApiMetaAuth = {
  /**
   * the supported types of authentication
   */
  schemes?: Array<string>;
};

export type ApiMetaPosthog = {
  /**
   * the PostHog API key
   */
  apiKey?: string;
  /**
   * the PostHog API host
   */
  apiHost?: string;
};

export type ListApiMetaIntegration = Array<ApiMetaIntegration>;

export type ApiMetaIntegration = {
  /**
   * the name of the integration
   */
  name: string;
  /**
   * whether this integration is enabled on the instance
   */
  enabled: boolean;
};

export type ApiErrors = {
  errors: Array<ApiError>;
};

export type ApiError = {
  /**
   * a custom Hatchet error code
   */
  code?: number;
  /**
   * the field that this error is associated with, if applicable
   */
  field?: string;
  /**
   * a description for this error
   */
  description: string;
  /**
   * a link to the documentation for this error, if it exists
   */
  docs_link?: string;
};

export type PaginationResponse = {
  /**
   * the current page
   */
  current_page?: number;
  /**
   * the next page
   */
  next_page?: number;
  /**
   * the total number of pages for listing
   */
  num_pages?: number;
};

export type ApiResourceMeta = {
  /**
   * the id of this resource, in UUID format
   */
  id: string;
  /**
   * the time that this resource was created
   */
  createdAt: string;
  /**
   * the time that this resource was last updated
   */
  updatedAt: string;
};

export type ApiResourceMetaProperties = {
  metadata: ApiResourceMeta;
};

export type TenantParameter = string;

export type User = {
  metadata: ApiResourceMeta;
  /**
   * The display name of the user.
   */
  name?: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * Whether the user has verified their email address.
   */
  emailVerified: boolean;
  /**
   * Whether the user has a password set.
   */
  hasPassword?: boolean;
  /**
   * A hash of the user's email address for use with Pylon Support Chat
   */
  emailHash?: string;
  /**
   * The user's token for use with Pylon Support Chat
   */
  userToken: string;
};

export type UserTenantPublic = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The display name of the user.
   */
  name?: string;
};

export type UserLoginRequest = {
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserChangePasswordRequest = {
  /**
   * The password of the user.
   */
  password: string;
  /**
   * The new password for the user.
   */
  newPassword: string;
};

export type UserRegisterRequest = {
  /**
   * The name of the user.
   */
  name: string;
  /**
   * The email address of the user.
   */
  email: string;
  /**
   * The password of the user.
   */
  password: string;
};

export type UserTenantMembershipsList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type Tenant = {
  metadata: ApiResourceMeta;
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
};

export type TenantMember = {
  metadata: ApiResourceMeta;
  /**
   * The user associated with this tenant member.
   */
  user: UserTenantPublic;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant associated with this tenant member.
   */
  tenant?: Tenant;
};

export type TenantMemberList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantMember>;
};

export type TenantMemberRole = "OWNER" | "ADMIN" | "MEMBER";

export const TenantMemberRole = {
  OWNER: "OWNER",
  ADMIN: "ADMIN",
  MEMBER: "MEMBER",
} as const;

export type TenantResource =
  | "WORKER"
  | "WORKER_SLOT"
  | "EVENT"
  | "WORKFLOW_RUN"
  | "TASK_RUN"
  | "CRON"
  | "SCHEDULE";

export const TenantResource = {
  WORKER: "WORKER",
  WORKER_SLOT: "WORKER_SLOT",
  EVENT: "EVENT",
  WORKFLOW_RUN: "WORKFLOW_RUN",
  TASK_RUN: "TASK_RUN",
  CRON: "CRON",
  SCHEDULE: "SCHEDULE",
} as const;

export type TenantResourceLimit = {
  metadata: ApiResourceMeta;
  /**
   * The resource associated with this limit.
   */
  resource: TenantResource;
  /**
   * The limit associated with this limit.
   */
  limitValue: number;
  /**
   * The alarm value associated with this limit to warn of approaching limit value.
   */
  alarmValue?: number;
  /**
   * The current value associated with this limit.
   */
  value: number;
  /**
   * The meter window for the limit. (i.e. 1 day, 1 week, 1 month)
   */
  window?: string;
  /**
   * The last time the limit was refilled.
   */
  lastRefill?: string;
};

export type TenantResourcePolicy = {
  /**
   * A list of resource limits for the tenant.
   */
  limits: Array<TenantResourceLimit>;
};

export type CreateTenantInviteRequest = {
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type UpdateTenantInviteRequest = {
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
};

export type TenantAlertingSettings = {
  metadata: ApiResourceMeta;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency: string;
  /**
   * The last time an alert was sent.
   */
  lastAlertedAt?: string;
};

export type TenantAlertEmailGroup = {
  metadata: ApiResourceMeta;
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantAlertEmailGroupList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantAlertEmailGroup>;
};

export type CreateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type UpdateTenantAlertEmailGroupRequest = {
  /**
   * A list of emails for users
   */
  emails: Array<string>;
};

export type TenantInvite = {
  metadata: ApiResourceMeta;
  /**
   * The email of the user to invite.
   */
  email: string;
  /**
   * The role of the user in the tenant.
   */
  role: TenantMemberRole;
  /**
   * The tenant id associated with this tenant invite.
   */
  tenantId: string;
  /**
   * The tenant name for the tenant.
   */
  tenantName?: string;
  /**
   * The time that this invite expires.
   */
  expires: string;
};

export type TenantInviteList = {
  pagination?: PaginationResponse;
  rows?: Array<TenantInvite>;
};

export type QueueMetrics = {
  /**
   * The number of items in the queue.
   */
  numQueued: number;
  /**
   * The number of items running.
   */
  numRunning: number;
  /**
   * The number of items pending.
   */
  numPending: number;
};

export type TenantQueueMetrics = {
  /**
   * The total queue metrics.
   */
  total?: QueueMetrics;
  workflow?: {
    [key: string]: QueueMetrics;
  };
  queues?: {
    [key: string]: number;
  };
};

export type TenantStepRunQueueMetrics = {
  queues?: {
    [key: string]: unknown;
  };
};

export type AcceptInviteRequest = {
  invite: string;
};

export type RejectInviteRequest = {
  invite: string;
};

export type TenantList = {
  pagination?: PaginationResponse;
  rows?: Array<Tenant>;
};

export type CreateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name: string;
  /**
   * The slug of the tenant.
   */
  slug: string;
};

export type UpdateTenantRequest = {
  /**
   * The name of the tenant.
   */
  name?: string;
  /**
   * Whether the tenant has opted out of analytics.
   */
  analyticsOptOut?: boolean;
  /**
   * Whether to alert tenant members.
   */
  alertMemberEmails?: boolean;
  /**
   * Whether to send alerts when workflow runs fail.
   */
  enableWorkflowRunFailureAlerts?: boolean;
  /**
   * Whether to enable alerts when tokens are approaching expiration.
   */
  enableExpiringTokenAlerts?: boolean;
  /**
   * Whether to enable alerts when tenant resources are approaching limits.
   */
  enableTenantResourceLimitAlerts?: boolean;
  /**
   * The max frequency at which to alert.
   */
  maxAlertingFrequency?: string;
  /**
   * The version of the tenant.
   */
  version?: "V0" | "V1";
};

export type ApiToken = {
  metadata: ApiResourceMeta;
  /**
   * The name of the API token.
   */
  name: string;
  /**
   * When the API token expires.
   */
  expiresAt: string;
};

export type CreateApiTokenRequest = {
  /**
   * A name for the API token.
   */
  name: string;
  /**
   * The duration for which the token is valid.
   */
  expiresIn?: string;
};

export type CreateApiTokenResponse = {
  /**
   * The API token.
   */
  token: string;
};

export type ListApiTokensResponse = {
  pagination?: PaginationResponse;
  rows?: Array<ApiToken>;
};

export type LogLine = {
  /**
   * The creation date of the log line.
   */
  createdAt: string;
  /**
   * The log message.
   */
  message: string;
  /**
   * The log metadata.
   */
  metadata: {
    [key: string]: unknown;
  };
};

export type LogLineLevel = "DEBUG" | "INFO" | "WARN" | "ERROR";

export const LogLineLevel = {
  DEBUG: "DEBUG",
  INFO: "INFO",
  WARN: "WARN",
  ERROR: "ERROR",
} as const;

export type LogLineList = {
  pagination?: PaginationResponse;
  rows?: Array<LogLine>;
};

export type PlatformProperties = {
  /**
   * UUID of the platform
   */
  id: string;
  /**
   * Name of the platform
   */
  name: string;
  /**
   * URL of the platform
   */
  url?: string;
  /**
   * Description of the platform
   */
  description?: string;
  /**
   * Login URL for the platform
   */
  loginUrl?: string;
  /**
   * Tags for categorizing the platform
   */
  tags?: Array<string>;
};

export type Platform = ApiResourceMetaProperties & PlatformProperties;

export type PlatformList = {
  pagination: PaginationResponse;
  rows: Array<Platform>;
};

export type PlatformCreate = PlatformProperties;

export type PlatformUpdate = ApiResourceMeta & PlatformProperties;

export type PAccountProperties = {
  /**
   * UUID of the account
   */
  id: string;
  /**
   * Username for the platform account
   */
  username: string;
  /**
   * Password for the platform account
   */
  password: string;
  /**
   * Email for the platform account
   */
  email: string;
  /**
   * Whether the account is enabled
   */
  enabled: boolean;
  /**
   * UUID of the platform this account belongs to
   */
  platformId: string;
  /**
   * Display name for the account
   */
  name?: string;
  /**
   * Description of the account
   */
  description?: string;
  /**
   * Type or category of the account
   */
  type?: string;
  /**
   * Authentication token if applicable
   */
  token?: string;
  /**
   * OTP seed for two-factor authentication
   */
  otpSeed?: string;
  /**
   * Tags for categorizing the account
   */
  tags?: Array<string>;
  /**
   * Additional notes or comments about the account
   */
  comment?: string;
  /**
   * Additional state data for the account
   */
  state?: {
    [key: string]: unknown;
  };
};

export type PAccount = ApiResourceMetaProperties &
  PAccountProperties & {
    platform?: Platform;
  };

export type PAccountList = {
  pagination: PaginationResponse;
  rows: Array<PAccount>;
};

export type PAccountCreate = {
  /**
   * Username for the platform account
   */
  username: string;
  /**
   * Password for the platform account
   */
  password: string;
  /**
   * Email for the platform account
   */
  email: string;
  /**
   * Whether the account is enabled
   */
  enabled?: boolean;
  /**
   * UUID of the platform this account belongs to
   */
  platformId: string;
  /**
   * Display name for the account
   */
  name?: string;
  /**
   * Additional notes or comments about the account
   */
  comment?: string;
  /**
   * Tags for categorizing the account
   */
  tags?: Array<string>;
};

/**
 * A proxy server
 */
export type Proxy = {
  /**
   * The unique identifier of the proxy
   */
  id: string;
  /**
   * The name of the proxy
   */
  name: string;
  /**
   * The description of the proxy
   */
  description?: string;
  /**
   * The URL of the proxy
   */
  url: string;
  /**
   * The type of the proxy (e.g., HTTP, SOCKS5)
   */
  type: string;
  /**
   * The provider of the proxy
   */
  provider: string;
  /**
   * The country code where the proxy is located
   */
  countryCode?: string;
  /**
   * The port number of the proxy
   */
  port?: number;
  /**
   * The last time the proxy was used
   */
  lastUsedAt?: string;
  /**
   * Whether the proxy is enabled
   */
  enabled: boolean;
  /**
   * The time the proxy was created
   */
  createdAt?: string;
  /**
   * The last time the proxy was updated
   */
  updatedAt?: string;
};

/**
 * Parameters for creating a proxy
 */
export type ProxyCreate = {
  /**
   * The name of the proxy
   */
  name: string;
  /**
   * The description of the proxy
   */
  description?: string;
  /**
   * The URL of the proxy
   */
  url: string;
  /**
   * The type of the proxy (e.g., HTTP, SOCKS5)
   */
  type: string;
  /**
   * The provider of the proxy
   */
  provider?: string;
  /**
   * The country code where the proxy is located
   */
  countryCode?: string;
  /**
   * The port number of the proxy
   */
  port?: number;
  /**
   * Whether the proxy is enabled
   */
  enabled?: boolean;
};

/**
 * Parameters for updating a proxy
 */
export type ProxyUpdate = {
  /**
   * The name of the proxy
   */
  name?: string;
  /**
   * The description of the proxy
   */
  description?: string;
  /**
   * The URL of the proxy
   */
  url?: string;
  /**
   * The type of the proxy (e.g., HTTP, SOCKS5)
   */
  type?: string;
  /**
   * The provider of the proxy
   */
  provider?: string;
  /**
   * The country code where the proxy is located
   */
  countryCode?: string;
  /**
   * The port number of the proxy
   */
  port?: number;
  /**
   * Whether the proxy is enabled
   */
  enabled?: boolean;
};

export type ProxyList = {
  pagination?: PaginationResponse;
  rows?: Array<Proxy>;
};

export type Album = {
  metadata: ApiResourceMeta;
  /**
   * The name of the album
   */
  name: string;
  /**
   * The description of the album
   */
  description?: string;
  /**
   * The ID of the cover photo for this album
   */
  coverPhotoId?: string;
};

export type AlbumList = {
  pagination?: PaginationResponse;
  rows?: Array<Album>;
};

export type CreateAlbumRequest = {
  /**
   * The name of the album
   */
  name: string;
  /**
   * The description of the album
   */
  description?: string;
  /**
   * The ID of the cover photo for this album
   */
  coverPhotoId?: string;
};

export type UpdateAlbumRequest = {
  /**
   * The name of the album
   */
  name?: string;
  /**
   * The description of the album
   */
  description?: string;
  /**
   * The ID of the cover photo for this album
   */
  coverPhotoId?: string;
};

export type Photo = {
  metadata: ApiResourceMeta;
  /**
   * The filename of the photo
   */
  filename: string;
  /**
   * The ID of the album this photo belongs to
   */
  albumId: string;
  /**
   * The URL to access the photo
   */
  url: string;
  /**
   * The URL to access the thumbnail of the photo
   */
  thumbnailUrl: string;
  /**
   * The description of the photo
   */
  description?: string;
  /**
   * The date and time when the photo was taken
   */
  takenAt?: string;
};

export type PhotoList = {
  pagination?: PaginationResponse;
  rows?: Array<Photo>;
};

export type UploadPhotoRequest = {
  /**
   * The ID of the album this photo belongs to
   */
  albumId: string;
  /**
   * The description of the photo
   */
  description?: string;
};

export type UpdatePhotoRequest = {
  /**
   * The description of the photo
   */
  description?: string;
  /**
   * The ID of the album this photo belongs to
   */
  albumId?: string;
};

export type CommonResult = {
  Success: boolean;
  Message: string;
  other?: ActionRegisterInstagram;
};

export type FrontendConfig = {
  /**
   * Cookie access token
   */
  cookieAccessToken: string;
  /**
   * Dashboard path
   */
  dashPath: string;
  /**
   * Hot key debug
   */
  hotKeyDebug: string;
  /**
   * 实验性质，默认租户的access token
   */
  defaultTenantAccessToken: string;
};

export type SiderbarConfig = {
  /**
   * logo
   */
  logo?: string;
  sideritems?: Array<DashSidebarItem>;
  other?:
    | FlowNames
    | AgentEventType
    | PlatformAccountList
    | Content
    | Part
    | AdkSessionList
    | AgentRunnerInput
    | AgentRunnerOutput;
};

export type DashSidebarItem = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 默认展开
   */
  defaultExpanded?: boolean;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
  children?: Array<DashSidebarItemLeaf>;
};

export type DashSidebarItemLeaf = {
  /**
   * 名称
   */
  title: string;
  /**
   * url 例如/login
   */
  url: string;
  /**
   * 图标
   */
  icon?: string;
  /**
   * 只允许超级管理员查看
   */
  adminOnly?: boolean;
};

export type Model = ApiResourceMetaProperties & ModelProperties;

export type ModelFamily = "r1" | "openai" | "unknown";

export const ModelFamily = {
  R1: "r1",
  OPENAI: "openai",
  UNKNOWN: "unknown",
} as const;

export type ModelTypes = "OpenAIChatCompletionClient" | "AzureOpenAIChatCompletionClient";

export const ModelTypes = {
  OPEN_AI_CHAT_COMPLETION_CLIENT: "OpenAIChatCompletionClient",
  AZURE_OPEN_AI_CHAT_COMPLETION_CLIENT: "AzureOpenAIChatCompletionClient",
} as const;

export type ModelProperties = {
  name: string;
  model: string;
  provider: string;
  apiKey: string;
  apiBase: string;
  vendor: string;
  description?: string;
  family: string;
  vision: boolean;
  functionCalling: boolean;
  jsonOutput: boolean;
  tags?: Array<string>;
};

export type ModelList = {
  pagination?: PaginationResponse;
  rows?: Array<Model>;
};

export type FormField = {
  type: "text" | "number" | "boolean" | "array" | "object";
  name: string;
  default_value?: string;
  label?: string;
  description?: string;
  required?: boolean;
  min?: number;
  max?: number;
  placeholder?: string;
};

export type SchemaForm = {
  form_type?: "schema" | "custom";
  form_name?: string;
  title: string;
  description?: string;
  layout?: "vertical" | "horizontal";
  fields: Array<FormField>;
};

export type ModelRunProperties = {
  llmMessages?: {
    [key: string]: string;
  };
  llmResponse?: {
    [key: string]: string;
  };
};

export type ModelRun = ApiResourceMetaProperties & ModelRunProperties;

export type ModelRunList = {
  pagination?: PaginationResponse;
  rows?: Array<ModelRun>;
};

export type ModelRunUpsert = ModelRunProperties;

export type SiteProperties = {
  /**
   * 站点ID
   */
  id: string;
  /**
   * 租户ID
   */
  tenant_id: string;
  /**
   * 更新时间
   */
  updated_at?: string;
  /**
   * 创建时间
   */
  created_at?: string;
  /**
   * 是否启用
   */
  enabled: boolean;
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
  /**
   * 是否启用自动化
   */
  automation_enabled: boolean;
  /**
   * 站点状态
   */
  state: {
    /**
     * 站点状态
     */
    status?: string;
  };
};

export type Site = SiteProperties;

export type SiteList = {
  pagination?: PaginationResponse;
  rows?: Array<Site>;
};

export type CreateSiteRequest = {
  /**
   * site 标题
   */
  title: string;
  /**
   * site 描述
   */
  description: string;
  /**
   * 入站域名(指定绑定入站域名)
   */
  host?: string;
};

export type CreateSiteResponse = Site;

export type UpdateSiteRequest = {
  /**
   * site 标题
   */
  title?: string;
};

export type SiteHostProperties = {
  /**
   * site-host id
   */
  id: string;
  /**
   * site-host 标题
   */
  title?: string;
  /**
   * site-host 描述
   */
  description?: string;
  /**
   * 绑定域名
   */
  host: string;
};

export type SiteHost = SiteHostProperties;

export type SiteHostList = {
  pagination?: PaginationResponse;
  rows?: Array<SiteHost>;
};

export type CreateSiteHostRequest = SiteHostProperties;

export type UpdateSiteHostRequest = SiteHost;

export type UpdateEndpointRequest = {
  name?: string;
  url?: string;
  token?: string;
};

export type Endpoint = {
  metadata: ApiResourceMeta;
  name: string;
  url: string;
  token: string;
  type: string;
};

export type EndpointList = {
  pagination?: PaginationResponse;
  rows?: Array<Endpoint>;
};

export type MtWorkerProperties = {
  id?: string;
  name?: string;
};

export type MtWorkerTask = {
  id?: string;
  name?: string;
};

export type AgentEventType =
  | "ThoughtEvent"
  | "TextMessage"
  | "PlatformAccountFlowInput"
  | "ChatMessageInput"
  | "SocialAddFollowersInput"
  | "SocialLoginInput"
  | "TenantInitInput"
  | "AskUserFunctionCallInput"
  | "StartNewChatInput";

export const AgentEventType = {
  THOUGHT_EVENT: "ThoughtEvent",
  TEXT_MESSAGE: "TextMessage",
  PLATFORM_ACCOUNT_FLOW_INPUT: "PlatformAccountFlowInput",
  CHAT_MESSAGE_INPUT: "ChatMessageInput",
  SOCIAL_ADD_FOLLOWERS_INPUT: "SocialAddFollowersInput",
  SOCIAL_LOGIN_INPUT: "SocialLoginInput",
  TENANT_INIT_INPUT: "TenantInitInput",
  ASK_USER_FUNCTION_CALL_INPUT: "AskUserFunctionCallInput",
  START_NEW_CHAT_INPUT: "StartNewChatInput",
} as const;

export type FlowNames =
  | "sys"
  | "tenant"
  | "assistant"
  | "ag"
  | "browser"
  | "resource"
  | "instagram"
  | "social"
  | "team"
  | "adk";

export const FlowNames = {
  SYS: "sys",
  TENANT: "tenant",
  ASSISTANT: "assistant",
  AG: "ag",
  BROWSER: "browser",
  RESOURCE: "resource",
  INSTAGRAM: "instagram",
  SOCIAL: "social",
  TEAM: "team",
  ADK: "adk",
} as const;

export type AgentRunnerInput = {
  content?: string;
};

export type AgentRunnerOutput = {
  content?: string;
};

export type AgentProperties = {
  name: string;
  description: string;
  provider: string;
  config: {
    [key: string]: unknown;
  };
  teamId: string;
};

export type Agent = ApiResourceMetaProperties & AgentProperties;

export type AgentList = {
  pagination?: PaginationResponse;
  rows?: Array<Agent>;
};

export type AgentTopicTypes =
  | "user"
  | "human"
  | "instagram"
  | "browser"
  | "socioety"
  | "code"
  | "router"
  | "research"
  | "writer"
  | "tenant"
  | "closure"
  | "response";

export const AgentTopicTypes = {
  USER: "user",
  HUMAN: "human",
  INSTAGRAM: "instagram",
  BROWSER: "browser",
  SOCIOETY: "socioety",
  CODE: "code",
  ROUTER: "router",
  RESEARCH: "research",
  WRITER: "writer",
  TENANT: "tenant",
  CLOSURE: "closure",
  RESPONSE: "response",
} as const;

/**
 * 浏览器(browser use)任务
 */
export type BrowserTask = {
  content: string;
};

/**
 * 打开浏览器备用,一般用于调试目的Open a browser and navigate to a URL.
 */
export type BrowserOpenTask = {
  url: string;
};

/**
 * 浏览器配置(未完成)
 */
export type BrowserConfig = {
  persistent?: boolean;
};

export type ScheduledItem = {
  id: string;
  type: "cron" | "scheduled" | "delayed";
  trigger: string;
  nextTrigger: string;
  description: string;
};

export type AdkSessionState = {
  type?: "RootAgentState";
};

export type ToolTypes = "code_executor" | "social_login";

export const ToolTypes = {
  CODE_EXECUTOR: "code_executor",
  SOCIAL_LOGIN: "social_login",
} as const;

export type CodeExecutionInput = {
  /**
   * The contents of the Python code block that should be executed
   */
  code: string;
};

export type CodeExecutionResult = {
  /**
   * The result of the code execution
   */
  output: string;
  /**
   * Whether the code execution was successful
   */
  success: boolean;
};

export type SocialLoginResult = {
  /**
   * Whether the social login was successful
   */
  success: boolean;
};

export type PlatformAccountProperties = {
  label?: string;
  description?: string;
  username: string;
  email?: string;
  password: string;
  token?: string;
  type?: string;
  platform: string;
  enabled?: boolean;
  tags?: Array<string>;
  state?: {
    [key: string]: unknown;
  };
  error?: string;
};

export type PlatformAccount = ApiResourceMetaProperties & PlatformAccountProperties;

export type PlatformAccountList = {
  pagination?: PaginationResponse;
  rows?: Array<PlatformAccount>;
};

export type PlatformAccountUpsert = PlatformAccountProperties;

export type AdkEventProperties = {
  id: string;
  app_name: string;
  user_id: string;
  session_id: string;
  invocation_id: string;
  author: string;
  branch?: string;
  timestamp: string;
  content: Content;
  actions: {
    [key: string]: unknown;
  };
};

export type AdkEventList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkEvent>;
};

export type AdkEvent = ApiResourceMetaProperties & AdkEventProperties;

export type AdkEventUpsert = AdkEventProperties;

export type AdkEventOrderByField = "createdAt";

export const AdkEventOrderByField = {
  CREATED_AT: "createdAt",
} as const;

export type AdkAppProperties = {
  id: string;
  app_name: string;
  user_id: string;
  session_id: string;
  invocation_id: string;
  author: string;
  branch: string;
  timestamp: string;
  content: {
    [key: string]: unknown;
  };
  actions: {
    [key: string]: unknown;
  };
};

export type AdkAppList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkApp>;
};

export type AdkApp = ApiResourceMetaProperties & AdkAppProperties;

export type AdkAppUpsert = AdkAppProperties;

export type AdkAppTypes = "root" | "instagram_agent" | "assistant" | "open_deep_research";

export const AdkAppTypes = {
  ROOT: "root",
  INSTAGRAM_AGENT: "instagram_agent",
  ASSISTANT: "assistant",
  OPEN_DEEP_RESEARCH: "open_deep_research",
} as const;

export type AdkSessionProperties = {
  id: string;
  app_name: string;
  user_id: string;
  state: AdkSessionState;
  title?: string;
  create_time: string;
  update_time: string;
};

export type AdkSession = ApiResourceMetaProperties & AdkSessionProperties;

export type AdkSessionList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkSession>;
};

export type AdkSessionUpsert = AdkSessionProperties;

export type AdkUserStateProperties = {
  id: string;
  app_name: string;
  user_id: string;
  session_id: string;
  invocation_id: string;
  author: string;
  branch: string;
  timestamp: string;
  content: {
    [key: string]: unknown;
  };
  actions: {
    [key: string]: unknown;
  };
};

export type AdkUserState = ApiResourceMetaProperties & AdkUserStateProperties;

export type AdkUserStateList = {
  pagination?: PaginationResponse;
  rows?: Array<AdkUserState>;
};

export type AdkUserStateUpsert = AdkUserStateProperties;

export type Content = {
  role?: string;
  parts?: Array<Part>;
};

export type UserContent = {
  role: "user";
  parts: Array<Part>;
};

export type ModelContent = {
  role: "model";
  parts: Array<Part>;
};

export type Part = {
  /**
   * Optional. Text part (can be code)..
   */
  text?: string;
  /**
   * Metadata for a given video..
   */
  video_metadata?: {
    [key: string]: unknown;
  };
  /**
   * Indicates if the part is thought from the model..
   */
  thought?: boolean;
  code_execution_result?: {
    [key: string]: unknown;
  };
  /**
   * Optional. Executable code..
   */
  executable_code?: string;
  /**
   * Optional. File data..
   */
  file_data?: {
    [key: string]: unknown;
  };
  function_call?: {
    [key: string]: unknown;
  };
  function_response?: {
    [key: string]: unknown;
  };
  /**
   * Optional. Inlined bytes data..
   */
  inline_data?: {
    [key: string]: unknown;
  };
};

export type FunctionResponse = {
  /**
   * The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.
   */
  id?: string;
  /**
   * The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].
   */
  name: string;
  /**
   * Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.
   */
  response: {
    [key: string]: unknown;
  };
};

export type Artifact = {
  /**
   * The artifact id.
   */
  id: string;
  /**
   * The artifact created at.
   */
  created_at: string;
  /**
   * The artifact updated at.
   */
  updated_at: string;
  /**
   * The artifact tenant id.
   */
  tenant_id: string;
  user_id: string;
  version: number;
  session_id: string;
  app_name: string;
  filename: string;
  mime_type?: string;
  /**
   * The artifact content.
   */
  content: Blob | File;
};

export type ArtifactList = {
  pagination?: PaginationResponse;
  rows?: Array<Artifact>;
};

export type SaveArtifactRequest = {
  app_name: string;
  user_id: string;
  session_id?: string;
  filename?: string;
  content?: string;
};

export type Post = {
  metadata: ApiResourceMeta;
  title: string;
  /**
   * The tenant associated with this tenant blog
   */
  content: string;
};

export type PostList = {
  pagination?: PaginationResponse;
  rows?: Array<Post>;
};

export type CreatePostRequest = {
  siteId: string;
  title: string;
  /**
   * The tenant associated with this tenant blog.
   */
  content: string;
  /**
   * The slug of the post
   */
  slug: string;
  authorId?: string;
  status?: "draft" | "published";
};

export type Sandbox = {
  id: string;
  type: string;
  url: string;
};

export type Bot = {
  id: string;
  created_at: string;
  updated_at: string;
  name: string;
  description: string;
  config: BotConfig;
};

export type BotList = {
  pagination: PaginationResponse;
  rows: Array<Bot>;
};

export type BotConfig = {
  public_server: string;
  private_server: string;
  frontend_url: string;
  local_http_server_enabled: boolean;
  local_http_server_port: number;
  adb_server_enabled: boolean;
  adb_server_port?: number;
  hatchet_token: string;
};

export type BotLocalState = {
  bot_id: string;
  device_type: "unknown" | "android" | "ios" | "web";
  host_name: string;
};

export type SbWorkerProfile = {
  frontendUrl: string;
  isDebug: boolean;
  autoStart: boolean;
  defaultProfileName: string;
  defaultProfileUrl: string;
};

/**
 * Sing-box outbound configuration
 */
export type SbOutbound = {
  /**
   * Unique identifier
   */
  id?: string;
  /**
   * Tag name for this outbound
   */
  tag?: string;
  /**
   * Type of outbound protocol
   */
  type?: string;
  /**
   * Server address
   */
  server?: string;
  /**
   * Server port number
   */
  server_port?: number;
  /**
   * Authentication password
   */
  password?: string;
  /**
   * Security protocol
   */
  security?: string;
  /**
   * Domain resolver configuration
   */
  domain_resolver?: string;
  /**
   * Complete configuration in JSON format
   */
  full_config?: {
    [key: string]: unknown;
  };
  /**
   * Creation timestamp
   */
  created_at?: string;
  /**
   * Last update timestamp
   */
  updated_at?: string;
};

/**
 * List of sing-box outbounds
 */
export type SbOutboundList = {
  outbounds?: Array<SbOutbound>;
};

/**
 * Create a new sing-box outbound
 */
export type SbOutboundCreate = {
  /**
   * Tag name for this outbound
   */
  tag: string;
  /**
   * Type of outbound protocol
   */
  type: string;
  /**
   * Server address
   */
  server: string;
  /**
   * Server port number
   */
  server_port: number;
  /**
   * Authentication password
   */
  password?: string;
  /**
   * Security protocol
   */
  security?: string;
  /**
   * Domain resolver configuration
   */
  domain_resolver?: string;
  /**
   * Complete configuration in JSON format
   */
  full_config: {
    [key: string]: unknown;
  };
};

export type SbImportRequest = {
  url: string;
};

export type MobileHello = {
  message?: string;
};

export type Event = {
  /**
   * The key for the event.
   */
  key: string;
  /**
   * The input for the event.
   */
  input?: {
    [key: string]: unknown;
  };
  /**
   * Additional metadata for the event.
   */
  additionalMetadata: {
    [key: string]: unknown;
  };
};

export type PushEventResponse = {
  /**
   * Whether the workflow was triggered successfully
   */
  success: boolean;
  /**
   * The error message if the workflow was not triggered successfully
   */
  error: {
    [key: string]: unknown;
  };
};

/**
 * (临时演示)注册Instagram账号
 */
export type ActionRegisterInstagram = {
  arg1: string;
};

export type SlackWebhook = {
  metadata: ApiResourceMeta;
  /**
   * The unique identifier for the tenant that the SNS integration belongs to.
   */
  tenantId: string;
  /**
   * The team name associated with this slack webhook.
   */
  teamName: string;
  /**
   * The team id associated with this slack webhook.
   */
  teamId: string;
  /**
   * The channel name associated with this slack webhook.
   */
  channelName: string;
  /**
   * The channel id associated with this slack webhook.
   */
  channelId: string;
};

export type ListSlackWebhooks = {
  pagination: PaginationResponse;
  rows: Array<SlackWebhook>;
};

export type ReadinessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/ready";
};

export type ReadinessGetErrors = {
  /**
   * Not ready to accept traffic
   */
  500: unknown;
};

export type ReadinessGetResponses = {
  /**
   * Healthy
   */
  200: unknown;
};

export type LivenessGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/live";
};

export type LivenessGetErrors = {
  /**
   * Not liveness
   */
  500: unknown;
};

export type LivenessGetResponses = {
  /**
   * Healthy
   */
  200: unknown;
};

export type MetadataGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/meta";
};

export type MetadataGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type MetadataGetError = MetadataGetErrors[keyof MetadataGetErrors];

export type MetadataGetResponses = {
  /**
   * Successfully retrieved the metadata
   */
  200: ApiMeta;
};

export type MetadataGetResponse = MetadataGetResponses[keyof MetadataGetResponses];

export type MetadataListIntegrationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/meta/integrations";
};

export type MetadataListIntegrationsErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type MetadataListIntegrationsError =
  MetadataListIntegrationsErrors[keyof MetadataListIntegrationsErrors];

export type MetadataListIntegrationsResponses = {
  /**
   * Successfully retrieved the list of integrations
   */
  200: ListApiMetaIntegration;
};

export type MetadataListIntegrationsResponse =
  MetadataListIntegrationsResponses[keyof MetadataListIntegrationsResponses];

export type UserUpdateLoginData = {
  body?: UserLoginRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/login";
};

export type UserUpdateLoginErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdateLoginError = UserUpdateLoginErrors[keyof UserUpdateLoginErrors];

export type UserUpdateLoginResponses = {
  /**
   * Successfully logged in
   */
  200: User;
};

export type UserUpdateLoginResponse = UserUpdateLoginResponses[keyof UserUpdateLoginResponses];

export type UserUpdateGoogleOauthStartData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/google/start";
};

export type UserUpdateGoogleOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/google/callback";
};

export type UserUpdateGithubOauthStartData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/github/start";
};

export type UserUpdateGithubOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/github/callback";
};

export type UserUpdateSlackOauthStartData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/slack/start";
};

export type UserUpdateSlackOauthCallbackData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/slack/callback";
};

export type AlertEmailGroupListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting-email-groups";
};

export type AlertEmailGroupListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupListError = AlertEmailGroupListErrors[keyof AlertEmailGroupListErrors];

export type AlertEmailGroupListResponses = {
  /**
   * Successfully retrieved the tenant alert email groups
   */
  200: TenantAlertEmailGroupList;
};

export type AlertEmailGroupListResponse =
  AlertEmailGroupListResponses[keyof AlertEmailGroupListResponses];

export type AlertEmailGroupCreateData = {
  /**
   * The tenant alert email group to create
   */
  body: CreateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting-email-groups";
};

export type AlertEmailGroupCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupCreateError =
  AlertEmailGroupCreateErrors[keyof AlertEmailGroupCreateErrors];

export type AlertEmailGroupCreateResponses = {
  /**
   * Successfully created the tenant alert email group
   */
  201: TenantAlertEmailGroup;
};

export type AlertEmailGroupCreateResponse =
  AlertEmailGroupCreateResponses[keyof AlertEmailGroupCreateResponses];

export type TenantResourcePolicyGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/resource-policy";
};

export type TenantResourcePolicyGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantResourcePolicyGetError =
  TenantResourcePolicyGetErrors[keyof TenantResourcePolicyGetErrors];

export type TenantResourcePolicyGetResponses = {
  /**
   * Successfully retrieved the tenant resource policy
   */
  200: TenantResourcePolicy;
};

export type TenantResourcePolicyGetResponse =
  TenantResourcePolicyGetResponses[keyof TenantResourcePolicyGetResponses];

export type AlertEmailGroupDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
  query?: never;
  url: "/api/v1/alerting-email-groups/{alert-email-group}";
};

export type AlertEmailGroupDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupDeleteError =
  AlertEmailGroupDeleteErrors[keyof AlertEmailGroupDeleteErrors];

export type AlertEmailGroupDeleteResponses = {
  /**
   * Successfully deleted the tenant alert email group
   */
  204: void;
};

export type AlertEmailGroupDeleteResponse =
  AlertEmailGroupDeleteResponses[keyof AlertEmailGroupDeleteResponses];

export type AlertEmailGroupUpdateData = {
  /**
   * The tenant alert email group to update
   */
  body: UpdateTenantAlertEmailGroupRequest;
  path: {
    /**
     * The tenant alert email group id
     */
    "alert-email-group": string;
  };
  query?: never;
  url: "/api/v1/alerting-email-groups/{alert-email-group}";
};

export type AlertEmailGroupUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlertEmailGroupUpdateError =
  AlertEmailGroupUpdateErrors[keyof AlertEmailGroupUpdateErrors];

export type AlertEmailGroupUpdateResponses = {
  /**
   * Successfully updated the tenant alert email group
   */
  200: TenantAlertEmailGroup;
};

export type AlertEmailGroupUpdateResponse =
  AlertEmailGroupUpdateResponses[keyof AlertEmailGroupUpdateResponses];

export type UserGetCurrentData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/current";
};

export type UserGetCurrentErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserGetCurrentError = UserGetCurrentErrors[keyof UserGetCurrentErrors];

export type UserGetCurrentResponses = {
  /**
   * Successfully retrieved the user
   */
  200: User;
};

export type UserGetCurrentResponse = UserGetCurrentResponses[keyof UserGetCurrentResponses];

export type UserUpdatePasswordData = {
  body?: UserChangePasswordRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/password";
};

export type UserUpdatePasswordErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdatePasswordError = UserUpdatePasswordErrors[keyof UserUpdatePasswordErrors];

export type UserUpdatePasswordResponses = {
  /**
   * Successfully changed password
   */
  200: User;
};

export type UserUpdatePasswordResponse =
  UserUpdatePasswordResponses[keyof UserUpdatePasswordResponses];

export type UserCreateData = {
  body?: UserRegisterRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/register";
};

export type UserCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserCreateError = UserCreateErrors[keyof UserCreateErrors];

export type UserCreateResponses = {
  /**
   * Successfully registered the user
   */
  200: User;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserUpdateLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/logout";
};

export type UserUpdateLogoutErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Method not allowed
   */
  405: ApiErrors;
};

export type UserUpdateLogoutError = UserUpdateLogoutErrors[keyof UserUpdateLogoutErrors];

export type UserUpdateLogoutResponses = {
  /**
   * Successfully logged out
   */
  200: User;
};

export type UserUpdateLogoutResponse = UserUpdateLogoutResponses[keyof UserUpdateLogoutResponses];

export type TenantMembershipsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/memberships";
};

export type TenantMembershipsListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type TenantMembershipsListError =
  TenantMembershipsListErrors[keyof TenantMembershipsListErrors];

export type TenantMembershipsListResponses = {
  /**
   * Successfully listed the tenant memberships
   */
  200: UserTenantMembershipsList;
};

export type TenantMembershipsListResponse =
  TenantMembershipsListResponses[keyof TenantMembershipsListResponses];

export type UserListTenantInvitesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites";
};

export type UserListTenantInvitesErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type UserListTenantInvitesError =
  UserListTenantInvitesErrors[keyof UserListTenantInvitesErrors];

export type UserListTenantInvitesResponses = {
  /**
   * Successfully listed the tenant invites
   */
  200: TenantInviteList;
};

export type UserListTenantInvitesResponse =
  UserListTenantInvitesResponses[keyof UserListTenantInvitesResponses];

export type TenantInviteAcceptData = {
  body?: AcceptInviteRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites/accept";
};

export type TenantInviteAcceptErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteAcceptError = TenantInviteAcceptErrors[keyof TenantInviteAcceptErrors];

export type TenantInviteAcceptResponses = {
  /**
   * Successfully accepted the tenant invite
   */
  200: unknown;
};

export type TenantInviteRejectData = {
  body?: RejectInviteRequest;
  path?: never;
  query?: never;
  url: "/api/v1/users/invites/reject";
};

export type TenantInviteRejectErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteRejectError = TenantInviteRejectErrors[keyof TenantInviteRejectErrors];

export type TenantInviteRejectResponses = {
  /**
   * Successfully rejected the tenant invite
   */
  200: unknown;
};

export type TenantCreateData = {
  /**
   * The tenant to create
   */
  body: CreateTenantRequest;
  path?: never;
  query?: never;
  url: "/api/v1/tenants";
};

export type TenantCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantCreateError = TenantCreateErrors[keyof TenantCreateErrors];

export type TenantCreateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Tenant;
};

export type TenantCreateResponse = TenantCreateResponses[keyof TenantCreateResponses];

export type TenantUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateTenantRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}";
};

export type TenantUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantUpdateError = TenantUpdateErrors[keyof TenantUpdateErrors];

export type TenantUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Tenant;
};

export type TenantUpdateResponse = TenantUpdateResponses[keyof TenantUpdateResponses];

export type TenantAlertingSettingsGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/alerting/settings";
};

export type TenantAlertingSettingsGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantAlertingSettingsGetError =
  TenantAlertingSettingsGetErrors[keyof TenantAlertingSettingsGetErrors];

export type TenantAlertingSettingsGetResponses = {
  /**
   * Successfully retrieved the tenant alerting settings
   */
  200: TenantAlertingSettings;
};

export type TenantAlertingSettingsGetResponse =
  TenantAlertingSettingsGetResponses[keyof TenantAlertingSettingsGetResponses];

export type TenantInviteListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites";
};

export type TenantInviteListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteListError = TenantInviteListErrors[keyof TenantInviteListErrors];

export type TenantInviteListResponses = {
  /**
   * Successfully retrieved the tenant invites
   */
  200: TenantInviteList;
};

export type TenantInviteListResponse = TenantInviteListResponses[keyof TenantInviteListResponses];

export type TenantInviteCreateData = {
  /**
   * The tenant invite to create
   */
  body: CreateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites";
};

export type TenantInviteCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantInviteCreateError = TenantInviteCreateErrors[keyof TenantInviteCreateErrors];

export type TenantInviteCreateResponses = {
  /**
   * Successfully created the tenant invite
   */
  201: TenantInvite;
};

export type TenantInviteCreateResponse =
  TenantInviteCreateResponses[keyof TenantInviteCreateResponses];

export type TenantInviteDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}";
};

export type TenantInviteDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type TenantInviteDeleteError = TenantInviteDeleteErrors[keyof TenantInviteDeleteErrors];

export type TenantInviteDeleteResponses = {
  /**
   * Successfully deleted the tenant invite
   */
  200: TenantInvite;
};

export type TenantInviteDeleteResponse =
  TenantInviteDeleteResponses[keyof TenantInviteDeleteResponses];

export type TenantInviteUpdateData = {
  /**
   * The tenant invite to update
   */
  body: UpdateTenantInviteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant invite id
     */
    "tenant-invite": string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/invites/{tenant-invite}";
};

export type TenantInviteUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
};

export type TenantInviteUpdateError = TenantInviteUpdateErrors[keyof TenantInviteUpdateErrors];

export type TenantInviteUpdateResponses = {
  /**
   * Successfully updated the tenant invite
   */
  200: TenantInvite;
};

export type TenantInviteUpdateResponse =
  TenantInviteUpdateResponses[keyof TenantInviteUpdateResponses];

export type ApiTokenListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/api-tokens";
};

export type ApiTokenListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenListError = ApiTokenListErrors[keyof ApiTokenListErrors];

export type ApiTokenListResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: ListApiTokensResponse;
};

export type ApiTokenListResponse = ApiTokenListResponses[keyof ApiTokenListResponses];

export type ApiTokenCreateData = {
  body?: CreateApiTokenRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/api-tokens";
};

export type ApiTokenCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenCreateError = ApiTokenCreateErrors[keyof ApiTokenCreateErrors];

export type ApiTokenCreateResponses = {
  /**
   * Successfully retrieved the workflows
   */
  200: CreateApiTokenResponse;
};

export type ApiTokenCreateResponse = ApiTokenCreateResponses[keyof ApiTokenCreateResponses];

export type ApiTokenUpdateRevokeData = {
  body?: never;
  path: {
    /**
     * The API token
     */
    "api-token": string;
  };
  query?: never;
  url: "/api/v1/api-tokens/{api-token}";
};

export type ApiTokenUpdateRevokeErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
};

export type ApiTokenUpdateRevokeError =
  ApiTokenUpdateRevokeErrors[keyof ApiTokenUpdateRevokeErrors];

export type ApiTokenUpdateRevokeResponses = {
  /**
   * Successfully revoked the token
   */
  204: void;
};

export type ApiTokenUpdateRevokeResponse =
  ApiTokenUpdateRevokeResponses[keyof ApiTokenUpdateRevokeResponses];

export type TenantMemberListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/members";
};

export type TenantMemberListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type TenantMemberListError = TenantMemberListErrors[keyof TenantMemberListErrors];

export type TenantMemberListResponses = {
  /**
   * Successfully retrieved the tenant members
   */
  200: TenantMemberList;
};

export type TenantMemberListResponse = TenantMemberListResponses[keyof TenantMemberListResponses];

export type TenantMemberDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The tenant member id
     */
    member: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/members/{member}";
};

export type TenantMemberDeleteErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type TenantMemberDeleteError = TenantMemberDeleteErrors[keyof TenantMemberDeleteErrors];

export type TenantMemberDeleteResponses = {
  /**
   * Successfully deleted the tenant members
   */
  204: TenantMember;
};

export type TenantMemberDeleteResponse =
  TenantMemberDeleteResponses[keyof TenantMemberDeleteResponses];

export type MonitoringPostRunProbeData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/monitoring/{tenant}/probe";
};

export type MonitoringPostRunProbeErrors = {
  /**
   * Not authorized to perform this action
   */
  403: ApiErrors;
};

export type MonitoringPostRunProbeError =
  MonitoringPostRunProbeErrors[keyof MonitoringPostRunProbeErrors];

export type MonitoringPostRunProbeResponses = {
  /**
   * Successfully executed the probe.
   */
  200: unknown;
};

export type InfoGetVersionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/version";
};

export type InfoGetVersionResponses = {
  /**
   * The version of the server
   */
  200: {
    version: string;
  };
};

export type InfoGetVersionResponse = InfoGetVersionResponses[keyof InfoGetVersionResponses];

export type EventPushData = {
  body: Event;
  path?: never;
  query?: never;
  url: "/api/v1/event/push";
};

export type EventPushErrors = {
  400: ApiErrors;
  403: ApiErrors;
};

export type EventPushError = EventPushErrors[keyof EventPushErrors];

export type EventPushResponses = {
  200: PushEventResponse;
};

export type EventPushResponse = EventPushResponses[keyof EventPushResponses];

export type SiteListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites";
};

export type SiteListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteListError = SiteListErrors[keyof SiteListErrors];

export type SiteListResponses = {
  200: SiteList;
};

export type SiteListResponse = SiteListResponses[keyof SiteListResponses];

export type SiteCreateData = {
  body: CreateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites";
};

export type SiteCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteCreateError = SiteCreateErrors[keyof SiteCreateErrors];

export type SiteCreateResponses = {
  200: Site;
};

export type SiteCreateResponse = SiteCreateResponses[keyof SiteCreateResponses];

export type SiteGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}";
};

export type SiteGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteGetError = SiteGetErrors[keyof SiteGetErrors];

export type SiteGetResponses = {
  200: Site;
};

export type SiteGetResponse = SiteGetResponses[keyof SiteGetResponses];

export type SiteUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateSiteRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}";
};

export type SiteUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteUpdateError = SiteUpdateErrors[keyof SiteUpdateErrors];

export type SiteUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Site;
};

export type SiteUpdateResponse = SiteUpdateResponses[keyof SiteUpdateResponses];

export type SiteGetByHostData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * host name
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/byHost/{host}";
};

export type SiteGetByHostErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteGetByHostError = SiteGetByHostErrors[keyof SiteGetByHostErrors];

export type SiteGetByHostResponses = {
  200: Site;
};

export type SiteGetByHostResponse = SiteGetByHostResponses[keyof SiteGetByHostResponses];

export type SiteHostListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site?: string;
  };
  query?: {
    /**
     * The number to skip
     */
    offset?: number;
    /**
     * The host name
     */
    host?: string;
  };
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts";
};

export type SiteHostListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteHostListError = SiteHostListErrors[keyof SiteHostListErrors];

export type SiteHostListResponses = {
  200: SiteHostList;
};

export type SiteHostListResponse = SiteHostListResponses[keyof SiteHostListResponses];

export type SiteHostCreateData = {
  /**
   * 创建agentnode
   */
  body: SiteHostProperties;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site id
     */
    site: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts";
};

export type SiteHostCreateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteHostCreateError = SiteHostCreateErrors[keyof SiteHostCreateErrors];

export type SiteHostCreateResponses = {
  200: SiteHost;
};

export type SiteHostCreateResponse = SiteHostCreateResponses[keyof SiteHostCreateResponses];

export type SiteHostGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The site id
     */
    site: string;
    /**
     * The site-host id
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts/{host}";
};

export type SiteHostGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type SiteHostGetError = SiteHostGetErrors[keyof SiteHostGetErrors];

export type SiteHostGetResponses = {
  200: SiteHost;
};

export type SiteHostGetResponse = SiteHostGetResponses[keyof SiteHostGetResponses];

export type SiteHostUpdateData = {
  /**
   * The tenant properties to update
   */
  body: SiteHost;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The site id
     */
    site: string;
    /**
     * The site-host id
     */
    host: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/sites/{site}/site-hosts/{host}";
};

export type SiteHostUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type SiteHostUpdateError = SiteHostUpdateErrors[keyof SiteHostUpdateErrors];

export type SiteHostUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: SiteHost;
};

export type SiteHostUpdateResponse = SiteHostUpdateResponses[keyof SiteHostUpdateResponses];

export type FrontendGetConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/frontend/config";
};

export type FrontendGetConfigResponses = {
  /**
   * frontend core config
   */
  200: FrontendConfig;
};

export type FrontendGetConfigResponse =
  FrontendGetConfigResponses[keyof FrontendGetConfigResponses];

export type FrontendGetSiderbarData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/frontend/siderbar";
};

export type FrontendGetSiderbarResponses = {
  /**
   * frontend siderbar config
   */
  200: SiderbarConfig;
};

export type FrontendGetSiderbarResponse =
  FrontendGetSiderbarResponses[keyof FrontendGetSiderbarResponses];

export type EndpointListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/endpoint";
};

export type EndpointListErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
};

export type EndpointListError = EndpointListErrors[keyof EndpointListErrors];

export type EndpointListResponses = {
  200: EndpointList;
};

export type EndpointListResponse = EndpointListResponses[keyof EndpointListResponses];

export type EndpointUpdateData = {
  /**
   * The tenant properties to update
   */
  body: UpdateEndpointRequest;
  path?: never;
  query?: never;
  url: "/api/v1/endpoint";
};

export type EndpointUpdateErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type EndpointUpdateError = EndpointUpdateErrors[keyof EndpointUpdateErrors];

export type EndpointUpdateResponses = {
  /**
   * Successfully created the tenant
   */
  200: Endpoint;
};

export type EndpointUpdateResponse = EndpointUpdateResponses[keyof EndpointUpdateResponses];

export type MtworkerGetTasksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/mtworker/tasks";
};

export type MtworkerGetTasksResponses = {
  /**
   * 获取mtworker任务成功
   */
  200: MtWorkerTask;
};

export type MtworkerGetTasksResponse = MtworkerGetTasksResponses[keyof MtworkerGetTasksResponses];

export type ProxyListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: {
    /**
     * Limit the number of results
     */
    limit?: number;
    /**
     * Offset the results
     */
    offset?: number;
    /**
     * Filter by enabled status
     */
    enabled?: boolean;
    /**
     * Filter by provider
     */
    provider?: string;
    /**
     * Filter by type
     */
    type?: string;
    /**
     * Filter by country code
     */
    countryCode?: string;
    /**
     * Filter by port number
     */
    port?: number;
  };
  url: "/api/v1/tenants/{tenant}/proxies";
};

export type ProxyListErrors = {
  /**
   * Bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Server error
   */
  500: ApiErrors;
};

export type ProxyListError = ProxyListErrors[keyof ProxyListErrors];

export type ProxyListResponses = {
  /**
   * Success
   */
  200: {
    proxies?: Array<Proxy>;
  };
};

export type ProxyListResponse = ProxyListResponses[keyof ProxyListResponses];

export type ProxyGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The proxy id
     */
    proxyId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/proxies/{proxyId}";
};

export type ProxyGetErrors = {
  /**
   * Bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Server error
   */
  500: ApiErrors;
};

export type ProxyGetError = ProxyGetErrors[keyof ProxyGetErrors];

export type ProxyGetResponses = {
  /**
   * Success
   */
  200: Proxy;
};

export type ProxyGetResponse = ProxyGetResponses[keyof ProxyGetResponses];

export type ProxyCreateData = {
  body: ProxyCreate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/proxies/create";
};

export type ProxyCreateErrors = {
  /**
   * Bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Server error
   */
  500: ApiErrors;
};

export type ProxyCreateError = ProxyCreateErrors[keyof ProxyCreateErrors];

export type ProxyCreateResponses = {
  /**
   * Success
   */
  200: Proxy;
};

export type ProxyCreateResponse = ProxyCreateResponses[keyof ProxyCreateResponses];

export type ProxyUpdateData = {
  body: ProxyUpdate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The proxy id
     */
    proxyId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/proxies/{proxyId}/update";
};

export type ProxyUpdateErrors = {
  /**
   * Bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Server error
   */
  500: ApiErrors;
};

export type ProxyUpdateError = ProxyUpdateErrors[keyof ProxyUpdateErrors];

export type ProxyUpdateResponses = {
  /**
   * Success
   */
  200: Proxy;
};

export type ProxyUpdateResponse = ProxyUpdateResponses[keyof ProxyUpdateResponses];

export type ProxyDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The proxy id
     */
    proxyId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/proxies/{proxyId}/delete";
};

export type ProxyDeleteErrors = {
  /**
   * Bad request
   */
  400: ApiErrors;
  /**
   * Unauthorized
   */
  401: ApiErrors;
  /**
   * Not found
   */
  404: ApiErrors;
  /**
   * Server error
   */
  500: ApiErrors;
};

export type ProxyDeleteError = ProxyDeleteErrors[keyof ProxyDeleteErrors];

export type ProxyDeleteResponses = {
  /**
   * Success
   */
  200: {
    success?: boolean;
  };
};

export type ProxyDeleteResponse = ProxyDeleteResponses[keyof ProxyDeleteResponses];

export type PostListPublicData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/posts/public";
};

export type PostListPublicErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PostListPublicError = PostListPublicErrors[keyof PostListPublicErrors];

export type PostListPublicResponses = {
  200: PostList;
};

export type PostListPublicResponse = PostListPublicResponses[keyof PostListPublicResponses];

export type PostGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The post id
     */
    post: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/posts/{post}";
};

export type PostGetErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PostGetError = PostGetErrors[keyof PostGetErrors];

export type PostGetResponses = {
  200: Post;
};

export type PostGetResponse = PostGetResponses[keyof PostGetResponses];

export type PostListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: {
    /**
     * The site id
     */
    siteId?: string;
  };
  url: "/api/v1/tenants/{tenant}/posts";
};

export type PostListErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PostListError = PostListErrors[keyof PostListErrors];

export type PostListResponses = {
  200: PostList;
};

export type PostListResponse = PostListResponses[keyof PostListResponses];

export type PostCreateData = {
  body: CreatePostRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/posts";
};

export type PostCreateErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type PostCreateError = PostCreateErrors[keyof PostCreateErrors];

export type PostCreateResponses = {
  200: Post;
};

export type PostCreateResponse = PostCreateResponses[keyof PostCreateResponses];

export type ArtifactListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts";
};

export type ArtifactListResponses = {
  /**
   * Successfully retrieved the tenant artifacts list
   */
  200: ArtifactList;
};

export type ArtifactListResponse = ArtifactListResponses[keyof ArtifactListResponses];

export type ArtifactGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The artifact id
     */
    artifact: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts/{artifact}";
};

export type ArtifactGetErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiErrors;
  /**
   * The step run was not found
   */
  404: ApiErrors;
};

export type ArtifactGetError = ArtifactGetErrors[keyof ArtifactGetErrors];

export type ArtifactGetResponses = {
  /**
   * Successfully retrieved the step run
   */
  200: Artifact;
};

export type ArtifactGetResponse = ArtifactGetResponses[keyof ArtifactGetResponses];

export type ArtifactSaveData = {
  /**
   * The artifact properties to update
   */
  body: SaveArtifactRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The artifact id
     */
    artifact: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/artifacts/{artifact}";
};

export type ArtifactSaveErrors = {
  /**
   * A malformed or bad request
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type ArtifactSaveError = ArtifactSaveErrors[keyof ArtifactSaveErrors];

export type ArtifactSaveResponses = {
  /**
   * Successfully created the artifact
   */
  200: Artifact;
};

export type ArtifactSaveResponse = ArtifactSaveResponses[keyof ArtifactSaveResponses];

export type SandboxGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/sb";
};

export type SandboxGetResponses = {
  /**
   * 成功
   */
  200: Sandbox;
};

export type SandboxGetResponse = SandboxGetResponses[keyof SandboxGetResponses];

export type ScriptsByNameData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: "/api/v1/scripts/scripts/{name}";
};

export type ScriptsByNameErrors = {
  /**
   * Script not found
   */
  404: {
    error?: string;
  };
};

export type ScriptsByNameError = ScriptsByNameErrors[keyof ScriptsByNameErrors];

export type ScriptsByNameResponses = {
  /**
   * A script
   */
  200: string;
};

export type ScriptsByNameResponse = ScriptsByNameResponses[keyof ScriptsByNameResponses];

export type SingboxGetWorkerProfileData = {
  body?: never;
  path: {
    profileType: string;
    profile: string;
  };
  query?: never;
  url: "/api/v1/singbox/workerProfile/{profileType}/{profile}";
};

export type SingboxGetWorkerProfileErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxGetWorkerProfileError =
  SingboxGetWorkerProfileErrors[keyof SingboxGetWorkerProfileErrors];

export type SingboxGetWorkerProfileResponses = {
  /**
   * Successfully get the singbox srs file
   */
  200: SbWorkerProfile;
};

export type SingboxGetWorkerProfileResponse =
  SingboxGetWorkerProfileResponses[keyof SingboxGetWorkerProfileResponses];

export type SingboxSubscribeData = {
  body?: never;
  path?: {
    group?: string;
    profile?: string;
  };
  query?: never;
  url: "/api/v1/singbox/subscribe/{group}/{profile}";
};

export type SingboxSubscribeErrors = {
  400: ApiErrors;
  403: ApiErrors;
};

export type SingboxSubscribeError = SingboxSubscribeErrors[keyof SingboxSubscribeErrors];

export type SingboxSubscribeResponses = {
  /**
   * Successfully get the firerpa config
   */
  200: {
    [key: string]: unknown;
  };
};

export type SingboxSubscribeResponse = SingboxSubscribeResponses[keyof SingboxSubscribeResponses];

export type SingboxGeoipCnSrsData = {
  body?: never;
  path: {
    file: string;
  };
  query?: never;
  url: "/api/v1/singbox/srs/{file}";
};

export type SingboxGeoipCnSrsErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxGeoipCnSrsError = SingboxGeoipCnSrsErrors[keyof SingboxGeoipCnSrsErrors];

export type SingboxGeoipCnSrsResponses = {
  /**
   * Successfully get the singbox srs file
   */
  200: Blob | File;
};

export type SingboxGeoipCnSrsResponse =
  SingboxGeoipCnSrsResponses[keyof SingboxGeoipCnSrsResponses];

export type SingboxGetOutboundsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/singbox/outbounds";
};

export type SingboxGetOutboundsErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxGetOutboundsError = SingboxGetOutboundsErrors[keyof SingboxGetOutboundsErrors];

export type SingboxGetOutboundsResponses = {
  /**
   * Successfully get outbounds
   */
  200: {
    outbounds?: Array<SbOutbound>;
  };
};

export type SingboxGetOutboundsResponse =
  SingboxGetOutboundsResponses[keyof SingboxGetOutboundsResponses];

export type SingboxCreateOutboundData = {
  body?: SbOutboundCreate;
  path?: never;
  query?: never;
  url: "/api/v1/singbox/outbounds";
};

export type SingboxCreateOutboundErrors = {
  400: ApiErrors;
  403: ApiErrors;
};

export type SingboxCreateOutboundError =
  SingboxCreateOutboundErrors[keyof SingboxCreateOutboundErrors];

export type SingboxCreateOutboundResponses = {
  /**
   * Successfully created outbound
   */
  200: SbOutbound;
};

export type SingboxCreateOutboundResponse =
  SingboxCreateOutboundResponses[keyof SingboxCreateOutboundResponses];

export type SingboxDeleteOutboundData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/singbox/outbounds/{id}";
};

export type SingboxDeleteOutboundErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxDeleteOutboundError =
  SingboxDeleteOutboundErrors[keyof SingboxDeleteOutboundErrors];

export type SingboxDeleteOutboundResponses = {
  /**
   * Successfully deleted the outbound
   */
  200: {
    success?: boolean;
  };
};

export type SingboxDeleteOutboundResponse =
  SingboxDeleteOutboundResponses[keyof SingboxDeleteOutboundResponses];

export type SingboxGetOutboundData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/singbox/outbounds/{id}";
};

export type SingboxGetOutboundErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxGetOutboundError = SingboxGetOutboundErrors[keyof SingboxGetOutboundErrors];

export type SingboxGetOutboundResponses = {
  /**
   * Successfully get the outbound
   */
  200: SbOutbound;
};

export type SingboxGetOutboundResponse =
  SingboxGetOutboundResponses[keyof SingboxGetOutboundResponses];

export type SingboxUpdateOutboundData = {
  body?: SbOutboundCreate;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/singbox/outbounds/{id}";
};

export type SingboxUpdateOutboundErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxUpdateOutboundError =
  SingboxUpdateOutboundErrors[keyof SingboxUpdateOutboundErrors];

export type SingboxUpdateOutboundResponses = {
  /**
   * Successfully updated the outbound
   */
  200: SbOutbound;
};

export type SingboxUpdateOutboundResponse =
  SingboxUpdateOutboundResponses[keyof SingboxUpdateOutboundResponses];

export type SingboxImportOutboundsData = {
  body?: SbImportRequest;
  path?: never;
  query?: never;
  url: "/api/v1/singbox/import";
};

export type SingboxImportOutboundsErrors = {
  400: ApiErrors;
  403: ApiErrors;
  404: ApiErrors;
};

export type SingboxImportOutboundsError =
  SingboxImportOutboundsErrors[keyof SingboxImportOutboundsErrors];

export type SingboxImportOutboundsResponses = {
  /**
   * Successfully import the singbox outbound
   */
  200: SbOutbound;
};

export type SingboxImportOutboundsResponse =
  SingboxImportOutboundsResponses[keyof SingboxImportOutboundsResponses];

export type BotListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/bot/list";
};

export type BotListErrors = {
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type BotListError = BotListErrors[keyof BotListErrors];

export type BotListResponses = {
  200: BotList;
};

export type BotListResponse = BotListResponses[keyof BotListResponses];

export type BotGetData = {
  body?: never;
  path: {
    bot: string;
  };
  query?: {
    autoCreate?: boolean;
  };
  url: "/api/v1/bot/{bot}";
};

export type BotGetErrors = {
  400: ApiErrors;
  403: ApiError;
};

export type BotGetError = BotGetErrors[keyof BotGetErrors];

export type BotGetResponses = {
  200: Bot;
};

export type BotGetResponse = BotGetResponses[keyof BotGetResponses];

export type BotHeartbeatData = {
  body?: BotLocalState;
  path?: never;
  query?: never;
  url: "/api/v1/bot/heartbeat";
};

export type BotHeartbeatErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type BotHeartbeatError = BotHeartbeatErrors[keyof BotHeartbeatErrors];

export type BotHeartbeatResponses = {
  200: BotConfig;
};

export type BotHeartbeatResponse = BotHeartbeatResponses[keyof BotHeartbeatResponses];

export type PlatformListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Items per page
     */
    limit?: number;
  };
  url: "/api/v1/tenants/{tenant}/platforms";
};

export type PlatformListErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PlatformListError = PlatformListErrors[keyof PlatformListErrors];

export type PlatformListResponses = {
  200: PlatformList;
};

export type PlatformListResponse = PlatformListResponses[keyof PlatformListResponses];

export type PlatformGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The platform id
     */
    platformId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/platforms/{platformId}";
};

export type PlatformGetErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PlatformGetError = PlatformGetErrors[keyof PlatformGetErrors];

export type PlatformGetResponses = {
  200: Platform;
};

export type PlatformGetResponse = PlatformGetResponses[keyof PlatformGetResponses];

export type PlatformCreateData = {
  body?: PlatformCreate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/platforms/create";
};

export type PlatformCreateErrors = {
  400: ApiErrors;
  403: ApiError;
};

export type PlatformCreateError = PlatformCreateErrors[keyof PlatformCreateErrors];

export type PlatformCreateResponses = {
  200: Platform;
};

export type PlatformCreateResponse = PlatformCreateResponses[keyof PlatformCreateResponses];

export type PlatformUpdateData = {
  body?: PlatformUpdate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The platform id
     */
    platformId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/platforms/{platformId}/update";
};

export type PlatformUpdateErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PlatformUpdateError = PlatformUpdateErrors[keyof PlatformUpdateErrors];

export type PlatformUpdateResponses = {
  200: Platform;
};

export type PlatformUpdateResponse = PlatformUpdateResponses[keyof PlatformUpdateResponses];

export type PlatformDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The platform id
     */
    platformId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/platforms/{platformId}/delete";
};

export type PlatformDeleteErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PlatformDeleteError = PlatformDeleteErrors[keyof PlatformDeleteErrors];

export type PlatformDeleteResponses = {
  200: {
    success?: boolean;
  };
};

export type PlatformDeleteResponse = PlatformDeleteResponses[keyof PlatformDeleteResponses];

export type PAccountCreateData = {
  body?: PAccountCreate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/p_account/create";
};

export type PAccountCreateErrors = {
  400: ApiErrors;
  403: ApiError;
};

export type PAccountCreateError = PAccountCreateErrors[keyof PAccountCreateErrors];

export type PAccountCreateResponses = {
  200: PAccount;
};

export type PAccountCreateResponse = PAccountCreateResponses[keyof PAccountCreateResponses];

export type PAccountListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Items per page
     */
    limit?: number;
  };
  url: "/api/v1/tenants/{tenant}/p_account/list";
};

export type PAccountListErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PAccountListError = PAccountListErrors[keyof PAccountListErrors];

export type PAccountListResponses = {
  200: PAccountList;
};

export type PAccountListResponse = PAccountListResponses[keyof PAccountListResponses];

export type PAccountGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The account id
     */
    accountId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/p_account/{accountId}";
};

export type PAccountGetErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PAccountGetError = PAccountGetErrors[keyof PAccountGetErrors];

export type PAccountGetResponses = {
  200: PAccount;
};

export type PAccountGetResponse = PAccountGetResponses[keyof PAccountGetResponses];

export type PAccountUpdateData = {
  body?: PAccountCreate;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The account id
     */
    accountId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/p_account/{accountId}/update";
};

export type PAccountUpdateErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PAccountUpdateError = PAccountUpdateErrors[keyof PAccountUpdateErrors];

export type PAccountUpdateResponses = {
  200: PAccount;
};

export type PAccountUpdateResponse = PAccountUpdateResponses[keyof PAccountUpdateResponses];

export type PAccountDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: TenantParameter;
    /**
     * The account id
     */
    accountId: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/p_account/{accountId}/delete";
};

export type PAccountDeleteErrors = {
  400: ApiErrors;
  403: ApiError;
  404: ApiErrors;
};

export type PAccountDeleteError = PAccountDeleteErrors[keyof PAccountDeleteErrors];

export type PAccountDeleteResponses = {
  200: {
    success: boolean;
  };
};

export type PAccountDeleteResponse = PAccountDeleteResponses[keyof PAccountDeleteResponses];

export type AlbumListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums";
};

export type AlbumListErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type AlbumListError = AlbumListErrors[keyof AlbumListErrors];

export type AlbumListResponses = {
  200: AlbumList;
};

export type AlbumListResponse = AlbumListResponses[keyof AlbumListResponses];

export type AlbumCreateData = {
  body: CreateAlbumRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums";
};

export type AlbumCreateErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * Forbidden
   */
  403: ApiError;
};

export type AlbumCreateError = AlbumCreateErrors[keyof AlbumCreateErrors];

export type AlbumCreateResponses = {
  200: Album;
};

export type AlbumCreateResponse = AlbumCreateResponses[keyof AlbumCreateResponses];

export type AlbumDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}";
};

export type AlbumDeleteErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type AlbumDeleteError = AlbumDeleteErrors[keyof AlbumDeleteErrors];

export type AlbumDeleteResponses = {
  /**
   * Album deleted successfully
   */
  204: void;
};

export type AlbumDeleteResponse = AlbumDeleteResponses[keyof AlbumDeleteResponses];

export type AlbumGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}";
};

export type AlbumGetErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type AlbumGetError = AlbumGetErrors[keyof AlbumGetErrors];

export type AlbumGetResponses = {
  200: Album;
};

export type AlbumGetResponse = AlbumGetResponses[keyof AlbumGetResponses];

export type AlbumUpdateData = {
  body: UpdateAlbumRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}";
};

export type AlbumUpdateErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type AlbumUpdateError = AlbumUpdateErrors[keyof AlbumUpdateErrors];

export type AlbumUpdateResponses = {
  200: Album;
};

export type AlbumUpdateResponse = AlbumUpdateResponses[keyof AlbumUpdateResponses];

export type PhotoListData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}/photos";
};

export type PhotoListErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PhotoListError = PhotoListErrors[keyof PhotoListErrors];

export type PhotoListResponses = {
  200: PhotoList;
};

export type PhotoListResponse = PhotoListResponses[keyof PhotoListResponses];

export type PhotoUploadData = {
  body: {
    /**
     * The photo file to upload
     */
    photo: Blob | File;
    /**
     * The description of the photo
     */
    description?: string;
  };
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}/photos";
};

export type PhotoUploadErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PhotoUploadError = PhotoUploadErrors[keyof PhotoUploadErrors];

export type PhotoUploadResponses = {
  200: Photo;
};

export type PhotoUploadResponse = PhotoUploadResponses[keyof PhotoUploadResponses];

export type PhotoDeleteData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
    /**
     * The photo id
     */
    photo: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}/photos/{photo}";
};

export type PhotoDeleteErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PhotoDeleteError = PhotoDeleteErrors[keyof PhotoDeleteErrors];

export type PhotoDeleteResponses = {
  /**
   * Photo deleted successfully
   */
  204: void;
};

export type PhotoDeleteResponse = PhotoDeleteResponses[keyof PhotoDeleteResponses];

export type PhotoGetData = {
  body?: never;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
    /**
     * The photo id
     */
    photo: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}/photos/{photo}";
};

export type PhotoGetErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PhotoGetError = PhotoGetErrors[keyof PhotoGetErrors];

export type PhotoGetResponses = {
  200: Photo;
};

export type PhotoGetResponse = PhotoGetResponses[keyof PhotoGetResponses];

export type PhotoUpdateData = {
  body: UpdatePhotoRequest;
  path: {
    /**
     * The tenant id
     */
    tenant: string;
    /**
     * The album id
     */
    album: string;
    /**
     * The photo id
     */
    photo: string;
  };
  query?: never;
  url: "/api/v1/tenants/{tenant}/albums/{album}/photos/{photo}";
};

export type PhotoUpdateErrors = {
  /**
   * 请求错误
   */
  400: ApiErrors;
  /**
   * 权限不足
   */
  403: ApiErrors;
  /**
   * 资源不存在
   */
  404: ApiErrors;
};

export type PhotoUpdateError = PhotoUpdateErrors[keyof PhotoUpdateErrors];

export type PhotoUpdateResponses = {
  200: Photo;
};

export type PhotoUpdateResponse = PhotoUpdateResponses[keyof PhotoUpdateResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
