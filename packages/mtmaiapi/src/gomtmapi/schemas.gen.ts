// This file is auto-generated by @hey-api/openapi-ts

export const APIMetaSchema = {
  type: "object",
  properties: {
    auth: {
      $ref: "#/components/schemas/APIMetaAuth",
    },
    pylonAppId: {
      type: "string",
      description: "the Pylon app ID for usepylon.com chat support",
      example: "12345678-1234-1234-1234-123456789012",
    },
    posthog: {
      $ref: "#/components/schemas/APIMetaPosthog",
    },
    allowSignup: {
      type: "boolean",
      description: "whether or not users can sign up for this instance",
      example: true,
    },
    allowInvites: {
      type: "boolean",
      description: "whether or not users can invite other users to this instance",
      example: true,
    },
    allowCreateTenant: {
      type: "boolean",
      description: "whether or not users can create new tenants",
      example: true,
    },
    allowChangePassword: {
      type: "boolean",
      description: "whether or not users can change their password",
      example: true,
    },
  },
} as const;

export const APIMetaAuthSchema = {
  type: "object",
  properties: {
    schemes: {
      items: {
        type: "string",
      },
      type: "array",
      description: "the supported types of authentication",
      example: ["basic", "google"],
    },
  },
} as const;

export const APIMetaPosthogSchema = {
  type: "object",
  properties: {
    apiKey: {
      type: "string",
      description: "the PostHog API key",
      example: "phk_1234567890abcdef",
    },
    apiHost: {
      type: "string",
      description: "the PostHog API host",
      example: "https://posthog.example.com",
    },
  },
} as const;

export const ListAPIMetaIntegrationSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/APIMetaIntegration",
  },
} as const;

export const APIMetaIntegrationSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "the name of the integration",
      example: "github",
    },
    enabled: {
      type: "boolean",
      description: "whether this integration is enabled on the instance",
    },
  },
  required: ["name", "enabled"],
} as const;

export const APIErrorsSchema = {
  type: "object",
  properties: {
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/APIError",
      },
    },
  },
  required: ["errors"],
} as const;

export const APIErrorSchema = {
  type: "object",
  properties: {
    code: {
      type: "integer",
      description: "a custom Hatchet error code",
      format: "uint64",
      example: 1400,
    },
    field: {
      type: "string",
      description: "the field that this error is associated with, if applicable",
      example: "name",
    },
    description: {
      type: "string",
      description: "a description for this error",
      example: "A descriptive error message",
    },
    docs_link: {
      type: "string",
      description: "a link to the documentation for this error, if it exists",
      example: "github.com/hatchet-dev/hatchet",
    },
  },
  required: ["description"],
} as const;

export const PaginationResponseSchema = {
  type: "object",
  properties: {
    current_page: {
      type: "integer",
      description: "the current page",
      format: "int64",
      example: 2,
    },
    next_page: {
      type: "integer",
      description: "the next page",
      format: "int64",
      example: 3,
    },
    num_pages: {
      type: "integer",
      description: "the total number of pages for listing",
      format: "int64",
      example: 10,
    },
  },
  example: {
    next_page: 3,
    num_pages: 10,
    current_page: 2,
  },
} as const;

export const APIResourceMetaSchema = {
  properties: {
    id: {
      type: "string",
      description: "the id of this resource, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 0,
      maxLength: 36,
    },
    createdAt: {
      type: "string",
      description: "the time that this resource was created",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    updatedAt: {
      type: "string",
      description: "the time that this resource was last updated",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
  },
  required: ["id", "createdAt", "updatedAt"],
} as const;

export const APIResourceMetaPropertiesSchema = {
  required: ["metadata"],
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
  },
} as const;

export const TenantParameterSchema = {
  type: "string",
  format: "uuid",
  minLength: 36,
  maxLength: 36,
} as const;

export const UserSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    emailVerified: {
      type: "boolean",
      description: "Whether the user has verified their email address.",
    },
    hasPassword: {
      type: "boolean",
      description: "Whether the user has a password set.",
    },
    emailHash: {
      type: "string",
      description: "A hash of the user's email address for use with Pylon Support Chat",
    },
    userToken: {
      type: "string",
      description: "The user's token for use with Pylon Support Chat",
    },
  },
  required: ["metadata", "email", "emailVerified", "userToken"],
  type: "object",
} as const;

export const UserTenantPublicSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
  },
  required: ["email"],
  type: "object",
} as const;

export const UserLoginRequestSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["email", "password"],
  type: "object",
} as const;

export const UserChangePasswordRequestSchema = {
  properties: {
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
    newPassword: {
      type: "string",
      description: "The new password for the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["password", "newPassword"],
  type: "object",
} as const;

export const UserRegisterRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["name", "email", "password"],
  type: "object",
} as const;

export const UserTenantMembershipsListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
  },
  required: ["metadata", "name", "slug"],
} as const;

export const TenantMemberSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    user: {
      $ref: "#/components/schemas/UserTenantPublic",
      description: "The user associated with this tenant member.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this tenant member.",
    },
  },
  required: ["metadata", "user", "role"],
  type: "object",
} as const;

export const TenantMemberListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantMemberRoleSchema = {
  enum: ["OWNER", "ADMIN", "MEMBER"],
  type: "string",
} as const;

export const TenantResourceSchema = {
  enum: ["WORKER", "WORKER_SLOT", "EVENT", "WORKFLOW_RUN", "TASK_RUN", "CRON", "SCHEDULE"],
  type: "string",
} as const;

export const TenantResourceLimitSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    resource: {
      $ref: "#/components/schemas/TenantResource",
      description: "The resource associated with this limit.",
    },
    limitValue: {
      type: "integer",
      description: "The limit associated with this limit.",
    },
    alarmValue: {
      type: "integer",
      description: "The alarm value associated with this limit to warn of approaching limit value.",
    },
    value: {
      type: "integer",
      description: "The current value associated with this limit.",
    },
    window: {
      type: "string",
      description: "The meter window for the limit. (i.e. 1 day, 1 week, 1 month)",
    },
    lastRefill: {
      type: "string",
      description: "The last time the limit was refilled.",
      format: "date-time",
    },
  },
  required: ["metadata", "tenantId", "resource", "limitValue", "value"],
  type: "object",
} as const;

export const TenantResourcePolicySchema = {
  properties: {
    limits: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TenantResourceLimit",
      },
      description: "A list of resource limits for the tenant.",
    },
  },
  required: ["limits"],
  type: "object",
} as const;

export const CreateTenantInviteRequestSchema = {
  properties: {
    email: {
      type: "string",
      description: "The email of the user to invite.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["email", "role"],
  type: "object",
} as const;

export const UpdateTenantInviteRequestSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["role"],
  type: "object",
} as const;

export const TenantAlertingSettingsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
    },
    lastAlertedAt: {
      type: "string",
      description: "The last time an alert was sent.",
      format: "date-time",
    },
  },
  required: ["metadata", "maxAlertingFrequency"],
  type: "object",
} as const;

export const TenantAlertEmailGroupSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
    },
  },
  required: ["metadata", "emails"],
  type: "object",
} as const;

export const TenantAlertEmailGroupListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantAlertEmailGroup",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const UpdateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const TenantInviteSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    email: {
      type: "string",
      description: "The email of the user to invite.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenantId: {
      type: "string",
      description: "The tenant id associated with this tenant invite.",
    },
    tenantName: {
      type: "string",
      description: "The tenant name for the tenant.",
    },
    expires: {
      type: "string",
      description: "The time that this invite expires.",
      format: "date-time",
    },
  },
  required: ["metadata", "email", "role", "expires", "tenantId"],
  type: "object",
} as const;

export const TenantInviteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantInvite",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const QueueMetricsSchema = {
  type: "object",
  properties: {
    numQueued: {
      type: "integer",
      description: "The number of items in the queue.",
    },
    numRunning: {
      type: "integer",
      description: "The number of items running.",
    },
    numPending: {
      type: "integer",
      description: "The number of items pending.",
    },
  },
  required: ["numQueued", "numRunning", "numPending"],
} as const;

export const TenantQueueMetricsSchema = {
  properties: {
    total: {
      $ref: "#/components/schemas/QueueMetrics",
      description: "The total queue metrics.",
    },
    workflow: {
      type: "object",
      additionalProperties: {
        $ref: "#/components/schemas/QueueMetrics",
      },
    },
    queues: {
      type: "object",
      additionalProperties: {
        type: "integer",
      },
    },
  },
} as const;

export const TenantStepRunQueueMetricsSchema = {
  properties: {
    queues: {
      type: "object",
    },
  },
} as const;

export const AcceptInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const RejectInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const TenantListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Tenant",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,hatchetName",
      },
    },
  },
  required: ["name", "slug"],
  type: "object",
} as const;

export const UpdateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
    version: {
      description: "The version of the tenant.",
      enum: ["V0", "V1"],
      type: "string",
    },
  },
  type: "object",
} as const;

export const APITokenSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the API token.",
      maxLength: 255,
    },
    expiresAt: {
      type: "string",
      format: "date-time",
      description: "When the API token expires.",
    },
  },
  required: ["metadata", "name", "expiresAt"],
} as const;

export const CreateAPITokenRequestSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "A name for the API token.",
      maxLength: 255,
    },
    expiresIn: {
      type: "string",
      description: "The duration for which the token is valid.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
  },
  required: ["name"],
} as const;

export const CreateAPITokenResponseSchema = {
  type: "object",
  properties: {
    token: {
      type: "string",
      description: "The API token.",
    },
  },
  required: ["token"],
} as const;

export const ListAPITokensResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/APIToken",
      },
      type: "array",
    },
  },
} as const;

export const LogLineSchema = {
  properties: {
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The creation date of the log line.",
    },
    message: {
      type: "string",
      description: "The log message.",
    },
    metadata: {
      type: "object",
      description: "The log metadata.",
    },
  },
  required: ["createdAt", "message", "metadata"],
} as const;

export const LogLineLevelSchema = {
  type: "string",
  enum: ["DEBUG", "INFO", "WARN", "ERROR"],
} as const;

export const LogLineListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/LogLine",
      },
      type: "array",
    },
  },
} as const;

export const PlatformPropertiesSchema = {
  required: ["id", "name"],
  properties: {
    id: {
      type: "string",
      format: "uuid",
      description: "UUID of the platform",
    },
    name: {
      type: "string",
      description: "Name of the platform",
    },
    url: {
      type: "string",
      description: "URL of the platform",
    },
    description: {
      type: "string",
      description: "Description of the platform",
    },
    loginUrl: {
      type: "string",
      description: "Login URL for the platform",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
      description: "Tags for categorizing the platform",
    },
  },
} as const;

export const PlatformSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/PlatformProperties",
    },
  ],
} as const;

export const PlatformListSchema = {
  required: ["pagination", "rows"],
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Platform",
      },
    },
  },
} as const;

export const PlatformCreateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PlatformProperties",
    },
  ],
} as const;

export const PlatformUpdateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    {
      $ref: "#/components/schemas/PlatformProperties",
    },
  ],
} as const;

export const PAccountPropertiesSchema = {
  required: ["id", "username", "password", "email", "enabled", "platformId"],
  properties: {
    id: {
      type: "string",
      format: "uuid",
      description: "UUID of the account",
    },
    username: {
      type: "string",
      description: "Username for the platform account",
    },
    password: {
      type: "string",
      description: "Password for the platform account",
    },
    email: {
      type: "string",
      format: "email",
      description: "Email for the platform account",
    },
    enabled: {
      type: "boolean",
      description: "Whether the account is enabled",
    },
    platformId: {
      type: "string",
      format: "uuid",
      description: "UUID of the platform this account belongs to",
    },
    name: {
      type: "string",
      description: "Display name for the account",
    },
    description: {
      type: "string",
      description: "Description of the account",
    },
    type: {
      type: "string",
      description: "Type or category of the account",
    },
    token: {
      type: "string",
      description: "Authentication token if applicable",
    },
    otpSeed: {
      type: "string",
      description: "OTP seed for two-factor authentication",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
      description: "Tags for categorizing the account",
    },
    comment: {
      type: "string",
      description: "Additional notes or comments about the account",
    },
    state: {
      type: "object",
      description: "Additional state data for the account",
    },
  },
} as const;

export const PAccountSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/PAccountProperties",
    },
    {
      type: "object",
      properties: {
        platform: {
          $ref: "#/components/schemas/Platform",
        },
      },
    },
  ],
} as const;

export const PAccountListSchema = {
  required: ["pagination", "rows"],
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PAccount",
      },
    },
  },
} as const;

export const PAccountCreateSchema = {
  required: ["username", "password", "email", "platformId"],
  properties: {
    username: {
      type: "string",
      description: "Username for the platform account",
    },
    password: {
      type: "string",
      description: "Password for the platform account",
    },
    email: {
      type: "string",
      format: "email",
      description: "Email for the platform account",
    },
    enabled: {
      type: "boolean",
      default: true,
      description: "Whether the account is enabled",
    },
    platformId: {
      type: "string",
      format: "uuid",
      description: "UUID of the platform this account belongs to",
    },
    name: {
      type: "string",
      description: "Display name for the account",
    },
    comment: {
      type: "string",
      description: "Additional notes or comments about the account",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
      description: "Tags for categorizing the account",
    },
  },
} as const;

export const ProxySchema = {
  description: "A proxy server",
  required: ["id", "name", "url", "type", "provider", "enabled"],
  properties: {
    id: {
      type: "string",
      format: "uuid",
      description: "The unique identifier of the proxy",
    },
    name: {
      type: "string",
      description: "The name of the proxy",
    },
    description: {
      type: "string",
      description: "The description of the proxy",
    },
    url: {
      type: "string",
      description: "The URL of the proxy",
    },
    type: {
      type: "string",
      description: "The type of the proxy (e.g., HTTP, SOCKS5)",
    },
    provider: {
      type: "string",
      description: "The provider of the proxy",
    },
    countryCode: {
      type: "string",
      description: "The country code where the proxy is located",
    },
    port: {
      type: "integer",
      description: "The port number of the proxy",
    },
    lastUsedAt: {
      type: "string",
      format: "date-time",
      description: "The last time the proxy was used",
    },
    enabled: {
      type: "boolean",
      description: "Whether the proxy is enabled",
    },
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The time the proxy was created",
    },
    updatedAt: {
      type: "string",
      format: "date-time",
      description: "The last time the proxy was updated",
    },
  },
} as const;

export const ProxyCreateSchema = {
  description: "Parameters for creating a proxy",
  required: ["name", "url", "type"],
  properties: {
    name: {
      type: "string",
      description: "The name of the proxy",
    },
    description: {
      type: "string",
      description: "The description of the proxy",
    },
    url: {
      type: "string",
      description: "The URL of the proxy",
    },
    type: {
      type: "string",
      description: "The type of the proxy (e.g., HTTP, SOCKS5)",
    },
    provider: {
      type: "string",
      description: "The provider of the proxy",
    },
    countryCode: {
      type: "string",
      description: "The country code where the proxy is located",
    },
    port: {
      type: "integer",
      description: "The port number of the proxy",
    },
    enabled: {
      type: "boolean",
      description: "Whether the proxy is enabled",
      default: true,
    },
  },
} as const;

export const ProxyUpdateSchema = {
  description: "Parameters for updating a proxy",
  properties: {
    name: {
      type: "string",
      description: "The name of the proxy",
    },
    description: {
      type: "string",
      description: "The description of the proxy",
    },
    url: {
      type: "string",
      description: "The URL of the proxy",
    },
    type: {
      type: "string",
      description: "The type of the proxy (e.g., HTTP, SOCKS5)",
    },
    provider: {
      type: "string",
      description: "The provider of the proxy",
    },
    countryCode: {
      type: "string",
      description: "The country code where the proxy is located",
    },
    port: {
      type: "integer",
      description: "The port number of the proxy",
    },
    enabled: {
      type: "boolean",
      description: "Whether the proxy is enabled",
    },
  },
} as const;

export const ProxyListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Proxy",
      },
    },
  },
} as const;

export const AlbumSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the album",
      minLength: 1,
      maxLength: 100,
    },
    description: {
      type: "string",
      description: "The description of the album",
      maxLength: 500,
    },
    coverPhotoId: {
      type: "string",
      format: "uuid",
      description: "The ID of the cover photo for this album",
    },
  },
  required: ["metadata", "name"],
} as const;

export const AlbumListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Album",
      },
      type: "array",
    },
  },
} as const;

export const CreateAlbumRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the album",
      minLength: 1,
      maxLength: 100,
    },
    description: {
      type: "string",
      description: "The description of the album",
      maxLength: 500,
    },
    coverPhotoId: {
      type: "string",
      format: "uuid",
      description: "The ID of the cover photo for this album",
    },
  },
  required: ["name"],
} as const;

export const UpdateAlbumRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the album",
      minLength: 1,
      maxLength: 100,
    },
    description: {
      type: "string",
      description: "The description of the album",
      maxLength: 500,
    },
    coverPhotoId: {
      type: "string",
      format: "uuid",
      description: "The ID of the cover photo for this album",
    },
  },
} as const;

export const PhotoSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    filename: {
      type: "string",
      description: "The filename of the photo",
    },
    albumId: {
      type: "string",
      format: "uuid",
      description: "The ID of the album this photo belongs to",
    },
    url: {
      type: "string",
      description: "The URL to access the photo",
    },
    thumbnailUrl: {
      type: "string",
      description: "The URL to access the thumbnail of the photo",
    },
    description: {
      type: "string",
      description: "The description of the photo",
      maxLength: 500,
    },
    takenAt: {
      type: "string",
      format: "date-time",
      description: "The date and time when the photo was taken",
    },
  },
  required: ["metadata", "filename", "albumId", "url", "thumbnailUrl"],
} as const;

export const PhotoListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Photo",
      },
      type: "array",
    },
  },
} as const;

export const UploadPhotoRequestSchema = {
  properties: {
    albumId: {
      type: "string",
      format: "uuid",
      description: "The ID of the album this photo belongs to",
    },
    description: {
      type: "string",
      description: "The description of the photo",
      maxLength: 500,
    },
  },
  required: ["albumId"],
} as const;

export const UpdatePhotoRequestSchema = {
  properties: {
    description: {
      type: "string",
      description: "The description of the photo",
      maxLength: 500,
    },
    albumId: {
      type: "string",
      format: "uuid",
      description: "The ID of the album this photo belongs to",
    },
  },
} as const;

export const CommonResultSchema = {
  required: ["Success", "Message"],
  properties: {
    Success: {
      type: "boolean",
    },
    Message: {
      type: "string",
    },
    other: {
      anyOf: [
        {
          $ref: "#/components/schemas/ActionRegisterInstagram",
        },
      ],
    },
  },
} as const;

export const FrontendConfigSchema = {
  properties: {
    cookieAccessToken: {
      type: "string",
      description: "Cookie access token",
    },
    dashPath: {
      type: "string",
      description: "Dashboard path",
    },
    hotKeyDebug: {
      type: "string",
      description: "Hot key debug",
    },
    defaultTenantAccessToken: {
      type: "string",
      description: "实验性质，默认租户的access token",
    },
  },
  required: ["cookieAccessToken", "dashPath", "hotKeyDebug", "defaultTenantAccessToken"],
} as const;

export const SiderbarConfigSchema = {
  properties: {
    logo: {
      type: "string",
      description: "logo",
    },
    sideritems: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItem",
      },
    },
    other: {
      oneOf: [
        {
          $ref: "#/components/schemas/FlowNames",
        },
        {
          $ref: "#/components/schemas/AgentEventType",
        },
        {
          $ref: "#/components/schemas/PlatformAccountList",
        },
        {
          $ref: "#/components/schemas/Content",
        },
        {
          $ref: "#/components/schemas/Part",
        },
        {
          $ref: "#/components/schemas/AdkSessionList",
        },
        {
          $ref: "#/components/schemas/AgentRunnerInput",
        },
        {
          $ref: "#/components/schemas/AgentRunnerOutput",
        },
      ],
    },
  },
} as const;

export const DashSidebarItemSchema = {
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    defaultExpanded: {
      type: "boolean",
      description: "默认展开",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItemLeaf",
      },
    },
  },
  required: ["title", "url"],
} as const;

export const DashSidebarItemLeafSchema = {
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
  },
  required: ["title", "url"],
} as const;

export const ModelSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/ModelProperties",
    },
  ],
} as const;

export const ModelFamilySchema = {
  type: "string",
  enum: ["r1", "openai", "unknown"],
} as const;

export const ModelTypesSchema = {
  type: "string",
  enum: ["OpenAIChatCompletionClient", "AzureOpenAIChatCompletionClient"],
} as const;

export const ModelPropertiesSchema = {
  required: [
    "name",
    "family",
    "provider",
    "vendor",
    "vision",
    "functionCalling",
    "jsonOutput",
    "apiKey",
    "apiBase",
    "model",
  ],
  properties: {
    name: {
      type: "string",
    },
    model: {
      type: "string",
    },
    provider: {
      type: "string",
    },
    apiKey: {
      type: "string",
    },
    apiBase: {
      type: "string",
    },
    vendor: {
      type: "string",
    },
    description: {
      type: "string",
    },
    family: {
      type: "string",
    },
    vision: {
      type: "boolean",
    },
    functionCalling: {
      type: "boolean",
    },
    jsonOutput: {
      type: "boolean",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const ModelListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Model",
      },
    },
  },
} as const;

export const FormFieldSchema = {
  required: ["type", "name"],
  properties: {
    type: {
      type: "string",
      enum: ["text", "number", "boolean", "array", "object"],
      default: "text",
    },
    name: {
      type: "string",
    },
    default_value: {
      type: "string",
    },
    label: {
      type: "string",
    },
    description: {
      type: "string",
    },
    required: {
      type: "boolean",
    },
    min: {
      type: "number",
    },
    max: {
      type: "number",
    },
    placeholder: {
      type: "string",
    },
  },
} as const;

export const SchemaFormSchema = {
  required: ["title", "fields"],
  properties: {
    form_type: {
      type: "string",
      enum: ["schema", "custom"],
      default: "schema",
    },
    form_name: {
      type: "string",
    },
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    layout: {
      type: "string",
      enum: ["vertical", "horizontal"],
      default: "vertical",
    },
    fields: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FormField",
      },
    },
  },
} as const;

export const ModelRunPropertiesSchema = {
  properties: {
    llmMessages: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    llmResponse: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const ModelRunSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/ModelRunProperties",
    },
  ],
} as const;

export const ModelRunListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ModelRun",
      },
    },
  },
} as const;

export const ModelRunUpsertSchema = {
  anyOf: [
    {
      $ref: "#/components/schemas/ModelRunProperties",
    },
  ],
} as const;

export const SitePropertiesSchema = {
  required: ["id", "tenant_id", "title", "description", "automation_enabled", "state", "enabled"],
  properties: {
    id: {
      type: "string",
      description: "站点ID",
    },
    tenant_id: {
      type: "string",
      description: "租户ID",
    },
    updated_at: {
      type: "string",
      description: "更新时间",
    },
    created_at: {
      type: "string",
      description: "创建时间",
    },
    enabled: {
      type: "boolean",
      description: "是否启用",
    },
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
    automation_enabled: {
      type: "boolean",
      description: "是否启用自动化",
    },
    state: {
      type: "object",
      description: "站点状态",
      properties: {
        status: {
          type: "string",
          description: "站点状态",
        },
      },
    },
  },
} as const;

export const SiteSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/SiteProperties",
    },
  ],
} as const;

export const SiteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Site",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteRequestSchema = {
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
    host: {
      type: "string",
      description: "入站域名(指定绑定入站域名)",
    },
  },
  required: ["title", "description"],
} as const;

export const CreateSiteResponseSchema = {
  $ref: "#/components/schemas/Site",
} as const;

export const UpdateSiteRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
  },
} as const;

export const SiteHostPropertiesSchema = {
  required: ["id", "host"],
  properties: {
    id: {
      type: "string",
      description: "site-host id",
    },
    title: {
      type: "string",
      description: "site-host 标题",
    },
    description: {
      type: "string",
      description: "site-host 描述",
    },
    host: {
      type: "string",
      description: "绑定域名",
    },
  },
} as const;

export const SiteHostSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/SiteHostProperties",
    },
  ],
} as const;

export const SiteHostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/SiteHost",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteHostRequestSchema = {
  $ref: "#/components/schemas/SiteHostProperties",
} as const;

export const UpdateSiteHostRequestSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const UpdateEndpointRequestSchema = {
  properties: {
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
  },
} as const;

export const EndpointSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
  required: ["metadata", "name", "url", "token", "type"],
} as const;

export const EndpointListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Endpoint",
      },
      type: "array",
    },
  },
} as const;

export const MtWorkerPropertiesSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const MtWorkerTaskSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const AgentEventTypeSchema = {
  type: "string",
  enum: [
    "ThoughtEvent",
    "TextMessage",
    "PlatformAccountFlowInput",
    "ChatMessageInput",
    "SocialAddFollowersInput",
    "SocialLoginInput",
    "TenantInitInput",
    "AskUserFunctionCallInput",
    "StartNewChatInput",
  ],
} as const;

export const FlowNamesSchema = {
  type: "string",
  enum: [
    "sys",
    "tenant",
    "assistant",
    "ag",
    "browser",
    "resource",
    "instagram",
    "social",
    "team",
    "adk",
  ],
} as const;

export const AgentRunnerInputSchema = {
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const AgentRunnerOutputSchema = {
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const AgentPropertiesSchema = {
  required: ["name", "description", "provider", "config", "teamId"],
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    provider: {
      type: "string",
    },
    config: {
      type: "object",
    },
    teamId: {
      type: "string",
    },
  },
} as const;

export const AgentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AgentProperties",
    },
  ],
} as const;

export const AgentListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Agent",
      },
    },
  },
} as const;

export const AgentTopicTypesSchema = {
  type: "string",
  enum: [
    "user",
    "human",
    "instagram",
    "browser",
    "socioety",
    "code",
    "router",
    "research",
    "writer",
    "tenant",
    "closure",
    "response",
  ],
} as const;

export const BrowserTaskSchema = {
  description: "浏览器(browser use)任务",
  required: ["content"],
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const BrowserOpenTaskSchema = {
  description: "打开浏览器备用,一般用于调试目的Open a browser and navigate to a URL.",
  required: ["url"],
  properties: {
    url: {
      type: "string",
    },
  },
} as const;

export const BrowserConfigSchema = {
  description: "浏览器配置(未完成)",
  properties: {
    persistent: {
      type: "boolean",
    },
  },
} as const;

export const ScheduledItemSchema = {
  required: ["id", "type", "trigger", "nextTrigger", "description"],
  properties: {
    id: {
      type: "string",
    },
    type: {
      type: "string",
      enum: ["cron", "scheduled", "delayed"],
    },
    trigger: {
      type: "string",
    },
    nextTrigger: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
} as const;

export const AdkSessionStateSchema = {
  properties: {
    type: {
      type: "string",
      enum: ["RootAgentState"],
    },
  },
} as const;

export const ToolTypesSchema = {
  type: "string",
  enum: ["code_executor", "social_login"],
} as const;

export const CodeExecutionInputSchema = {
  required: ["code"],
  properties: {
    code: {
      type: "string",
      description: "The contents of the Python code block that should be executed",
    },
  },
} as const;

export const CodeExecutionResultSchema = {
  required: ["output", "success"],
  properties: {
    output: {
      type: "string",
      description: "The result of the code execution",
    },
    success: {
      type: "boolean",
      description: "Whether the code execution was successful",
    },
  },
} as const;

export const SocialLoginResultSchema = {
  required: ["success"],
  properties: {
    success: {
      type: "boolean",
      description: "Whether the social login was successful",
    },
  },
} as const;

export const PlatformAccountPropertiesSchema = {
  required: ["username", "password", "platform"],
  properties: {
    label: {
      type: "string",
    },
    description: {
      type: "string",
    },
    username: {
      type: "string",
    },
    email: {
      type: "string",
    },
    password: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    state: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
  },
} as const;

export const PlatformAccountSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const PlatformAccountListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/PlatformAccount",
      },
      type: "array",
    },
  },
} as const;

export const PlatformAccountUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const AdkEventPropertiesSchema = {
  required: [
    "id",
    "app_name",
    "user_id",
    "session_id",
    "invocation_id",
    "author",
    "timestamp",
    "content",
    "actions",
  ],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    invocation_id: {
      type: "string",
    },
    author: {
      type: "string",
    },
    branch: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
    content: {
      $ref: "#/components/schemas/Content",
    },
    actions: {
      type: "object",
    },
  },
} as const;

export const AdkEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkEvent",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkEventSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkEventProperties",
    },
  ],
} as const;

export const AdkEventUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkEventProperties",
    },
  ],
} as const;

export const AdkEventOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const AdkAppPropertiesSchema = {
  required: [
    "id",
    "app_name",
    "user_id",
    "session_id",
    "invocation_id",
    "author",
    "branch",
    "timestamp",
    "content",
    "actions",
  ],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    invocation_id: {
      type: "string",
    },
    author: {
      type: "string",
    },
    branch: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
    content: {
      type: "object",
    },
    actions: {
      type: "object",
    },
  },
} as const;

export const AdkAppListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkApp",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkAppSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkAppProperties",
    },
  ],
} as const;

export const AdkAppUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkAppProperties",
    },
  ],
} as const;

export const AdkAppTypesSchema = {
  type: "string",
  enum: ["root", "instagram_agent", "assistant", "open_deep_research"],
} as const;

export const AdkSessionPropertiesSchema = {
  required: ["id", "app_name", "user_id", "state", "create_time", "update_time"],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    state: {
      $ref: "#/components/schemas/AdkSessionState",
    },
    title: {
      type: "string",
    },
    create_time: {
      type: "string",
    },
    update_time: {
      type: "string",
    },
  },
} as const;

export const AdkSessionSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkSessionProperties",
    },
  ],
} as const;

export const AdkSessionListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkSession",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkSessionUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkSessionProperties",
    },
  ],
} as const;

export const AdkUserStatePropertiesSchema = {
  required: [
    "id",
    "app_name",
    "user_id",
    "session_id",
    "invocation_id",
    "author",
    "branch",
    "timestamp",
    "content",
    "actions",
  ],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    invocation_id: {
      type: "string",
    },
    author: {
      type: "string",
    },
    branch: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
    content: {
      type: "object",
    },
    actions: {
      type: "object",
    },
  },
} as const;

export const AdkUserStateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkUserStateProperties",
    },
  ],
} as const;

export const AdkUserStateListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkUserState",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkUserStateUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkUserStateProperties",
    },
  ],
} as const;

export const ContentSchema = {
  properties: {
    role: {
      type: "string",
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Part",
      },
    },
  },
} as const;

export const UserContentSchema = {
  required: ["role", "parts"],
  properties: {
    role: {
      type: "string",
      enum: ["user"],
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Part",
      },
    },
  },
} as const;

export const ModelContentSchema = {
  required: ["role", "parts"],
  properties: {
    role: {
      type: "string",
      enum: ["model"],
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Part",
      },
    },
  },
} as const;

export const PartSchema = {
  properties: {
    text: {
      type: "string",
      description: "Optional. Text part (can be code)..",
    },
    video_metadata: {
      type: "object",
      description: "Metadata for a given video..",
    },
    thought: {
      type: "boolean",
      description: "Indicates if the part is thought from the model..",
    },
    code_execution_result: {
      type: "object",
    },
    executable_code: {
      type: "string",
      description: "Optional. Executable code..",
    },
    file_data: {
      type: "object",
      description: "Optional. File data..",
    },
    function_call: {
      type: "object",
      additionalProperties: true,
    },
    function_response: {
      type: "object",
      additionalProperties: true,
    },
    inline_data: {
      type: "object",
      description: "Optional. Inlined bytes data..",
    },
  },
} as const;

export const FunctionResponseSchema = {
  required: ["name", "response"],
  properties: {
    id: {
      type: "string",
      default: "",
      description:
        "The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.",
    },
    name: {
      type: "string",
      description:
        "The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].",
    },
    response: {
      type: "object",
      additionalProperties: true,
      description:
        'Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.',
    },
  },
} as const;

export const ArtifactSchema = {
  required: [
    "id",
    "created_at",
    "updated_at",
    "tenant_id",
    "user_id",
    "version",
    "session_id",
    "app_name",
    "filename",
    "type",
    "content",
  ],
  properties: {
    id: {
      type: "string",
      description: "The artifact id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    created_at: {
      type: "string",
      description: "The artifact created at.",
      format: "date-time",
    },
    updated_at: {
      type: "string",
      description: "The artifact updated at.",
    },
    tenant_id: {
      type: "string",
      description: "The artifact tenant id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    user_id: {
      type: "string",
    },
    version: {
      type: "integer",
    },
    session_id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    filename: {
      type: "string",
    },
    mime_type: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The artifact content.",
      format: "binary",
    },
  },
} as const;

export const ArtifactListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Artifact",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const SaveArtifactRequestSchema = {
  required: ["app_name", "user_id"],
  properties: {
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    filename: {
      type: "string",
    },
    content: {
      type: "string",
    },
  },
} as const;

export const PostSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog",
    },
  },
  required: ["metadata", "title", "content"],
} as const;

export const PostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Post",
      },
      type: "array",
    },
  },
} as const;

export const CreatePostRequestSchema = {
  properties: {
    siteId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
    slug: {
      type: "string",
      description: "The slug of the post",
      minLength: 3,
      maxLength: 200,
    },
    authorId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    status: {
      type: "string",
      enum: ["draft", "published"],
    },
  },
  required: ["siteId", "title", "content", "slug"],
} as const;

export const SandboxSchema = {
  required: ["id", "type", "url"],
  properties: {
    id: {
      type: "string",
    },
    type: {
      type: "string",
    },
    url: {
      type: "string",
    },
  },
} as const;

export const BotSchema = {
  required: ["id", "created_at", "updated_at", "name", "description", "config"],
  properties: {
    id: {
      type: "string",
    },
    created_at: {
      type: "string",
      format: "date-time",
    },
    updated_at: {
      type: "string",
      format: "date-time",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    config: {
      $ref: "#/components/schemas/BotConfig",
    },
  },
} as const;

export const BotListSchema = {
  required: ["pagination", "rows"],
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Bot",
      },
      type: "array",
    },
  },
} as const;

export const BotConfigSchema = {
  required: [
    "public_server",
    "private_server",
    "frontend_url",
    "local_http_server_enabled",
    "local_http_server_port",
    "adb_server_enabled",
    "hatchet_token",
  ],
  properties: {
    public_server: {
      type: "string",
    },
    private_server: {
      type: "string",
    },
    frontend_url: {
      type: "string",
    },
    local_http_server_enabled: {
      type: "boolean",
    },
    local_http_server_port: {
      type: "integer",
    },
    adb_server_enabled: {
      type: "boolean",
    },
    adb_server_port: {
      type: "integer",
      default: 5555,
    },
    hatchet_token: {
      type: "string",
    },
  },
} as const;

export const BotLocalStateSchema = {
  required: ["bot_id", "device_type", "host_name"],
  properties: {
    bot_id: {
      type: "string",
    },
    device_type: {
      type: "string",
      enum: ["unknown", "android", "ios", "web"],
    },
    host_name: {
      type: "string",
    },
  },
} as const;

export const SbWorkerProfileSchema = {
  required: [
    "frontendUrl",
    "isDebug",
    "autoStart",
    "defaultProfileName",
    "defaultProfileUrl",
    "defaultProfileType",
  ],
  properties: {
    frontendUrl: {
      type: "string",
    },
    isDebug: {
      type: "boolean",
    },
    autoStart: {
      type: "boolean",
    },
    defaultProfileName: {
      type: "string",
    },
    defaultProfileUrl: {
      type: "string",
    },
  },
} as const;

export const SbOutboundSchema = {
  description: "Sing-box outbound configuration",
  properties: {
    id: {
      type: "string",
      format: "uuid",
      description: "Unique identifier",
    },
    tag: {
      type: "string",
      description: "Tag name for this outbound",
    },
    type: {
      type: "string",
      description: "Type of outbound protocol",
    },
    server: {
      type: "string",
      description: "Server address",
    },
    server_port: {
      type: "integer",
      description: "Server port number",
    },
    password: {
      type: "string",
      description: "Authentication password",
      nullable: true,
    },
    security: {
      type: "string",
      description: "Security protocol",
      nullable: true,
    },
    domain_resolver: {
      type: "string",
      description: "Domain resolver configuration",
      nullable: true,
    },
    full_config: {
      type: "object",
      description: "Complete configuration in JSON format",
    },
    created_at: {
      type: "string",
      format: "date-time",
      description: "Creation timestamp",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      description: "Last update timestamp",
    },
  },
} as const;

export const SbOutboundListSchema = {
  description: "List of sing-box outbounds",
  properties: {
    outbounds: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SbOutbound",
      },
    },
  },
} as const;

export const SbOutboundCreateSchema = {
  description: "Create a new sing-box outbound",
  required: ["tag", "type", "server", "server_port", "full_config"],
  properties: {
    tag: {
      type: "string",
      description: "Tag name for this outbound",
    },
    type: {
      type: "string",
      description: "Type of outbound protocol",
    },
    server: {
      type: "string",
      description: "Server address",
    },
    server_port: {
      type: "integer",
      description: "Server port number",
    },
    password: {
      type: "string",
      description: "Authentication password",
      nullable: true,
    },
    security: {
      type: "string",
      description: "Security protocol",
      nullable: true,
    },
    domain_resolver: {
      type: "string",
      description: "Domain resolver configuration",
      nullable: true,
    },
    full_config: {
      type: "object",
      description: "Complete configuration in JSON format",
    },
  },
} as const;

export const SbImportRequestSchema = {
  required: ["url"],
  properties: {
    url: {
      type: "string",
    },
  },
} as const;

export const MobileHelloSchema = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
  },
} as const;

export const EventSchema = {
  required: ["key", "additionalMetadata"],
  properties: {
    key: {
      type: "string",
      description: "The key for the event.",
    },
    input: {
      type: "object",
      description: "The input for the event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
  },
} as const;

export const PushEventResponseSchema = {
  type: "object",
  required: ["success", "error"],
  properties: {
    success: {
      type: "boolean",
      description: "Whether the workflow was triggered successfully",
    },
    error: {
      type: "object",
      description: "The error message if the workflow was not triggered successfully",
    },
  },
} as const;

export const ActionRegisterInstagramSchema = {
  description: "(临时演示)注册Instagram账号",
  required: ["arg1"],
  properties: {
    arg1: {
      type: "string",
    },
  },
} as const;

export const SlackWebhookSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description: "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    teamName: {
      type: "string",
      description: "The team name associated with this slack webhook.",
    },
    teamId: {
      type: "string",
      description: "The team id associated with this slack webhook.",
    },
    channelName: {
      type: "string",
      description: "The channel name associated with this slack webhook.",
    },
    channelId: {
      type: "string",
      description: "The channel id associated with this slack webhook.",
    },
  },
  required: ["metadata", "tenantId", "teamName", "teamId", "channelName", "channelId"],
} as const;

export const ListSlackWebhooksSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SlackWebhook",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;
