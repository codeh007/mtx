// This file is auto-generated by @hey-api/openapi-ts

export const APIMetaSchema = {
  type: "object",
  properties: {
    auth: {
      $ref: "#/components/schemas/APIMetaAuth",
    },
    pylonAppId: {
      type: "string",
      description: "the Pylon app ID for usepylon.com chat support",
      example: "12345678-1234-1234-1234-123456789012",
    },
    posthog: {
      $ref: "#/components/schemas/APIMetaPosthog",
    },
    allowSignup: {
      type: "boolean",
      description: "whether or not users can sign up for this instance",
      example: true,
    },
    allowInvites: {
      type: "boolean",
      description: "whether or not users can invite other users to this instance",
      example: true,
    },
    allowCreateTenant: {
      type: "boolean",
      description: "whether or not users can create new tenants",
      example: true,
    },
    allowChangePassword: {
      type: "boolean",
      description: "whether or not users can change their password",
      example: true,
    },
  },
} as const;

export const APIMetaAuthSchema = {
  type: "object",
  properties: {
    schemes: {
      items: {
        type: "string",
      },
      type: "array",
      description: "the supported types of authentication",
      example: ["basic", "google"],
    },
  },
} as const;

export const APIMetaPosthogSchema = {
  type: "object",
  properties: {
    apiKey: {
      type: "string",
      description: "the PostHog API key",
      example: "phk_1234567890abcdef",
    },
    apiHost: {
      type: "string",
      description: "the PostHog API host",
      example: "https://posthog.example.com",
    },
  },
} as const;

export const ListAPIMetaIntegrationSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/APIMetaIntegration",
  },
} as const;

export const APIMetaIntegrationSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "the name of the integration",
      example: "github",
    },
    enabled: {
      type: "boolean",
      description: "whether this integration is enabled on the instance",
    },
  },
  required: ["name", "enabled"],
} as const;

export const APIErrorsSchema = {
  type: "object",
  properties: {
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/APIError",
      },
    },
  },
  required: ["errors"],
} as const;

export const APIErrorSchema = {
  type: "object",
  properties: {
    code: {
      type: "integer",
      description: "a custom Hatchet error code",
      format: "uint64",
      example: 1400,
    },
    field: {
      type: "string",
      description: "the field that this error is associated with, if applicable",
      example: "name",
    },
    description: {
      type: "string",
      description: "a description for this error",
      example: "A descriptive error message",
    },
    docs_link: {
      type: "string",
      description: "a link to the documentation for this error, if it exists",
      example: "github.com/hatchet-dev/hatchet",
    },
  },
  required: ["description"],
} as const;

export const PaginationResponseSchema = {
  type: "object",
  properties: {
    current_page: {
      type: "integer",
      description: "the current page",
      format: "int64",
      example: 2,
    },
    next_page: {
      type: "integer",
      description: "the next page",
      format: "int64",
      example: 3,
    },
    num_pages: {
      type: "integer",
      description: "the total number of pages for listing",
      format: "int64",
      example: 10,
    },
  },
  example: {
    next_page: 3,
    num_pages: 10,
    current_page: 2,
  },
} as const;

export const APIResourceMetaSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "the id of this resource, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 0,
      maxLength: 36,
    },
    createdAt: {
      type: "string",
      description: "the time that this resource was created",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    updatedAt: {
      type: "string",
      description: "the time that this resource was last updated",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
  },
  required: ["id", "createdAt", "updatedAt"],
} as const;

export const UserSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    emailVerified: {
      type: "boolean",
      description: "Whether the user has verified their email address.",
    },
    hasPassword: {
      type: "boolean",
      description: "Whether the user has a password set.",
    },
    emailHash: {
      type: "string",
      description: "A hash of the user's email address for use with Pylon Support Chat",
    },
  },
  required: ["metadata", "email", "emailVerified"],
  type: "object",
} as const;

export const UserTenantPublicSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
  },
  required: ["email"],
  type: "object",
} as const;

export const UserLoginRequestSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["email", "password"],
  type: "object",
} as const;

export const UserChangePasswordRequestSchema = {
  properties: {
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
    newPassword: {
      type: "string",
      description: "The new password for the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["password", "newPassword"],
  type: "object",
} as const;

export const UserRegisterRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["name", "email", "password"],
  type: "object",
} as const;

export const UserTenantMembershipsListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    version: {
      $ref: "#/components/schemas/TenantVersion",
      description: "The version of the tenant.",
    },
  },
  required: ["metadata", "name", "slug", "version"],
  type: "object",
} as const;

export const TenantMemberSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    user: {
      $ref: "#/components/schemas/UserTenantPublic",
      description: "The user associated with this tenant member.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this tenant member.",
    },
  },
  required: ["metadata", "user", "role"],
  type: "object",
} as const;

export const TenantMemberListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantMemberRoleSchema = {
  enum: ["OWNER", "ADMIN", "MEMBER"],
  type: "string",
} as const;

export const TenantResourceSchema = {
  enum: ["WORKER", "WORKER_SLOT", "EVENT", "WORKFLOW_RUN", "TASK_RUN", "CRON", "SCHEDULE"],
  type: "string",
} as const;

export const TenantResourceLimitSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    resource: {
      $ref: "#/components/schemas/TenantResource",
      description: "The resource associated with this limit.",
    },
    limitValue: {
      type: "integer",
      description: "The limit associated with this limit.",
    },
    alarmValue: {
      type: "integer",
      description: "The alarm value associated with this limit to warn of approaching limit value.",
    },
    value: {
      type: "integer",
      description: "The current value associated with this limit.",
    },
    window: {
      type: "string",
      description: "The meter window for the limit. (i.e. 1 day, 1 week, 1 month)",
    },
    lastRefill: {
      type: "string",
      description: "The last time the limit was refilled.",
      format: "date-time",
    },
  },
  required: ["metadata", "tenantId", "resource", "limitValue", "value"],
  type: "object",
} as const;

export const TenantResourcePolicySchema = {
  properties: {
    limits: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TenantResourceLimit",
      },
      description: "A list of resource limits for the tenant.",
    },
  },
  required: ["limits"],
  type: "object",
} as const;

export const CreateTenantInviteRequestSchema = {
  properties: {
    email: {
      type: "string",
      description: "The email of the user to invite.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["email", "role"],
  type: "object",
} as const;

export const UpdateTenantInviteRequestSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["role"],
  type: "object",
} as const;

export const TenantAlertingSettingsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
    },
    lastAlertedAt: {
      type: "string",
      description: "The last time an alert was sent.",
      format: "date-time",
    },
  },
  required: ["metadata", "maxAlertingFrequency"],
  type: "object",
} as const;

export const TenantAlertEmailGroupSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
    },
  },
  required: ["metadata", "emails"],
  type: "object",
} as const;

export const TenantAlertEmailGroupListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantAlertEmailGroup",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const UpdateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const TenantInviteSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    email: {
      type: "string",
      description: "The email of the user to invite.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenantId: {
      type: "string",
      description: "The tenant id associated with this tenant invite.",
    },
    tenantName: {
      type: "string",
      description: "The tenant name for the tenant.",
    },
    expires: {
      type: "string",
      description: "The time that this invite expires.",
      format: "date-time",
    },
  },
  required: ["metadata", "email", "role", "expires", "tenantId"],
  type: "object",
} as const;

export const TenantInviteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantInvite",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const QueueMetricsSchema = {
  type: "object",
  properties: {
    numQueued: {
      type: "integer",
      description: "The number of items in the queue.",
    },
    numRunning: {
      type: "integer",
      description: "The number of items running.",
    },
    numPending: {
      type: "integer",
      description: "The number of items pending.",
    },
  },
  required: ["numQueued", "numRunning", "numPending"],
} as const;

export const TenantQueueMetricsSchema = {
  properties: {
    total: {
      $ref: "#/components/schemas/QueueMetrics",
      description: "The total queue metrics.",
    },
    workflow: {
      type: "object",
      additionalProperties: {
        $ref: "#/components/schemas/QueueMetrics",
      },
    },
    queues: {
      type: "object",
      additionalProperties: {
        type: "integer",
      },
    },
  },
} as const;

export const TenantStepRunQueueMetricsSchema = {
  properties: {
    queues: {
      type: "object",
    },
  },
} as const;

export const AcceptInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const RejectInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const TenantListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Tenant",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,hatchetName",
      },
    },
  },
  required: ["name", "slug"],
  type: "object",
} as const;

export const UpdateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description: "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
    version: {
      $ref: "#/components/schemas/TenantVersion",
      description: "The version of the tenant.",
    },
  },
  type: "object",
} as const;

export const EventSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    key: {
      type: "string",
      description: "The key for the event.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this event.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this event.",
    },
    workflowRunSummary: {
      $ref: "#/components/schemas/EventWorkflowRunSummary",
      description: "The workflow run summary for this event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
  },
  required: ["metadata", "key", "tenantId"],
} as const;

export const EventDataSchema = {
  properties: {
    data: {
      type: "string",
      description: "The data for the event (JSON bytes).",
    },
  },
  required: ["data"],
} as const;

export const CreateEventRequestSchema = {
  properties: {
    key: {
      type: "string",
      description: "The key for the event.",
    },
    data: {
      type: "object",
      description: "The data for the event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
    priority: {
      type: "integer",
      description: "The priority of the event.",
      format: "int32",
    },
    scope: {
      type: "string",
      description: "The scope for event filtering.",
    },
  },
  required: ["key", "data"],
} as const;

export const BulkCreateEventRequestSchema = {
  properties: {
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateEventRequest",
      },
    },
  },
  required: ["events"],
} as const;

export const BulkCreateEventResponseSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Event",
      },
      description: "The events.",
    },
  },
  required: ["metadata", "events"],
} as const;

export const EventWorkflowRunSummarySchema = {
  properties: {
    pending: {
      type: "integer",
      format: "int64",
      description: "The number of pending runs.",
    },
    running: {
      type: "integer",
      format: "int64",
      description: "The number of running runs.",
    },
    queued: {
      type: "integer",
      format: "int64",
      description: "The number of queued runs.",
    },
    succeeded: {
      type: "integer",
      format: "int64",
      description: "The number of succeeded runs.",
    },
    failed: {
      type: "integer",
      format: "int64",
      description: "The number of failed runs.",
    },
    cancelled: {
      type: "integer",
      format: "int64",
      description: "The number of cancelled runs.",
    },
  },
} as const;

export const EventOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const EventOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const EventSearchSchema = {
  type: "string",
} as const;

export const EventKeyListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/EventKey",
      },
      type: "array",
    },
  },
} as const;

export const EventKeySchema = {
  type: "string",
  description: "The key for the event.",
} as const;

export const WorkflowIDSchema = {
  type: "string",
  description: "A workflow ID.",
} as const;

export const EventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Event",
      },
      type: "array",
    },
  },
} as const;

export const V1EventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        properties: {
          metadata: {
            $ref: "#/components/schemas/APIResourceMeta",
          },
          key: {
            type: "string",
            description: "The key for the event.",
          },
          tenant: {
            $ref: "#/components/schemas/Tenant",
            description: "The tenant associated with this event.",
          },
          tenantId: {
            type: "string",
            description: "The ID of the tenant associated with this event.",
          },
          workflowRunSummary: {
            description: "The workflow run summary for this event.",
            properties: {
              running: {
                type: "integer",
                format: "int64",
                description: "The number of running runs.",
              },
              queued: {
                type: "integer",
                format: "int64",
                description: "The number of queued runs.",
              },
              succeeded: {
                type: "integer",
                format: "int64",
                description: "The number of succeeded runs.",
              },
              failed: {
                type: "integer",
                format: "int64",
                description: "The number of failed runs.",
              },
              cancelled: {
                type: "integer",
                format: "int64",
                description: "The number of cancelled runs.",
              },
            },
            required: ["running", "queued", "succeeded", "failed", "cancelled"],
          },
          additionalMetadata: {
            type: "object",
            description: "Additional metadata for the event.",
          },
        },
        required: ["metadata", "key", "tenantId", "workflowRunSummary"],
      },
      type: "array",
    },
  },
} as const;

export const V1FilterListSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1Filter",
      },
    },
  },
} as const;

export const V1FilterSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this filter.",
    },
    workflowId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
      description: "The workflow id associated with this filter.",
    },
    scope: {
      type: "string",
      description:
        "The scope associated with this filter. Used for subsetting candidate filters at evaluation time",
    },
    expression: {
      type: "string",
      description: "The expression associated with this filter.",
    },
    payload: {
      type: "object",
      description: "Additional payload data associated with the filter",
    },
  },
  required: ["metadata", "tenantId", "workflowId", "scope", "expression", "payload"],
} as const;

export const RateLimitSchema = {
  properties: {
    key: {
      type: "string",
      description: "The key for the rate limit.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this rate limit.",
    },
    limitValue: {
      type: "integer",
      description: "The maximum number of requests allowed within the window.",
    },
    value: {
      type: "integer",
      description: "The current number of requests made within the window.",
    },
    window: {
      type: "string",
      description: "The window of time in which the limitValue is enforced.",
    },
    lastRefill: {
      type: "string",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
      description: "The last time the rate limit was refilled.",
    },
  },
  required: ["key", "tenantId", "limitValue", "value", "window", "lastRefill"],
} as const;

export const RateLimitListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/RateLimit",
      },
      type: "array",
    },
  },
} as const;

export const RateLimitOrderByFieldSchema = {
  type: "string",
  enum: ["key", "value", "limitValue"],
} as const;

export const RateLimitOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const ReplayEventRequestSchema = {
  properties: {
    eventIds: {
      type: "array",
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["eventIds"],
} as const;

export const CancelEventRequestSchema = {
  properties: {
    eventIds: {
      type: "array",
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["eventIds"],
} as const;

export const WorkflowSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the workflow.",
    },
    description: {
      type: "string",
      description: "The description of the workflow.",
    },
    isPaused: {
      type: "boolean",
      description: "Whether the workflow is paused.",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowVersionMeta",
      },
    },
    tags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTag",
      },
      description: "The tags of the workflow.",
    },
    jobs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Job",
      },
      description: "The jobs of the workflow.",
    },
    tenantId: {
      type: "string",
      description: "The tenant id of the workflow.",
    },
  },
  required: ["metadata", "name", "tenantId"],
  type: "object",
} as const;

export const WorkflowUpdateRequestSchema = {
  type: "object",
  properties: {
    isPaused: {
      type: "boolean",
      description: "Whether the workflow is paused.",
    },
  },
} as const;

export const WorkflowConcurrencySchema = {
  type: "object",
  properties: {
    maxRuns: {
      type: "integer",
      format: "int32",
      description: "The maximum number of concurrent workflow runs.",
    },
    limitStrategy: {
      description: "The strategy to use when the concurrency limit is reached.",
      type: "string",
      enum: ["CANCEL_IN_PROGRESS", "DROP_NEWEST", "QUEUE_NEWEST", "GROUP_ROUND_ROBIN"],
    },
    getConcurrencyGroup: {
      type: "string",
      description: "An action which gets the concurrency group for the WorkflowRun.",
    },
  },
  required: ["maxRuns", "limitStrategy", "getConcurrencyGroup"],
} as const;

export const WorkflowVersionMetaSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    version: {
      type: "string",
      description: "The version of the workflow.",
    },
    order: {
      type: "integer",
      format: "int32",
    },
    workflowId: {
      type: "string",
    },
    workflow: {
      $ref: "#/components/schemas/Workflow",
    },
  },
  required: ["metadata", "version", "order", "workflowId"],
} as const;

export const WorkflowVersionSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    version: {
      type: "string",
      description: "The version of the workflow.",
    },
    order: {
      type: "integer",
      format: "int32",
    },
    workflowId: {
      type: "string",
    },
    sticky: {
      type: "string",
      description: "The sticky strategy of the workflow.",
    },
    defaultPriority: {
      type: "integer",
      format: "int32",
      description: "The default priority of the workflow.",
    },
    workflow: {
      $ref: "#/components/schemas/Workflow",
    },
    concurrency: {
      $ref: "#/components/schemas/WorkflowConcurrency",
    },
    triggers: {
      $ref: "#/components/schemas/WorkflowTriggers",
    },
    scheduleTimeout: {
      type: "string",
    },
    jobs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Job",
      },
    },
  },
  required: ["metadata", "version", "order", "workflowId"],
} as const;

export const WorkflowVersionDefinitionSchema = {
  type: "object",
  properties: {
    rawDefinition: {
      type: "string",
      description: "The raw YAML definition of the workflow.",
    },
  },
  required: ["rawDefinition"],
} as const;

export const WorkflowTagSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "The name of the workflow.",
    },
    color: {
      type: "string",
      description: "The description of the workflow.",
    },
  },
  required: ["name", "color"],
} as const;

export const WorkflowListSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Workflow",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const WorkflowTriggersSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    workflow_version_id: {
      type: "string",
    },
    tenant_id: {
      type: "string",
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTriggerEventRef",
      },
    },
    crons: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTriggerCronRef",
      },
    },
  },
} as const;

export const WorkflowTriggerEventRefSchema = {
  type: "object",
  properties: {
    parent_id: {
      type: "string",
    },
    event_key: {
      type: "string",
    },
  },
} as const;

export const WorkflowTriggerCronRefSchema = {
  type: "object",
  properties: {
    parent_id: {
      type: "string",
    },
    cron: {
      type: "string",
    },
  },
} as const;

export const JobSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    versionId: {
      type: "string",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
      description: "The description of the job.",
    },
    steps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Step",
      },
    },
    timeout: {
      type: "string",
      description: "The timeout of the job.",
    },
  },
  required: ["metadata", "tenantId", "versionId", "name", "steps"],
} as const;

export const StepSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    readableId: {
      type: "string",
      description: "The readable id of the step.",
    },
    tenantId: {
      type: "string",
    },
    jobId: {
      type: "string",
    },
    action: {
      type: "string",
    },
    timeout: {
      type: "string",
      description: "The timeout of the step.",
    },
    children: {
      type: "array",
      items: {
        type: "string",
      },
    },
    parents: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "readableId", "tenantId", "jobId", "action", "nextId"],
} as const;

export const WorkflowWorkersCountSchema = {
  type: "object",
  properties: {
    freeSlotCount: {
      type: "integer",
    },
    maxSlotCount: {
      type: "integer",
    },
    workflowRunId: {
      type: "string",
    },
  },
  required: ["count"],
} as const;

export const WorkflowRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowVersion: {
      $ref: "#/components/schemas/WorkflowVersion",
    },
    status: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    displayName: {
      type: "string",
    },
    jobRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/JobRun",
      },
    },
    triggeredBy: {
      $ref: "#/components/schemas/WorkflowRunTriggeredBy",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    duration: {
      type: "integer",
      example: 1000,
    },
    parentId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentStepRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: ["metadata", "tenantId", "workflowVersionId", "status", "triggeredBy"],
} as const;

export const WorkflowRunShapeSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowVersion: {
      $ref: "#/components/schemas/WorkflowVersion",
    },
    status: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    displayName: {
      type: "string",
    },
    jobRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/JobRun",
      },
    },
    triggeredBy: {
      $ref: "#/components/schemas/WorkflowRunTriggeredBy",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    duration: {
      type: "integer",
      example: 1000,
    },
    parentId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentStepRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: ["metadata", "tenantId", "workflowVersionId", "status", "triggeredBy"],
} as const;

export const ReplayWorkflowRunsRequestSchema = {
  properties: {
    workflowRunIds: {
      type: "array",
      maxLength: 500,
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["workflowRunIds"],
} as const;

export const ReplayWorkflowRunsResponseSchema = {
  properties: {
    workflowRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowRun",
      },
    },
  },
  required: ["workflowRuns"],
} as const;

export const WorkflowRunListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowRun",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const ScheduledWorkflowsSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    triggerAt: {
      type: "string",
      format: "date-time",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
    workflowRunCreatedAt: {
      type: "string",
      format: "date-time",
    },
    workflowRunName: {
      type: "string",
    },
    workflowRunStatus: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    workflowRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    method: {
      type: "string",
      enum: ["DEFAULT", "API"],
    },
    priority: {
      type: "integer",
      minimum: 1,
      maximum: 3,
      format: "int32",
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "workflowName",
    "workflowId",
    "triggerAt",
    "method",
  ],
} as const;

export const ScheduledWorkflowsListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ScheduledWorkflows",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const ScheduledWorkflowsOrderByFieldSchema = {
  type: "string",
  enum: ["triggerAt", "createdAt"],
} as const;

export const ScheduledRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "QUEUED", "SCHEDULED"],
} as const;

export const CronWorkflowsSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    cron: {
      type: "string",
    },
    name: {
      type: "string",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
    enabled: {
      type: "boolean",
    },
    method: {
      type: "string",
      enum: ["DEFAULT", "API"],
    },
    priority: {
      type: "integer",
      minimum: 1,
      maximum: 3,
      format: "int32",
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "workflowName",
    "workflowId",
    "cron",
    "enabled",
    "method",
  ],
} as const;

export const CronWorkflowsListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CronWorkflows",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const CronWorkflowsOrderByFieldSchema = {
  type: "string",
  enum: ["name", "createdAt"],
} as const;

export const WorkflowRunOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt", "startedAt", "finishedAt", "duration"],
} as const;

export const WorkflowRunOrderByDirectionSchema = {
  type: "string",
  enum: ["ASC", "DESC"],
} as const;

export const WorkflowRunsMetricsSchema = {
  type: "object",
  properties: {
    counts: {
      type: "object",
      $ref: "#/components/schemas/WorkflowRunsMetricsCounts",
    },
  },
} as const;

export const WorkflowRunsMetricsCountsSchema = {
  type: "object",
  properties: {
    PENDING: {
      type: "integer",
    },
    RUNNING: {
      type: "integer",
    },
    SUCCEEDED: {
      type: "integer",
    },
    FAILED: {
      type: "integer",
    },
    QUEUED: {
      type: "integer",
    },
    CANCELLED: {
      type: "integer",
    },
  },
} as const;

export const WorkflowRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "QUEUED", "BACKOFF"],
} as const;

export const WorkflowRunStatusListSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/WorkflowRunStatus",
  },
} as const;

export const WorkflowKindSchema = {
  type: "string",
  enum: ["FUNCTION", "DURABLE", "DAG"],
} as const;

export const WorkflowKindListSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/WorkflowKind",
  },
} as const;

export const WorkflowRunsCancelRequestSchema = {
  type: "object",
  properties: {
    workflowRunIds: {
      type: "array",
      items: {
        type: "string",
        format: "uuid",
        minLength: 36,
        maxLength: 36,
      },
    },
  },
  required: ["workflowRunIds"],
} as const;

export const JobRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "BACKOFF"],
} as const;

export const StepRunStatusSchema = {
  type: "string",
  enum: [
    "PENDING",
    "PENDING_ASSIGNMENT",
    "ASSIGNED",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "CANCELLING",
    "BACKOFF",
  ],
} as const;

export const JobRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    workflowRun: {
      $ref: "#/components/schemas/WorkflowRun",
    },
    jobId: {
      type: "string",
    },
    job: {
      $ref: "#/components/schemas/Job",
    },
    tickerId: {
      type: "string",
    },
    stepRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/StepRun",
      },
    },
    status: {
      $ref: "#/components/schemas/JobRunStatus",
    },
    result: {
      type: "object",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["metadata", "tenantId", "workflowRunId", "jobId", "status"],
} as const;

export const WorkflowRunTriggeredBySchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    parentWorkflowRunId: {
      type: "string",
    },
    eventId: {
      type: "string",
    },
    cronParentId: {
      type: "string",
    },
    cronSchedule: {
      type: "string",
    },
  },
  required: ["metadata"],
} as const;

export const StepRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    jobRunId: {
      type: "string",
    },
    stepId: {
      type: "string",
    },
    step: {
      $ref: "#/components/schemas/Step",
    },
    childWorkflowsCount: {
      type: "integer",
    },
    parents: {
      type: "array",
      items: {
        type: "string",
      },
    },
    childWorkflowRuns: {
      type: "array",
      items: {
        type: "string",
      },
    },
    workerId: {
      type: "string",
    },
    input: {
      type: "string",
    },
    output: {
      type: "string",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
    requeueAfter: {
      type: "string",
      format: "date-time",
    },
    result: {
      type: "object",
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    startedAtEpoch: {
      type: "integer",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAtEpoch: {
      type: "integer",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAtEpoch: {
      type: "integer",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAtEpoch: {
      type: "integer",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["metadata", "tenantId", "jobRunId", "stepId", "status"],
} as const;

export const StepRunEventReasonSchema = {
  type: "string",
  enum: [
    "REQUEUED_NO_WORKER",
    "REQUEUED_RATE_LIMIT",
    "SCHEDULING_TIMED_OUT",
    "ASSIGNED",
    "STARTED",
    "ACKNOWLEDGED",
    "FINISHED",
    "FAILED",
    "RETRYING",
    "CANCELLED",
    "TIMEOUT_REFRESHED",
    "REASSIGNED",
    "TIMED_OUT",
    "SLOT_RELEASED",
    "RETRIED_BY_USER",
    "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
    "WORKFLOW_RUN_GROUP_KEY_FAILED",
  ],
} as const;

export const StepRunEventSeveritySchema = {
  type: "string",
  enum: ["INFO", "WARNING", "CRITICAL"],
} as const;

export const StepRunEventSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    timeFirstSeen: {
      type: "string",
      format: "date-time",
    },
    timeLastSeen: {
      type: "string",
      format: "date-time",
    },
    stepRunId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    reason: {
      $ref: "#/components/schemas/StepRunEventReason",
    },
    severity: {
      $ref: "#/components/schemas/StepRunEventSeverity",
    },
    message: {
      type: "string",
    },
    count: {
      type: "integer",
    },
    data: {
      type: "object",
    },
  },
  required: ["id", "timeFirstSeen", "timeLastSeen", "reason", "severity", "message", "count"],
} as const;

export const StepRunEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/StepRunEvent",
      },
      type: "array",
    },
  },
} as const;

export const StepRunArchiveSchema = {
  type: "object",
  properties: {
    stepRunId: {
      type: "string",
    },
    order: {
      type: "integer",
    },
    input: {
      type: "string",
    },
    output: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    error: {
      type: "string",
    },
    retryCount: {
      type: "integer",
    },
    createdAt: {
      type: "string",
      format: "date-time",
    },
    startedAtEpoch: {
      type: "integer",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAtEpoch: {
      type: "integer",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAtEpoch: {
      type: "integer",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAtEpoch: {
      type: "integer",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["stepRunId", "retryCount", "order", "createdAt"],
} as const;

export const StepRunArchiveListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/StepRunArchive",
      },
      type: "array",
    },
  },
} as const;

export const WorkerRuntimeInfoSchema = {
  properties: {
    sdkVersion: {
      type: "string",
    },
    language: {
      $ref: "#/components/schemas/WorkerRuntimeSDKs",
    },
    languageVersion: {
      type: "string",
    },
    os: {
      type: "string",
    },
    runtimeExtra: {
      type: "string",
    },
  },
} as const;

export const WorkerRuntimeSDKsSchema = {
  type: "string",
  enum: ["GOLANG", "PYTHON", "TYPESCRIPT"],
} as const;

export const WorkerListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Worker",
      },
      type: "array",
    },
  },
} as const;

export const SemaphoreSlotsSchema = {
  properties: {
    stepRunId: {
      type: "string",
      description: "The step run id.",
      format: "uuid",
    },
    actionId: {
      type: "string",
      description: "The action id.",
    },
    startedAt: {
      type: "string",
      description: "The time this slot was started.",
      format: "date-time",
    },
    timeoutAt: {
      type: "string",
      description: "The time this slot will timeout.",
      format: "date-time",
    },
    workflowRunId: {
      type: "string",
      description: "The workflow run id.",
      format: "uuid",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
  },
  required: ["stepRunId", "actionId", "workflowRunId", "status"],
} as const;

export const RecentStepRunsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    actionId: {
      type: "string",
      description: "The action id.",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    workflowRunId: {
      type: "string",
      format: "uuid",
    },
  },
  required: ["actionId", "metadata", "status", "workflowRunId"],
  type: "object",
} as const;

export const WorkerSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the worker.",
    },
    type: {
      type: "string",
      enum: ["SELFHOSTED", "MANAGED", "WEBHOOK"],
    },
    lastHeartbeatAt: {
      type: "string",
      description: "The time this worker last sent a heartbeat.",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    lastListenerEstablished: {
      type: "string",
      description: "The time this worker last sent a heartbeat.",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    actions: {
      type: "array",
      description: "The actions this worker can perform.",
      items: {
        type: "string",
      },
    },
    slots: {
      type: "array",
      description: "The semaphore slot state for the worker.",
      items: {
        $ref: "#/components/schemas/SemaphoreSlots",
      },
    },
    recentStepRuns: {
      type: "array",
      description: "The recent step runs for the worker.",
      items: {
        $ref: "#/components/schemas/RecentStepRuns",
      },
    },
    status: {
      type: "string",
      description: "The status of the worker.",
      enum: ["ACTIVE", "INACTIVE", "PAUSED"],
    },
    maxRuns: {
      type: "integer",
      description: "The maximum number of runs this worker can execute concurrently.",
    },
    availableRuns: {
      type: "integer",
      description: "The number of runs this worker can execute concurrently.",
    },
    dispatcherId: {
      type: "string",
      description: "the id of the assigned dispatcher, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    labels: {
      type: "array",
      description: "The current label state of the worker.",
      items: {
        $ref: "#/components/schemas/WorkerLabel",
      },
    },
    webhookUrl: {
      type: "string",
      description: "The webhook URL for the worker.",
    },
    webhookId: {
      type: "string",
      description: "The webhook ID for the worker.",
      format: "uuid",
    },
    runtimeInfo: {
      $ref: "#/components/schemas/WorkerRuntimeInfo",
    },
  },
  required: ["metadata", "name", "type"],
  type: "object",
} as const;

export const WorkerLabelSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    key: {
      type: "string",
      description: "The key of the label.",
    },
    value: {
      type: "string",
      description: "The value of the label.",
    },
  },
  required: ["metadata", "key"],
  type: "object",
} as const;

export const UpdateWorkerRequestSchema = {
  properties: {
    isPaused: {
      type: "boolean",
      description: "Whether the worker is paused and cannot accept new runs.",
    },
  },
  type: "object",
} as const;

export const APITokenSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the API token.",
      maxLength: 255,
    },
    expiresAt: {
      type: "string",
      format: "date-time",
      description: "When the API token expires.",
    },
  },
  required: ["metadata", "name", "expiresAt"],
} as const;

export const CreateAPITokenRequestSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "A name for the API token.",
      maxLength: 255,
    },
    expiresIn: {
      type: "string",
      description: "The duration for which the token is valid.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
  },
  required: ["name"],
} as const;

export const CreateAPITokenResponseSchema = {
  type: "object",
  properties: {
    token: {
      type: "string",
      description: "The API token.",
    },
  },
  required: ["token"],
} as const;

export const ListAPITokensResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/APIToken",
      },
      type: "array",
    },
  },
} as const;

export const RerunStepRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
  },
  required: ["input"],
} as const;

export const TriggerWorkflowRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
    additionalMetadata: {
      type: "object",
    },
  },
  required: ["input"],
} as const;

export const ScheduleWorkflowRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
    additionalMetadata: {
      type: "object",
    },
    triggerAt: {
      type: "string",
      format: "date-time",
    },
    priority: {
      type: "integer",
      minimum: 1,
      maximum: 3,
      format: "int32",
    },
  },
  required: ["input", "additionalMetadata", "triggerAt"],
} as const;

export const CreateCronWorkflowTriggerRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
    additionalMetadata: {
      type: "object",
    },
    cronName: {
      type: "string",
    },
    cronExpression: {
      type: "string",
    },
    priority: {
      type: "integer",
      minimum: 1,
      maximum: 3,
      format: "int32",
    },
  },
  required: ["input", "additionalMetadata", "cronName", "cronExpression"],
} as const;

export const CreatePullRequestFromStepRunSchema = {
  properties: {
    branchName: {
      type: "string",
    },
  },
  required: ["branchName"],
} as const;

export const GetStepRunDiffResponseSchema = {
  properties: {
    diffs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/StepRunDiff",
      },
    },
  },
  required: ["diffs"],
} as const;

export const StepRunDiffSchema = {
  properties: {
    key: {
      type: "string",
    },
    original: {
      type: "string",
    },
    modified: {
      type: "string",
    },
  },
  required: ["key", "original", "modified"],
} as const;

export const ListPullRequestsResponseSchema = {
  properties: {
    pullRequests: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PullRequest",
      },
    },
  },
  required: ["pullRequests"],
} as const;

export const PullRequestSchema = {
  properties: {
    repositoryOwner: {
      type: "string",
    },
    repositoryName: {
      type: "string",
    },
    pullRequestID: {
      type: "integer",
    },
    pullRequestTitle: {
      type: "string",
    },
    pullRequestNumber: {
      type: "integer",
    },
    pullRequestHeadBranch: {
      type: "string",
    },
    pullRequestBaseBranch: {
      type: "string",
    },
    pullRequestState: {
      $ref: "#/components/schemas/PullRequestState",
    },
  },
  required: [
    "repositoryOwner",
    "repositoryName",
    "pullRequestID",
    "pullRequestTitle",
    "pullRequestNumber",
    "pullRequestHeadBranch",
    "pullRequestBaseBranch",
    "pullRequestState",
  ],
} as const;

export const PullRequestStateSchema = {
  type: "string",
  enum: ["open", "closed"],
} as const;

export const LogLineSchema = {
  properties: {
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The creation date of the log line.",
    },
    message: {
      type: "string",
      description: "The log message.",
    },
    metadata: {
      type: "object",
      description: "The log metadata.",
    },
  },
  required: ["createdAt", "message", "metadata"],
} as const;

export const LogLineLevelSchema = {
  type: "string",
  enum: ["DEBUG", "INFO", "WARN", "ERROR"],
} as const;

export const LogLineListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/LogLine",
      },
      type: "array",
    },
  },
} as const;

export const LogLineOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const LogLineOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const LogLineSearchSchema = {
  type: "string",
} as const;

export const LogLineLevelFieldSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/LogLineLevel",
  },
} as const;

export const SNSIntegrationSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description: "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    topicArn: {
      type: "string",
      description: "The Amazon Resource Name (ARN) of the SNS topic.",
    },
    ingestUrl: {
      type: "string",
      description: "The URL to send SNS messages to.",
    },
  },
  required: ["metadata", "tenantId", "topicArn"],
} as const;

export const ListSNSIntegrationsSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SNSIntegration",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;

export const SlackWebhookSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description: "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    teamName: {
      type: "string",
      description: "The team name associated with this slack webhook.",
    },
    teamId: {
      type: "string",
      description: "The team id associated with this slack webhook.",
    },
    channelName: {
      type: "string",
      description: "The channel name associated with this slack webhook.",
    },
    channelId: {
      type: "string",
      description: "The channel id associated with this slack webhook.",
    },
  },
  required: ["metadata", "tenantId", "teamName", "teamId", "channelName", "channelId"],
} as const;

export const ListSlackWebhooksSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SlackWebhook",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;

export const CreateSNSIntegrationRequestSchema = {
  properties: {
    topicArn: {
      type: "string",
      description: "The Amazon Resource Name (ARN) of the SNS topic.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,min=1,max=256",
      },
    },
  },
  required: ["topicArn"],
  type: "object",
} as const;

export const WorkflowMetricsSchema = {
  type: "object",
  properties: {
    groupKeyRunsCount: {
      type: "integer",
      description: "The number of runs for a specific group key (passed via filter)",
    },
    groupKeyCount: {
      type: "integer",
      description: "The total number of concurrency group keys.",
    },
  },
} as const;

export const WebhookWorkerSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
  },
  required: ["metadata", "name", "url"],
  type: "object",
} as const;

export const WebhookWorkerRequestMethodSchema = {
  enum: ["GET", "POST", "PUT"],
} as const;

export const WebhookWorkerRequestSchema = {
  properties: {
    created_at: {
      type: "string",
      format: "date-time",
      description: "The date and time the request was created.",
    },
    method: {
      $ref: "#/components/schemas/WebhookWorkerRequestMethod",
      description: "The HTTP method used for the request.",
    },
    statusCode: {
      type: "integer",
      description: "The HTTP status code of the response.",
    },
  },
  required: ["created_at", "method", "statusCode"],
  type: "object",
} as const;

export const WebhookWorkerRequestListResponseSchema = {
  properties: {
    requests: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WebhookWorkerRequest",
      },
      description: "The list of webhook requests.",
    },
  },
  type: "object",
} as const;

export const WebhookWorkerCreatedSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
    secret: {
      type: "string",
      description: "The secret key for validation.",
    },
  },
  required: ["metadata", "name", "url", "secret"],
  type: "object",
} as const;

export const WebhookWorkerCreateRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
    secret: {
      type: "string",
      description:
        "The secret key for validation. If not provided, a random secret will be generated.",
      minLength: 32,
    },
  },
  required: ["name", "url"],
  type: "object",
} as const;

export const WebhookWorkerCreateResponseSchema = {
  properties: {
    worker: {
      $ref: "#/components/schemas/WebhookWorkerCreated",
    },
  },
  type: "object",
} as const;

export const WebhookWorkerListResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/WebhookWorker",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const V1TaskSummaryListSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskSummary",
      },
      description: "The list of tasks",
    },
  },
  required: ["pagination", "rows"],
} as const;

export const V1WorkflowRunDisplayNameListSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        properties: {
          metadata: {
            $ref: "#/components/schemas/APIResourceMeta",
          },
          displayName: {
            type: "string",
          },
        },
        required: ["metadata", "displayName"],
      },
      description: "The list of display names",
    },
  },
  required: ["pagination", "rows"],
} as const;

export const V1TaskSummarySchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    actionId: {
      type: "string",
      description: "The action ID of the task.",
    },
    retryCount: {
      type: "integer",
      description: "The number of retries of the task.",
    },
    attempt: {
      type: "integer",
      description: "The attempt number of the task.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the task run.",
    },
    children: {
      type: "array",
      items: {
        type: "object",
        additionalProperties: true,
      },
      description: "The list of children tasks",
    },
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task was created.",
    },
    displayName: {
      type: "string",
      description: "The display name of the task run.",
    },
    duration: {
      type: "integer",
      description: "The duration of the task run, in milliseconds.",
    },
    errorMessage: {
      type: "string",
      description: "The error message of the task run (for the latest run)",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run finished.",
    },
    input: {
      type: "object",
      "x-go-type": "openapi.NonNullableJSON",
      "x-go-type-import": {
        path: "github.com/hatchet-dev/hatchet/api/v1/server/oas",
        name: "NonNullableJSON",
      },
      "x-nullable": false,
      description: "The input of the task run.",
    },
    numSpawnedChildren: {
      type: "integer",
      description: "The number of spawned children tasks",
    },
    output: {
      type: "object",
      "x-go-type": "openapi.NonNullableJSON",
      "x-go-type-import": {
        path: "github.com/hatchet-dev/hatchet/api/v1/server/oas",
        name: "NonNullableJSON",
      },
      "x-nullable": false,
      description: "The output of the task run (for the latest run)",
    },
    status: {
      $ref: "#/components/schemas/V1TaskStatus",
    },
    startedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run started.",
    },
    stepId: {
      type: "string",
      description: "The step ID of the task.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    taskExternalId: {
      type: "string",
      description: "The external ID of the task.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    taskId: {
      type: "integer",
      description: "The ID of the task.",
    },
    taskInsertedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task was inserted.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant.",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    type: {
      description: "The type of the workflow (whether it's a DAG or a task)",
      type: "string",
      enum: ["DAG", "TASK"],
    },
    workflowId: {
      type: "string",
      format: "uuid",
    },
    workflowName: {
      type: "string",
    },
    workflowRunExternalId: {
      type: "string",
      format: "uuid",
      description: "The external ID of the workflow run",
    },
    workflowVersionId: {
      type: "string",
      format: "uuid",
      description: "The version ID of the workflow",
    },
  },
  required: [
    "metadata",
    "createdAt",
    "displayName",
    "id",
    "input",
    "numSpawnedChildren",
    "output",
    "status",
    "taskExternalId",
    "taskId",
    "taskInsertedAt",
    "tenantId",
    "type",
    "workflowId",
    "workflowRunExternalId",
  ],
} as const;

export const V1DagChildrenSchema = {
  type: "object",
  properties: {
    dagId: {
      type: "string",
      format: "uuid",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskSummary",
      },
    },
  },
} as const;

export const V1TaskEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/V1TaskEvent",
      },
      type: "array",
    },
  },
} as const;

export const V1TaskStatusSchema = {
  type: "string",
  enum: ["QUEUED", "RUNNING", "COMPLETED", "CANCELLED", "FAILED"],
} as const;

export const V1TaskRunMetricsSchema = {
  type: "array",
  items: {
    type: "object",
    properties: {
      status: {
        $ref: "#/components/schemas/V1TaskStatus",
      },
      count: {
        type: "integer",
      },
    },
    required: ["status", "count"],
  },
} as const;

export const V1TaskPointMetricSchema = {
  type: "object",
  properties: {
    time: {
      type: "string",
      format: "date-time",
    },
    SUCCEEDED: {
      type: "integer",
    },
    FAILED: {
      type: "integer",
    },
  },
  required: ["time", "SUCCEEDED", "FAILED"],
} as const;

export const V1TaskPointMetricsSchema = {
  type: "object",
  properties: {
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskPointMetric",
      },
    },
  },
} as const;

export const V1TaskFilterSchema = {
  type: "object",
  properties: {
    since: {
      type: "string",
      format: "date-time",
    },
    until: {
      type: "string",
      format: "date-time",
    },
    statuses: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskStatus",
      },
    },
    workflowIds: {
      type: "array",
      items: {
        type: "string",
        format: "uuid",
      },
    },
    additionalMetadata: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["since"],
} as const;

export const V1CancelTaskRequestSchema = {
  type: "object",
  properties: {
    externalIds: {
      type: "array",
      description:
        "A list of external IDs, which can refer to either task or workflow run external IDs",
      items: {
        type: "string",
        format: "uuid",
        minLength: 36,
        maxLength: 36,
      },
    },
    filter: {
      $ref: "#/components/schemas/V1TaskFilter",
    },
  },
} as const;

export const V1ReplayTaskRequestSchema = {
  type: "object",
  properties: {
    externalIds: {
      type: "array",
      description:
        "A list of external IDs, which can refer to either task or workflow run external IDs",
      items: {
        type: "string",
        format: "uuid",
        minLength: 36,
        maxLength: 36,
      },
    },
    filter: {
      $ref: "#/components/schemas/V1TaskFilter",
    },
  },
} as const;

export const V1WorkflowRunSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    status: {
      $ref: "#/components/schemas/V1TaskStatus",
    },
    startedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run started.",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run finished.",
    },
    duration: {
      type: "integer",
      description: "The duration of the task run, in milliseconds.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant.",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the task run.",
    },
    displayName: {
      type: "string",
      description: "The display name of the task run.",
    },
    workflowId: {
      type: "string",
      format: "uuid",
    },
    output: {
      type: "object",
      "x-go-type": "openapi.NonNullableJSON",
      "x-go-type-import": {
        path: "github.com/hatchet-dev/hatchet/api/v1/server/oas",
        name: "NonNullableJSON",
      },
      "x-nullable": false,
      description: "The output of the task run (for the latest run)",
    },
    errorMessage: {
      type: "string",
      description: "The error message of the task run (for the latest run)",
    },
    workflowVersionId: {
      type: "string",
      format: "uuid",
      description: "The ID of the workflow version.",
    },
    input: {
      type: "object",
      "x-go-type": "openapi.NonNullableJSON",
      "x-go-type-import": {
        path: "github.com/hatchet-dev/hatchet/api/v1/server/oas",
        name: "NonNullableJSON",
      },
      "x-nullable": false,
      description: "The input of the task run.",
    },
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run was created.",
    },
    parentTaskExternalId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
  },
  required: [
    "metadata",
    "id",
    "status",
    "tenantId",
    "displayName",
    "workflowId",
    "output",
    "input",
  ],
} as const;

export const V1WorkflowRunDetailsSchema = {
  properties: {
    run: {
      $ref: "#/components/schemas/V1WorkflowRun",
    },
    taskEvents: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskEvent",
      },
      description: "The list of task events for the workflow run",
    },
    shape: {
      type: "array",
      items: {
        type: "object",
        properties: {
          taskExternalId: {
            type: "string",
            format: "uuid",
            minLength: 36,
            maxLength: 36,
          },
          stepId: {
            type: "string",
            format: "uuid",
            minLength: 36,
            maxLength: 36,
          },
          childrenStepIds: {
            type: "array",
            items: {
              type: "string",
              format: "uuid",
              minLength: 36,
              maxLength: 36,
            },
          },
          taskName: {
            type: "string",
          },
        },
        required: ["taskExternalId", "stepId", "childrenStepIds", "taskName"],
      },
    },
    tasks: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskSummary",
      },
    },
  },
  required: ["run", "taskEvents", "shape", "tasks"],
} as const;

export const V1TaskRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELLED"],
} as const;

export const V1TriggerWorkflowRunRequestSchema = {
  properties: {
    workflowName: {
      type: "string",
      description: "The name of the workflow.",
    },
    input: {
      type: "object",
    },
    additionalMetadata: {
      type: "object",
    },
    priority: {
      type: "integer",
      description: "The priority of the workflow run.",
    },
  },
  required: ["workflowName", "input"],
} as const;

export const V1LogLineSchema = {
  properties: {
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The creation date of the log line.",
    },
    message: {
      type: "string",
      description: "The log message.",
    },
    metadata: {
      type: "object",
      description: "The log metadata.",
    },
    retryCount: {
      type: "integer",
      description: "The retry count of the log line.",
    },
    attempt: {
      type: "integer",
      description: "The attempt number of the log line.",
    },
    level: {
      $ref: "#/components/schemas/V1LogLineLevel",
      description: "The log level.",
    },
  },
  required: ["createdAt", "message", "metadata"],
} as const;

export const V1LogLineLevelSchema = {
  type: "string",
  enum: ["DEBUG", "INFO", "WARN", "ERROR"],
} as const;

export const V1LogLineListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/V1LogLine",
      },
      type: "array",
    },
  },
} as const;

export const V1TaskTimingSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    depth: {
      type: "integer",
      description: "The depth of the task in the waterfall.",
    },
    status: {
      $ref: "#/components/schemas/V1TaskStatus",
    },
    taskDisplayName: {
      type: "string",
      description: "The display name of the task run.",
    },
    taskExternalId: {
      type: "string",
      description: "The external ID of the task.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    taskId: {
      type: "integer",
      description: "The ID of the task.",
    },
    taskInsertedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task was inserted.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant.",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentTaskExternalId: {
      type: "string",
      description: "The external ID of the parent task.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    queuedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run was queued.",
    },
    startedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run started.",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
      description: "The timestamp the task run finished.",
    },
    workflowRunId: {
      type: "string",
      format: "uuid",
      description: "The external ID of the workflow run.",
    },
    retryCount: {
      type: "integer",
      description: "The number of retries of the task.",
    },
    attempt: {
      type: "integer",
      description: "The attempt number of the task.",
    },
  },
  required: [
    "metadata",
    "depth",
    "status",
    "taskDisplayName",
    "taskExternalId",
    "taskId",
    "taskInsertedAt",
    "tenantId",
  ],
} as const;

export const V1TaskTimingListSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/V1TaskTiming",
      },
      description: "The list of task timings",
    },
  },
  required: ["pagination", "rows"],
} as const;

export const V1CreateFilterRequestSchema = {
  type: "object",
  properties: {
    workflowId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
      description: "The workflow id",
    },
    expression: {
      type: "string",
      description: "The expression for the filter",
    },
    scope: {
      type: "string",
      description:
        "The scope associated with this filter. Used for subsetting candidate filters at evaluation time",
    },
    payload: {
      type: "object",
      description: "The payload for the filter",
    },
  },
  required: ["workflowId", "scope", "expression"],
} as const;

export const TenantVersionSchema = {
  enum: ["V0", "V1"],
  type: "string",
} as const;

export const V1TaskEventSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    taskId: {
      type: "string",
      format: "uuid",
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
    eventType: {
      type: "string",
      enum: [
        "REQUEUED_NO_WORKER",
        "REQUEUED_RATE_LIMIT",
        "SCHEDULING_TIMED_OUT",
        "ASSIGNED",
        "STARTED",
        "FINISHED",
        "FAILED",
        "RETRYING",
        "CANCELLED",
        "TIMED_OUT",
        "REASSIGNED",
        "SLOT_RELEASED",
        "TIMEOUT_REFRESHED",
        "RETRIED_BY_USER",
        "SENT_TO_WORKER",
        "RATE_LIMIT_ERROR",
        "ACKNOWLEDGED",
        "CREATED",
        "QUEUED",
        "SKIPPED",
      ],
    },
    message: {
      type: "string",
    },
    errorMessage: {
      type: "string",
    },
    output: {
      type: "string",
    },
    workerId: {
      type: "string",
      format: "uuid",
    },
    taskDisplayName: {
      type: "string",
    },
    retryCount: {
      type: "integer",
      description: "The number of retries of the task.",
    },
    attempt: {
      type: "integer",
      description: "The attempt number of the task.",
    },
  },
  required: ["id", "taskId", "timestamp", "eventType", "message"],
} as const;

export const APIResourceMetaPropertiesSchema = {
  required: ["metadata"],
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
  },
} as const;

export const CommonResultSchema = {
  required: ["Success", "Message"],
  properties: {
    Success: {
      type: "boolean",
    },
    Message: {
      type: "string",
    },
  },
} as const;

export const TenantParameterSchema = {
  type: "string",
  format: "uuid",
  minLength: 36,
  maxLength: 36,
} as const;

export const ModelSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/ModelProperties",
    },
  ],
} as const;

export const ModelFamilySchema = {
  type: "string",
  enum: ["r1", "openai", "unknown"],
} as const;

export const ModelTypesSchema = {
  type: "string",
  enum: ["OpenAIChatCompletionClient", "AzureOpenAIChatCompletionClient"],
} as const;

export const ModelPropertiesSchema = {
  required: [
    "name",
    "family",
    "provider",
    "vendor",
    "vision",
    "functionCalling",
    "jsonOutput",
    "apiKey",
    "apiBase",
    "model",
  ],
  properties: {
    name: {
      type: "string",
    },
    model: {
      type: "string",
    },
    provider: {
      type: "string",
    },
    apiKey: {
      type: "string",
    },
    apiBase: {
      type: "string",
    },
    vendor: {
      type: "string",
    },
    description: {
      type: "string",
    },
    family: {
      type: "string",
    },
    vision: {
      type: "boolean",
    },
    functionCalling: {
      type: "boolean",
    },
    jsonOutput: {
      type: "boolean",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const ModelListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Model",
      },
    },
  },
} as const;

export const FormFieldSchema = {
  required: ["type", "name"],
  properties: {
    type: {
      type: "string",
      enum: ["text", "number", "boolean", "array", "object"],
      default: "text",
    },
    name: {
      type: "string",
    },
    default_value: {
      type: "string",
    },
    label: {
      type: "string",
    },
    description: {
      type: "string",
    },
    required: {
      type: "boolean",
    },
    min: {
      type: "number",
    },
    max: {
      type: "number",
    },
    placeholder: {
      type: "string",
    },
  },
} as const;

export const SchemaFormSchema = {
  required: ["title", "fields"],
  properties: {
    form_type: {
      type: "string",
      enum: ["schema", "custom"],
      default: "schema",
    },
    form_name: {
      type: "string",
    },
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    layout: {
      type: "string",
      enum: ["vertical", "horizontal"],
      default: "vertical",
    },
    fields: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FormField",
      },
    },
  },
} as const;

export const ModelRunPropertiesSchema = {
  properties: {
    llmMessages: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    llmResponse: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const ModelRunSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/ModelRunProperties",
    },
  ],
} as const;

export const ModelRunListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ModelRun",
      },
    },
  },
} as const;

export const ModelRunUpsertSchema = {
  anyOf: [
    {
      $ref: "#/components/schemas/ModelRunProperties",
    },
  ],
} as const;

export const SitePropertiesSchema = {
  required: ["metadata", "title", "description", "automation_enabled", "state"],
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
    automation_enabled: {
      type: "boolean",
      description: "是否启用自动化",
    },
    state: {
      type: "object",
      description: "站点状态",
      properties: {
        status: {
          type: "string",
          description: "站点状态",
        },
      },
    },
  },
} as const;

export const SiteSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/SiteProperties",
    },
  ],
} as const;

export const SiteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Site",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteRequestSchema = {
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
    host: {
      type: "string",
      description: "入站域名(指定绑定入站域名)",
    },
  },
  required: ["title", "description"],
} as const;

export const CreateSiteResponseSchema = {
  $ref: "#/components/schemas/Site",
} as const;

export const UpdateSiteRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
  },
} as const;

export const SiteHostPropertiesSchema = {
  required: ["host"],
  properties: {
    title: {
      type: "string",
      description: "site-host 标题",
    },
    description: {
      type: "string",
      description: "site-host 描述",
    },
    host: {
      type: "string",
      description: "绑定域名",
    },
  },
} as const;

export const SiteHostSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/SiteHostProperties",
    },
  ],
} as const;

export const SiteHostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/SiteHost",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteHostRequestSchema = {
  $ref: "#/components/schemas/SiteHostProperties",
} as const;

export const UpdateSiteHostRequestSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const FrontendConfigSchema = {
  properties: {
    cookieAccessToken: {
      type: "string",
      description: "Cookie access token",
    },
    dashPath: {
      type: "string",
      description: "Dashboard path",
    },
    hotKeyDebug: {
      type: "string",
      description: "Hot key debug",
    },
    defaultTenantAccessToken: {
      type: "string",
      description: "实验性质，默认租户的access token",
    },
  },
  required: ["cookieAccessToken", "dashPath", "hotKeyDebug", "defaultTenantAccessToken"],
} as const;

export const SiderbarConfigSchema = {
  properties: {
    logo: {
      type: "string",
      description: "logo",
    },
    sideritems: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItem",
      },
    },
    other: {
      oneOf: [
        {
          $ref: "#/components/schemas/FlowNames",
        },
        {
          $ref: "#/components/schemas/AgentEventType",
        },
        {
          $ref: "#/components/schemas/PlatformAccountList",
        },
        {
          $ref: "#/components/schemas/Content",
        },
        {
          $ref: "#/components/schemas/Part",
        },
        {
          $ref: "#/components/schemas/AdkSessionList",
        },
        {
          $ref: "#/components/schemas/AgentRunnerInput",
        },
        {
          $ref: "#/components/schemas/AgentRunnerOutput",
        },
      ],
    },
  },
} as const;

export const DashSidebarItemSchema = {
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    defaultExpanded: {
      type: "boolean",
      description: "默认展开",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItemLeaf",
      },
    },
  },
  required: ["title", "url"],
} as const;

export const DashSidebarItemLeafSchema = {
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
  },
  required: ["title", "url"],
} as const;

export const UpdateEndpointRequestSchema = {
  properties: {
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
  },
} as const;

export const EndpointSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
  required: ["metadata", "name", "url", "token", "type"],
} as const;

export const EndpointListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Endpoint",
      },
      type: "array",
    },
  },
} as const;

export const MtWorkerPropertiesSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const MtWorkerTaskSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const AgentEventTypeSchema = {
  type: "string",
  enum: [
    "ThoughtEvent",
    "TextMessage",
    "PlatformAccountFlowInput",
    "ChatMessageInput",
    "SocialAddFollowersInput",
    "SocialLoginInput",
    "TenantInitInput",
    "AskUserFunctionCallInput",
    "StartNewChatInput",
  ],
} as const;

export const FlowNamesSchema = {
  type: "string",
  enum: [
    "sys",
    "tenant",
    "assistant",
    "ag",
    "browser",
    "resource",
    "instagram",
    "social",
    "team",
    "adk",
  ],
} as const;

export const AgentRunnerInputSchema = {
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const AgentRunnerOutputSchema = {
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const AgentPropertiesSchema = {
  required: ["name", "description", "provider", "config", "teamId"],
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    provider: {
      type: "string",
    },
    config: {
      type: "object",
    },
    teamId: {
      type: "string",
    },
  },
} as const;

export const AgentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AgentProperties",
    },
  ],
} as const;

export const AgentListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Agent",
      },
    },
  },
} as const;

export const AgentTopicTypesSchema = {
  type: "string",
  enum: [
    "user",
    "human",
    "instagram",
    "browser",
    "socioety",
    "code",
    "router",
    "research",
    "writer",
    "tenant",
    "closure",
    "response",
  ],
} as const;

export const BrowserTaskSchema = {
  description: "浏览器(browser use)任务",
  required: ["content"],
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const BrowserOpenTaskSchema = {
  description: "打开浏览器备用,一般用于调试目的Open a browser and navigate to a URL.",
  required: ["url"],
  properties: {
    url: {
      type: "string",
    },
  },
} as const;

export const BrowserConfigSchema = {
  description: "浏览器配置(未完成)",
  properties: {
    persistent: {
      type: "boolean",
    },
  },
} as const;

export const ScheduledItemSchema = {
  required: ["id", "type", "trigger", "nextTrigger", "description"],
  properties: {
    id: {
      type: "string",
    },
    type: {
      type: "string",
      enum: ["cron", "scheduled", "delayed"],
    },
    trigger: {
      type: "string",
    },
    nextTrigger: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
} as const;

export const AdkSessionStateSchema = {
  properties: {
    type: {
      type: "string",
      enum: ["RootAgentState"],
    },
  },
} as const;

export const ToolTypesSchema = {
  type: "string",
  enum: ["code_executor", "social_login"],
} as const;

export const CodeExecutionInputSchema = {
  required: ["code"],
  properties: {
    code: {
      type: "string",
      description: "The contents of the Python code block that should be executed",
    },
  },
} as const;

export const CodeExecutionResultSchema = {
  required: ["output", "success"],
  properties: {
    output: {
      type: "string",
      description: "The result of the code execution",
    },
    success: {
      type: "boolean",
      description: "Whether the code execution was successful",
    },
  },
} as const;

export const SocialLoginResultSchema = {
  required: ["success"],
  properties: {
    success: {
      type: "boolean",
      description: "Whether the social login was successful",
    },
  },
} as const;

export const PlatformSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const PlatformListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Platform",
      },
      type: "array",
    },
  },
} as const;

export const PlatformUpdateSchema = {
  required: ["metadata", "name", "url"],
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const PlatformAccountPropertiesSchema = {
  required: ["username", "password", "platform"],
  properties: {
    label: {
      type: "string",
    },
    description: {
      type: "string",
    },
    username: {
      type: "string",
    },
    email: {
      type: "string",
    },
    password: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    state: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
  },
} as const;

export const PlatformAccountCreateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const PlatformAccountSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const PlatformAccountListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/PlatformAccount",
      },
      type: "array",
    },
  },
} as const;

export const PlatformAccountUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const AdkEventPropertiesSchema = {
  required: [
    "id",
    "app_name",
    "user_id",
    "session_id",
    "invocation_id",
    "author",
    "timestamp",
    "content",
    "actions",
  ],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    invocation_id: {
      type: "string",
    },
    author: {
      type: "string",
    },
    branch: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
    content: {
      $ref: "#/components/schemas/Content",
    },
    actions: {
      type: "object",
    },
  },
} as const;

export const AdkEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkEvent",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkEventSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkEventProperties",
    },
  ],
} as const;

export const AdkEventUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkEventProperties",
    },
  ],
} as const;

export const AdkEventOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const AdkAppPropertiesSchema = {
  required: [
    "id",
    "app_name",
    "user_id",
    "session_id",
    "invocation_id",
    "author",
    "branch",
    "timestamp",
    "content",
    "actions",
  ],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    invocation_id: {
      type: "string",
    },
    author: {
      type: "string",
    },
    branch: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
    content: {
      type: "object",
    },
    actions: {
      type: "object",
    },
  },
} as const;

export const AdkAppListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkApp",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkAppSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkAppProperties",
    },
  ],
} as const;

export const AdkAppUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkAppProperties",
    },
  ],
} as const;

export const AdkAppTypesSchema = {
  type: "string",
  enum: ["root", "instagram_agent", "assistant", "open_deep_research"],
} as const;

export const AdkSessionPropertiesSchema = {
  required: ["id", "app_name", "user_id", "state", "create_time", "update_time"],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    state: {
      $ref: "#/components/schemas/AdkSessionState",
    },
    title: {
      type: "string",
    },
    create_time: {
      type: "string",
    },
    update_time: {
      type: "string",
    },
  },
} as const;

export const AdkSessionSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkSessionProperties",
    },
  ],
} as const;

export const AdkSessionListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkSession",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkSessionUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkSessionProperties",
    },
  ],
} as const;

export const AdkUserStatePropertiesSchema = {
  required: [
    "id",
    "app_name",
    "user_id",
    "session_id",
    "invocation_id",
    "author",
    "branch",
    "timestamp",
    "content",
    "actions",
  ],
  properties: {
    id: {
      type: "string",
    },
    app_name: {
      type: "string",
    },
    user_id: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    invocation_id: {
      type: "string",
    },
    author: {
      type: "string",
    },
    branch: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
    content: {
      type: "object",
    },
    actions: {
      type: "object",
    },
  },
} as const;

export const AdkUserStateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AdkUserStateProperties",
    },
  ],
} as const;

export const AdkUserStateListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AdkUserState",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AdkUserStateUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdkUserStateProperties",
    },
  ],
} as const;

export const ContentSchema = {
  properties: {
    role: {
      type: "string",
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Part",
      },
    },
  },
} as const;

export const UserContentSchema = {
  required: ["role", "parts"],
  properties: {
    role: {
      type: "string",
      enum: ["user"],
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Part",
      },
    },
  },
} as const;

export const ModelContentSchema = {
  required: ["role", "parts"],
  properties: {
    role: {
      type: "string",
      enum: ["model"],
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Part",
      },
    },
  },
} as const;

export const PartSchema = {
  properties: {
    text: {
      type: "string",
      description: "Optional. Text part (can be code)..",
    },
    video_metadata: {
      type: "object",
      description: "Metadata for a given video..",
    },
    thought: {
      type: "boolean",
      description: "Indicates if the part is thought from the model..",
    },
    code_execution_result: {
      type: "object",
    },
    executable_code: {
      type: "string",
      description: "Optional. Executable code..",
    },
    file_data: {
      type: "object",
      description: "Optional. File data..",
    },
    function_call: {
      type: "object",
      additionalProperties: true,
    },
    function_response: {
      type: "object",
      additionalProperties: true,
    },
    inline_data: {
      type: "object",
      description: "Optional. Inlined bytes data..",
    },
  },
} as const;

export const FunctionResponseSchema = {
  required: ["name", "response"],
  properties: {
    id: {
      type: "string",
      default: "",
      description:
        "The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.",
    },
    name: {
      type: "string",
      description:
        "The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].",
    },
    response: {
      type: "object",
      additionalProperties: true,
      description:
        'Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.',
    },
  },
} as const;

export const ArtifactSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    state: {
      type: "object",
      description: "The tenant associated with this tenant blog.",
    },
    nextId: {
      type: "string",
    },
    prevId: {
      type: "string",
    },
  },
  required: ["metadata", "title", "state"],
} as const;

export const ArtifactListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Artifact",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const PostSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog",
    },
  },
  required: ["metadata", "title", "content"],
} as const;

export const PostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Post",
      },
      type: "array",
    },
  },
} as const;

export const CreatePostRequestSchema = {
  properties: {
    siteId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
    slug: {
      type: "string",
      description: "The slug of the post",
      minLength: 3,
      maxLength: 200,
    },
    authorId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    status: {
      type: "string",
      enum: ["draft", "published"],
    },
  },
  required: ["siteId", "title", "content", "slug"],
} as const;

export const DemoResponseSchema = {
  properties: {
    message: {
      type: "string",
      description: "The message to return",
    },
  },
  required: ["message"],
} as const;
