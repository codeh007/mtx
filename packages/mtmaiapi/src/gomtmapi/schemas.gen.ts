// This file is auto-generated by @hey-api/openapi-ts

export const APIMetaSchema = {
  type: "object",
  properties: {
    auth: {
      $ref: "#/components/schemas/APIMetaAuth",
    },
    pylonAppId: {
      type: "string",
      description: "the Pylon app ID for usepylon.com chat support",
      example: "12345678-1234-1234-1234-123456789012",
    },
    posthog: {
      $ref: "#/components/schemas/APIMetaPosthog",
    },
    allowSignup: {
      type: "boolean",
      description: "whether or not users can sign up for this instance",
      example: true,
    },
    allowInvites: {
      type: "boolean",
      description:
        "whether or not users can invite other users to this instance",
      example: true,
    },
    allowCreateTenant: {
      type: "boolean",
      description: "whether or not users can create new tenants",
      example: true,
    },
    allowChangePassword: {
      type: "boolean",
      description: "whether or not users can change their password",
      example: true,
    },
  },
} as const;

export const APIMetaAuthSchema = {
  type: "object",
  properties: {
    schemes: {
      items: {
        type: "string",
      },
      type: "array",
      description: "the supported types of authentication",
      example: ["basic", "google"],
    },
  },
} as const;

export const APIMetaPosthogSchema = {
  type: "object",
  properties: {
    apiKey: {
      type: "string",
      description: "the PostHog API key",
      example: "phk_1234567890abcdef",
    },
    apiHost: {
      type: "string",
      description: "the PostHog API host",
      example: "https://posthog.example.com",
    },
  },
} as const;

export const ListAPIMetaIntegrationSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/APIMetaIntegration",
  },
} as const;

export const APIMetaIntegrationSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "the name of the integration",
      example: "github",
    },
    enabled: {
      type: "boolean",
      description: "whether this integration is enabled on the instance",
    },
  },
  required: ["name", "enabled"],
} as const;

export const APIErrorsSchema = {
  type: "object",
  properties: {
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/APIError",
      },
    },
  },
  required: ["errors"],
} as const;

export const APIErrorSchema = {
  type: "object",
  properties: {
    code: {
      type: "integer",
      description: "a custom Hatchet error code",
      format: "uint64",
      example: 1400,
    },
    field: {
      type: "string",
      description:
        "the field that this error is associated with, if applicable",
      example: "name",
    },
    description: {
      type: "string",
      description: "a description for this error",
      example: "A descriptive error message",
    },
    docs_link: {
      type: "string",
      description: "a link to the documentation for this error, if it exists",
      example: "github.com/hatchet-dev/hatchet",
    },
  },
  required: ["description"],
} as const;

export const PaginationResponseSchema = {
  type: "object",
  properties: {
    current_page: {
      type: "integer",
      description: "the current page",
      format: "int64",
      example: 2,
    },
    next_page: {
      type: "integer",
      description: "the next page",
      format: "int64",
      example: 3,
    },
    num_pages: {
      type: "integer",
      description: "the total number of pages for listing",
      format: "int64",
      example: 10,
    },
  },
  example: {
    next_page: 3,
    num_pages: 10,
    current_page: 2,
  },
} as const;

export const APIResourceMetaSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "the id of this resource, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 0,
      maxLength: 36,
    },
    createdAt: {
      type: "string",
      description: "the time that this resource was created",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    updatedAt: {
      type: "string",
      description: "the time that this resource was last updated",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
  },
  required: ["id", "createdAt", "updatedAt"],
} as const;

export const UserSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    emailVerified: {
      type: "boolean",
      description: "Whether the user has verified their email address.",
    },
    hasPassword: {
      type: "boolean",
      description: "Whether the user has a password set.",
    },
    emailHash: {
      type: "string",
      description:
        "A hash of the user's email address for use with Pylon Support Chat",
    },
    userToken: {
      type: "string",
      description: "The user's token for use with Pylon Support Chat",
    },
  },
  required: ["metadata", "email", "emailVerified"],
  type: "object",
} as const;

export const UserTenantPublicSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
  },
  required: ["email"],
  type: "object",
} as const;

export const UserLoginRequestSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["email", "password"],
  type: "object",
} as const;

export const UserChangePasswordRequestSchema = {
  properties: {
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
    newPassword: {
      type: "string",
      description: "The new password for the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["password", "newPassword"],
  type: "object",
} as const;

export const UserRegisterRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["name", "email", "password"],
  type: "object",
} as const;

export const UserTenantMembershipsListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
  },
  required: ["metadata", "name", "slug"],
  type: "object",
} as const;

export const TenantMemberSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    user: {
      $ref: "#/components/schemas/UserTenantPublic",
      description: "The user associated with this tenant member.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this tenant member.",
    },
  },
  required: ["metadata", "user", "role"],
  type: "object",
} as const;

export const TenantMemberListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantMemberRoleSchema = {
  enum: ["OWNER", "ADMIN", "MEMBER"],
  type: "string",
} as const;

export const TenantResourceSchema = {
  enum: ["WORKER", "EVENT", "WORKFLOW_RUN", "CRON", "SCHEDULE"],
  type: "string",
} as const;

export const TenantResourceLimitSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    resource: {
      $ref: "#/components/schemas/TenantResource",
      description: "The resource associated with this limit.",
    },
    limitValue: {
      type: "integer",
      description: "The limit associated with this limit.",
    },
    alarmValue: {
      type: "integer",
      description:
        "The alarm value associated with this limit to warn of approaching limit value.",
    },
    value: {
      type: "integer",
      description: "The current value associated with this limit.",
    },
    window: {
      type: "string",
      description:
        "The meter window for the limit. (i.e. 1 day, 1 week, 1 month)",
    },
    lastRefill: {
      type: "string",
      description: "The last time the limit was refilled.",
      format: "date-time",
    },
  },
  required: ["metadata", "tenantId", "resource", "limitValue", "value"],
  type: "object",
} as const;

export const TenantResourcePolicySchema = {
  properties: {
    limits: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TenantResourceLimit",
      },
      description: "A list of resource limits for the tenant.",
    },
  },
  required: ["limits"],
  type: "object",
} as const;

export const CreateTenantInviteRequestSchema = {
  properties: {
    email: {
      type: "string",
      description: "The email of the user to invite.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["email", "role"],
  type: "object",
} as const;

export const UpdateTenantInviteRequestSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["role"],
  type: "object",
} as const;

export const TenantAlertingSettingsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
    },
    lastAlertedAt: {
      type: "string",
      description: "The last time an alert was sent.",
      format: "date-time",
    },
  },
  required: ["metadata", "maxAlertingFrequency"],
  type: "object",
} as const;

export const TenantAlertEmailGroupSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
    },
  },
  required: ["metadata", "emails"],
  type: "object",
} as const;

export const TenantAlertEmailGroupListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantAlertEmailGroup",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const UpdateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const TenantInviteSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    email: {
      type: "string",
      description: "The email of the user to invite.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenantId: {
      type: "string",
      description: "The tenant id associated with this tenant invite.",
    },
    tenantName: {
      type: "string",
      description: "The tenant name for the tenant.",
    },
    expires: {
      type: "string",
      description: "The time that this invite expires.",
      format: "date-time",
    },
  },
  required: ["metadata", "email", "role", "expires", "tenantId"],
  type: "object",
} as const;

export const TenantInviteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantInvite",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const QueueMetricsSchema = {
  type: "object",
  properties: {
    numQueued: {
      type: "integer",
      description: "The number of items in the queue.",
    },
    numRunning: {
      type: "integer",
      description: "The number of items running.",
    },
    numPending: {
      type: "integer",
      description: "The number of items pending.",
    },
  },
  required: ["numQueued", "numRunning", "numPending"],
} as const;

export const TenantQueueMetricsSchema = {
  properties: {
    total: {
      $ref: "#/components/schemas/QueueMetrics",
      description: "The total queue metrics.",
    },
    workflow: {
      type: "object",
      additionalProperties: {
        $ref: "#/components/schemas/QueueMetrics",
      },
    },
    queues: {
      type: "object",
      additionalProperties: {
        type: "integer",
      },
    },
  },
} as const;

export const TenantStepRunQueueMetricsSchema = {
  properties: {
    queues: {
      type: "object",
      additionalProperties: {
        type: "integer",
      },
    },
  },
} as const;

export const AcceptInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const RejectInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const TenantListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Tenant",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,hatchetName",
      },
    },
  },
  required: ["name", "slug"],
  type: "object",
} as const;

export const UpdateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
  },
  type: "object",
} as const;

export const EventSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    key: {
      type: "string",
      description: "The key for the event.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this event.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this event.",
    },
    workflowRunSummary: {
      $ref: "#/components/schemas/EventWorkflowRunSummary",
      description: "The workflow run summary for this event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
  },
  required: ["metadata", "key", "tenantId"],
} as const;

export const EventDataSchema = {
  properties: {
    data: {
      type: "string",
      description: "The data for the event (JSON bytes).",
    },
  },
  required: ["data"],
} as const;

export const CreateEventRequestSchema = {
  properties: {
    key: {
      type: "string",
      description: "The key for the event.",
    },
    data: {
      type: "object",
      description: "The data for the event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
  },
  required: ["key", "data"],
} as const;

export const BulkCreateEventRequestSchema = {
  properties: {
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateEventRequest",
      },
    },
  },
  required: ["events"],
} as const;

export const BulkCreateEventResponseSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Event",
      },
      description: "The events.",
    },
  },
  required: ["metadata", "events"],
} as const;

export const EventWorkflowRunSummarySchema = {
  properties: {
    pending: {
      type: "integer",
      format: "int64",
      description: "The number of pending runs.",
    },
    running: {
      type: "integer",
      format: "int64",
      description: "The number of running runs.",
    },
    queued: {
      type: "integer",
      format: "int64",
      description: "The number of queued runs.",
    },
    succeeded: {
      type: "integer",
      format: "int64",
      description: "The number of succeeded runs.",
    },
    failed: {
      type: "integer",
      format: "int64",
      description: "The number of failed runs.",
    },
  },
} as const;

export const EventOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const EventOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const EventSearchSchema = {
  type: "string",
} as const;

export const EventKeyListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/EventKey",
      },
      type: "array",
    },
  },
} as const;

export const EventKeySchema = {
  type: "string",
  description: "The key for the event.",
} as const;

export const WorkflowIDSchema = {
  type: "string",
  description: "A workflow ID.",
} as const;

export const EventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Event",
      },
      type: "array",
    },
  },
} as const;

export const RateLimitSchema = {
  properties: {
    key: {
      type: "string",
      description: "The key for the rate limit.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this rate limit.",
    },
    limitValue: {
      type: "integer",
      description: "The maximum number of requests allowed within the window.",
    },
    value: {
      type: "integer",
      description: "The current number of requests made within the window.",
    },
    window: {
      type: "string",
      description: "The window of time in which the limitValue is enforced.",
    },
    lastRefill: {
      type: "string",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
      description: "The last time the rate limit was refilled.",
    },
  },
  required: ["key", "tenantId", "limitValue", "value", "window", "lastRefill"],
} as const;

export const RateLimitListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/RateLimit",
      },
      type: "array",
    },
  },
} as const;

export const RateLimitOrderByFieldSchema = {
  type: "string",
  enum: ["key", "value", "limitValue"],
} as const;

export const RateLimitOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const ReplayEventRequestSchema = {
  properties: {
    eventIds: {
      type: "array",
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["eventIds"],
} as const;

export const CancelEventRequestSchema = {
  properties: {
    eventIds: {
      type: "array",
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["eventIds"],
} as const;

export const WorkflowSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the workflow.",
    },
    description: {
      type: "string",
      description: "The description of the workflow.",
    },
    isPaused: {
      type: "boolean",
      description: "Whether the workflow is paused.",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowVersionMeta",
      },
    },
    tags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTag",
      },
      description: "The tags of the workflow.",
    },
    jobs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Job",
      },
      description: "The jobs of the workflow.",
    },
  },
  required: ["metadata", "name"],
  type: "object",
} as const;

export const WorkflowUpdateRequestSchema = {
  type: "object",
  properties: {
    isPaused: {
      type: "boolean",
      description: "Whether the workflow is paused.",
    },
  },
} as const;

export const WorkflowConcurrencySchema = {
  type: "object",
  properties: {
    maxRuns: {
      type: "integer",
      format: "int32",
      description: "The maximum number of concurrent workflow runs.",
    },
    limitStrategy: {
      description: "The strategy to use when the concurrency limit is reached.",
      type: "string",
      enum: [
        "CANCEL_IN_PROGRESS",
        "DROP_NEWEST",
        "QUEUE_NEWEST",
        "GROUP_ROUND_ROBIN",
      ],
    },
    getConcurrencyGroup: {
      type: "string",
      description:
        "An action which gets the concurrency group for the WorkflowRun.",
    },
  },
  required: ["maxRuns", "limitStrategy", "getConcurrencyGroup"],
} as const;

export const WorkflowVersionMetaSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    version: {
      type: "string",
      description: "The version of the workflow.",
    },
    order: {
      type: "integer",
      format: "int32",
    },
    workflowId: {
      type: "string",
    },
    workflow: {
      $ref: "#/components/schemas/Workflow",
    },
  },
  required: ["metadata", "version", "order", "workflowId"],
} as const;

export const WorkflowVersionSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    version: {
      type: "string",
      description: "The version of the workflow.",
    },
    order: {
      type: "integer",
      format: "int32",
    },
    workflowId: {
      type: "string",
    },
    sticky: {
      type: "string",
      description: "The sticky strategy of the workflow.",
    },
    defaultPriority: {
      type: "integer",
      format: "int32",
      description: "The default priority of the workflow.",
    },
    workflow: {
      $ref: "#/components/schemas/Workflow",
    },
    concurrency: {
      $ref: "#/components/schemas/WorkflowConcurrency",
    },
    triggers: {
      $ref: "#/components/schemas/WorkflowTriggers",
    },
    scheduleTimeout: {
      type: "string",
    },
    jobs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Job",
      },
    },
  },
  required: ["metadata", "version", "order", "workflowId"],
} as const;

export const WorkflowVersionDefinitionSchema = {
  type: "object",
  properties: {
    rawDefinition: {
      type: "string",
      description: "The raw YAML definition of the workflow.",
    },
  },
  required: ["rawDefinition"],
} as const;

export const WorkflowTagSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "The name of the workflow.",
    },
    color: {
      type: "string",
      description: "The description of the workflow.",
    },
  },
  required: ["name", "color"],
} as const;

export const WorkflowListSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Workflow",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const WorkflowTriggersSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    workflow_version_id: {
      type: "string",
    },
    tenant_id: {
      type: "string",
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTriggerEventRef",
      },
    },
    crons: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTriggerCronRef",
      },
    },
  },
} as const;

export const WorkflowTriggerEventRefSchema = {
  type: "object",
  properties: {
    parent_id: {
      type: "string",
    },
    event_key: {
      type: "string",
    },
  },
} as const;

export const WorkflowTriggerCronRefSchema = {
  type: "object",
  properties: {
    parent_id: {
      type: "string",
    },
    cron: {
      type: "string",
    },
  },
} as const;

export const JobSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    versionId: {
      type: "string",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
      description: "The description of the job.",
    },
    steps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Step",
      },
    },
    timeout: {
      type: "string",
      description: "The timeout of the job.",
    },
  },
  required: ["metadata", "tenantId", "versionId", "name", "steps"],
} as const;

export const StepSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    readableId: {
      type: "string",
      description: "The readable id of the step.",
    },
    tenantId: {
      type: "string",
    },
    jobId: {
      type: "string",
    },
    action: {
      type: "string",
    },
    timeout: {
      type: "string",
      description: "The timeout of the step.",
    },
    children: {
      type: "array",
      items: {
        type: "string",
      },
    },
    parents: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "readableId", "tenantId", "jobId", "action", "nextId"],
} as const;

export const WorkflowWorkersCountSchema = {
  type: "object",
  properties: {
    freeSlotCount: {
      type: "integer",
    },
    maxSlotCount: {
      type: "integer",
    },
    workflowRunId: {
      type: "string",
    },
  },
  required: ["count"],
} as const;

export const WorkflowRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowVersion: {
      $ref: "#/components/schemas/WorkflowVersion",
    },
    status: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    displayName: {
      type: "string",
    },
    jobRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/JobRun",
      },
    },
    triggeredBy: {
      $ref: "#/components/schemas/WorkflowRunTriggeredBy",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    duration: {
      type: "integer",
      example: 1000,
    },
    parentId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentStepRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "status",
    "triggeredBy",
  ],
} as const;

export const WorkflowRunShapeSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowVersion: {
      $ref: "#/components/schemas/WorkflowVersion",
    },
    status: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    displayName: {
      type: "string",
    },
    jobRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/JobRun",
      },
    },
    triggeredBy: {
      $ref: "#/components/schemas/WorkflowRunTriggeredBy",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    duration: {
      type: "integer",
      example: 1000,
    },
    parentId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentStepRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "status",
    "triggeredBy",
  ],
} as const;

export const ReplayWorkflowRunsRequestSchema = {
  properties: {
    workflowRunIds: {
      type: "array",
      maxLength: 500,
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["workflowRunIds"],
} as const;

export const ReplayWorkflowRunsResponseSchema = {
  properties: {
    workflowRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowRun",
      },
    },
  },
  required: ["workflowRuns"],
} as const;

export const WorkflowRunListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowRun",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const ScheduledWorkflowsSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    triggerAt: {
      type: "string",
      format: "date-time",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
    workflowRunCreatedAt: {
      type: "string",
      format: "date-time",
    },
    workflowRunName: {
      type: "string",
    },
    workflowRunStatus: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    workflowRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "workflowName",
    "workflowId",
    "triggerAt",
  ],
} as const;

export const ScheduledWorkflowsListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ScheduledWorkflows",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const ScheduledWorkflowsOrderByFieldSchema = {
  type: "string",
  enum: ["triggerAt", "createdAt"],
} as const;

export const ScheduledRunStatusSchema = {
  type: "string",
  enum: [
    "PENDING",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "QUEUED",
    "SCHEDULED",
  ],
} as const;

export const CronWorkflowsSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    cron: {
      type: "string",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "workflowName",
    "workflowId",
    "cron",
  ],
} as const;

export const CronWorkflowsListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CronWorkflows",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const CronWorkflowsOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const WorkflowRunOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt", "startedAt", "finishedAt", "duration"],
} as const;

export const WorkflowRunOrderByDirectionSchema = {
  type: "string",
  enum: ["ASC", "DESC"],
} as const;

export const WorkflowRunsMetricsSchema = {
  type: "object",
  properties: {
    counts: {
      type: "object",
      $ref: "#/components/schemas/WorkflowRunsMetricsCounts",
    },
  },
} as const;

export const WorkflowRunsMetricsCountsSchema = {
  type: "object",
  properties: {
    PENDING: {
      type: "integer",
    },
    RUNNING: {
      type: "integer",
    },
    SUCCEEDED: {
      type: "integer",
    },
    FAILED: {
      type: "integer",
    },
    QUEUED: {
      type: "integer",
    },
  },
} as const;

export const WorkflowRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "QUEUED"],
} as const;

export const WorkflowRunStatusListSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/WorkflowRunStatus",
  },
} as const;

export const WorkflowKindSchema = {
  type: "string",
  enum: ["FUNCTION", "DURABLE", "DAG"],
} as const;

export const WorkflowKindListSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/WorkflowKind",
  },
} as const;

export const WorkflowRunsCancelRequestSchema = {
  type: "object",
  properties: {
    workflowRunIds: {
      type: "array",
      items: {
        type: "string",
        format: "uuid",
        minLength: 36,
        maxLength: 36,
      },
    },
  },
  required: ["workflowRunIds"],
} as const;

export const JobRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED"],
} as const;

export const StepRunStatusSchema = {
  type: "string",
  enum: [
    "PENDING",
    "PENDING_ASSIGNMENT",
    "ASSIGNED",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "CANCELLING",
  ],
} as const;

export const JobRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    workflowRun: {
      $ref: "#/components/schemas/WorkflowRun",
    },
    jobId: {
      type: "string",
    },
    job: {
      $ref: "#/components/schemas/Job",
    },
    tickerId: {
      type: "string",
    },
    stepRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/StepRun",
      },
    },
    status: {
      $ref: "#/components/schemas/JobRunStatus",
    },
    result: {
      type: "object",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["metadata", "tenantId", "workflowRunId", "jobId", "status"],
} as const;

export const WorkflowRunTriggeredBySchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    parentWorkflowRunId: {
      type: "string",
    },
    eventId: {
      type: "string",
    },
    cronParentId: {
      type: "string",
    },
    cronSchedule: {
      type: "string",
    },
  },
  required: ["metadata"],
} as const;

export const StepRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    jobRunId: {
      type: "string",
    },
    stepId: {
      type: "string",
    },
    step: {
      $ref: "#/components/schemas/Step",
    },
    childWorkflowsCount: {
      type: "integer",
    },
    parents: {
      type: "array",
      items: {
        type: "string",
      },
    },
    childWorkflowRuns: {
      type: "array",
      items: {
        type: "string",
      },
    },
    workerId: {
      type: "string",
    },
    input: {
      type: "string",
    },
    output: {
      type: "string",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
    requeueAfter: {
      type: "string",
      format: "date-time",
    },
    result: {
      type: "object",
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    startedAtEpoch: {
      type: "integer",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAtEpoch: {
      type: "integer",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAtEpoch: {
      type: "integer",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAtEpoch: {
      type: "integer",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["metadata", "tenantId", "jobRunId", "stepId", "status"],
} as const;

export const StepRunEventReasonSchema = {
  type: "string",
  enum: [
    "REQUEUED_NO_WORKER",
    "REQUEUED_RATE_LIMIT",
    "SCHEDULING_TIMED_OUT",
    "ASSIGNED",
    "STARTED",
    "ACKNOWLEDGED",
    "FINISHED",
    "FAILED",
    "RETRYING",
    "CANCELLED",
    "TIMEOUT_REFRESHED",
    "REASSIGNED",
    "TIMED_OUT",
    "SLOT_RELEASED",
    "RETRIED_BY_USER",
    "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
    "WORKFLOW_RUN_GROUP_KEY_FAILED",
  ],
} as const;

export const StepRunEventSeveritySchema = {
  type: "string",
  enum: ["INFO", "WARNING", "CRITICAL"],
} as const;

export const StepRunEventSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    timeFirstSeen: {
      type: "string",
      format: "date-time",
    },
    timeLastSeen: {
      type: "string",
      format: "date-time",
    },
    stepRunId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    reason: {
      $ref: "#/components/schemas/StepRunEventReason",
    },
    severity: {
      $ref: "#/components/schemas/StepRunEventSeverity",
    },
    message: {
      type: "string",
    },
    count: {
      type: "integer",
    },
    data: {
      type: "object",
    },
  },
  required: [
    "id",
    "timeFirstSeen",
    "timeLastSeen",
    "reason",
    "severity",
    "message",
    "count",
  ],
} as const;

export const StepRunEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/StepRunEvent",
      },
      type: "array",
    },
  },
} as const;

export const StepRunArchiveSchema = {
  type: "object",
  properties: {
    stepRunId: {
      type: "string",
    },
    order: {
      type: "integer",
    },
    input: {
      type: "string",
    },
    output: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    error: {
      type: "string",
    },
    retryCount: {
      type: "integer",
    },
    createdAt: {
      type: "string",
      format: "date-time",
    },
    startedAtEpoch: {
      type: "integer",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAtEpoch: {
      type: "integer",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAtEpoch: {
      type: "integer",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAtEpoch: {
      type: "integer",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["stepRunId", "retryCount", "order", "createdAt"],
} as const;

export const StepRunArchiveListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/StepRunArchive",
      },
      type: "array",
    },
  },
} as const;

export const WorkerRuntimeInfoSchema = {
  properties: {
    sdkVersion: {
      type: "string",
    },
    language: {
      $ref: "#/components/schemas/WorkerRuntimeSDKs",
    },
    languageVersion: {
      type: "string",
    },
    os: {
      type: "string",
    },
    runtimeExtra: {
      type: "string",
    },
  },
} as const;

export const WorkerRuntimeSDKsSchema = {
  type: "string",
  enum: ["GOLANG", "PYTHON", "TYPESCRIPT"],
} as const;

export const WorkerListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Worker",
      },
      type: "array",
    },
  },
} as const;

export const SemaphoreSlotsSchema = {
  properties: {
    stepRunId: {
      type: "string",
      description: "The step run id.",
      format: "uuid",
    },
    actionId: {
      type: "string",
      description: "The action id.",
    },
    startedAt: {
      type: "string",
      description: "The time this slot was started.",
      format: "date-time",
    },
    timeoutAt: {
      type: "string",
      description: "The time this slot will timeout.",
      format: "date-time",
    },
    workflowRunId: {
      type: "string",
      description: "The workflow run id.",
      format: "uuid",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
  },
  required: ["stepRunId", "actionId", "workflowRunId", "status"],
} as const;

export const RecentStepRunsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    actionId: {
      type: "string",
      description: "The action id.",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    workflowRunId: {
      type: "string",
      format: "uuid",
    },
  },
  required: ["actionId", "metadata", "status", "workflowRunId"],
  type: "object",
} as const;

export const WorkerSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the worker.",
    },
    type: {
      type: "string",
      enum: ["SELFHOSTED", "MANAGED", "WEBHOOK"],
    },
    lastHeartbeatAt: {
      type: "string",
      description: "The time this worker last sent a heartbeat.",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    lastListenerEstablished: {
      type: "string",
      description: "The time this worker last sent a heartbeat.",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    actions: {
      type: "array",
      description: "The actions this worker can perform.",
      items: {
        type: "string",
      },
    },
    slots: {
      type: "array",
      description: "The semaphore slot state for the worker.",
      items: {
        $ref: "#/components/schemas/SemaphoreSlots",
      },
    },
    recentStepRuns: {
      type: "array",
      description: "The recent step runs for the worker.",
      items: {
        $ref: "#/components/schemas/RecentStepRuns",
      },
    },
    status: {
      type: "string",
      description: "The status of the worker.",
      enum: ["ACTIVE", "INACTIVE", "PAUSED"],
    },
    maxRuns: {
      type: "integer",
      description:
        "The maximum number of runs this worker can execute concurrently.",
    },
    availableRuns: {
      type: "integer",
      description: "The number of runs this worker can execute concurrently.",
    },
    dispatcherId: {
      type: "string",
      description: "the id of the assigned dispatcher, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    labels: {
      type: "array",
      description: "The current label state of the worker.",
      items: {
        $ref: "#/components/schemas/WorkerLabel",
      },
    },
    webhookUrl: {
      type: "string",
      description: "The webhook URL for the worker.",
    },
    webhookId: {
      type: "string",
      description: "The webhook ID for the worker.",
      format: "uuid",
    },
    runtimeInfo: {
      $ref: "#/components/schemas/WorkerRuntimeInfo",
    },
  },
  required: ["metadata", "name", "type"],
  type: "object",
} as const;

export const WorkerLabelSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    key: {
      type: "string",
      description: "The key of the label.",
    },
    value: {
      type: "string",
      description: "The value of the label.",
    },
  },
  required: ["metadata", "key"],
  type: "object",
} as const;

export const UpdateWorkerRequestSchema = {
  properties: {
    isPaused: {
      type: "boolean",
      description: "Whether the worker is paused and cannot accept new runs.",
    },
  },
  type: "object",
} as const;

export const APITokenSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the API token.",
      maxLength: 255,
    },
    expiresAt: {
      type: "string",
      format: "date-time",
      description: "When the API token expires.",
    },
  },
  required: ["metadata", "name", "expiresAt"],
} as const;

export const CreateAPITokenRequestSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "A name for the API token.",
      maxLength: 255,
    },
    expiresIn: {
      type: "string",
      description: "The duration for which the token is valid.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
  },
  required: ["name"],
} as const;

export const CreateAPITokenResponseSchema = {
  type: "object",
  properties: {
    token: {
      type: "string",
      description: "The API token.",
    },
  },
  required: ["token"],
} as const;

export const ListAPITokensResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/APIToken",
      },
      type: "array",
    },
  },
} as const;

export const RerunStepRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
  },
  required: ["input"],
} as const;

export const TriggerWorkflowRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
    additionalMetadata: {
      type: "object",
    },
  },
  required: ["input"],
} as const;

export const CreatePullRequestFromStepRunSchema = {
  properties: {
    branchName: {
      type: "string",
    },
  },
  required: ["branchName"],
} as const;

export const GetStepRunDiffResponseSchema = {
  properties: {
    diffs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/StepRunDiff",
      },
    },
  },
  required: ["diffs"],
} as const;

export const StepRunDiffSchema = {
  properties: {
    key: {
      type: "string",
    },
    original: {
      type: "string",
    },
    modified: {
      type: "string",
    },
  },
  required: ["key", "original", "modified"],
} as const;

export const ListPullRequestsResponseSchema = {
  properties: {
    pullRequests: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PullRequest",
      },
    },
  },
  required: ["pullRequests"],
} as const;

export const PullRequestSchema = {
  properties: {
    repositoryOwner: {
      type: "string",
    },
    repositoryName: {
      type: "string",
    },
    pullRequestID: {
      type: "integer",
    },
    pullRequestTitle: {
      type: "string",
    },
    pullRequestNumber: {
      type: "integer",
    },
    pullRequestHeadBranch: {
      type: "string",
    },
    pullRequestBaseBranch: {
      type: "string",
    },
    pullRequestState: {
      $ref: "#/components/schemas/PullRequestState",
    },
  },
  required: [
    "repositoryOwner",
    "repositoryName",
    "pullRequestID",
    "pullRequestTitle",
    "pullRequestNumber",
    "pullRequestHeadBranch",
    "pullRequestBaseBranch",
    "pullRequestState",
  ],
} as const;

export const PullRequestStateSchema = {
  type: "string",
  enum: ["open", "closed"],
} as const;

export const LogLineSchema = {
  properties: {
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The creation date of the log line.",
    },
    message: {
      type: "string",
      description: "The log message.",
    },
    metadata: {
      type: "object",
      description: "The log metadata.",
    },
  },
  required: ["createdAt", "message", "metadata"],
} as const;

export const LogLineLevelSchema = {
  type: "string",
  enum: ["DEBUG", "INFO", "WARN", "ERROR"],
} as const;

export const LogLineListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/LogLine",
      },
      type: "array",
    },
  },
} as const;

export const LogLineOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const LogLineOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const LogLineSearchSchema = {
  type: "string",
} as const;

export const LogLineLevelFieldSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/LogLineLevel",
  },
} as const;

export const SNSIntegrationSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description:
        "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    topicArn: {
      type: "string",
      description: "The Amazon Resource Name (ARN) of the SNS topic.",
    },
    ingestUrl: {
      type: "string",
      description: "The URL to send SNS messages to.",
    },
  },
  required: ["metadata", "tenantId", "topicArn"],
} as const;

export const ListSNSIntegrationsSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SNSIntegration",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;

export const SlackWebhookSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description:
        "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    teamName: {
      type: "string",
      description: "The team name associated with this slack webhook.",
    },
    teamId: {
      type: "string",
      description: "The team id associated with this slack webhook.",
    },
    channelName: {
      type: "string",
      description: "The channel name associated with this slack webhook.",
    },
    channelId: {
      type: "string",
      description: "The channel id associated with this slack webhook.",
    },
  },
  required: [
    "metadata",
    "tenantId",
    "teamName",
    "teamId",
    "channelName",
    "channelId",
  ],
} as const;

export const ListSlackWebhooksSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SlackWebhook",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;

export const CreateSNSIntegrationRequestSchema = {
  properties: {
    topicArn: {
      type: "string",
      description: "The Amazon Resource Name (ARN) of the SNS topic.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,min=1,max=256",
      },
    },
  },
  required: ["topicArn"],
  type: "object",
} as const;

export const WorkflowMetricsSchema = {
  type: "object",
  properties: {
    groupKeyRunsCount: {
      type: "integer",
      description:
        "The number of runs for a specific group key (passed via filter)",
    },
    groupKeyCount: {
      type: "integer",
      description: "The total number of concurrency group keys.",
    },
  },
} as const;

export const WebhookWorkerSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
  },
  required: ["metadata", "name", "url"],
  type: "object",
} as const;

export const WebhookWorkerRequestMethodSchema = {
  enum: ["GET", "POST", "PUT"],
} as const;

export const WebhookWorkerRequestSchema = {
  properties: {
    created_at: {
      type: "string",
      format: "date-time",
      description: "The date and time the request was created.",
    },
    method: {
      $ref: "#/components/schemas/WebhookWorkerRequestMethod",
      description: "The HTTP method used for the request.",
    },
    statusCode: {
      type: "integer",
      description: "The HTTP status code of the response.",
    },
  },
  required: ["created_at", "method", "statusCode"],
  type: "object",
} as const;

export const WebhookWorkerRequestListResponseSchema = {
  properties: {
    requests: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WebhookWorkerRequest",
      },
      description: "The list of webhook requests.",
    },
  },
  type: "object",
} as const;

export const WebhookWorkerCreatedSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
    secret: {
      type: "string",
      description: "The secret key for validation.",
    },
  },
  required: ["metadata", "name", "url", "secret"],
  type: "object",
} as const;

export const WebhookWorkerCreateRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
    secret: {
      type: "string",
      description:
        "The secret key for validation. If not provided, a random secret will be generated.",
      minLength: 32,
    },
  },
  required: ["name", "url"],
  type: "object",
} as const;

export const WebhookWorkerCreateResponseSchema = {
  properties: {
    worker: {
      $ref: "#/components/schemas/WebhookWorkerCreated",
    },
  },
  type: "object",
} as const;

export const WebhookWorkerListResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/WebhookWorker",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const APIResourceMetaPropertiesSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
  },
} as const;

export const CommonResultSchema = {
  properties: {
    Success: {
      type: "boolean",
    },
    Message: {
      type: "string",
    },
  },
  required: ["Success", "Message"],
} as const;

export const ChatReqSchema = {
  type: "object",
  properties: {
    threadId: {
      type: "string",
    },
    profile: {
      type: "string",
    },
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
    runner: {
      type: "string",
    },
    params: {
      type: "object",
      description: "附加的表单数据",
    },
  },
  required: ["messages"],
} as const;

export const ChatMessageSchema = {
  type: "object",
  description: "单个聊天消息",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    role: {
      $ref: "#/components/schemas/ChatMessageRole",
    },
    content: {
      type: "string",
    },
    source: {
      type: "string",
    },
    config: {
      type: "object",
      properties: {
        message_type: {
          type: "string",
        },
        source: {
          type: "string",
        },
      },
    },
  },
  required: ["metadata", "role", "content"],
} as const;

export const ChatMessageRoleSchema = {
  type: "string",
  enum: ["system", "user", "assistant"],
} as const;

export const ChatMessagesSchema = {
  type: "object",
  description: "聊天消息列表",
  properties: {
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
  },
} as const;

export const ChatHistoryListSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
      "x-go-name": "Rows",
    },
  },
} as const;

export const ChatCompletionsReqSchema = {
  type: "object",
  properties: {
    model: {
      type: "string",
    },
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
      "x-go-name": "Rows",
    },
  },
} as const;

export const WorkerConfigSchema = {
  properties: {
    workerToken: {
      type: "string",
    },
  },
} as const;

export const BlogGenConfigSchema = {
  type: "object",
  description: "博客站点生成基本配置",
  properties: {
    name: {
      type: "string",
      description: "站点名称.",
      maxLength: 255,
    },
    description: {
      description: "博客站点介绍.",
      type: "string",
    },
    seo_keywords: {
      description: "站点关键字列表",
      type: "string",
    },
    dayPublishCountHint: {
      description: "站点建议日更帖子数量",
      type: "number",
    },
  },
  required: ["name", "description"],
} as const;

export const CrewAiAgentSchema = {
  type: "object",
  description: "crawai agent 定义",
  properties: {
    name: {
      description: "name",
      type: "string",
    },
    role: {
      description: "role",
      type: "string",
    },
    backstory: {
      description: "role",
      type: "string",
    },
    goal: {
      description: "goal",
      type: "string",
    },
    maxRetryLimit: {
      description: "maxRetryLimit",
      type: "number",
    },
    maxRpm: {
      description: "maxRpm",
      type: "number",
    },
  },
  required: ["goal", "name", "role", "backstory"],
} as const;

export const CrewAiTaskSchema = {
  type: "object",
  description: "任务定义",
  properties: {
    description: {
      description: "任务描述",
      type: "string",
    },
    expectedOutput: {
      description: "期待输出",
      type: "string",
    },
    outputJsonSchemaName: {
      description: "任务输出json格式名称",
      type: "string",
    },
    agent: {
      description: "agent",
      type: "string",
    },
  },
  required: ["description", "expectedOutput", "agent"],
} as const;

export const GenTopicResultSchema = {
  type: "object",
  description: "topics 生成结果",
  properties: {
    topics: {
      type: "array",
      description: "主题列表，按优先顺序，更好的更靠前",
      items: {
        type: "string",
      },
    },
  },
  required: ["topics"],
} as const;

export const GenArticleInputSchema = {
  type: "object",
  description: "文章生成输入",
  properties: {
    topic: {
      type: "string",
      items: {
        type: "string",
      },
    },
  },
  required: ["topic"],
} as const;

export const RunNewTaskResponseSchema = {
  type: "object",
  description: "运行新任务的结果",
  properties: {
    description: {
      type: "string",
    },
  },
} as const;

export const OperationEnumSchema = {
  type: "string",
  enum: ["startBlogTask", "stopBlogTask"],
  description: `可用的操作名称枚举：
- **startBlogTask**: 启动单个博客自动化操作任务
- **stopBlogTask**: 停止单个博客自动化操作任务
`,
} as const;

export const OperataionGuideResponseSchema = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "详细的操作手册描述",
    },
  },
  required: ["workflowName"],
} as const;

export const CreateBlogPostRequestSchema = {
  type: "object",
  properties: {
    blogId: {
      type: "string",
      description: "The blog id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    authorId: {
      type: "string",
      description: "The authord id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
  },
  required: ["id", "title", "blogId", "content"],
} as const;

export const BlogListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Blog",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const BlogSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this tenant blog.",
    },
    config: {
      properties: {
        dayPublishCount: {
          type: "integer",
          description: "The number of posts to publish per day.",
        },
        description: {
          type: "string",
          description: "The description of the blog.",
        },
      },
    },
    status: {
      type: "string",
      description: "The status of the blog.",
    },
    enabled: {
      type: "boolean",
      description: "Whether the blog is enabled.",
    },
    slug: {
      type: "string",
      description: "The slug of the blog.",
    },
  },
  required: ["metadata", "title"],
  type: "object",
} as const;

export const CreateBlogRequestSchema = {
  properties: {
    title: {
      type: "string",
      description: "blog title to create.",
    },
  },
} as const;

export const UpdateBlogRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    description: {
      type: "string",
      maxLength: 1024,
    },
  },
  required: ["title"],
} as const;

export const BlogPostSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog",
    },
    state: {
      type: "object",
      properties: {
        title: {
          type: "string",
          description: "post title",
        },
        topic: {
          type: "string",
          description: "post topic",
        },
        outlines: {
          type: "array",
          items: {
            type: "object",
            properties: {
              title: {
                type: "string",
                description: "post outline title",
              },
              content: {
                type: "string",
                description: "post outline content",
              },
            },
          },
          description: "post outlines",
        },
      },
    },
  },
  required: ["metadata", "title", "content"],
  type: "object",
} as const;

export const BlogPostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/BlogPost",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const UpdatePostRequestSchema = {
  type: "object",
  properties: {
    blogId: {
      type: "string",
      description: "The blog id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    authorId: {
      type: "string",
      description: "The authord id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
  },
  required: ["id", "title", "blogId", "content"],
} as const;

export const ArtifactListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Artifact",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const ArtifactSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    state: {
      type: "object",
      description: "The tenant associated with this tenant blog.",
    },
    nextId: {
      type: "string",
    },
    prevId: {
      type: "string",
    },
  },
  required: ["metadata", "title", "state"],
  type: "object",
} as const;

export const CreateArtifacttRequestSchema = {
  type: "object",
  properties: {
    artId: {
      type: "string",
      description: "The blog id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    state: {
      type: "object",
      description: "The tenant associated with this tenant blog.",
    },
  },
  required: ["artId", "title", "state"],
} as const;

export const AgentNodeOutputSchema = {
  description: "agent 节点输出",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    isFinal: {
      type: "boolean",
      description: "是否是最终步骤",
    },
    moreSteps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentStep",
      },
      description: "更多步骤",
    },
    output: {
      type: "object",
      description: "输出",
    },
    error: {
      type: "string",
      description: "错误",
    },
  },
  required: ["metadata", "isFinal", "moreSteps", "output"],
  type: "object",
} as const;

export const AgentNodeInputSchema = {
  description: "agent 节点输入",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    inputs: {
      type: "object",
      description: "输入",
    },
    intermediateSteps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentStep",
      },
      description: "中间步骤",
    },
  },
  required: ["metadata", "inputs"],
  type: "object",
} as const;

export const AgentNodeListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/AgentNode",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AgentNodeSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
      description: "agent 节点名称, 或者作为工具名称",
    },
    description: {
      type: "string",
      description: "agent 节点描述, 或者作为工具描述",
    },
    type: {
      type: "string",
      description: "节点类型，决定了由哪个agent来进行调度",
    },
    Config: {
      type: "object",
      description: "agent 的配置",
    },
    state: {
      $ref: "#/components/schemas/AgentState",
    },
    steps: {
      description: "agent 节点执行步骤, 一般表示之前执行的步骤",
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentStep",
      },
    },
    finish: {
      $ref: "#/components/schemas/AgentFinish",
    },
    parentId: {
      description: "上级节点",
      type: "string",
    },
    agentNodeOutput: {
      $ref: "#/components/schemas/AgentNodeOutput",
    },
    tools: {
      type: "string",
    },
    memoryId: {
      type: "string",
      description: "记忆ID，表示这个agent的记忆",
    },
    input: {
      type: "string",
      description: "输入",
    },
    output: {
      type: "string",
      description: "输出",
    },
  },
  required: ["metadata", "title", "description", "steps"],
  type: "object",
} as const;

export const AgentNodeRunSchema = {
  type: "object",
  description: "agentnode run",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    state: {
      type: "object",
    },
    workflowRunId: {
      type: "string",
    },
    nodeId: {
      type: "string",
    },
    input: {
      type: "object",
    },
    output: {
      type: "object",
    },
  },
  required: ["metadata", "nodeId", "workflowRunId"],
} as const;

export const AgentNodeRunInputSchema = {
  type: "object",
  description: "agent运行节点请求",
  properties: {
    flowName: {
      type: "string",
    },
    runner: {
      type: "string",
      description: "运行器名称(对应 autogent 的 angent 入口名称)",
    },
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
    nodeId: {
      type: "string",
      description: "agent 节点ID(threadId)",
    },
    isStream: {
      type: "boolean",
      description: "是否使用stream 传输事件",
    },
    params: {
      oneOf: [
        {
          $ref: "#/components/schemas/ResearchRequest",
        },
        {
          $ref: "#/components/schemas/CrewAIParams",
        },
        {
          $ref: "#/components/schemas/ScrapeGraphParams",
        },
        {
          $ref: "#/components/schemas/BrowserParams",
        },
        {
          $ref: "#/components/schemas/CanvasGraphParams",
        },
      ],
    },
  },
  required: ["messages", "params"],
} as const;

export const TextHighlightSchema = {
  type: "object",
  properties: {
    fullMarkdown: {
      type: "string",
    },
    markdownBlock: {
      type: "string",
    },
    selectedText: {
      type: "string",
    },
  },
  required: ["fullMarkdown", "markdownBlock", "selectedText"],
} as const;

export const CodeHighlightSchema = {
  type: "object",
  properties: {
    startCharIndex: {
      type: "number",
    },
    endCharIndex: {
      type: "number",
    },
  },
  required: ["startCharIndex", "endCharIndex"],
} as const;

export const ArtifactV3Schema = {
  type: "object",
  properties: {
    currentIndex: {
      type: "number",
    },
    contents: {
      type: "array",
      items: {
        oneOf: [
          {
            $ref: "#/components/schemas/ArtifactMarkdownV3",
          },
          {
            $ref: "#/components/schemas/ArtifactCodeV3",
          },
        ],
      },
    },
  },
} as const;

export const ArtifactCodeV3Schema = {
  type: "object",
  properties: {
    index: {
      type: "number",
    },
    type: {
      type: "string",
    },
    title: {
      type: "string",
    },
    language: {
      type: "string",
      $ref: "#/components/schemas/ProgrammingLanguageOptions",
    },
    code: {
      type: "string",
    },
  },
  required: ["index", "type", "title", "language", "code"],
} as const;

export const ArtifactMarkdownV3Schema = {
  type: "object",
  properties: {
    index: {
      type: "number",
    },
    type: {
      type: "string",
    },
    title: {
      type: "string",
    },
    fullMarkdown: {
      type: "string",
    },
  },
  required: ["index", "type", "title", "fullMarkdown"],
} as const;

export const CustomQuickActionSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "A UUID for the quick action. Used to identify the quick action.",
    },
    title: {
      type: "string",
      description:
        "The title of the quick action. Used in the UI to display the quick action.",
    },
    prompt: {
      type: "string",
      description: "The prompt to use when the quick action is invoked.",
    },
    includeReflections: {
      type: "boolean",
      description:
        "Whether or not to include the user's reflections in the prompt.",
    },
    includePrefix: {
      type: "boolean",
      description:
        "Whether or not to include the default prefix in the prompt.",
    },
    includeRecentHistory: {
      type: "boolean",
      description:
        "Whether or not to include the last 5 (or less) messages in the prompt.",
    },
  },
  required: [
    "id",
    "title",
    "prompt",
    "includeReflections",
    "includePrefix",
    "includeRecentHistory",
  ],
} as const;

export const ReflectionsSchema = {
  type: "object",
  description: "生成内容的反思规则",
  properties: {
    styleRules: {
      type: "array",
      description: "生成内容时要遵循的样式规则",
      items: {
        type: "string",
      },
    },
    content: {
      type: "array",
      description: "生成内容时要记住的关于用户的关键内容",
      items: {
        type: "string",
      },
    },
  },
  required: ["styleRules", "content"],
} as const;

export const LanguageOptionsSchema = {
  type: "string",
  enum: ["chinese", "english", "spanish", "french", "hindi"],
} as const;

export const ArtifactLengthOptionsSchema = {
  type: "string",
  description: "工具内容长度,(文章,代码内容长度)",
  enum: ["shortest", "short", "long", "longest"],
} as const;

export const RewriteArtifactMetaToolResponseSchema = {
  oneOf: [
    {
      type: "object",
      properties: {
        type: {
          type: "string",
          enum: ["text"],
        },
        title: {
          type: "string",
        },
        language: {
          type: "string",
          $ref: "#/components/schemas/ProgrammingLanguageOptions",
        },
      },
      required: ["type", "language"],
    },
    {
      type: "object",
      properties: {
        type: {
          type: "string",
          enum: ["code"],
        },
        title: {
          type: "string",
        },
        language: {
          type: "string",
          $ref: "#/components/schemas/ProgrammingLanguageOptions",
        },
      },
      required: ["type", "title", "language"],
    },
  ],
} as const;

export const ArtifactToolResponseSchema = {
  type: "object",
  properties: {
    artifact: {
      type: "string",
    },
    title: {
      type: "string",
    },
    language: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
} as const;

export const ReadingLevelOptionsSchema = {
  type: "string",
  description: "阅读级别",
  enum: ["pirate", "child", "teenager", "college", "phd"],
} as const;

export const ProgrammingLanguageOptionsSchema = {
  type: "string",
  enum: [
    "typescript",
    "javascript",
    "cpp",
    "java",
    "php",
    "python",
    "html",
    "sql",
    "json",
    "rust",
    "xml",
    "clojure",
    "csharp",
    "other",
  ],
} as const;

export const CanvasGraphParamsSchema = {
  type: "object",
  properties: {
    stepLimit: {
      type: "number",
      description: "步骤限制(没用上)",
    },
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
    action: {
      type: "object",
      $ref: "#/components/schemas/NodeRunAction",
    },
    language: {
      type: "string",
      description: "语言",
    },
    customQuickActionId: {
      type: "string",
      description: "自定义快速动作ID",
    },
    artifactId: {
      type: "string",
      description: "工件ID",
    },
    fixBugs: {
      type: "boolean",
      description: "是否修复bug",
    },
    highlightedCode: {
      type: "object",
      $ref: "#/components/schemas/CodeHighlight",
    },
    highlightedText: {
      type: "object",
      $ref: "#/components/schemas/TextHighlight",
    },
    regenerateWithEmojis: {
      type: "boolean",
      description: "是否使用表情符号重新生成",
    },
    readingLevel: {
      type: "string",
      description: "阅读级别",
      $ref: "#/components/schemas/ReadingLevelOptions",
    },
    artifactLength: {
      type: "string",
      description: "工具内容长度,(文章,代码内容长度)",
      $ref: "#/components/schemas/ArtifactLengthOptions",
    },
    artifact: {
      type: "object",
      $ref: "#/components/schemas/ArtifactV3",
    },
    addComments: {
      type: "boolean",
    },
    addLogs: {
      type: "boolean",
    },
    portLanguage: {
      type: "string",
      $ref: "#/components/schemas/ProgrammingLanguageOptions",
    },
  },
} as const;

export const RunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    status: {
      type: "string",
      $ref: "#/components/schemas/RunStatus",
    },
    task: {
      $ref: "#/components/schemas/AgentMessageConfig",
    },
    team_result: {
      type: "object",
      $ref: "#/components/schemas/TeamResult",
    },
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
    error_message: {
      type: "string",
    },
  },
  required: ["metadata", "status", "task", "team_result", "messages"],
} as const;

export const RunListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Run",
      },
      type: "array",
    },
  },
} as const;

export const RunUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const TeamSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    userId: {
      type: "string",
    },
    version: {
      type: "string",
    },
    config: {
      type: "object",
    },
  },
  required: ["metadata", "name", "userId", "config"],
} as const;

export const TeamListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Team",
      },
      type: "array",
    },
  },
} as const;

export const TeamUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    userId: {
      type: "string",
    },
    version: {
      type: "string",
    },
    config: {
      $ref: "#/components/schemas/ComponentModel",
    },
  },
  required: ["metadata", "name", "userId", "version", "config"],
} as const;

export const ComponentModelSchema = {
  type: "object",
  properties: {
    provider: {
      type: "string",
      description: "Describes how the component can be instantiated.",
    },
    component_type: {
      type: "string",
      description:
        "Logical type of the component. If missing, the component assumes the default type of the provider.",
    },
    version: {
      type: "string",
      description:
        "Version of the component specification. If missing, the component assumes whatever is the current version of the library used to load it. This is obviously dangerous and should be used for user authored ephmeral config. For all other configs version should be specified.",
    },
    component_version: {
      type: "string",
      description:
        "Version of the component. If missing, the component assumes the default version of the provider.",
    },
    description: {
      type: "string",
      description: "Description of the component.",
    },
    label: {
      type: "string",
      description:
        "Human readable label for the component. If missing the component assumes the class name of the provider.",
    },
    config: {
      type: "object",
      description:
        "The schema validated config field is passed to a given class's implmentation of :py:meth:`autogen_core.ComponentConfigImpl._from_config` to create a new instance of the component class.",
    },
  },
} as const;

export const GalleryComponentsSchema = {
  type: "object",
  properties: {
    agents: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    models: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    tools: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    terminations: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
  },
  required: ["agents", "models", "tools", "terminations"],
} as const;

export const GalleryItemsSchema = {
  type: "object",
  properties: {
    teams: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    components: {
      $ref: "#/components/schemas/GalleryComponents",
    },
  },
  required: ["teams", "components"],
} as const;

export const GallerySchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    userId: {
      type: "string",
    },
    meta: {
      type: "object",
      properties: {
        author: {
          type: "string",
        },
        created_at: {
          type: "string",
        },
        updated_at: {
          type: "string",
        },
        version: {
          type: "string",
        },
        description: {
          type: "string",
        },
        tags: {
          type: "array",
        },
        license: {
          type: "string",
        },
        homepage: {
          type: "string",
        },
        category: {
          type: "string",
        },
        last_synced: {
          type: "string",
        },
      },
      required: ["author", "created_at", "updated_at", "version"],
    },
    items: {
      $ref: "#/components/schemas/GalleryItems",
    },
  },
  required: ["metadata", "name", "url", "userId", "meta", "items"],
} as const;

export const GalleryListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Gallery",
      },
      type: "array",
    },
  },
} as const;

export const GalleryUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    userId: {
      type: "string",
    },
  },
  required: ["metadata", "name", "userId"],
} as const;

export const SessionSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    userId: {
      type: "string",
    },
    teamId: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
  required: ["metadata", "name", "userId", "teamId", "version"],
} as const;

export const SessionListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Session",
      },
      type: "array",
    },
  },
} as const;

export const SessionUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    userId: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const AgEventSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    userId: {
      type: "string",
    },
    data: {
      type: "object",
    },
    framework: {
      type: "string",
    },
    stepRunId: {
      type: "string",
    },
    meta: {
      type: "object",
    },
  },
  required: ["data", "framework", "stepRunId"],
} as const;

export const EventTypesSchema = {
  type: "string",
  enum: [
    "WorkflowRunStart",
    "WorkflowRunEnd",
    "AssistantReply",
    "StepRun",
    "TextMessage",
  ],
} as const;

export const AgEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgEvent",
      },
    },
  },
} as const;

export const AgEventCreateSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AgEvent",
    },
  ],
} as const;

export const AgEventUpdateSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AgEvent",
    },
  ],
} as const;

export const AgentSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
      description: "agent 节点名称, 或者作为工具名称",
    },
    description: {
      type: "string",
      description: "agent 节点描述, 或者作为工具描述",
    },
  },
} as const;

export const EventBaseSchema = {
  type: "object",
  properties: {
    type: {
      type: "string",
    },
  },
  required: ["type"],
} as const;

export const StartWorkflowRunEventSchema = {
  type: "object",
  description:
    "用户调用工作流后, 后端返回工作流启动状态的事件, 一般用于根据 Id,从 stream api 中进一步拉取更加详细的事件",
  allOf: [
    {
      $ref: "#/components/schemas/EventBase",
    },
    {
      type: "object",
      properties: {
        workflowRunId: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const OutlineSchema = {
  type: "object",
  properties: {
    pageTitle: {
      type: "string",
      description: "Title of the Wikipedia page",
    },
    sections: {
      type: "array",
      description:
        "Titles and descriptions for each section of the Wikipedia page",
      items: {
        $ref: "#/components/schemas/Section",
      },
    },
  },
  required: ["pageTitle", "sections"],
} as const;

export const AssistantSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AssistantBase",
    },
    {
      type: "object",
      properties: {
        updated_at: {
          type: "string",
          description: "The last time the assistant was updated",
        },
        name: {
          type: "string",
          description: "The name of the assistant",
        },
      },
      required: ["updated_at", "name"],
    },
  ],
} as const;

export const AgentTaskToolSchema = {
  description: "agent 任务工具",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "工具名称",
    },
    description: {
      type: "string",
      description: "工具描述",
    },
  },
  required: ["metadata", "name", "description"],
  type: "object",
} as const;

export const AgentTaskStepSchema = {
  description: "任务执行步骤",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "工具名称",
    },
    createAt: {
      type: "string",
      description: "步骤启动时间",
    },
    inputType: {
      type: "string",
      description: "步骤输入类型(human,ai,tool)",
    },
    input: {
      type: "string",
      description: "步骤输入",
    },
    output: {
      type: "string",
      description: "步骤输出",
    },
    isFinal: {
      type: "boolean",
      description: "是否是最终步骤",
    },
    reason: {
      type: "string",
      description: "步骤执行原因",
    },
  },
  required: [
    "metadata",
    "name",
    "description",
    "createAt",
    "input",
    "output",
    "reason",
  ],
  type: "object",
} as const;

export const AgentStepSchema = {
  description: "agent 执行步骤",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    Action: {
      $ref: "#/components/schemas/AgentAction",
    },
    Observation: {
      type: "string",
      description: "步骤观察",
    },
  },
  required: ["metadata", "Action", "Observation"],
  type: "object",
} as const;

export const AgentActionSchema = {
  description: "agent 执行动作",
  properties: {
    Tool: {
      type: "string",
      description: "工具名称",
    },
    ToolInput: {
      type: "string",
      description: "工具输入",
    },
    Log: {
      type: "string",
      description: "工具日志",
    },
    ToolID: {
      type: "string",
      description: "工具ID",
    },
  },
  required: ["Tool", "ToolInput", "Log", "ToolID"],
  type: "object",
} as const;

export const AgentFinishSchema = {
  description: "agent 完成",
  properties: {
    ReturnValues: {
      type: "object",
      description: "返回值",
    },
    Log: {
      type: "string",
      description: "日志",
    },
  },
  required: ["ReturnValues", "Log"],
  type: "object",
} as const;

export const AgentNodeCreateRequestSchema = {
  description: "创建agent节点请求",
  properties: {
    title: {
      type: "string",
      description: "agent 节点名称, 或者作为工具名称",
    },
    prompt: {
      type: "string",
      description: "agent 节点提示词",
    },
    description: {
      type: "string",
      description: "agent 节点描述, 或者作为工具描述",
    },
  },
  required: ["prompt"],
  type: "object",
} as const;

export const AgentNodeUpdateRequestSchema = {
  description: "创建agent节点请求",
  properties: {
    title: {
      type: "string",
      description: "agent 节点名称, 或者作为工具名称",
    },
    prompt: {
      type: "string",
      description: "agent 节点提示词",
    },
    type: {
      type: "string",
      description: "agent 节点类型",
    },
    description: {
      type: "string",
      description: "agent 节点描述",
    },
    state: {
      type: "object",
      description: "agent 节点状态",
    },
  },
  required: ["prompt"],
  type: "object",
} as const;

export const ScrapeGraphParamsSchema = {
  type: "object",
  properties: {
    input: {
      type: "string",
    },
  },
} as const;

export const CrewAIParamsSchema = {
  type: "object",
  properties: {
    input: {
      type: "string",
    },
  },
} as const;

export const BrowserParamsSchema = {
  type: "object",
  properties: {
    input: {
      type: "string",
    },
  },
} as const;

export const TerminationTypesSchema = {
  type: "string",
  enum: [
    "MaxMessageTermination",
    "StopMessageTermination",
    "TextMentionTermination",
    "TimeoutTermination",
    "CombinationTermination",
  ],
} as const;

export const RequestUsageSchema = {
  type: "object",
  properties: {
    prompt_tokens: {
      type: "number",
    },
    completion_tokens: {
      type: "number",
    },
  },
  required: ["prompt_tokens", "completion_tokens"],
} as const;

export const FunctionCallSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    arguments: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
  required: ["id", "arguments", "name"],
} as const;

export const FunctionExecutionResultSchema = {
  type: "object",
  properties: {
    call_id: {
      type: "string",
    },
    content: {
      type: "string",
    },
  },
  required: ["call_id", "content"],
} as const;

export const BaseMessageConfigSchema = {
  type: "object",
  properties: {
    source: {
      type: "string",
    },
    models_usage: {
      type: "object",
      $ref: "#/components/schemas/RequestUsage",
    },
  },
} as const;

export const ImageContentSchema = {
  type: "object",
  properties: {
    url: {
      type: "string",
    },
    alt: {
      type: "string",
    },
    data: {
      type: "string",
    },
  },
  required: ["url"],
} as const;

export const TextMessageConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      type: "object",
      properties: {
        content: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const MultiModalMessageConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      type: "object",
      properties: {
        content: {
          type: "array",
          items: {
            oneOf: [
              {
                type: "string",
              },
              {
                $ref: "#/components/schemas/ImageContent",
              },
            ],
          },
        },
      },
    },
  ],
} as const;

export const StopMessageConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      type: "object",
      properties: {
        content: {
          type: "string",
        },
      },
      required: ["content"],
    },
  ],
} as const;

export const HandoffMessageConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      type: "object",
      properties: {
        content: {
          type: "string",
        },
        target: {
          type: "string",
        },
      },
      required: ["content", "target"],
    },
  ],
} as const;

export const ToolCallMessageConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      type: "object",
      properties: {
        content: {
          type: "array",
          items: {
            $ref: "#/components/schemas/FunctionCall",
          },
        },
      },
      required: ["content"],
    },
  ],
} as const;

export const ToolCallResultMessageConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      type: "object",
      properties: {
        content: {
          type: "array",
          items: {
            $ref: "#/components/schemas/FunctionExecutionResult",
          },
        },
      },
      required: ["content"],
    },
  ],
} as const;

export const DBModelSchema = {
  type: "object",
  properties: {
    id: {
      type: "number",
    },
    user_id: {
      type: "string",
    },
    created_at: {
      type: "string",
    },
    updated_at: {
      type: "string",
    },
    version: {
      type: "number",
    },
  },
  required: ["id", "user_id", "created_at", "updated_at", "version"],
} as const;

export const TeamResultSchema = {
  type: "object",
  properties: {
    task_result: {
      type: "object",
    },
    usage: {
      type: "string",
    },
    duration: {
      type: "number",
    },
  },
  required: ["task_result", "usage", "duration"],
} as const;

export const MessageV2Schema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/DBModel",
    },
    {
      type: "object",
      properties: {
        config: {
          type: "object",
          $ref: "#/components/schemas/AgentMessageConfig",
        },
      },
      required: ["config"],
    },
  ],
} as const;

export const InnerMessageConfigSchema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/ToolCallMessageConfig",
    },
    {
      $ref: "#/components/schemas/ToolCallResultMessageConfig",
    },
  ],
} as const;

export const ChatMessageConfigSchema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/TextMessageConfig",
    },
    {
      $ref: "#/components/schemas/MultiModalMessageConfig",
    },
    {
      $ref: "#/components/schemas/StopMessageConfig",
    },
    {
      $ref: "#/components/schemas/HandoffMessageConfig",
    },
  ],
} as const;

export const AgentMessageConfigSchema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/TextMessageConfig",
    },
    {
      $ref: "#/components/schemas/MultiModalMessageConfig",
    },
    {
      $ref: "#/components/schemas/StopMessageConfig",
    },
    {
      $ref: "#/components/schemas/HandoffMessageConfig",
    },
    {
      $ref: "#/components/schemas/ToolCallMessageConfig",
    },
    {
      $ref: "#/components/schemas/ToolCallResultMessageConfig",
    },
  ],
} as const;

export const SessionRunsSchema = {
  type: "object",
  properties: {
    runs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Run",
      },
    },
  },
  required: ["runs"],
} as const;

export const BaseConfigSchema = {
  type: "object",
  properties: {
    component_type: {
      type: "string",
    },
    version: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
  required: ["component_type"],
} as const;

export const WebSocketMessageSchema = {
  type: "object",
  properties: {
    type: {
      type: "string",
    },
    data: {
      type: "object",
      $ref: "#/components/schemas/AgentMessageConfig",
    },
    status: {
      type: "string",
      $ref: "#/components/schemas/RunStatus",
    },
    error: {
      type: "string",
    },
    timestamp: {
      type: "string",
    },
  },
  required: ["type"],
} as const;

export const TaskResultSchema = {
  type: "object",
  properties: {
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentMessageConfig",
      },
    },
    stop_reason: {
      type: "string",
    },
  },
  required: ["messages"],
} as const;

export const AgentTypesSchema = {
  type: "string",
  enum: [
    "AssistantAgent",
    "UserProxyAgent",
    "MultimodalWebSurfer",
    "FileSurfer",
    "MagenticOneCoderAgent",
  ],
} as const;

export const ToolTypesSchema = {
  type: "string",
  enum: ["PythonFunction"],
} as const;

export const ModelTypesSchema = {
  type: "string",
  enum: ["OpenAIChatCompletionClient", "AzureOpenAIChatCompletionClient"],
} as const;

export const BaseModelConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseConfig",
    },
    {
      type: "object",
      properties: {
        model: {
          type: "string",
        },
        model_type: {
          type: "string",
          $ref: "#/components/schemas/ModelTypes",
        },
        api_key: {
          type: "string",
        },
        base_url: {
          type: "string",
        },
      },
      required: ["model", "model_type"],
    },
  ],
} as const;

export const AzureOpenAIModelConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseModelConfig",
    },
    {
      type: "object",
      properties: {
        model_type: {
          type: "string",
          enum: ["AzureOpenAIChatCompletionClient"],
        },
        azure_deployment: {
          type: "string",
        },
        api_version: {
          type: "string",
        },
        azure_endpoint: {
          type: "string",
        },
        azure_ad_token_provider: {
          type: "string",
        },
      },
      required: [
        "model_type",
        "azure_deployment",
        "api_version",
        "azure_endpoint",
        "azure_ad_token_provider",
      ],
    },
  ],
} as const;

export const OpenAIModelConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseModelConfig",
    },
    {
      type: "object",
      properties: {
        model_type: {
          type: "string",
          enum: ["OpenAIChatCompletionClient"],
        },
      },
      required: ["model_type"],
    },
  ],
} as const;

export const ToolConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseConfig",
    },
    {
      type: "object",
      properties: {
        name: {
          type: "string",
        },
        description: {
          type: "string",
        },
        content: {
          type: "string",
        },
        tool_type: {
          type: "string",
          $ref: "#/components/schemas/ToolTypes",
        },
      },
      required: ["name", "description", "content", "tool_type"],
    },
  ],
} as const;

export const ModelConfigSchema = {
  type: "object",
  properties: {
    temperature: {
      type: "number",
    },
    modelProvider: {
      type: "string",
    },
    maxTokens: {
      type: "number",
    },
    azureConfig: {
      type: "object",
      properties: {
        azureOpenAIApiKey: {
          type: "string",
        },
        azureOpenAIApiInstanceName: {
          type: "string",
        },
        azureOpenAIApiDeploymentName: {
          type: "string",
        },
        azureOpenAIApiVersion: {
          type: "string",
        },
        azureOpenAIBasePath: {
          type: "string",
        },
      },
    },
  },
} as const;

export const ModelConfigV2Schema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/AzureOpenAIModelConfig",
    },
    {
      $ref: "#/components/schemas/OpenAIModelConfig",
    },
  ],
} as const;

export const RunStatusSchema = {
  type: "string",
  enum: [
    "created",
    "active",
    "awaiting_input",
    "timeout",
    "complete",
    "error",
    "stopped",
  ],
} as const;

export const AgentConfigSchema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/AssistantAgentConfig",
    },
    {
      $ref: "#/components/schemas/UserProxyAgentConfig",
    },
    {
      $ref: "#/components/schemas/MultimodalWebSurferAgentConfig",
    },
    {
      $ref: "#/components/schemas/FileSurferAgentConfig",
    },
    {
      $ref: "#/components/schemas/MagenticOneCoderAgentConfig",
    },
  ],
} as const;

export const AssistantAgentConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseAgentConfig",
    },
    {
      type: "object",
      properties: {
        agent_type: {
          type: "string",
          enum: ["AssistantAgent"],
        },
      },
    },
  ],
} as const;

export const UserProxyAgentConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseAgentConfig",
    },
    {
      type: "object",
      properties: {
        agent_type: {
          type: "string",
          enum: ["UserProxyAgent"],
        },
      },
      required: ["agent_type"],
    },
  ],
} as const;

export const MultimodalWebSurferAgentConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseAgentConfig",
    },
    {
      type: "object",
      properties: {
        agent_type: {
          type: "string",
          enum: ["MultimodalWebSurfer"],
        },
      },
    },
  ],
} as const;

export const FileSurferAgentConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseAgentConfig",
    },
    {
      type: "object",
      properties: {
        agent_type: {
          type: "string",
          enum: ["FileSurfer"],
        },
      },
      required: ["agent_type"],
    },
  ],
} as const;

export const MagenticOneCoderAgentConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseAgentConfig",
    },
    {
      type: "object",
      properties: {
        agent_type: {
          type: "string",
          enum: ["MagenticOneCoderAgent"],
        },
      },
      required: ["agent_type"],
    },
  ],
} as const;

export const BaseAgentConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseConfig",
    },
    {
      type: "object",
      properties: {
        name: {
          type: "string",
        },
        agent_type: {
          type: "string",
          $ref: "#/components/schemas/AgentTypes",
        },
        system_message: {
          type: "string",
        },
        model_client: {
          type: "object",
          $ref: "#/components/schemas/ModelConfig",
        },
        tools: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ToolConfig",
          },
        },
        description: {
          type: "string",
        },
      },
      required: ["name", "agent_type", "model_client", "tools", "description"],
    },
  ],
} as const;

export const SectionSchema = {
  type: "object",
  properties: {
    section_title: {
      type: "string",
      description: "Title of the section",
    },
    description: {
      type: "string",
      description: "Content of the section",
    },
    subsections: {
      type: "array",
      description:
        "Titles and descriptions for each subsection of the Wikipedia page",
      items: {
        $ref: "#/components/schemas/Subsection",
      },
    },
  },
  required: ["section_title", "description"],
} as const;

export const SubsectionSchema = {
  type: "object",
  properties: {
    subsectionTitle: {
      type: "string",
      description: "Title of the subsection",
    },
    description: {
      type: "string",
      description: "Content of the subsection",
    },
  },
  required: ["subsectionTitle", "description"],
} as const;

export const NodeRunActionSchema = {
  type: "object",
  description: "节点运行",
  properties: {
    action: {
      type: "string",
      description: "动作",
    },
    input: {
      type: "object",
      description: "输入",
    },
  },
} as const;

export const AssistantBaseSchema = {
  type: "object",
  properties: {
    assistant_id: {
      type: "string",
      description: "The ID of the assistant",
    },
    graph_id: {
      type: "string",
      description: "The ID of the graph",
    },
    config: {
      type: "object",
      description: "The assistant config",
    },
    created_at: {
      type: "string",
      description: "The time the assistant was created",
    },
    metadata: {
      type: "object",
      description: "The assistant metadata",
    },
    version: {
      type: "number",
      description: "The version of the assistant",
    },
  },
  required: [
    "assistant_id",
    "graph_id",
    "config",
    "created_at",
    "metadata",
    "version",
  ],
} as const;

export const BaseTeamConfigSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    participants: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentConfig",
      },
    },
    team_type: {
      $ref: "#/components/schemas/TeamTypes",
    },
  },
} as const;

export const RoundRobinGroupChatConfigSchema = {
  type: "object",
  properties: {
    team_type: {
      type: "string",
      enum: ["RoundRobinGroupChat"],
    },
  },
} as const;

export const SelectorGroupChatConfigSchema = {
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        team_type: {
          type: "string",
          enum: ["SelectorGroupChat"],
        },
        selector_prompt: {
          type: "string",
        },
        model_client: {
          $ref: "#/components/schemas/ModelConfig",
        },
      },
    },
  ],
} as const;

export const TerminationConfigSchema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/MaxMessageTerminationConfig",
    },
    {
      $ref: "#/components/schemas/TextMentionTerminationConfig",
    },
    {
      $ref: "#/components/schemas/CombinationTerminationConfig",
    },
  ],
} as const;

export const BaseTerminationConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseConfig",
    },
    {
      type: "object",
      properties: {
        termination_type: {
          type: "string",
          $ref: "#/components/schemas/TerminationTypes",
        },
      },
    },
  ],
} as const;

export const MaxMessageTerminationConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseTerminationConfig",
    },
    {
      type: "object",
      properties: {
        termination_type: {
          type: "string",
          enum: ["MaxMessageTermination"],
        },
        max_messages: {
          type: "number",
        },
      },
      required: ["termination_type", "max_messages"],
    },
  ],
} as const;

export const TextMentionTerminationConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseTerminationConfig",
    },
    {
      type: "object",
      properties: {
        termination_type: {
          type: "string",
          enum: ["TextMentionTermination"],
        },
        text: {
          type: "string",
        },
      },
      required: ["termination_type", "text"],
    },
  ],
} as const;

export const CombinationTerminationConfigSchema = {
  type: "object",
  allOf: [
    {
      $ref: "#/components/schemas/BaseTerminationConfig",
    },
    {
      type: "object",
      properties: {
        termination_type: {
          type: "string",
          enum: ["CombinationTermination"],
        },
        operator: {
          type: "string",
          enum: ["and", "or"],
        },
        conditions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/TerminationConfig",
          },
        },
      },
      required: ["termination_type", "operator", "conditions"],
    },
  ],
} as const;

export const TeamTypesSchema = {
  type: "string",
  enum: ["RoundRobinGroupChat", "SelectorGroupChat", "MagenticOneGroupChat"],
} as const;

export const TeamConfigSchema = {
  type: "object",
  oneOf: [
    {
      $ref: "#/components/schemas/RoundRobinGroupChatConfig",
    },
    {
      $ref: "#/components/schemas/SelectorGroupChatConfig",
    },
  ],
} as const;

export const BaseStateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    threadId: {
      type: "string",
      description: "线程ID",
    },
    messages: {
      type: "array",
      description: "聊天消息",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
  },
  required: ["messages", "metadata"],
} as const;

export const AgentStateSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/AssisantState",
    },
    {
      $ref: "#/components/schemas/GenArticleState",
    },
    {
      $ref: "#/components/schemas/PostizState",
    },
  ],
} as const;

export const AssisantStateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BaseState",
    },
    {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "名称",
        },
        description: {
          type: "string",
          description: "描述",
        },
      },
      required: ["name", "description"],
    },
  ],
} as const;

export const GenArticleStateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BaseState",
    },
    {
      type: "object",
      description: "文章生成的过程状态",
      properties: {
        topic: {
          type: "string",
          description: "当前关联的主题",
        },
        prompt: {
          type: "string",
          description: "关键提示语",
        },
        title: {
          type: "string",
          description: "文章主标题",
        },
        subTitle: {
          type: "string",
          description: "文章副标题",
        },
        oulines: {
          type: "array",
          description: "文章大纲列表",
          items: {
            type: "object",
            description: "文章大纲",
            properties: {
              title: {
                type: "string",
              },
              description: {
                type: "string",
                description: "大纲描述",
              },
            },
            required: ["title"],
          },
        },
      },
      required: ["topic"],
    },
  ],
} as const;

export const PostizChannelSchema = {
  properties: {
    messages: {
      type: "array",
      description: "聊天消息",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
    fresearch: {
      type: "string",
    },
    orgId: {
      type: "string",
    },
    hook: {
      type: "string",
    },
    content: {
      type: "string",
    },
    date: {
      type: "string",
    },
    category: {
      type: "string",
    },
    popularPosts: {
      type: "string",
    },
    topic: {
      type: "string",
    },
    isPicture: {
      type: "boolean",
    },
    format: {
      type: "string",
    },
    tone: {
      type: "string",
    },
    question: {
      type: "string",
    },
  },
} as const;

export const PostizStateSchema = {
  type: "object",
  properties: {
    channel: {
      $ref: "#/components/schemas/PostizChannel",
    },
  },
} as const;

export const ResearchRequestSchema = {
  type: "object",
  description: "研究输入(目前写死为调用社交媒体)",
  allOf: [
    {
      type: "object",
      properties: {
        isStream: {
          type: "boolean",
        },
        threadId: {
          type: "string",
        },
      },
      required: ["threadId", "isStream"],
    },
    {
      type: "object",
      properties: {
        input: {
          type: "string",
          description: "详细描述要调研详情",
        },
      },
      required: ["input"],
    },
  ],
} as const;

export const ResearchResponseSchema = {
  type: "object",
  description: "研究输出(目前写死为调用社交媒体)",
  properties: {
    output: {
      type: "string",
      description: "研究结果",
    },
  },
  required: ["output"],
} as const;

export const TenantParameterSchema = {
  type: "string",
  format: "uuid",
  minLength: 36,
  maxLength: 36,
} as const;

export const PromptSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "title", "content", "tags"],
  type: "object",
} as const;

export const PromptListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Artifact",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AssisantListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Assisant",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const AssisantSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "助手名称",
    },
    updated_at: {
      type: "string",
    },
    graph_id: {
      type: "string",
      description: "如果后端使用 langgraph ，则返回 langgraph 的 graph_id",
    },
    config: {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "助手名称",
        },
        tags: {
          type: "array",
          items: {
            type: "string",
            description:
              "Tags for this call and any sub-calls (eg. a Chain calling an LLM).You can use these to filter calls.",
          },
        },
        recursion_limit: {
          type: "number",
          description: "递归限制",
          default: 10,
        },
        configurable: {
          type: "object",
          properties: {
            threadId: {
              type: "string",
              description: "langgraph 中对应的 threadId",
            },
            checkpointId: {
              type: "string",
              description: "langgraph 中对应的 checkpointId",
            },
          },
          additionalProperties: true,
        },
      },
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "title", "content", "tags"],
  type: "object",
} as const;

export const SubscribeRequestSchema = {
  type: "object",
  properties: {
    protocol: {
      type: "string",
      description: "消息",
    },
    runId: {
      type: "string",
      description: "消息",
    },
    streamKey: {
      type: "string",
      description: "消息",
    },
    meta: {
      type: "object",
      description: "元数据",
    },
  },
} as const;

export const ToolCallResultSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "结果id",
    },
    data: {
      type: "string",
      description: "结果数据",
    },
  },
} as const;

export const WebSearchResultSchema = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "结果描述",
    },
  },
} as const;

export const ModelSchema = {
  description: "llm model",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    baseUrl: {
      type: "string",
    },
    apiKey: {
      type: "string",
    },
    model: {
      type: "string",
      description: "llm model name",
    },
    family: {
      type: "string",
      description: "model family",
    },
    modelInfo: {
      $ref: "#/components/schemas/ModelInfo",
    },
  },
  required: ["metadata", "baseUrl", "apiKey", "model", "modelInfo", "family"],
  type: "object",
} as const;

export const ModelInfoSchema = {
  type: "object",
  description: "model info",
  properties: {
    vision: {
      type: "boolean",
      description:
        "True if the model supports vision, aka image input, otherwise False.",
    },
    function_calling: {
      type: "boolean",
      description:
        "True if the model supports function calling, otherwise False.",
    },
    json_output: {
      type: "boolean",
      description:
        "True if the model supports json output, otherwise False. Note: this is different to structured json.",
    },
    family: {
      type: "string",
      description:
        "Model family should be one of the constants from :py:class:`ModelFamily` or a string representing an unknown model family.",
      default: "unknown",
    },
  },
  required: ["vision", "function_calling", "json_output", "family"],
} as const;

export const ModelListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Model",
      },
      type: "array",
    },
  },
} as const;

export const UpdateModelSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const TokenChunkSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "消息ID",
    },
    content: {
      type: "string",
      description: "消息内容",
    },
  },
  required: ["id", "content"],
} as const;

export const EvtNodeStepSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "节点名称",
    },
    input: {
      type: "string",
      description: "节点输入",
    },
  },
  required: ["name", "input"],
} as const;

export const FormFieldSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
  required: ["name", "type"],
} as const;

export const SchemaFormSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    fields: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FormField",
      },
    },
  },
  required: ["title", "fields"],
} as const;

export const SiteSchema = {
  type: "object",
  description: "site",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
  },
  required: ["metadata", "title", "description"],
} as const;

export const SiteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Site",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
    host: {
      type: "string",
      description: "入站域名(指定绑定入站域名)",
    },
  },
  required: ["title", "description"],
} as const;

export const CreateSiteResponseSchema = {
  $ref: "#/components/schemas/Site",
} as const;

export const UpdateSiteRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
  },
} as const;

export const SiteHostSchema = {
  type: "object",
  description: "site-host",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
      description: "site-host 标题",
    },
    description: {
      type: "string",
      description: "site-host 描述",
    },
    host: {
      type: "string",
      description: "绑定域名",
    },
  },
  required: ["metadata", "title", "description", "host"],
} as const;

export const SiteHostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/SiteHost",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteHostRequestSchema = {
  type: "object",
  properties: {
    siteId: {
      type: "string",
      description: "站点ID",
    },
    title: {
      type: "string",
      description: "site-host 标题",
    },
    description: {
      type: "string",
      description: "site-host 描述",
    },
    host: {
      type: "string",
      description: "绑定域名",
    },
  },
  required: ["title", "description", "host", "siteId"],
} as const;

export const CreateSiteHostResponseSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const UpdateSiteHostRequestSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const UpdateSiteHostResponseSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const PostSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog",
    },
  },
  required: ["metadata", "title", "content"],
  type: "object",
} as const;

export const PostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Post",
      },
      type: "array",
    },
  },
} as const;

export const CreatePostRequestSchema = {
  type: "object",
  properties: {
    siteId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
    slug: {
      type: "string",
      description: "The slug of the post",
      minLength: 3,
      maxLength: 200,
    },
    authorId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    status: {
      type: "string",
      enum: ["draft", "published"],
    },
  },
  required: ["siteId", "title", "content", "slug"],
} as const;

export const FrontendConfigSchema = {
  type: "object",
  properties: {
    cookieAccessToken: {
      type: "string",
      description: "Cookie access token",
    },
    dashPath: {
      type: "string",
      description: "Dashboard path",
    },
    hotKeyDebug: {
      type: "string",
      description: "Hot key debug",
    },
    defaultTenantAccessToken: {
      type: "string",
      description: "实验性质，默认租户的access token",
    },
  },
  required: [
    "cookieAccessToken",
    "dashPath",
    "hotKeyDebug",
    "defaultTenantAccessToken",
  ],
} as const;

export const SiderbarConfigSchema = {
  type: "object",
  properties: {
    logo: {
      type: "string",
      description: "logo",
    },
    sideritems: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItem",
      },
    },
  },
} as const;

export const DashSidebarItemSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    defaultExpanded: {
      type: "boolean",
      description: "默认展开",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItemLeaf",
      },
    },
  },
  required: ["title", "url"],
} as const;

export const DashSidebarItemLeafSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
  },
  required: ["title", "url"],
} as const;

export const HfAccountSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    username: {
      type: "string",
      description: "The username of the hf account.",
    },
    token: {
      type: "string",
      description: "The token of the hf account.",
    },
  },
  required: ["metadata", "username", "token"],
} as const;

export const EnvSchema = {
  type: "object",
  description: "环境变量",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "环境变量名称",
    },
    value: {
      type: "string",
      description: "环境变量值",
    },
  },
  required: ["metadata", "name", "value"],
} as const;

export const EnvListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Env",
      },
      type: "array",
    },
  },
} as const;

export const EndpointSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
  required: ["metadata", "name", "url", "token", "type"],
} as const;

export const EndpointListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Endpoint",
      },
      type: "array",
    },
  },
} as const;

export const UpdateEndpointRequestSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
  },
} as const;

export const PlatformSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const PlatformListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Platform",
      },
      type: "array",
    },
  },
} as const;

export const PlatformUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const PlatformAccountSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    username: {
      type: "string",
    },
    email: {
      type: "string",
    },
    password: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    comment: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    properties: {
      type: "object",
    },
  },
  required: ["metadata", "username", "platform"],
} as const;

export const PlatformAccountListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/PlatformAccount",
      },
      type: "array",
    },
  },
} as const;

export const PlatformAccountUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    username: {
      type: "string",
    },
    email: {
      type: "string",
    },
    password: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    comment: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    properties: {
      type: "object",
    },
  },
} as const;

export const BrowserSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const BrowserListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Browser",
      },
      type: "array",
    },
  },
} as const;

export const BrowserUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const ProxySchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const ProxyListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Proxy",
      },
      type: "array",
    },
  },
} as const;

export const ProxyUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;
