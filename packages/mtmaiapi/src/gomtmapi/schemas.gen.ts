// This file is auto-generated by @hey-api/openapi-ts

export const APIMetaSchema = {
  type: "object",
  properties: {
    auth: {
      $ref: "#/components/schemas/APIMetaAuth",
    },
    pylonAppId: {
      type: "string",
      description: "the Pylon app ID for usepylon.com chat support",
      example: "12345678-1234-1234-1234-123456789012",
    },
    posthog: {
      $ref: "#/components/schemas/APIMetaPosthog",
    },
    allowSignup: {
      type: "boolean",
      description: "whether or not users can sign up for this instance",
      example: true,
    },
    allowInvites: {
      type: "boolean",
      description:
        "whether or not users can invite other users to this instance",
      example: true,
    },
    allowCreateTenant: {
      type: "boolean",
      description: "whether or not users can create new tenants",
      example: true,
    },
    allowChangePassword: {
      type: "boolean",
      description: "whether or not users can change their password",
      example: true,
    },
  },
} as const;

export const APIMetaAuthSchema = {
  type: "object",
  properties: {
    schemes: {
      items: {
        type: "string",
      },
      type: "array",
      description: "the supported types of authentication",
      example: ["basic", "google"],
    },
  },
} as const;

export const APIMetaPosthogSchema = {
  type: "object",
  properties: {
    apiKey: {
      type: "string",
      description: "the PostHog API key",
      example: "phk_1234567890abcdef",
    },
    apiHost: {
      type: "string",
      description: "the PostHog API host",
      example: "https://posthog.example.com",
    },
  },
} as const;

export const ListAPIMetaIntegrationSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/APIMetaIntegration",
  },
} as const;

export const APIMetaIntegrationSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "the name of the integration",
      example: "github",
    },
    enabled: {
      type: "boolean",
      description: "whether this integration is enabled on the instance",
    },
  },
  required: ["name", "enabled"],
} as const;

export const APIErrorsSchema = {
  type: "object",
  properties: {
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/APIError",
      },
    },
  },
  required: ["errors"],
} as const;

export const APIErrorSchema = {
  type: "object",
  properties: {
    code: {
      type: "integer",
      description: "a custom Hatchet error code",
      format: "uint64",
      example: 1400,
    },
    field: {
      type: "string",
      description:
        "the field that this error is associated with, if applicable",
      example: "name",
    },
    description: {
      type: "string",
      description: "a description for this error",
      example: "A descriptive error message",
    },
    docs_link: {
      type: "string",
      description: "a link to the documentation for this error, if it exists",
      example: "github.com/hatchet-dev/hatchet",
    },
  },
  required: ["description"],
} as const;

export const PaginationResponseSchema = {
  type: "object",
  properties: {
    current_page: {
      type: "integer",
      description: "the current page",
      format: "int64",
      example: 2,
    },
    next_page: {
      type: "integer",
      description: "the next page",
      format: "int64",
      example: 3,
    },
    num_pages: {
      type: "integer",
      description: "the total number of pages for listing",
      format: "int64",
      example: 10,
    },
  },
  example: {
    next_page: 3,
    num_pages: 10,
    current_page: 2,
  },
} as const;

export const APIResourceMetaSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "the id of this resource, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 0,
      maxLength: 36,
    },
    createdAt: {
      type: "string",
      description: "the time that this resource was created",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    updatedAt: {
      type: "string",
      description: "the time that this resource was last updated",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
  },
  required: ["id", "createdAt", "updatedAt"],
} as const;

export const UserSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    emailVerified: {
      type: "boolean",
      description: "Whether the user has verified their email address.",
    },
    hasPassword: {
      type: "boolean",
      description: "Whether the user has a password set.",
    },
    emailHash: {
      type: "string",
      description:
        "A hash of the user's email address for use with Pylon Support Chat",
    },
    userToken: {
      type: "string",
      description: "The user's token for use with Pylon Support Chat",
    },
  },
  required: ["metadata", "email", "emailVerified"],
  type: "object",
} as const;

export const UserTenantPublicSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
    },
    name: {
      type: "string",
      description: "The display name of the user.",
    },
  },
  required: ["email"],
  type: "object",
} as const;

export const UserLoginRequestSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["email", "password"],
  type: "object",
} as const;

export const UserChangePasswordRequestSchema = {
  properties: {
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
    newPassword: {
      type: "string",
      description: "The new password for the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["password", "newPassword"],
  type: "object",
} as const;

export const UserRegisterRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the user.",
    },
    email: {
      type: "string",
      format: "email",
      description: "The email address of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    password: {
      type: "string",
      description: "The password of the user.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,password",
      },
    },
  },
  required: ["name", "email", "password"],
  type: "object",
} as const;

export const UserTenantMembershipsListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
  },
  required: ["metadata", "name", "slug"],
  type: "object",
} as const;

export const TenantMemberSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    user: {
      $ref: "#/components/schemas/UserTenantPublic",
      description: "The user associated with this tenant member.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this tenant member.",
    },
  },
  required: ["metadata", "user", "role"],
  type: "object",
} as const;

export const TenantMemberListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantMember",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const TenantMemberRoleSchema = {
  enum: ["OWNER", "ADMIN", "MEMBER"],
  type: "string",
} as const;

export const TenantResourceSchema = {
  enum: ["WORKER", "EVENT", "WORKFLOW_RUN", "CRON", "SCHEDULE"],
  type: "string",
} as const;

export const TenantResourceLimitSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    resource: {
      $ref: "#/components/schemas/TenantResource",
      description: "The resource associated with this limit.",
    },
    limitValue: {
      type: "integer",
      description: "The limit associated with this limit.",
    },
    alarmValue: {
      type: "integer",
      description:
        "The alarm value associated with this limit to warn of approaching limit value.",
    },
    value: {
      type: "integer",
      description: "The current value associated with this limit.",
    },
    window: {
      type: "string",
      description:
        "The meter window for the limit. (i.e. 1 day, 1 week, 1 month)",
    },
    lastRefill: {
      type: "string",
      description: "The last time the limit was refilled.",
      format: "date-time",
    },
  },
  required: ["metadata", "tenantId", "resource", "limitValue", "value"],
  type: "object",
} as const;

export const TenantResourcePolicySchema = {
  properties: {
    limits: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TenantResourceLimit",
      },
      description: "A list of resource limits for the tenant.",
    },
  },
  required: ["limits"],
  type: "object",
} as const;

export const CreateTenantInviteRequestSchema = {
  properties: {
    email: {
      type: "string",
      description: "The email of the user to invite.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,email",
      },
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["email", "role"],
  type: "object",
} as const;

export const UpdateTenantInviteRequestSchema = {
  properties: {
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
  },
  required: ["role"],
  type: "object",
} as const;

export const TenantAlertingSettingsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
    },
    lastAlertedAt: {
      type: "string",
      description: "The last time an alert was sent.",
      format: "date-time",
    },
  },
  required: ["metadata", "maxAlertingFrequency"],
  type: "object",
} as const;

export const TenantAlertEmailGroupSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
    },
  },
  required: ["metadata", "emails"],
  type: "object",
} as const;

export const TenantAlertEmailGroupListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantAlertEmailGroup",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const UpdateTenantAlertEmailGroupRequestSchema = {
  properties: {
    emails: {
      type: "array",
      items: {
        type: "string",
      },
      description: "A list of emails for users",
      "x-oapi-codegen-extra-tags": {
        validate: "required,dive,email",
      },
    },
  },
  required: ["emails"],
  type: "object",
} as const;

export const TenantInviteSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    email: {
      type: "string",
      description: "The email of the user to invite.",
    },
    role: {
      $ref: "#/components/schemas/TenantMemberRole",
      description: "The role of the user in the tenant.",
    },
    tenantId: {
      type: "string",
      description: "The tenant id associated with this tenant invite.",
    },
    tenantName: {
      type: "string",
      description: "The tenant name for the tenant.",
    },
    expires: {
      type: "string",
      description: "The time that this invite expires.",
      format: "date-time",
    },
  },
  required: ["metadata", "email", "role", "expires", "tenantId"],
  type: "object",
} as const;

export const TenantInviteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/TenantInvite",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const QueueMetricsSchema = {
  type: "object",
  properties: {
    numQueued: {
      type: "integer",
      description: "The number of items in the queue.",
    },
    numRunning: {
      type: "integer",
      description: "The number of items running.",
    },
    numPending: {
      type: "integer",
      description: "The number of items pending.",
    },
  },
  required: ["numQueued", "numRunning", "numPending"],
} as const;

export const TenantQueueMetricsSchema = {
  properties: {
    total: {
      $ref: "#/components/schemas/QueueMetrics",
      description: "The total queue metrics.",
    },
    workflow: {
      type: "object",
      additionalProperties: {
        $ref: "#/components/schemas/QueueMetrics",
      },
    },
    queues: {
      type: "object",
      additionalProperties: {
        type: "integer",
      },
    },
  },
} as const;

export const TenantStepRunQueueMetricsSchema = {
  properties: {
    queues: {
      type: "object",
      additionalProperties: {
        type: "integer",
      },
    },
  },
} as const;

export const AcceptInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const RejectInviteRequestSchema = {
  properties: {
    invite: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      "x-oapi-codegen-extra-tags": {
        validate: "required,uuid",
      },
    },
  },
  required: ["invite"],
  type: "object",
} as const;

export const TenantListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Tenant",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required",
      },
    },
    slug: {
      type: "string",
      description: "The slug of the tenant.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,hatchetName",
      },
    },
  },
  required: ["name", "slug"],
  type: "object",
} as const;

export const UpdateTenantRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tenant.",
    },
    analyticsOptOut: {
      type: "boolean",
      description: "Whether the tenant has opted out of analytics.",
    },
    alertMemberEmails: {
      type: "boolean",
      description: "Whether to alert tenant members.",
    },
    enableWorkflowRunFailureAlerts: {
      type: "boolean",
      description: "Whether to send alerts when workflow runs fail.",
    },
    enableExpiringTokenAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tokens are approaching expiration.",
    },
    enableTenantResourceLimitAlerts: {
      type: "boolean",
      description:
        "Whether to enable alerts when tenant resources are approaching limits.",
    },
    maxAlertingFrequency: {
      type: "string",
      description: "The max frequency at which to alert.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
  },
  type: "object",
} as const;

export const EventSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    key: {
      type: "string",
      description: "The key for the event.",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this event.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this event.",
    },
    workflowRunSummary: {
      $ref: "#/components/schemas/EventWorkflowRunSummary",
      description: "The workflow run summary for this event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
  },
  required: ["metadata", "key", "tenantId"],
} as const;

export const EventDataSchema = {
  properties: {
    data: {
      type: "string",
      description: "The data for the event (JSON bytes).",
    },
  },
  required: ["data"],
} as const;

export const CreateEventRequestSchema = {
  properties: {
    key: {
      type: "string",
      description: "The key for the event.",
    },
    data: {
      type: "object",
      description: "The data for the event.",
    },
    additionalMetadata: {
      type: "object",
      description: "Additional metadata for the event.",
    },
  },
  required: ["key", "data"],
} as const;

export const BulkCreateEventRequestSchema = {
  properties: {
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateEventRequest",
      },
    },
  },
  required: ["events"],
} as const;

export const BulkCreateEventResponseSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Event",
      },
      description: "The events.",
    },
  },
  required: ["metadata", "events"],
} as const;

export const EventWorkflowRunSummarySchema = {
  properties: {
    pending: {
      type: "integer",
      format: "int64",
      description: "The number of pending runs.",
    },
    running: {
      type: "integer",
      format: "int64",
      description: "The number of running runs.",
    },
    queued: {
      type: "integer",
      format: "int64",
      description: "The number of queued runs.",
    },
    succeeded: {
      type: "integer",
      format: "int64",
      description: "The number of succeeded runs.",
    },
    failed: {
      type: "integer",
      format: "int64",
      description: "The number of failed runs.",
    },
  },
} as const;

export const EventOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const EventOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const EventSearchSchema = {
  type: "string",
} as const;

export const EventKeyListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/EventKey",
      },
      type: "array",
    },
  },
} as const;

export const EventKeySchema = {
  type: "string",
  description: "The key for the event.",
} as const;

export const WorkflowIDSchema = {
  type: "string",
  description: "A workflow ID.",
} as const;

export const EventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Event",
      },
      type: "array",
    },
  },
} as const;

export const RateLimitSchema = {
  properties: {
    key: {
      type: "string",
      description: "The key for the rate limit.",
    },
    tenantId: {
      type: "string",
      description: "The ID of the tenant associated with this rate limit.",
    },
    limitValue: {
      type: "integer",
      description: "The maximum number of requests allowed within the window.",
    },
    value: {
      type: "integer",
      description: "The current number of requests made within the window.",
    },
    window: {
      type: "string",
      description: "The window of time in which the limitValue is enforced.",
    },
    lastRefill: {
      type: "string",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
      description: "The last time the rate limit was refilled.",
    },
  },
  required: ["key", "tenantId", "limitValue", "value", "window", "lastRefill"],
} as const;

export const RateLimitListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/RateLimit",
      },
      type: "array",
    },
  },
} as const;

export const RateLimitOrderByFieldSchema = {
  type: "string",
  enum: ["key", "value", "limitValue"],
} as const;

export const RateLimitOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const ReplayEventRequestSchema = {
  properties: {
    eventIds: {
      type: "array",
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["eventIds"],
} as const;

export const CancelEventRequestSchema = {
  properties: {
    eventIds: {
      type: "array",
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["eventIds"],
} as const;

export const WorkflowSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the workflow.",
    },
    description: {
      type: "string",
      description: "The description of the workflow.",
    },
    isPaused: {
      type: "boolean",
      description: "Whether the workflow is paused.",
    },
    versions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowVersionMeta",
      },
    },
    tags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTag",
      },
      description: "The tags of the workflow.",
    },
    jobs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Job",
      },
      description: "The jobs of the workflow.",
    },
  },
  required: ["metadata", "name"],
  type: "object",
} as const;

export const WorkflowUpdateRequestSchema = {
  type: "object",
  properties: {
    isPaused: {
      type: "boolean",
      description: "Whether the workflow is paused.",
    },
  },
} as const;

export const WorkflowConcurrencySchema = {
  type: "object",
  properties: {
    maxRuns: {
      type: "integer",
      format: "int32",
      description: "The maximum number of concurrent workflow runs.",
    },
    limitStrategy: {
      description: "The strategy to use when the concurrency limit is reached.",
      type: "string",
      enum: [
        "CANCEL_IN_PROGRESS",
        "DROP_NEWEST",
        "QUEUE_NEWEST",
        "GROUP_ROUND_ROBIN",
      ],
    },
    getConcurrencyGroup: {
      type: "string",
      description:
        "An action which gets the concurrency group for the WorkflowRun.",
    },
  },
  required: ["maxRuns", "limitStrategy", "getConcurrencyGroup"],
} as const;

export const WorkflowVersionMetaSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    version: {
      type: "string",
      description: "The version of the workflow.",
    },
    order: {
      type: "integer",
      format: "int32",
    },
    workflowId: {
      type: "string",
    },
    workflow: {
      $ref: "#/components/schemas/Workflow",
    },
  },
  required: ["metadata", "version", "order", "workflowId"],
} as const;

export const WorkflowVersionSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    version: {
      type: "string",
      description: "The version of the workflow.",
    },
    order: {
      type: "integer",
      format: "int32",
    },
    workflowId: {
      type: "string",
    },
    sticky: {
      type: "string",
      description: "The sticky strategy of the workflow.",
    },
    defaultPriority: {
      type: "integer",
      format: "int32",
      description: "The default priority of the workflow.",
    },
    workflow: {
      $ref: "#/components/schemas/Workflow",
    },
    concurrency: {
      $ref: "#/components/schemas/WorkflowConcurrency",
    },
    triggers: {
      $ref: "#/components/schemas/WorkflowTriggers",
    },
    scheduleTimeout: {
      type: "string",
    },
    jobs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Job",
      },
    },
  },
  required: ["metadata", "version", "order", "workflowId"],
} as const;

export const WorkflowVersionDefinitionSchema = {
  type: "object",
  properties: {
    rawDefinition: {
      type: "string",
      description: "The raw YAML definition of the workflow.",
    },
  },
  required: ["rawDefinition"],
} as const;

export const WorkflowTagSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the workflow.",
    },
    color: {
      type: "string",
      description: "The description of the workflow.",
    },
  },
  required: ["name", "color"],
} as const;

export const WorkflowListSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Workflow",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const WorkflowTriggersSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    workflow_version_id: {
      type: "string",
    },
    tenant_id: {
      type: "string",
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTriggerEventRef",
      },
    },
    crons: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowTriggerCronRef",
      },
    },
  },
} as const;

export const WorkflowTriggerEventRefSchema = {
  type: "object",
  properties: {
    parent_id: {
      type: "string",
    },
    event_key: {
      type: "string",
    },
  },
} as const;

export const WorkflowTriggerCronRefSchema = {
  type: "object",
  properties: {
    parent_id: {
      type: "string",
    },
    cron: {
      type: "string",
    },
  },
} as const;

export const JobSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    versionId: {
      type: "string",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
      description: "The description of the job.",
    },
    steps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Step",
      },
    },
    timeout: {
      type: "string",
      description: "The timeout of the job.",
    },
  },
  required: ["metadata", "tenantId", "versionId", "name", "steps"],
} as const;

export const StepSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    readableId: {
      type: "string",
      description: "The readable id of the step.",
    },
    tenantId: {
      type: "string",
    },
    jobId: {
      type: "string",
    },
    action: {
      type: "string",
    },
    timeout: {
      type: "string",
      description: "The timeout of the step.",
    },
    children: {
      type: "array",
      items: {
        type: "string",
      },
    },
    parents: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "readableId", "tenantId", "jobId", "action", "nextId"],
} as const;

export const WorkflowWorkersCountSchema = {
  type: "object",
  properties: {
    freeSlotCount: {
      type: "integer",
    },
    maxSlotCount: {
      type: "integer",
    },
    workflowRunId: {
      type: "string",
    },
  },
  required: ["count"],
} as const;

export const WorkflowRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowVersion: {
      $ref: "#/components/schemas/WorkflowVersion",
    },
    status: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    displayName: {
      type: "string",
    },
    jobRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/JobRun",
      },
    },
    triggeredBy: {
      $ref: "#/components/schemas/WorkflowRunTriggeredBy",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    duration: {
      type: "integer",
      example: 1000,
    },
    parentId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentStepRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "status",
    "triggeredBy",
  ],
} as const;

export const WorkflowRunShapeSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowVersion: {
      $ref: "#/components/schemas/WorkflowVersion",
    },
    status: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    displayName: {
      type: "string",
    },
    jobRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/JobRun",
      },
    },
    triggeredBy: {
      $ref: "#/components/schemas/WorkflowRunTriggeredBy",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    duration: {
      type: "integer",
      example: 1000,
    },
    parentId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    parentStepRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "status",
    "triggeredBy",
  ],
} as const;

export const ReplayWorkflowRunsRequestSchema = {
  properties: {
    workflowRunIds: {
      type: "array",
      maxLength: 500,
      items: {
        type: "string",
        example: "bb214807-246e-43a5-a25d-41761d1cff9e",
        minLength: 36,
        maxLength: 36,
        format: "uuid",
      },
    },
  },
  required: ["workflowRunIds"],
} as const;

export const ReplayWorkflowRunsResponseSchema = {
  properties: {
    workflowRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowRun",
      },
    },
  },
  required: ["workflowRuns"],
} as const;

export const WorkflowRunListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WorkflowRun",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const ScheduledWorkflowsSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    triggerAt: {
      type: "string",
      format: "date-time",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
    workflowRunCreatedAt: {
      type: "string",
      format: "date-time",
    },
    workflowRunName: {
      type: "string",
    },
    workflowRunStatus: {
      $ref: "#/components/schemas/WorkflowRunStatus",
    },
    workflowRunId: {
      type: "string",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    method: {
      type: "string",
      enum: ["DEFAULT", "API"],
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "workflowName",
    "workflowId",
    "triggerAt",
    "method",
  ],
} as const;

export const ScheduledWorkflowsListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ScheduledWorkflows",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const ScheduledWorkflowsOrderByFieldSchema = {
  type: "string",
  enum: ["triggerAt", "createdAt"],
} as const;

export const ScheduledRunStatusSchema = {
  type: "string",
  enum: [
    "PENDING",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "QUEUED",
    "SCHEDULED",
  ],
} as const;

export const CronWorkflowsSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowVersionId: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    cron: {
      type: "string",
    },
    name: {
      type: "string",
    },
    input: {
      type: "object",
      additionalProperties: true,
    },
    additionalMetadata: {
      type: "object",
      additionalProperties: true,
    },
    enabled: {
      type: "boolean",
    },
    method: {
      type: "string",
      enum: ["DEFAULT", "API"],
    },
  },
  required: [
    "metadata",
    "tenantId",
    "workflowVersionId",
    "workflowName",
    "workflowId",
    "cron",
    "enabled",
    "method",
  ],
} as const;

export const CronWorkflowsListSchema = {
  type: "object",
  properties: {
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CronWorkflows",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const CronWorkflowsOrderByFieldSchema = {
  type: "string",
  enum: ["name", "createdAt"],
} as const;

export const WorkflowRunOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt", "startedAt", "finishedAt", "duration"],
} as const;

export const WorkflowRunOrderByDirectionSchema = {
  type: "string",
  enum: ["ASC", "DESC"],
} as const;

export const WorkflowRunsMetricsSchema = {
  type: "object",
  properties: {
    counts: {
      type: "object",
      $ref: "#/components/schemas/WorkflowRunsMetricsCounts",
    },
  },
} as const;

export const WorkflowRunsMetricsCountsSchema = {
  type: "object",
  properties: {
    PENDING: {
      type: "integer",
    },
    RUNNING: {
      type: "integer",
    },
    SUCCEEDED: {
      type: "integer",
    },
    FAILED: {
      type: "integer",
    },
    QUEUED: {
      type: "integer",
    },
    CANCELLED: {
      type: "integer",
    },
  },
} as const;

export const WorkflowRunStatusSchema = {
  type: "string",
  enum: [
    "PENDING",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "QUEUED",
    "BACKOFF",
  ],
} as const;

export const WorkflowRunStatusListSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/WorkflowRunStatus",
  },
} as const;

export const WorkflowKindSchema = {
  type: "string",
  enum: ["FUNCTION", "DURABLE", "DAG"],
} as const;

export const WorkflowKindListSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/WorkflowKind",
  },
} as const;

export const WorkflowRunsCancelRequestSchema = {
  type: "object",
  properties: {
    workflowRunIds: {
      type: "array",
      items: {
        type: "string",
        format: "uuid",
        minLength: 36,
        maxLength: 36,
      },
    },
  },
  required: ["workflowRunIds"],
} as const;

export const JobRunStatusSchema = {
  type: "string",
  enum: ["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "BACKOFF"],
} as const;

export const StepRunStatusSchema = {
  type: "string",
  enum: [
    "PENDING",
    "PENDING_ASSIGNMENT",
    "ASSIGNED",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "CANCELLING",
    "BACKOFF",
  ],
} as const;

export const JobRunSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    workflowRun: {
      $ref: "#/components/schemas/WorkflowRun",
    },
    jobId: {
      type: "string",
    },
    job: {
      $ref: "#/components/schemas/Job",
    },
    tickerId: {
      type: "string",
    },
    stepRuns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/StepRun",
      },
    },
    status: {
      $ref: "#/components/schemas/JobRunStatus",
    },
    result: {
      type: "object",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["metadata", "tenantId", "workflowRunId", "jobId", "status"],
} as const;

export const WorkflowRunTriggeredBySchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    parentWorkflowRunId: {
      type: "string",
    },
    eventId: {
      type: "string",
    },
    cronParentId: {
      type: "string",
    },
    cronSchedule: {
      type: "string",
    },
  },
  required: ["metadata"],
} as const;

export const StepRunSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
    },
    jobRunId: {
      type: "string",
    },
    jobRun: {
      type: "object",
      additionalProperties: true,
    },
    stepId: {
      type: "string",
    },
    step: {
      $ref: "#/components/schemas/Step",
    },
    childWorkflowsCount: {
      type: "integer",
    },
    parents: {
      type: "array",
      items: {
        type: "string",
      },
    },
    childWorkflowRuns: {
      type: "array",
      items: {
        type: "string",
      },
    },
    workerId: {
      type: "string",
    },
    input: {
      type: "string",
    },
    output: {
      type: "string",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
    requeueAfter: {
      type: "string",
      format: "date-time",
    },
    result: {
      type: "object",
    },
    error: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    startedAtEpoch: {
      type: "integer",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAtEpoch: {
      type: "integer",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAtEpoch: {
      type: "integer",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAtEpoch: {
      type: "integer",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["metadata", "tenantId", "jobRunId", "stepId", "status"],
} as const;

export const StepRunEventReasonSchema = {
  type: "string",
  enum: [
    "REQUEUED_NO_WORKER",
    "REQUEUED_RATE_LIMIT",
    "SCHEDULING_TIMED_OUT",
    "ASSIGNED",
    "STARTED",
    "ACKNOWLEDGED",
    "FINISHED",
    "FAILED",
    "RETRYING",
    "CANCELLED",
    "TIMEOUT_REFRESHED",
    "REASSIGNED",
    "TIMED_OUT",
    "SLOT_RELEASED",
    "RETRIED_BY_USER",
    "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
    "WORKFLOW_RUN_GROUP_KEY_FAILED",
  ],
} as const;

export const StepRunEventSeveritySchema = {
  type: "string",
  enum: ["INFO", "WARNING", "CRITICAL"],
} as const;

export const StepRunEventSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    timeFirstSeen: {
      type: "string",
      format: "date-time",
    },
    timeLastSeen: {
      type: "string",
      format: "date-time",
    },
    stepRunId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    reason: {
      $ref: "#/components/schemas/StepRunEventReason",
    },
    severity: {
      $ref: "#/components/schemas/StepRunEventSeverity",
    },
    message: {
      type: "string",
    },
    count: {
      type: "integer",
    },
    data: {
      type: "object",
    },
  },
  required: [
    "id",
    "timeFirstSeen",
    "timeLastSeen",
    "reason",
    "severity",
    "message",
    "count",
  ],
} as const;

export const StepRunEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/StepRunEvent",
      },
      type: "array",
    },
  },
} as const;

export const StepRunArchiveSchema = {
  type: "object",
  properties: {
    stepRunId: {
      type: "string",
    },
    order: {
      type: "integer",
    },
    input: {
      type: "string",
    },
    output: {
      type: "string",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    error: {
      type: "string",
    },
    retryCount: {
      type: "integer",
    },
    createdAt: {
      type: "string",
      format: "date-time",
    },
    startedAtEpoch: {
      type: "integer",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAtEpoch: {
      type: "integer",
    },
    timeoutAt: {
      type: "string",
      format: "date-time",
    },
    timeoutAtEpoch: {
      type: "integer",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAtEpoch: {
      type: "integer",
    },
    cancelledReason: {
      type: "string",
    },
    cancelledError: {
      type: "string",
    },
  },
  required: ["stepRunId", "retryCount", "order", "createdAt"],
} as const;

export const StepRunArchiveListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/StepRunArchive",
      },
      type: "array",
    },
  },
} as const;

export const WorkerRuntimeInfoSchema = {
  properties: {
    sdkVersion: {
      type: "string",
    },
    language: {
      $ref: "#/components/schemas/WorkerRuntimeSDKs",
    },
    languageVersion: {
      type: "string",
    },
    os: {
      type: "string",
    },
    runtimeExtra: {
      type: "string",
    },
  },
} as const;

export const WorkerRuntimeSDKsSchema = {
  type: "string",
  enum: ["GOLANG", "PYTHON", "TYPESCRIPT"],
} as const;

export const WorkerListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Worker",
      },
      type: "array",
    },
  },
} as const;

export const SemaphoreSlotsSchema = {
  properties: {
    stepRunId: {
      type: "string",
      description: "The step run id.",
      format: "uuid",
    },
    actionId: {
      type: "string",
      description: "The action id.",
    },
    startedAt: {
      type: "string",
      description: "The time this slot was started.",
      format: "date-time",
    },
    timeoutAt: {
      type: "string",
      description: "The time this slot will timeout.",
      format: "date-time",
    },
    workflowRunId: {
      type: "string",
      description: "The workflow run id.",
      format: "uuid",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
  },
  required: ["stepRunId", "actionId", "workflowRunId", "status"],
} as const;

export const RecentStepRunsSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    actionId: {
      type: "string",
      description: "The action id.",
    },
    status: {
      $ref: "#/components/schemas/StepRunStatus",
    },
    startedAt: {
      type: "string",
      format: "date-time",
    },
    finishedAt: {
      type: "string",
      format: "date-time",
    },
    cancelledAt: {
      type: "string",
      format: "date-time",
    },
    workflowRunId: {
      type: "string",
      format: "uuid",
    },
  },
  required: ["actionId", "metadata", "status", "workflowRunId"],
  type: "object",
} as const;

export const WorkerSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the worker.",
    },
    type: {
      type: "string",
      enum: ["SELFHOSTED", "MANAGED", "WEBHOOK"],
    },
    lastHeartbeatAt: {
      type: "string",
      description: "The time this worker last sent a heartbeat.",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    lastListenerEstablished: {
      type: "string",
      description: "The time this worker last sent a heartbeat.",
      format: "date-time",
      example: "2022-12-13T15:06:48.888358-05:00",
    },
    actions: {
      type: "array",
      description: "The actions this worker can perform.",
      items: {
        type: "string",
      },
    },
    slots: {
      type: "array",
      description: "The semaphore slot state for the worker.",
      items: {
        $ref: "#/components/schemas/SemaphoreSlots",
      },
    },
    recentStepRuns: {
      type: "array",
      description: "The recent step runs for the worker.",
      items: {
        $ref: "#/components/schemas/RecentStepRuns",
      },
    },
    status: {
      type: "string",
      description: "The status of the worker.",
      enum: ["ACTIVE", "INACTIVE", "PAUSED"],
    },
    maxRuns: {
      type: "integer",
      description:
        "The maximum number of runs this worker can execute concurrently.",
    },
    availableRuns: {
      type: "integer",
      description: "The number of runs this worker can execute concurrently.",
    },
    dispatcherId: {
      type: "string",
      description: "the id of the assigned dispatcher, in UUID format",
      example: "bb214807-246e-43a5-a25d-41761d1cff9e",
      minLength: 36,
      maxLength: 36,
      format: "uuid",
    },
    labels: {
      type: "array",
      description: "The current label state of the worker.",
      items: {
        $ref: "#/components/schemas/WorkerLabel",
      },
    },
    webhookUrl: {
      type: "string",
      description: "The webhook URL for the worker.",
    },
    webhookId: {
      type: "string",
      description: "The webhook ID for the worker.",
      format: "uuid",
    },
    runtimeInfo: {
      $ref: "#/components/schemas/WorkerRuntimeInfo",
    },
  },
  required: ["metadata", "name", "type"],
  type: "object",
} as const;

export const WorkerLabelSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    key: {
      type: "string",
      description: "The key of the label.",
    },
    value: {
      type: "string",
      description: "The value of the label.",
    },
  },
  required: ["metadata", "key"],
  type: "object",
} as const;

export const UpdateWorkerRequestSchema = {
  properties: {
    isPaused: {
      type: "boolean",
      description: "Whether the worker is paused and cannot accept new runs.",
    },
  },
  type: "object",
} as const;

export const APITokenSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the API token.",
      maxLength: 255,
    },
    expiresAt: {
      type: "string",
      format: "date-time",
      description: "When the API token expires.",
    },
  },
  required: ["metadata", "name", "expiresAt"],
} as const;

export const CreateAPITokenRequestSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "A name for the API token.",
      maxLength: 255,
    },
    expiresIn: {
      type: "string",
      description: "The duration for which the token is valid.",
      "x-oapi-codegen-extra-tags": {
        validate: "omitnil,duration",
      },
    },
  },
  required: ["name"],
} as const;

export const CreateAPITokenResponseSchema = {
  type: "object",
  properties: {
    token: {
      type: "string",
      description: "The API token.",
    },
  },
  required: ["token"],
} as const;

export const ListAPITokensResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/APIToken",
      },
      type: "array",
    },
  },
} as const;

export const RerunStepRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
  },
  required: ["input"],
} as const;

export const TriggerWorkflowRunRequestSchema = {
  properties: {
    input: {
      type: "object",
    },
    additionalMetadata: {
      type: "object",
    },
  },
  required: ["input"],
} as const;

export const CreatePullRequestFromStepRunSchema = {
  properties: {
    branchName: {
      type: "string",
    },
  },
  required: ["branchName"],
} as const;

export const GetStepRunDiffResponseSchema = {
  properties: {
    diffs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/StepRunDiff",
      },
    },
  },
  required: ["diffs"],
} as const;

export const StepRunDiffSchema = {
  properties: {
    key: {
      type: "string",
    },
    original: {
      type: "string",
    },
    modified: {
      type: "string",
    },
  },
  required: ["key", "original", "modified"],
} as const;

export const ListPullRequestsResponseSchema = {
  properties: {
    pullRequests: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PullRequest",
      },
    },
  },
  required: ["pullRequests"],
} as const;

export const PullRequestSchema = {
  properties: {
    repositoryOwner: {
      type: "string",
    },
    repositoryName: {
      type: "string",
    },
    pullRequestID: {
      type: "integer",
    },
    pullRequestTitle: {
      type: "string",
    },
    pullRequestNumber: {
      type: "integer",
    },
    pullRequestHeadBranch: {
      type: "string",
    },
    pullRequestBaseBranch: {
      type: "string",
    },
    pullRequestState: {
      $ref: "#/components/schemas/PullRequestState",
    },
  },
  required: [
    "repositoryOwner",
    "repositoryName",
    "pullRequestID",
    "pullRequestTitle",
    "pullRequestNumber",
    "pullRequestHeadBranch",
    "pullRequestBaseBranch",
    "pullRequestState",
  ],
} as const;

export const PullRequestStateSchema = {
  type: "string",
  enum: ["open", "closed"],
} as const;

export const LogLineSchema = {
  properties: {
    createdAt: {
      type: "string",
      format: "date-time",
      description: "The creation date of the log line.",
    },
    message: {
      type: "string",
      description: "The log message.",
    },
    metadata: {
      type: "object",
      description: "The log metadata.",
    },
  },
  required: ["createdAt", "message", "metadata"],
} as const;

export const LogLineLevelSchema = {
  type: "string",
  enum: ["DEBUG", "INFO", "WARN", "ERROR"],
} as const;

export const LogLineListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/LogLine",
      },
      type: "array",
    },
  },
} as const;

export const LogLineOrderByFieldSchema = {
  type: "string",
  enum: ["createdAt"],
} as const;

export const LogLineOrderByDirectionSchema = {
  type: "string",
  enum: ["asc", "desc"],
} as const;

export const LogLineSearchSchema = {
  type: "string",
} as const;

export const LogLineLevelFieldSchema = {
  type: "array",
  items: {
    $ref: "#/components/schemas/LogLineLevel",
  },
} as const;

export const SNSIntegrationSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description:
        "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    topicArn: {
      type: "string",
      description: "The Amazon Resource Name (ARN) of the SNS topic.",
    },
    ingestUrl: {
      type: "string",
      description: "The URL to send SNS messages to.",
    },
  },
  required: ["metadata", "tenantId", "topicArn"],
} as const;

export const ListSNSIntegrationsSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SNSIntegration",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;

export const SlackWebhookSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    tenantId: {
      type: "string",
      format: "uuid",
      description:
        "The unique identifier for the tenant that the SNS integration belongs to.",
    },
    teamName: {
      type: "string",
      description: "The team name associated with this slack webhook.",
    },
    teamId: {
      type: "string",
      description: "The team id associated with this slack webhook.",
    },
    channelName: {
      type: "string",
      description: "The channel name associated with this slack webhook.",
    },
    channelId: {
      type: "string",
      description: "The channel id associated with this slack webhook.",
    },
  },
  required: [
    "metadata",
    "tenantId",
    "teamName",
    "teamId",
    "channelName",
    "channelId",
  ],
} as const;

export const ListSlackWebhooksSchema = {
  type: "object",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SlackWebhook",
      },
    },
  },
  required: ["pagination", "rows"],
} as const;

export const CreateSNSIntegrationRequestSchema = {
  properties: {
    topicArn: {
      type: "string",
      description: "The Amazon Resource Name (ARN) of the SNS topic.",
      "x-oapi-codegen-extra-tags": {
        validate: "required,min=1,max=256",
      },
    },
  },
  required: ["topicArn"],
  type: "object",
} as const;

export const WorkflowMetricsSchema = {
  type: "object",
  properties: {
    groupKeyRunsCount: {
      type: "integer",
      description:
        "The number of runs for a specific group key (passed via filter)",
    },
    groupKeyCount: {
      type: "integer",
      description: "The total number of concurrency group keys.",
    },
  },
} as const;

export const WebhookWorkerSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
  },
  required: ["metadata", "name", "url"],
  type: "object",
} as const;

export const WebhookWorkerRequestMethodSchema = {
  enum: ["GET", "POST", "PUT"],
} as const;

export const WebhookWorkerRequestSchema = {
  properties: {
    created_at: {
      type: "string",
      format: "date-time",
      description: "The date and time the request was created.",
    },
    method: {
      $ref: "#/components/schemas/WebhookWorkerRequestMethod",
      description: "The HTTP method used for the request.",
    },
    statusCode: {
      type: "integer",
      description: "The HTTP status code of the response.",
    },
  },
  required: ["created_at", "method", "statusCode"],
  type: "object",
} as const;

export const WebhookWorkerRequestListResponseSchema = {
  properties: {
    requests: {
      type: "array",
      items: {
        $ref: "#/components/schemas/WebhookWorkerRequest",
      },
      description: "The list of webhook requests.",
    },
  },
  type: "object",
} as const;

export const WebhookWorkerCreatedSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
    secret: {
      type: "string",
      description: "The secret key for validation.",
    },
  },
  required: ["metadata", "name", "url", "secret"],
  type: "object",
} as const;

export const WebhookWorkerCreateRequestSchema = {
  properties: {
    name: {
      type: "string",
      description: "The name of the webhook worker.",
    },
    url: {
      type: "string",
      description: "The webhook url.",
    },
    secret: {
      type: "string",
      description:
        "The secret key for validation. If not provided, a random secret will be generated.",
      minLength: 32,
    },
  },
  required: ["name", "url"],
  type: "object",
} as const;

export const WebhookWorkerCreateResponseSchema = {
  properties: {
    worker: {
      $ref: "#/components/schemas/WebhookWorkerCreated",
    },
  },
  type: "object",
} as const;

export const WebhookWorkerListResponseSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/WebhookWorker",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const APIResourceMetaPropertiesSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
  },
} as const;

export const CommonResultSchema = {
  properties: {
    Success: {
      type: "boolean",
    },
    Message: {
      type: "string",
    },
  },
  required: ["Success", "Message"],
} as const;

export const ChatMessageSchema = {
  required: ["metadata", "role", "content", "topic"],
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    role: {
      type: "string",
    },
    content: {
      type: "string",
    },
    source: {
      type: "string",
    },
    topic: {
      type: "string",
    },
    resourceId: {
      type: "string",
    },
    config: {
      properties: {
        message_type: {
          type: "string",
        },
        source: {
          type: "string",
        },
      },
    },
  },
} as const;

export const ChatMessageListSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    other: {
      oneOf: [
        {
          $ref: "#/components/schemas/InstagramTeamConfig",
        },
        {
          $ref: "#/components/schemas/BrowserConfig",
        },
        {
          $ref: "#/components/schemas/TeamConfig",
        },
        {
          $ref: "#/components/schemas/RoundRobinGroupChatConfig",
        },
        {
          $ref: "#/components/schemas/SelectorGroupChatConfig",
        },
        {
          $ref: "#/components/schemas/TerminationComponent",
        },
        {
          $ref: "#/components/schemas/TeamComponent",
        },
        {
          $ref: "#/components/schemas/AgentComponent",
        },
        {
          $ref: "#/components/schemas/ModelComponent",
        },
        {
          $ref: "#/components/schemas/MtComponent",
        },
      ],
    },
  },
} as const;

export const WorkerConfigSchema = {
  properties: {
    workerToken: {
      type: "string",
    },
  },
} as const;

export const BlogGenConfigSchema = {
  type: "object",
  description: "博客站点生成基本配置",
  properties: {
    name: {
      type: "string",
      description: "站点名称.",
      maxLength: 255,
    },
    description: {
      description: "博客站点介绍.",
      type: "string",
    },
    seo_keywords: {
      description: "站点关键字列表",
      type: "string",
    },
    dayPublishCountHint: {
      description: "站点建议日更帖子数量",
      type: "number",
    },
  },
  required: ["name", "description"],
} as const;

export const GenTopicResultSchema = {
  type: "object",
  description: "topics 生成结果",
  properties: {
    topics: {
      type: "array",
      description: "主题列表，按优先顺序，更好的更靠前",
      items: {
        type: "string",
      },
    },
  },
  required: ["topics"],
} as const;

export const GenArticleInputSchema = {
  type: "object",
  description: "文章生成输入",
  properties: {
    topic: {
      type: "string",
      items: {
        type: "string",
      },
    },
  },
  required: ["topic"],
} as const;

export const RunNewTaskResponseSchema = {
  type: "object",
  description: "运行新任务的结果",
  properties: {
    description: {
      type: "string",
    },
  },
} as const;

export const OperationEnumSchema = {
  type: "string",
  enum: ["startBlogTask", "stopBlogTask"],
  description: `可用的操作名称枚举：
- **startBlogTask**: 启动单个博客自动化操作任务
- **stopBlogTask**: 停止单个博客自动化操作任务
`,
} as const;

export const CreateBlogPostRequestSchema = {
  type: "object",
  properties: {
    blogId: {
      type: "string",
      description: "The blog id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    authorId: {
      type: "string",
      description: "The authord id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
  },
  required: ["id", "title", "blogId", "content"],
} as const;

export const BlogListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Blog",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const BlogSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    tenant: {
      $ref: "#/components/schemas/Tenant",
      description: "The tenant associated with this tenant blog.",
    },
    config: {
      properties: {
        dayPublishCount: {
          type: "integer",
          description: "The number of posts to publish per day.",
        },
        description: {
          type: "string",
          description: "The description of the blog.",
        },
      },
    },
    status: {
      type: "string",
      description: "The status of the blog.",
    },
    enabled: {
      type: "boolean",
      description: "Whether the blog is enabled.",
    },
    slug: {
      type: "string",
      description: "The slug of the blog.",
    },
  },
  required: ["metadata", "title"],
  type: "object",
} as const;

export const CreateBlogRequestSchema = {
  properties: {
    title: {
      type: "string",
      description: "blog title to create.",
    },
  },
} as const;

export const UpdateBlogRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    description: {
      type: "string",
      maxLength: 1024,
    },
  },
  required: ["title"],
} as const;

export const BlogPostSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog",
    },
    state: {
      type: "object",
      properties: {
        title: {
          type: "string",
          description: "post title",
        },
        topic: {
          type: "string",
          description: "post topic",
        },
        outlines: {
          type: "array",
          items: {
            type: "object",
            properties: {
              title: {
                type: "string",
                description: "post outline title",
              },
              content: {
                type: "string",
                description: "post outline content",
              },
            },
          },
          description: "post outlines",
        },
      },
    },
  },
  required: ["metadata", "title", "content"],
  type: "object",
} as const;

export const BlogPostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/BlogPost",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const UpdatePostRequestSchema = {
  type: "object",
  properties: {
    blogId: {
      type: "string",
      description: "The blog id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    authorId: {
      type: "string",
      description: "The authord id.",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
  },
  required: ["id", "title", "blogId", "content"],
} as const;

export const ArtifactListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Artifact",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const ArtifactSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    state: {
      type: "object",
      description: "The tenant associated with this tenant blog.",
    },
    nextId: {
      type: "string",
    },
    prevId: {
      type: "string",
    },
  },
  required: ["metadata", "title", "state"],
  type: "object",
} as const;

export const AgentRunInputSchema = {
  required: ["content"],
  properties: {
    sessionId: {
      type: "string",
    },
    content: {
      type: "string",
    },
    tenantId: {
      type: "string",
    },
    runId: {
      type: "string",
    },
    stepRunId: {
      type: "string",
    },
    resourceId: {
      type: "string",
    },
    componentId: {
      type: "string",
    },
    topic: {
      type: "string",
    },
    source: {
      type: "string",
    },
    other: {
      anyOf: [
        {
          $ref: "#/components/schemas/CodeWritingTask",
        },
        {
          $ref: "#/components/schemas/CodeWritingResult",
        },
        {
          $ref: "#/components/schemas/MyMessage",
        },
        {
          $ref: "#/components/schemas/PlatformAccountTask",
        },
        {
          $ref: "#/components/schemas/BrowserData",
        },
        {
          $ref: "#/components/schemas/PlatformAccountData",
        },
        {
          $ref: "#/components/schemas/InstagramTask",
        },
        {
          $ref: "#/components/schemas/ChatSessionStartEvent",
        },
        {
          $ref: "#/components/schemas/TerminationMessage",
        },
        {
          $ref: "#/components/schemas/CodeReviewTask",
        },
        {
          $ref: "#/components/schemas/CodeReviewResult",
        },
        {
          $ref: "#/components/schemas/BrowserTask",
        },
        {
          $ref: "#/components/schemas/BrowserOpenTask",
        },
        {
          $ref: "#/components/schemas/MtTaskResult",
        },
      ],
    },
  },
} as const;

export const ChatHistoryListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
      "x-go-name": "Rows",
    },
  },
} as const;

export const ChatSessionSchema = {
  description: "聊天 Session",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    version: {
      type: "string",
    },
    team: {
      type: "string",
    },
  },
  required: ["name", "version"],
} as const;

export const ChatSessionListSchema = {
  description: "聊天 Session 列表",
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatSession",
      },
    },
  },
} as const;

export const FlowTenantPayloadSchema = {
  properties: {
    input: {
      type: "string",
      description: "输入",
    },
  },
} as const;

export const TextHighlightSchema = {
  properties: {
    fullMarkdown: {
      type: "string",
    },
    markdownBlock: {
      type: "string",
    },
    selectedText: {
      type: "string",
    },
  },
  required: ["fullMarkdown", "markdownBlock", "selectedText"],
} as const;

export const CodeHighlightSchema = {
  properties: {
    startCharIndex: {
      type: "number",
    },
    endCharIndex: {
      type: "number",
    },
  },
  required: ["startCharIndex", "endCharIndex"],
} as const;

export const ArtifactV3Schema = {
  properties: {
    currentIndex: {
      type: "number",
    },
    contents: {
      type: "array",
      items: {
        oneOf: [
          {
            $ref: "#/components/schemas/ArtifactMarkdownV3",
          },
          {
            $ref: "#/components/schemas/ArtifactCodeV3",
          },
        ],
      },
    },
  },
} as const;

export const ArtifactCodeV3Schema = {
  properties: {
    index: {
      type: "number",
    },
    type: {
      type: "string",
    },
    title: {
      type: "string",
    },
    language: {
      type: "string",
      $ref: "#/components/schemas/ProgrammingLanguageOptions",
    },
    code: {
      type: "string",
    },
  },
  required: ["index", "type", "title", "language", "code"],
} as const;

export const ArtifactMarkdownV3Schema = {
  properties: {
    index: {
      type: "number",
    },
    type: {
      type: "string",
    },
    title: {
      type: "string",
    },
    fullMarkdown: {
      type: "string",
    },
  },
  required: ["index", "type", "title", "fullMarkdown"],
} as const;

export const CustomQuickActionSchema = {
  properties: {
    id: {
      type: "string",
      description:
        "A UUID for the quick action. Used to identify the quick action.",
    },
    title: {
      type: "string",
      description:
        "The title of the quick action. Used in the UI to display the quick action.",
    },
    prompt: {
      type: "string",
      description: "The prompt to use when the quick action is invoked.",
    },
    includeReflections: {
      type: "boolean",
      description:
        "Whether or not to include the user's reflections in the prompt.",
    },
    includePrefix: {
      type: "boolean",
      description:
        "Whether or not to include the default prefix in the prompt.",
    },
    includeRecentHistory: {
      type: "boolean",
      description:
        "Whether or not to include the last 5 (or less) messages in the prompt.",
    },
  },
  required: [
    "id",
    "title",
    "prompt",
    "includeReflections",
    "includePrefix",
    "includeRecentHistory",
  ],
} as const;

export const ReflectionsSchema = {
  type: "object",
  description: "生成内容的反思规则",
  properties: {
    styleRules: {
      type: "array",
      description: "生成内容时要遵循的样式规则",
      items: {
        type: "string",
      },
    },
    content: {
      type: "array",
      description: "生成内容时要记住的关于用户的关键内容",
      items: {
        type: "string",
      },
    },
  },
  required: ["styleRules", "content"],
} as const;

export const LanguageOptionsSchema = {
  type: "string",
  enum: ["chinese", "english", "spanish", "french", "hindi"],
} as const;

export const ArtifactLengthOptionsSchema = {
  type: "string",
  description: "工具内容长度,(文章,代码内容长度)",
  enum: ["shortest", "short", "long", "longest"],
} as const;

export const RewriteArtifactMetaToolResponseSchema = {
  oneOf: [
    {
      properties: {
        type: {
          type: "string",
          enum: ["text"],
        },
        title: {
          type: "string",
        },
        language: {
          type: "string",
          $ref: "#/components/schemas/ProgrammingLanguageOptions",
        },
      },
      required: ["type", "language"],
    },
    {
      properties: {
        type: {
          type: "string",
          enum: ["code"],
        },
        title: {
          type: "string",
        },
        language: {
          type: "string",
          $ref: "#/components/schemas/ProgrammingLanguageOptions",
        },
      },
      required: ["type", "title", "language"],
    },
  ],
} as const;

export const ArtifactToolResponseSchema = {
  properties: {
    artifact: {
      type: "string",
    },
    title: {
      type: "string",
    },
    language: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
} as const;

export const ReadingLevelOptionsSchema = {
  type: "string",
  description: "阅读级别",
  enum: ["pirate", "child", "teenager", "college", "phd"],
} as const;

export const ProgrammingLanguageOptionsSchema = {
  type: "string",
  enum: [
    "typescript",
    "javascript",
    "cpp",
    "java",
    "php",
    "python",
    "html",
    "sql",
    "json",
    "rust",
    "xml",
    "clojure",
    "csharp",
    "other",
  ],
} as const;

export const TeamComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: [
          {
            $ref: "#/components/schemas/TeamConfig",
          },
        ],
      },
    },
  ],
} as const;

export const TeamConfigSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/RoundRobinGroupChatConfig",
    },
    {
      $ref: "#/components/schemas/SelectorGroupChatConfig",
    },
    {
      $ref: "#/components/schemas/InstagramTeamConfig",
    },
    {
      $ref: "#/components/schemas/BrowserConfig",
    },
  ],
} as const;

export const TerminationComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: {
          $ref: "#/components/schemas/TerminationConfig",
        },
      },
    },
  ],
} as const;

export const TerminationConfigSchema = {
  properties: {
    termination_type: {
      type: "string",
      $ref: "#/components/schemas/TerminationTypes",
    },
    conditions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TerminationConditions",
      },
    },
  },
} as const;

export const AgStatePropertiesSchema = {
  required: ["state"],
  properties: {
    version: {
      type: "string",
      default: "1.0.0",
    },
    type: {
      type: "string",
      default: "TeamState",
    },
    componentId: {
      type: "string",
      description: "组件id",
    },
    chatId: {
      type: "string",
      description: "聊天id",
    },
    state: {
      type: "object",
      additionalProperties: true,
      default: {},
    },
  },
} as const;

export const AgStateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/AgStateProperties",
    },
  ],
} as const;

export const AgStateListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgState",
      },
    },
  },
} as const;

export const AgStateUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AgStateProperties",
    },
    {
      required: ["chatId"],
      properties: {
        stateId: {
          type: "string",
          description: "状态id",
        },
        componentId: {
          type: "string",
          description: "组件id",
        },
        chatId: {
          type: "string",
          description: "聊天id",
        },
        tenantId: {
          type: "string",
          description: "租户id",
        },
      },
    },
  ],
} as const;

export const MtComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/MtComponentProperties2",
    },
  ],
} as const;

export const MtComponentListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MtComponent",
      },
    },
    component2: {
      oneOf: [
        {
          $ref: "#/components/schemas/InstagramTeamConfig",
        },
        {
          $ref: "#/components/schemas/BrowserConfig",
        },
        {
          $ref: "#/components/schemas/TeamConfig",
        },
        {
          $ref: "#/components/schemas/RoundRobinGroupChatConfig",
        },
        {
          $ref: "#/components/schemas/SelectorGroupChatConfig",
        },
        {
          $ref: "#/components/schemas/TerminationComponent",
        },
        {
          $ref: "#/components/schemas/TeamComponent",
        },
      ],
    },
  },
} as const;

export const MtComponentPropertiesSchema = {
  required: ["componentType", "component"],
  properties: {
    componentType: {
      $ref: "#/components/schemas/ComponentTypes",
    },
    label: {
      type: "string",
    },
    description: {
      type: "string",
    },
    version: {
      type: "integer",
      default: 1,
    },
    componentVersion: {
      type: "integer",
      default: 1,
    },
    config: {
      type: "object",
      additionalProperties: true,
    },
    galleryId: {
      type: "string",
    },
  },
} as const;

export const ComponentModelSchema = {
  required: ["provider", "component_type", "config"],
  properties: {
    provider: {
      type: "string",
      description: "Describes how the component can be instantiated.",
    },
    component_type: {
      type: "string",
      description:
        "Logical type of the component. If missing, the component assumes the default type of the provider.",
      $ref: "#/components/schemas/ComponentTypes",
    },
    version: {
      type: "integer",
      description:
        "Version of the component specification. If missing, the component assumes whatever is the current version of the library used to load it. This is obviously dangerous and should be used for user authored ephmeral config. For all other configs version should be specified.",
    },
    component_version: {
      type: "integer",
      description:
        "Version of the component. If missing, the component assumes the default version of the provider.",
    },
    description: {
      type: "string",
      description: "Description of the component.",
    },
    label: {
      type: "string",
      description:
        "Human readable label for the component. If missing the component assumes the class name of the provider.",
    },
    config: {
      type: "object",
      additionalProperties: true,
      description:
        "The schema validated config field is passed to a given class's implmentation of :py:meth:`autogen_core.ComponentConfigImpl._from_config` to create a new instance of the component class.",
    },
  },
} as const;

export const GalleryComponentsSchema = {
  type: "object",
  properties: {
    agents: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    models: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    tools: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
    terminations: {
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
      type: "array",
    },
  },
  required: ["agents", "models", "tools", "terminations"],
} as const;

export const GalleryItemsSchema = {
  type: "object",
  properties: {
    teams: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TeamConfig",
      },
    },
    components: {
      $ref: "#/components/schemas/GalleryComponents",
    },
  },
  required: ["teams", "components"],
} as const;

export const GallerySchema = {
  required: [
    "metadata",
    "name",
    "url",
    "author",
    "homepage",
    "description",
    "tags",
    "license",
  ],
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    author: {
      type: "string",
    },
    homepage: {
      type: "string",
    },
    description: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    license: {
      type: "string",
    },
    lastSynced: {
      type: "string",
    },
  },
} as const;

export const GalleryListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Gallery",
      },
      type: "array",
    },
  },
} as const;

export const GalleryUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    userId: {
      type: "string",
    },
  },
  required: ["metadata", "name", "userId"],
} as const;

export const GalleryMetadataSchema = {
  type: "object",
  properties: {
    author: {
      type: "string",
    },
    created_at: {
      type: "string",
    },
    updated_at: {
      type: "string",
    },
    version: {
      type: "string",
    },
    description: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    license: {
      type: "string",
    },
    homepage: {
      type: "string",
    },
    category: {
      type: "string",
    },
    last_synced: {
      type: "string",
    },
  },
  required: ["author", "created_at", "updated_at", "version"],
} as const;

export const AgEventSchema = {
  required: ["data", "framework", "stepRunId"],
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    userId: {
      type: "string",
    },
    data: {
      type: "object",
    },
    framework: {
      type: "string",
    },
    stepRunId: {
      type: "string",
    },
    meta: {
      additionalProperties: true,
    },
  },
} as const;

export const EventTypesSchema = {
  type: "string",
  enum: [
    "WorkflowRunStart",
    "WorkflowRunEnd",
    "StepRun",
    "TextMessage",
    "ModelClientStreamingChunkEvent",
    "EventNewAgentState",
  ],
} as const;

export const AgEventListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgEvent",
      },
    },
  },
} as const;

export const OutlineSchema = {
  properties: {
    pageTitle: {
      type: "string",
      description: "Title of the Wikipedia page",
    },
    sections: {
      type: "array",
      description:
        "Titles and descriptions for each section of the Wikipedia page",
      items: {
        $ref: "#/components/schemas/Section",
      },
    },
  },
  required: ["pageTitle", "sections"],
} as const;

export const AgentNodeCreateRequestSchema = {
  description: "创建agent节点请求",
  properties: {
    title: {
      type: "string",
      description: "agent 节点名称, 或者作为工具名称",
    },
    prompt: {
      type: "string",
      description: "agent 节点提示词",
    },
    description: {
      type: "string",
      description: "agent 节点描述, 或者作为工具描述",
    },
  },
  required: ["prompt"],
} as const;

export const AgentNodeUpdateRequestSchema = {
  description: "创建agent节点请求",
  properties: {
    title: {
      type: "string",
      description: "agent 节点名称, 或者作为工具名称",
    },
    prompt: {
      type: "string",
      description: "agent 节点提示词",
    },
    type: {
      type: "string",
      description: "agent 节点类型",
    },
    description: {
      type: "string",
      description: "agent 节点描述",
    },
    state: {
      description: "agent 节点状态",
    },
  },
  required: ["prompt"],
} as const;

export const FlowNamesSchema = {
  type: "string",
  enum: ["assisant", "ag", "browser", "tenant", "news"],
} as const;

export const ScrapeGraphParamsSchema = {
  properties: {
    input: {
      type: "string",
    },
  },
} as const;

export const BrowserParamsSchema = {
  properties: {
    input: {
      type: "string",
    },
  },
} as const;

export const TerminationTypesSchema = {
  type: "string",
  enum: [
    "MaxMessageTermination",
    "StopMessageTermination",
    "TextMentionTermination",
    "TimeoutTermination",
  ],
} as const;

export const ComponentTypesSchema = {
  type: "string",
  enum: ["team", "agent", "model", "tool", "termination"],
} as const;

export const RequestUsageSchema = {
  properties: {
    prompt_tokens: {
      type: "number",
    },
    completion_tokens: {
      type: "number",
    },
  },
  required: ["prompt_tokens", "completion_tokens"],
} as const;

export const FunctionCallSchema = {
  properties: {
    id: {
      type: "string",
    },
    arguments: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
  required: ["id", "arguments", "name"],
} as const;

export const FunctionExecutionResultSchema = {
  properties: {
    call_id: {
      type: "string",
    },
    content: {
      type: "string",
    },
  },
  required: ["call_id", "content"],
} as const;

export const BaseMessageConfigSchema = {
  properties: {
    source: {
      type: "string",
    },
    models_usage: {
      $ref: "#/components/schemas/RequestUsage",
    },
  },
} as const;

export const ImageContentSchema = {
  properties: {
    url: {
      type: "string",
    },
    alt: {
      type: "string",
    },
    data: {
      type: "string",
    },
  },
  required: ["url"],
} as const;

export const StopMessageConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      properties: {
        content: {
          type: "string",
        },
      },
      required: ["content"],
    },
  ],
} as const;

export const HandoffMessageConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      properties: {
        content: {
          type: "string",
        },
        target: {
          type: "string",
        },
      },
      required: ["content", "target"],
    },
  ],
} as const;

export const ToolCallMessageConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      properties: {
        content: {
          type: "array",
          items: {
            $ref: "#/components/schemas/FunctionCall",
          },
        },
      },
      required: ["content"],
    },
  ],
} as const;

export const ToolCallResultMessageConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BaseMessageConfig",
    },
    {
      properties: {
        content: {
          type: "array",
          items: {
            $ref: "#/components/schemas/FunctionExecutionResult",
          },
        },
      },
      required: ["content"],
    },
  ],
} as const;

export const TeamResultSchema = {
  properties: {
    task_result: {
      type: "object",
    },
    usage: {
      type: "string",
    },
    duration: {
      type: "number",
    },
  },
  required: ["task_result", "usage", "duration"],
} as const;

export const InnerMessageConfigSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/ToolCallMessageConfig",
    },
    {
      $ref: "#/components/schemas/ToolCallResultMessageConfig",
    },
  ],
} as const;

export const ChatMessageConfigSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/StopMessageConfig",
    },
    {
      $ref: "#/components/schemas/HandoffMessageConfig",
    },
  ],
} as const;

export const ChatMessageUpsertSchema = {
  required: ["tenantId", "source", "content"],
  properties: {
    tenantId: {
      type: "string",
    },
    content: {
      type: "string",
    },
    componentId: {
      type: "string",
    },
    threadId: {
      type: "string",
    },
    runId: {
      type: "string",
    },
    role: {
      type: "string",
    },
    topic: {
      type: "string",
    },
    source: {
      type: "string",
      default: "user",
    },
    messageType: {
      type: "string",
    },
    agentType: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    stepRunId: {
      type: "string",
    },
  },
} as const;

export const AgentMessageConfigSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/StopMessageConfig",
    },
    {
      $ref: "#/components/schemas/HandoffMessageConfig",
    },
    {
      $ref: "#/components/schemas/ToolCallMessageConfig",
    },
    {
      $ref: "#/components/schemas/ToolCallResultMessageConfig",
    },
  ],
} as const;

export const MemoryConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
  ],
} as const;

export const MtTaskResultSchema = {
  properties: {
    messages: {
      type: "array",
      items: {
        type: "object",
        additionalProperties: true,
      },
    },
    stop_reason: {
      type: "string",
    },
  },
  required: ["messages", "stop_reason"],
} as const;

export const AgentTypesSchema = {
  type: "string",
  enum: [
    "AssistantAgent",
    "UserProxyAgent",
    "MultimodalWebSurfer",
    "FileSurfer",
    "MagenticOneCoderAgent",
  ],
} as const;

export const ToolTypesSchema = {
  type: "string",
  enum: ["PythonFunction"],
} as const;

export const ModelSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    config: {
      $ref: "#/components/schemas/ModelConfig",
    },
  },
} as const;

export const ModelConfigSchema = {
  required: ["model", "model_type"],
  properties: {
    model: {
      type: "string",
    },
    model_type: {
      type: "string",
      $ref: "#/components/schemas/ModelTypes",
    },
    api_key: {
      type: "string",
    },
    base_url: {
      type: "string",
    },
    timeout: {
      type: "number",
    },
    max_retries: {
      type: "integer",
    },
    frequency_penalty: {
      type: "number",
    },
    logit_bias: {
      type: "integer",
    },
    max_tokens: {
      type: "integer",
    },
    n: {
      type: "integer",
    },
    presence_penalty: {
      type: "number",
    },
    response_format: {
      type: "string",
      $ref: "#/components/schemas/ResponseFormat",
    },
    seed: {
      type: "integer",
    },
    stop: {
      type: "array",
      items: {
        type: "string",
      },
    },
    temperature: {
      type: "number",
    },
    top_p: {
      type: "number",
    },
    user: {
      type: "string",
    },
    organization: {
      type: "string",
    },
    default_headers: {
      type: "object",
      additionalProperties: true,
    },
    model_info: {
      $ref: "#/components/schemas/ModelInfo",
    },
  },
} as const;

export const ModelFamilySchema = {
  type: "string",
  enum: ["r1", "openai", "unknown"],
} as const;

export const ModelInfoSchema = {
  required: ["function_calling", "json_output", "family", "vision"],
  properties: {
    family: {
      $ref: "#/components/schemas/ModelFamily",
    },
    vision: {
      type: "boolean",
    },
    function_calling: {
      type: "boolean",
    },
    json_output: {
      type: "boolean",
    },
  },
} as const;

export const ModelTypesSchema = {
  type: "string",
  enum: ["OpenAIChatCompletionClient", "AzureOpenAIChatCompletionClient"],
} as const;

export const AzureOpenAIModelConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ModelConfig",
    },
    {
      properties: {
        model_type: {
          type: "string",
          enum: ["AzureOpenAIChatCompletionClient"],
        },
        azure_deployment: {
          type: "string",
        },
        api_version: {
          type: "string",
        },
        azure_endpoint: {
          type: "string",
        },
        azure_ad_token_provider: {
          type: "string",
        },
      },
      required: [
        "model_type",
        "azure_deployment",
        "api_version",
        "azure_endpoint",
        "azure_ad_token_provider",
      ],
    },
  ],
} as const;

export const OpenAIModelConfigSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ModelConfig",
    },
    {
      type: "object",
      properties: {
        model_type: {
          type: "string",
          enum: ["OpenAIChatCompletionClient"],
        },
      },
      required: ["model_type"],
    },
  ],
} as const;

export const ToolComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: {
          $ref: "#/components/schemas/ToolConfig",
        },
      },
    },
  ],
} as const;

export const ToolConfigSchema = {
  required: ["name"],
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    source_code: {
      type: "string",
    },
    global_imports: {
      type: "array",
      items: {
        type: "string",
      },
    },
    has_cancellation_support: {
      type: "boolean",
    },
  },
} as const;

export const HandoffComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: {
          $ref: "#/components/schemas/HandoffConfig",
        },
      },
    },
  ],
} as const;

export const HandoffConfigSchema = {
  required: ["target"],
  properties: {
    target: {
      type: "string",
    },
  },
} as const;

export const ModelComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: {
          $ref: "#/components/schemas/ModelConfig",
        },
      },
    },
  ],
} as const;

export const ResponseFormatSchema = {
  type: "string",
  enum: ["json_object", "text"],
} as const;

export const RunStatusSchema = {
  type: "string",
  enum: [
    "created",
    "active",
    "awaiting_input",
    "timeout",
    "complete",
    "error",
    "stopped",
  ],
} as const;

export const SectionSchema = {
  properties: {
    section_title: {
      type: "string",
      description: "Title of the section",
    },
    description: {
      type: "string",
      description: "Content of the section",
    },
    subsections: {
      type: "array",
      description:
        "Titles and descriptions for each subsection of the Wikipedia page",
      items: {
        $ref: "#/components/schemas/Subsection",
      },
    },
  },
  required: ["section_title", "description"],
} as const;

export const SubsectionSchema = {
  properties: {
    subsectionTitle: {
      type: "string",
      description: "Title of the subsection",
    },
    description: {
      type: "string",
      description: "Content of the subsection",
    },
  },
  required: ["subsectionTitle", "description"],
} as const;

export const NodeRunActionSchema = {
  description: "节点运行",
  properties: {
    action: {
      type: "string",
      description: "动作",
    },
    input: {
      type: "object",
      description: "输入",
    },
  },
} as const;

export const RoundRobinGroupChatConfigSchema = {
  properties: {
    participants: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentComponent",
      },
    },
    termination_condition: {
      $ref: "#/components/schemas/TerminationComponent",
    },
  },
} as const;

export const SelectorGroupChatConfigSchema = {
  properties: {
    participants: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AgentComponent",
      },
    },
    termination_condition: {
      $ref: "#/components/schemas/TerminationComponent",
    },
    model_client: {
      $ref: "#/components/schemas/ModelComponent",
    },
  },
} as const;

export const MaxMessageTerminationConfigComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: {
          $ref: "#/components/schemas/MaxMessageTerminationConfig",
        },
      },
    },
  ],
} as const;

export const MaxMessageTerminationConfigSchema = {
  allOf: [
    {
      required: ["termination_type", "max_messages"],
      properties: {
        termination_type: {
          type: "string",
          enum: ["MaxMessageTermination"],
        },
        max_messages: {
          type: "integer",
        },
      },
    },
  ],
} as const;

export const TextMentionTerminationComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      properties: {
        config: {
          $ref: "#/components/schemas/TextMentionTerminationConfig",
        },
      },
    },
  ],
} as const;

export const TextMentionTerminationConfigSchema = {
  required: ["text"],
  properties: {
    text: {
      type: "string",
    },
  },
} as const;

export const TerminationConditionsSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/MaxMessageTerminationConfigComponent",
    },
    {
      $ref: "#/components/schemas/TextMentionTerminationComponent",
    },
  ],
} as const;

export const TeamTypesSchema = {
  type: "string",
  enum: [
    "Assisant",
    "RoundRobinGroupChat",
    "SelectorGroupChat",
    "MagenticOneGroupChat",
  ],
} as const;

export const TenantParameterSchema = {
  type: "string",
  format: "uuid",
  minLength: 36,
  maxLength: 36,
} as const;

export const HttpCommonStatusResponseSchema = {
  400: {
    content: {
      "application/json": {
        schema: {
          $ref: "#/components/schemas/APIErrors",
        },
      },
    },
    description: "A malformed or bad request",
  },
} as const;

export const PromptSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "title", "content", "tags"],
  type: "object",
} as const;

export const PromptListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Artifact",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const ComponentGetSchema = {
  properties: {
    id: {
      type: "string",
    },
    label: {
      type: "string",
    },
  },
} as const;

export const BadRequestSchema = {
  content: {
    "application/json": {
      schema: {
        $ref: "#/components/schemas/APIErrors",
      },
    },
  },
} as const;

export const ForbiddenSchema = {
  description: "Forbidden",
  content: {
    "application/json": {
      schema: {
        $ref: "#/components/schemas/APIErrors",
      },
    },
  },
} as const;

export const NotFoundSchema = {
  description: "Not found",
  content: {
    "application/json": {
      schema: {
        $ref: "#/components/schemas/APIErrors",
      },
    },
  },
} as const;

export const ModelListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Model",
      },
      type: "array",
    },
  },
} as const;

export const UpdateModelSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const FormFieldSchema = {
  properties: {
    name: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
  required: ["name", "type"],
} as const;

export const SchemaFormSchema = {
  properties: {
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    fields: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FormField",
      },
    },
  },
  required: ["title", "fields"],
} as const;

export const ModelRunPropertiesSchema = {
  type: "object",
  properties: {
    request: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    response: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const ModelRunSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/ModelRunProperties",
    },
  ],
} as const;

export const ModelRunUpsertSchema = {
  anyOf: [
    {
      $ref: "#/components/schemas/ModelRunProperties",
    },
  ],
} as const;

export const SiteSchema = {
  type: "object",
  description: "site",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
  },
  required: ["metadata", "title", "description"],
} as const;

export const SiteListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Site",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
    description: {
      type: "string",
      description: "site 描述",
    },
    host: {
      type: "string",
      description: "入站域名(指定绑定入站域名)",
    },
  },
  required: ["title", "description"],
} as const;

export const CreateSiteResponseSchema = {
  $ref: "#/components/schemas/Site",
} as const;

export const UpdateSiteRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "site 标题",
    },
  },
} as const;

export const SiteHostSchema = {
  type: "object",
  description: "site-host",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
      description: "site-host 标题",
    },
    description: {
      type: "string",
      description: "site-host 描述",
    },
    host: {
      type: "string",
      description: "绑定域名",
    },
  },
  required: ["metadata", "title", "description", "host"],
} as const;

export const SiteHostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/SiteHost",
      },
      type: "array",
      "x-go-name": "Rows",
    },
  },
} as const;

export const CreateSiteHostRequestSchema = {
  type: "object",
  properties: {
    siteId: {
      type: "string",
      description: "站点ID",
    },
    title: {
      type: "string",
      description: "site-host 标题",
    },
    description: {
      type: "string",
      description: "site-host 描述",
    },
    host: {
      type: "string",
      description: "绑定域名",
    },
  },
  required: ["title", "description", "host", "siteId"],
} as const;

export const CreateSiteHostResponseSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const UpdateSiteHostRequestSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const UpdateSiteHostResponseSchema = {
  $ref: "#/components/schemas/SiteHost",
} as const;

export const PostSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    title: {
      type: "string",
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog",
    },
  },
  required: ["metadata", "title", "content"],
  type: "object",
} as const;

export const PostListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Post",
      },
      type: "array",
    },
  },
} as const;

export const CreatePostRequestSchema = {
  type: "object",
  properties: {
    siteId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    title: {
      type: "string",
      minLength: 3,
      maxLength: 200,
    },
    content: {
      type: "string",
      description: "The tenant associated with this tenant blog.",
      minLength: 50,
      maxLength: 10240,
    },
    slug: {
      type: "string",
      description: "The slug of the post",
      minLength: 3,
      maxLength: 200,
    },
    authorId: {
      type: "string",
      format: "uuid",
      minLength: 36,
      maxLength: 36,
    },
    status: {
      type: "string",
      enum: ["draft", "published"],
    },
  },
  required: ["siteId", "title", "content", "slug"],
} as const;

export const FrontendConfigSchema = {
  type: "object",
  properties: {
    cookieAccessToken: {
      type: "string",
      description: "Cookie access token",
    },
    dashPath: {
      type: "string",
      description: "Dashboard path",
    },
    hotKeyDebug: {
      type: "string",
      description: "Hot key debug",
    },
    defaultTenantAccessToken: {
      type: "string",
      description: "实验性质，默认租户的access token",
    },
  },
  required: [
    "cookieAccessToken",
    "dashPath",
    "hotKeyDebug",
    "defaultTenantAccessToken",
  ],
} as const;

export const SiderbarConfigSchema = {
  type: "object",
  properties: {
    logo: {
      type: "string",
      description: "logo",
    },
    sideritems: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItem",
      },
    },
  },
} as const;

export const DashSidebarItemSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    defaultExpanded: {
      type: "boolean",
      description: "默认展开",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DashSidebarItemLeaf",
      },
    },
  },
  required: ["title", "url"],
} as const;

export const DashSidebarItemLeafSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description: "名称",
    },
    url: {
      type: "string",
      description: "url 例如/login",
    },
    icon: {
      type: "string",
      description: "图标",
    },
    adminOnly: {
      type: "boolean",
      description: "只允许超级管理员查看",
    },
  },
  required: ["title", "url"],
} as const;

export const HfAccountSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    username: {
      type: "string",
      description: "The username of the hf account.",
    },
    token: {
      type: "string",
      description: "The token of the hf account.",
    },
  },
  required: ["metadata", "username", "token"],
} as const;

export const EnvSchema = {
  type: "object",
  description: "环境变量",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
      description: "环境变量名称",
    },
    value: {
      type: "string",
      description: "环境变量值",
    },
  },
  required: ["metadata", "name", "value"],
} as const;

export const EnvListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Env",
      },
      type: "array",
    },
  },
} as const;

export const EndpointSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
  required: ["metadata", "name", "url", "token", "type"],
} as const;

export const EndpointListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Endpoint",
      },
      type: "array",
    },
  },
} as const;

export const UpdateEndpointRequestSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    url: {
      type: "string",
    },
    token: {
      type: "string",
    },
  },
} as const;

export const PlatformSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const PlatformListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Platform",
      },
      type: "array",
    },
  },
} as const;

export const PlatformUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const PlatformAccountPropertiesSchema = {
  required: ["metadata", "username", "platform"],
  properties: {
    username: {
      type: "string",
    },
    email: {
      type: "string",
    },
    password: {
      type: "string",
    },
    token: {
      type: "string",
    },
    type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    comment: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
    properties: {
      additionalProperties: true,
    },
  },
} as const;

export const PlatformAccountSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const PlatformAccountListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/PlatformAccount",
      },
      type: "array",
    },
  },
} as const;

export const PlatformAccountUpdateSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PlatformAccountProperties",
    },
  ],
} as const;

export const BrowserSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const BrowserListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Browser",
      },
      type: "array",
    },
  },
} as const;

export const BrowserUpdateSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const ProxySchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const ProxyListSchema = {
  properties: {
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
    rows: {
      items: {
        $ref: "#/components/schemas/Proxy",
      },
      type: "array",
    },
  },
} as const;

export const ProxyUpdateSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    url: {
      type: "string",
    },
    loginUrl: {
      type: "string",
    },
    properties: {
      type: "object",
    },
    tags: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["metadata", "name", "url"],
} as const;

export const UiAgentStateSchema = {
  properties: {
    welcome: {
      $ref: "#/components/schemas/ChatWelcome",
    },
    thread_id: {
      type: "string",
      description: "线程ID(sessionId)",
    },
    team_id: {
      type: "string",
      description: "当前选定的 team id",
    },
  },
} as const;

export const QuickStartSchema = {
  required: ["content"],
  properties: {
    icon: {
      type: "string",
      description: "图标",
    },
    com_id: {
      type: "string",
      description: "组件ID (团队ID)",
    },
    title: {
      type: "string",
      description: "摘要",
    },
    content: {
      type: "string",
      description: "提交跟 agent 的内容",
    },
    cn: {
      type: "string",
      description: "html class name",
    },
  },
} as const;

export const ChatWelcomeSchema = {
  properties: {
    title: {
      type: "string",
      description: "欢迎语标题",
    },
    content: {
      type: "string",
      description: "欢迎语内容",
    },
    subTitle: {
      type: "string",
      description: "主标题",
    },
    quick_starts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuickStart",
      },
    },
  },
} as const;

export const AssignedActionSchema = {
  type: "object",
  required: [
    "tenantId",
    "jobId",
    "stepId",
    "actionId",
    "actionType",
    "actionPayload",
    "stepName",
    "retryCount",
  ],
  properties: {
    tenantId: {
      type: "string",
    },
    workflowRunId: {
      type: "string",
    },
    getGroupKeyRunId: {
      type: "string",
    },
    jobId: {
      type: "string",
    },
    jobName: {
      type: "string",
    },
    stepId: {
      type: "string",
    },
    stepRunId: {
      type: "string",
    },
    actionId: {
      type: "string",
    },
    actionType: {
      type: "string",
    },
    actionPayload: {
      type: "string",
    },
    stepName: {
      type: "string",
    },
    retryCount: {
      type: "integer",
    },
    additional_metadata: {
      type: "string",
    },
    child_workflow_index: {
      type: "integer",
    },
    child_workflow_key: {
      type: "string",
    },
    parent_workflow_run_id: {
      type: "string",
    },
  },
} as const;

export const MtResourcePropertiesSchema = {
  required: ["title", "type"],
  properties: {
    title: {
      type: "string",
      description: "The resource title",
    },
    description: {
      type: "string",
      description: "The resource description",
    },
    version: {
      type: "string",
      description: "The resource version",
    },
    url: {
      type: "string",
      description: "The resource url",
    },
    type: {
      type: "string",
      description: "The resource type",
    },
    content: {
      type: "object",
      additionalProperties: true,
    },
  },
} as const;

export const MtResourceSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/MtResourceProperties",
    },
  ],
} as const;

export const MtResourceListSchema = {
  properties: {
    metadata: {
      $ref: "#/components/schemas/APIResourceMeta",
    },
    rows: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MtResource",
      },
    },
    pagination: {
      $ref: "#/components/schemas/PaginationResponse",
    },
  },
} as const;

export const MtResourceUpsertSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/APIResourceMetaProperties",
    },
    {
      $ref: "#/components/schemas/MtResourceProperties",
    },
  ],
} as const;

export const CodeWritingTaskSchema = {
  properties: {
    task: {
      type: "string",
    },
  },
} as const;

export const CodeWritingResultSchema = {
  properties: {
    task: {
      type: "string",
    },
    code: {
      type: "string",
    },
    review: {
      type: "string",
    },
  },
} as const;

export const MyMessageSchema = {
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const PlatformAccountTaskSchema = {
  properties: {
    id: {
      type: "string",
    },
    task: {
      type: "string",
    },
  },
} as const;

export const PlatformAccountDataSchema = {
  properties: {
    type: {
      type: "string",
      enum: ["platform_account"],
    },
    email: {
      type: "string",
    },
    password: {
      type: "string",
    },
    username: {
      type: "string",
    },
    api_token: {
      type: "string",
    },
  },
} as const;

export const BrowserDataSchema = {
  properties: {
    type: {
      type: "string",
      enum: ["browser"],
    },
    cookies: {
      type: "string",
    },
    session: {
      type: "string",
    },
  },
} as const;

export const InstagramTaskSchema = {
  properties: {
    resourceId: {
      type: "string",
    },
    content: {
      type: "string",
    },
  },
} as const;

export const ChatSessionStartEventSchema = {
  properties: {
    type: {
      type: "string",
    },
    threadId: {
      type: "string",
    },
    source: {
      type: "string",
    },
  },
} as const;

export const TerminationMessageSchema = {
  properties: {
    reason: {
      type: "string",
    },
    content: {
      type: "string",
    },
  },
} as const;

export const CodeReviewTaskSchema = {
  required: [
    "session_id",
    "code_writing_task",
    "code_writing_scratchpad",
    "code",
  ],
  properties: {
    session_id: {
      type: "string",
    },
    code_writing_task: {
      type: "string",
    },
    code_writing_scratchpad: {
      type: "string",
    },
    code: {
      type: "string",
    },
  },
} as const;

export const CodeReviewResultSchema = {
  required: ["review", "session_id", "approved"],
  properties: {
    review: {
      type: "string",
    },
    session_id: {
      type: "string",
    },
    approved: {
      type: "boolean",
    },
  },
} as const;

export const BrowserTaskSchema = {
  description: "浏览器(browser use)任务",
  required: ["content"],
  properties: {
    content: {
      type: "string",
    },
  },
} as const;

export const BrowserOpenTaskSchema = {
  description:
    "打开浏览器备用,一般用于调试目的Open a browser and navigate to a URL.",
  required: ["url"],
  properties: {
    url: {
      type: "string",
    },
  },
} as const;

export const InstagramTeamConfigSchema = {
  required: ["task", "participants"],
  properties: {
    max_turns: {
      type: "integer",
    },
    max_tokens: {
      type: "number",
    },
    termination_condition: {
      $ref: "#/components/schemas/TerminationConfig",
    },
    task: {
      type: "string",
    },
    participants: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ComponentModel",
      },
    },
  },
} as const;

export const BrowserConfigSchema = {
  description: "浏览器配置(未完成)",
  properties: {
    persistent: {
      type: "boolean",
    },
  },
} as const;

export const AgentComponentSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ComponentModel",
    },
    {
      required: ["config"],
      properties: {
        config: {
          $ref: "#/components/schemas/AgentConfig",
        },
      },
    },
  ],
} as const;

export const AgentConfigSchema = {
  required: [
    "name",
    "description",
    "model_client",
    "reflect_on_tool_use",
    "tool_call_summary_format",
    "model_client_stream",
    "tools",
    "handoffs",
  ],
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    model_context: {
      type: "object",
      additionalProperties: true,
    },
    memory: {
      $ref: "#/components/schemas/MemoryConfig",
    },
    model_client_stream: {
      type: "boolean",
      default: false,
    },
    system_message: {
      type: "string",
    },
    model_client: {
      type: "object",
      $ref: "#/components/schemas/ModelComponent",
    },
    tools: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ToolComponent",
      },
      default: [],
    },
    handoffs: {
      type: "array",
      items: {
        type: "string",
      },
      default: [],
    },
    reflect_on_tool_use: {
      type: "boolean",
      default: false,
    },
    tool_call_summary_format: {
      type: "string",
      default: "{result}",
    },
  },
} as const;

export const MtComponentProperties2Schema = {
  properties: {
    componentType: {
      $ref: "#/components/schemas/ComponentTypes",
    },
    component: {
      anyOf: [
        {
          $ref: "#/components/schemas/TeamComponent",
        },
        {
          $ref: "#/components/schemas/TerminationComponent",
        },
        {
          $ref: "#/components/schemas/AgentComponent",
        },
      ],
    },
  },
} as const;
