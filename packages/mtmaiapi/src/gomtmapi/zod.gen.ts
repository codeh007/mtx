// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zApiMeta = z.object({
  auth: z
    .object({
      schemes: z.array(z.string()).optional(),
    })
    .optional(),
  pylonAppId: z.string().optional(),
  posthog: z
    .object({
      apiKey: z.string().optional(),
      apiHost: z.string().optional(),
    })
    .optional(),
  allowSignup: z.boolean().optional(),
  allowInvites: z.boolean().optional(),
  allowCreateTenant: z.boolean().optional(),
  allowChangePassword: z.boolean().optional(),
});

export const zApiMetaAuth = z.object({
  schemes: z.array(z.string()).optional(),
});

export const zApiMetaPosthog = z.object({
  apiKey: z.string().optional(),
  apiHost: z.string().optional(),
});

export const zListApiMetaIntegration = z.array(
  z.object({
    name: z.string(),
    enabled: z.boolean(),
  }),
);

export const zApiMetaIntegration = z.object({
  name: z.string(),
  enabled: z.boolean(),
});

export const zApiErrors = z.object({
  errors: z.array(
    z.object({
      code: z.number().int().optional(),
      field: z.string().optional(),
      description: z.string(),
      docs_link: z.string().optional(),
    }),
  ),
});

export const zApiError = z.object({
  code: z.number().int().optional(),
  field: z.string().optional(),
  description: z.string(),
  docs_link: z.string().optional(),
});

export const zPaginationResponse = z.object({
  current_page: z.coerce.bigint().optional(),
  next_page: z.coerce.bigint().optional(),
  num_pages: z.coerce.bigint().optional(),
});

export const zApiResourceMeta = z.object({
  id: z.string().min(0).max(36),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
});

export const zUser = z.object({
  metadata: zApiResourceMeta,
  name: z.string().optional(),
  email: z.string().email(),
  emailVerified: z.boolean(),
  hasPassword: z.boolean().optional(),
  emailHash: z.string().optional(),
  userToken: z.string().optional(),
});

export const zUserTenantPublic = z.object({
  email: z.string().email(),
  name: z.string().optional(),
});

export const zUserLoginRequest = z.object({
  email: z.string().email(),
  password: z.string(),
});

export const zUserChangePasswordRequest = z.object({
  password: z.string(),
  newPassword: z.string(),
});

export const zUserRegisterRequest = z.object({
  name: z.string(),
  email: z.string().email(),
  password: z.string(),
});

export const zUserTenantMembershipsList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        user: zUserTenantPublic,
        role: z.enum(["OWNER", "ADMIN", "MEMBER"]),
        tenant: z
          .object({
            metadata: zApiResourceMeta,
            name: z.string(),
            slug: z.string(),
            analyticsOptOut: z.boolean().optional(),
            alertMemberEmails: z.boolean().optional(),
          })
          .optional(),
      }),
    )
    .optional(),
});

export const zTenant = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  slug: z.string(),
  analyticsOptOut: z.boolean().optional(),
  alertMemberEmails: z.boolean().optional(),
});

export const zTenantMember = z.object({
  metadata: zApiResourceMeta,
  user: zUserTenantPublic,
  role: z.enum(["OWNER", "ADMIN", "MEMBER"]),
  tenant: zTenant.optional(),
});

export const zTenantMemberList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantMember).optional(),
});

export const zTenantMemberRole = z.enum(["OWNER", "ADMIN", "MEMBER"]);

export const zTenantResource = z.enum([
  "WORKER",
  "EVENT",
  "WORKFLOW_RUN",
  "CRON",
  "SCHEDULE",
]);

export const zTenantResourceLimit = z.object({
  metadata: zApiResourceMeta,
  resource: zTenantResource,
  limitValue: z.number().int(),
  alarmValue: z.number().int().optional(),
  value: z.number().int(),
  window: z.string().optional(),
  lastRefill: z.string().datetime().optional(),
});

export const zTenantResourcePolicy = z.object({
  limits: z.array(zTenantResourceLimit),
});

export const zCreateTenantInviteRequest = z.object({
  email: z.string(),
  role: zTenantMemberRole,
});

export const zUpdateTenantInviteRequest = z.object({
  role: zTenantMemberRole,
});

export const zTenantAlertingSettings = z.object({
  metadata: zApiResourceMeta,
  alertMemberEmails: z.boolean().optional(),
  enableWorkflowRunFailureAlerts: z.boolean().optional(),
  enableExpiringTokenAlerts: z.boolean().optional(),
  enableTenantResourceLimitAlerts: z.boolean().optional(),
  maxAlertingFrequency: z.string(),
  lastAlertedAt: z.string().datetime().optional(),
});

export const zTenantAlertEmailGroup = z.object({
  metadata: zApiResourceMeta,
  emails: z.array(z.string()),
});

export const zTenantAlertEmailGroupList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantAlertEmailGroup).optional(),
});

export const zCreateTenantAlertEmailGroupRequest = z.object({
  emails: z.array(z.string()),
});

export const zUpdateTenantAlertEmailGroupRequest = z.object({
  emails: z.array(z.string()),
});

export const zTenantInvite = z.object({
  metadata: zApiResourceMeta,
  email: z.string(),
  role: zTenantMemberRole,
  tenantId: z.string(),
  tenantName: z.string().optional(),
  expires: z.string().datetime(),
});

export const zTenantInviteList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantInvite).optional(),
});

export const zQueueMetrics = z.object({
  numQueued: z.number().int(),
  numRunning: z.number().int(),
  numPending: z.number().int(),
});

export const zTenantQueueMetrics = z.object({
  total: zQueueMetrics.optional(),
  workflow: z.object({}).optional(),
  queues: z.object({}).optional(),
});

export const zTenantStepRunQueueMetrics = z.object({
  queues: z.object({}).optional(),
});

export const zAcceptInviteRequest = z.object({
  invite: z.string().length(36),
});

export const zRejectInviteRequest = z.object({
  invite: z.string().length(36),
});

export const zTenantList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenant).optional(),
});

export const zCreateTenantRequest = z.object({
  name: z.string(),
  slug: z.string(),
});

export const zUpdateTenantRequest = z.object({
  name: z.string().optional(),
  analyticsOptOut: z.boolean().optional(),
  alertMemberEmails: z.boolean().optional(),
  enableWorkflowRunFailureAlerts: z.boolean().optional(),
  enableExpiringTokenAlerts: z.boolean().optional(),
  enableTenantResourceLimitAlerts: z.boolean().optional(),
  maxAlertingFrequency: z.string().optional(),
});

export const zEvent = z.object({
  metadata: zApiResourceMeta,
  key: z.string(),
  tenant: zTenant.optional(),
  tenantId: z.string(),
  workflowRunSummary: z
    .object({
      pending: z.coerce.bigint().optional(),
      running: z.coerce.bigint().optional(),
      queued: z.coerce.bigint().optional(),
      succeeded: z.coerce.bigint().optional(),
      failed: z.coerce.bigint().optional(),
    })
    .optional(),
  additionalMetadata: z.object({}).optional(),
});

export const zEventData = z.object({
  data: z.string(),
});

export const zCreateEventRequest = z.object({
  key: z.string(),
  data: z.object({}),
  additionalMetadata: z.object({}).optional(),
});

export const zBulkCreateEventRequest = z.object({
  events: z.array(zCreateEventRequest),
});

export const zBulkCreateEventResponse = z.object({
  metadata: zApiResourceMeta,
  events: z.array(zEvent),
});

export const zEventWorkflowRunSummary = z.object({
  pending: z.coerce.bigint().optional(),
  running: z.coerce.bigint().optional(),
  queued: z.coerce.bigint().optional(),
  succeeded: z.coerce.bigint().optional(),
  failed: z.coerce.bigint().optional(),
});

export const zEventOrderByField = z.enum(["createdAt"]);

export const zEventOrderByDirection = z.enum(["asc", "desc"]);

export const zEventSearch = z.string();

export const zEventKeyList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(z.string()).optional(),
});

export const zEventKey = z.string();

export const zWorkflowId = z.string();

export const zEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zEvent).optional(),
});

export const zRateLimit = z.object({
  key: z.string(),
  tenantId: z.string(),
  limitValue: z.number().int(),
  value: z.number().int(),
  window: z.string(),
  lastRefill: z.string().datetime(),
});

export const zRateLimitList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zRateLimit).optional(),
});

export const zRateLimitOrderByField = z.enum(["key", "value", "limitValue"]);

export const zRateLimitOrderByDirection = z.enum(["asc", "desc"]);

export const zReplayEventRequest = z.object({
  eventIds: z.array(z.string().uuid().length(36)),
});

export const zCancelEventRequest = z.object({
  eventIds: z.array(z.string().uuid().length(36)),
});

export const zWorkflow: z.ZodTypeAny = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  isPaused: z.boolean().optional(),
  versions: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        version: z.string(),
        order: z.number().int(),
        workflowId: z.string(),
        workflow: z
          .lazy(() => {
            return zWorkflow;
          })
          .optional(),
      }),
    )
    .optional(),
  tags: z
    .array(
      z.object({
        name: z.string(),
        color: z.string(),
      }),
    )
    .optional(),
  jobs: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        versionId: z.string(),
        name: z.string(),
        description: z.string().optional(),
        steps: z.array(
          z.object({
            metadata: zApiResourceMeta,
            readableId: z.string(),
            tenantId: z.string(),
            jobId: z.string(),
            action: z.string(),
            timeout: z.string().optional(),
            children: z.array(z.string()).optional(),
            parents: z.array(z.string()).optional(),
          }),
        ),
        timeout: z.string().optional(),
      }),
    )
    .optional(),
});

export const zWorkflowUpdateRequest = z.object({
  isPaused: z.boolean().optional(),
});

export const zWorkflowConcurrency = z.object({
  maxRuns: z.number().int(),
  limitStrategy: z.enum([
    "CANCEL_IN_PROGRESS",
    "DROP_NEWEST",
    "QUEUE_NEWEST",
    "GROUP_ROUND_ROBIN",
  ]),
  getConcurrencyGroup: z.string(),
});

export const zWorkflowVersionMeta = z.object({
  metadata: zApiResourceMeta,
  version: z.string(),
  order: z.number().int(),
  workflowId: z.string(),
  workflow: zWorkflow.optional(),
});

export const zWorkflowVersion = z.object({
  metadata: zApiResourceMeta,
  version: z.string(),
  order: z.number().int(),
  workflowId: z.string(),
  sticky: z.string().optional(),
  defaultPriority: z.number().int().optional(),
  workflow: zWorkflow.optional(),
  concurrency: zWorkflowConcurrency.optional(),
  triggers: z
    .object({
      metadata: zApiResourceMeta.optional(),
      workflow_version_id: z.string().optional(),
      tenant_id: z.string().optional(),
      events: z
        .array(
          z.object({
            parent_id: z.string().optional(),
            event_key: z.string().optional(),
          }),
        )
        .optional(),
      crons: z
        .array(
          z.object({
            parent_id: z.string().optional(),
            cron: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional(),
  scheduleTimeout: z.string().optional(),
  jobs: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        versionId: z.string(),
        name: z.string(),
        description: z.string().optional(),
        steps: z.array(
          z.object({
            metadata: zApiResourceMeta,
            readableId: z.string(),
            tenantId: z.string(),
            jobId: z.string(),
            action: z.string(),
            timeout: z.string().optional(),
            children: z.array(z.string()).optional(),
            parents: z.array(z.string()).optional(),
          }),
        ),
        timeout: z.string().optional(),
      }),
    )
    .optional(),
});

export const zWorkflowVersionDefinition = z.object({
  rawDefinition: z.string(),
});

export const zWorkflowTag = z.object({
  name: z.string(),
  color: z.string(),
});

export const zWorkflowList = z.object({
  metadata: zApiResourceMeta.optional(),
  rows: z.array(zWorkflow).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zWorkflowTriggers = z.object({
  metadata: zApiResourceMeta.optional(),
  workflow_version_id: z.string().optional(),
  tenant_id: z.string().optional(),
  events: z
    .array(
      z.object({
        parent_id: z.string().optional(),
        event_key: z.string().optional(),
      }),
    )
    .optional(),
  crons: z
    .array(
      z.object({
        parent_id: z.string().optional(),
        cron: z.string().optional(),
      }),
    )
    .optional(),
});

export const zWorkflowTriggerEventRef = z.object({
  parent_id: z.string().optional(),
  event_key: z.string().optional(),
});

export const zWorkflowTriggerCronRef = z.object({
  parent_id: z.string().optional(),
  cron: z.string().optional(),
});

export const zJob = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  versionId: z.string(),
  name: z.string(),
  description: z.string().optional(),
  steps: z.array(
    z.object({
      metadata: zApiResourceMeta,
      readableId: z.string(),
      tenantId: z.string(),
      jobId: z.string(),
      action: z.string(),
      timeout: z.string().optional(),
      children: z.array(z.string()).optional(),
      parents: z.array(z.string()).optional(),
    }),
  ),
  timeout: z.string().optional(),
});

export const zStep = z.object({
  metadata: zApiResourceMeta,
  readableId: z.string(),
  tenantId: z.string(),
  jobId: z.string(),
  action: z.string(),
  timeout: z.string().optional(),
  children: z.array(z.string()).optional(),
  parents: z.array(z.string()).optional(),
});

export const zWorkflowWorkersCount = z.object({
  freeSlotCount: z.number().int().optional(),
  maxSlotCount: z.number().int().optional(),
  workflowRunId: z.string().optional(),
});

export const zWorkflowRun: z.ZodTypeAny = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowVersionId: z.string(),
  workflowVersion: zWorkflowVersion.optional(),
  status: z.enum([
    "PENDING",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "QUEUED",
    "BACKOFF",
  ]),
  displayName: z.string().optional(),
  jobRuns: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        workflowRunId: z.string(),
        workflowRun: z
          .lazy(() => {
            return zWorkflowRun;
          })
          .optional(),
        jobId: z.string(),
        job: zJob.optional(),
        tickerId: z.string().optional(),
        stepRuns: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              tenantId: z.string(),
              jobRunId: z.string(),
              jobRun: z.object({}).optional(),
              stepId: z.string(),
              step: zStep.optional(),
              childWorkflowsCount: z.number().int().optional(),
              parents: z.array(z.string()).optional(),
              childWorkflowRuns: z.array(z.string()).optional(),
              workerId: z.string().optional(),
              input: z.string().optional(),
              output: z.string().optional(),
              status: z.enum([
                "PENDING",
                "PENDING_ASSIGNMENT",
                "ASSIGNED",
                "RUNNING",
                "SUCCEEDED",
                "FAILED",
                "CANCELLED",
                "CANCELLING",
                "BACKOFF",
              ]),
              requeueAfter: z.string().datetime().optional(),
              result: z.object({}).optional(),
              error: z.string().optional(),
              startedAt: z.string().datetime().optional(),
              startedAtEpoch: z.number().int().optional(),
              finishedAt: z.string().datetime().optional(),
              finishedAtEpoch: z.number().int().optional(),
              timeoutAt: z.string().datetime().optional(),
              timeoutAtEpoch: z.number().int().optional(),
              cancelledAt: z.string().datetime().optional(),
              cancelledAtEpoch: z.number().int().optional(),
              cancelledReason: z.string().optional(),
              cancelledError: z.string().optional(),
            }),
          )
          .optional(),
        status: z.enum([
          "PENDING",
          "RUNNING",
          "SUCCEEDED",
          "FAILED",
          "CANCELLED",
          "BACKOFF",
        ]),
        result: z.object({}).optional(),
        startedAt: z.string().datetime().optional(),
        finishedAt: z.string().datetime().optional(),
        timeoutAt: z.string().datetime().optional(),
        cancelledAt: z.string().datetime().optional(),
        cancelledReason: z.string().optional(),
        cancelledError: z.string().optional(),
      }),
    )
    .optional(),
  triggeredBy: z.object({
    metadata: zApiResourceMeta,
    parentWorkflowRunId: z.string().optional(),
    eventId: z.string().optional(),
    cronParentId: z.string().optional(),
    cronSchedule: z.string().optional(),
  }),
  input: z.object({}).optional(),
  error: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  duration: z.number().int().optional(),
  parentId: z.string().uuid().length(36).optional(),
  parentStepRunId: z.string().uuid().length(36).optional(),
  additionalMetadata: z.object({}).optional(),
});

export const zWorkflowRunShape = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowId: z.string().optional(),
  workflowVersionId: z.string(),
  workflowVersion: zWorkflowVersion.optional(),
  status: z.enum([
    "PENDING",
    "RUNNING",
    "SUCCEEDED",
    "FAILED",
    "CANCELLED",
    "QUEUED",
    "BACKOFF",
  ]),
  displayName: z.string().optional(),
  jobRuns: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        workflowRunId: z.string(),
        workflowRun: zWorkflowRun.optional(),
        jobId: z.string(),
        job: zJob.optional(),
        tickerId: z.string().optional(),
        stepRuns: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              tenantId: z.string(),
              jobRunId: z.string(),
              jobRun: z.object({}).optional(),
              stepId: z.string(),
              step: zStep.optional(),
              childWorkflowsCount: z.number().int().optional(),
              parents: z.array(z.string()).optional(),
              childWorkflowRuns: z.array(z.string()).optional(),
              workerId: z.string().optional(),
              input: z.string().optional(),
              output: z.string().optional(),
              status: z.enum([
                "PENDING",
                "PENDING_ASSIGNMENT",
                "ASSIGNED",
                "RUNNING",
                "SUCCEEDED",
                "FAILED",
                "CANCELLED",
                "CANCELLING",
                "BACKOFF",
              ]),
              requeueAfter: z.string().datetime().optional(),
              result: z.object({}).optional(),
              error: z.string().optional(),
              startedAt: z.string().datetime().optional(),
              startedAtEpoch: z.number().int().optional(),
              finishedAt: z.string().datetime().optional(),
              finishedAtEpoch: z.number().int().optional(),
              timeoutAt: z.string().datetime().optional(),
              timeoutAtEpoch: z.number().int().optional(),
              cancelledAt: z.string().datetime().optional(),
              cancelledAtEpoch: z.number().int().optional(),
              cancelledReason: z.string().optional(),
              cancelledError: z.string().optional(),
            }),
          )
          .optional(),
        status: z.enum([
          "PENDING",
          "RUNNING",
          "SUCCEEDED",
          "FAILED",
          "CANCELLED",
          "BACKOFF",
        ]),
        result: z.object({}).optional(),
        startedAt: z.string().datetime().optional(),
        finishedAt: z.string().datetime().optional(),
        timeoutAt: z.string().datetime().optional(),
        cancelledAt: z.string().datetime().optional(),
        cancelledReason: z.string().optional(),
        cancelledError: z.string().optional(),
      }),
    )
    .optional(),
  triggeredBy: z.object({
    metadata: zApiResourceMeta,
    parentWorkflowRunId: z.string().optional(),
    eventId: z.string().optional(),
    cronParentId: z.string().optional(),
    cronSchedule: z.string().optional(),
  }),
  input: z.object({}).optional(),
  error: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  duration: z.number().int().optional(),
  parentId: z.string().uuid().length(36).optional(),
  parentStepRunId: z.string().uuid().length(36).optional(),
  additionalMetadata: z.object({}).optional(),
});

export const zReplayWorkflowRunsRequest = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)),
});

export const zReplayWorkflowRunsResponse = z.object({
  workflowRuns: z.array(zWorkflowRun),
});

export const zWorkflowRunList = z.object({
  rows: z.array(zWorkflowRun).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zScheduledWorkflows = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowVersionId: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  triggerAt: z.string().datetime(),
  input: z.object({}).optional(),
  additionalMetadata: z.object({}).optional(),
  workflowRunCreatedAt: z.string().datetime().optional(),
  workflowRunName: z.string().optional(),
  workflowRunStatus: z
    .enum([
      "PENDING",
      "RUNNING",
      "SUCCEEDED",
      "FAILED",
      "CANCELLED",
      "QUEUED",
      "BACKOFF",
    ])
    .optional(),
  workflowRunId: z.string().uuid().length(36).optional(),
  method: z.enum(["DEFAULT", "API"]),
});

export const zScheduledWorkflowsList = z.object({
  rows: z.array(zScheduledWorkflows).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zScheduledWorkflowsOrderByField = z.enum([
  "triggerAt",
  "createdAt",
]);

export const zScheduledRunStatus = z.enum([
  "PENDING",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "QUEUED",
  "SCHEDULED",
]);

export const zCronWorkflows = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowVersionId: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  cron: z.string(),
  name: z.string().optional(),
  input: z.object({}).optional(),
  additionalMetadata: z.object({}).optional(),
  enabled: z.boolean(),
  method: z.enum(["DEFAULT", "API"]),
});

export const zCronWorkflowsList = z.object({
  rows: z.array(zCronWorkflows).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zCronWorkflowsOrderByField = z.enum(["name", "createdAt"]);

export const zWorkflowRunOrderByField = z.enum([
  "createdAt",
  "startedAt",
  "finishedAt",
  "duration",
]);

export const zWorkflowRunOrderByDirection = z.enum(["ASC", "DESC"]);

export const zWorkflowRunsMetrics = z.object({
  counts: z
    .object({
      PENDING: z.number().int().optional(),
      RUNNING: z.number().int().optional(),
      SUCCEEDED: z.number().int().optional(),
      FAILED: z.number().int().optional(),
      QUEUED: z.number().int().optional(),
      CANCELLED: z.number().int().optional(),
    })
    .optional(),
});

export const zWorkflowRunsMetricsCounts = z.object({
  PENDING: z.number().int().optional(),
  RUNNING: z.number().int().optional(),
  SUCCEEDED: z.number().int().optional(),
  FAILED: z.number().int().optional(),
  QUEUED: z.number().int().optional(),
  CANCELLED: z.number().int().optional(),
});

export const zWorkflowRunStatus = z.enum([
  "PENDING",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "QUEUED",
  "BACKOFF",
]);

export const zWorkflowRunStatusList = z.array(zWorkflowRunStatus);

export const zWorkflowKind = z.enum(["FUNCTION", "DURABLE", "DAG"]);

export const zWorkflowKindList = z.array(zWorkflowKind);

export const zWorkflowRunsCancelRequest = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)),
});

export const zJobRunStatus = z.enum([
  "PENDING",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "BACKOFF",
]);

export const zStepRunStatus = z.enum([
  "PENDING",
  "PENDING_ASSIGNMENT",
  "ASSIGNED",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "CANCELLING",
  "BACKOFF",
]);

export const zJobRun = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowRunId: z.string(),
  workflowRun: zWorkflowRun.optional(),
  jobId: z.string(),
  job: zJob.optional(),
  tickerId: z.string().optional(),
  stepRuns: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        jobRunId: z.string(),
        jobRun: z.object({}).optional(),
        stepId: z.string(),
        step: zStep.optional(),
        childWorkflowsCount: z.number().int().optional(),
        parents: z.array(z.string()).optional(),
        childWorkflowRuns: z.array(z.string()).optional(),
        workerId: z.string().optional(),
        input: z.string().optional(),
        output: z.string().optional(),
        status: zStepRunStatus,
        requeueAfter: z.string().datetime().optional(),
        result: z.object({}).optional(),
        error: z.string().optional(),
        startedAt: z.string().datetime().optional(),
        startedAtEpoch: z.number().int().optional(),
        finishedAt: z.string().datetime().optional(),
        finishedAtEpoch: z.number().int().optional(),
        timeoutAt: z.string().datetime().optional(),
        timeoutAtEpoch: z.number().int().optional(),
        cancelledAt: z.string().datetime().optional(),
        cancelledAtEpoch: z.number().int().optional(),
        cancelledReason: z.string().optional(),
        cancelledError: z.string().optional(),
      }),
    )
    .optional(),
  status: zJobRunStatus,
  result: z.object({}).optional(),
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  timeoutAt: z.string().datetime().optional(),
  cancelledAt: z.string().datetime().optional(),
  cancelledReason: z.string().optional(),
  cancelledError: z.string().optional(),
});

export const zWorkflowRunTriggeredBy = z.object({
  metadata: zApiResourceMeta,
  parentWorkflowRunId: z.string().optional(),
  eventId: z.string().optional(),
  cronParentId: z.string().optional(),
  cronSchedule: z.string().optional(),
});

export const zStepRun = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  jobRunId: z.string(),
  jobRun: z.object({}).optional(),
  stepId: z.string(),
  step: zStep.optional(),
  childWorkflowsCount: z.number().int().optional(),
  parents: z.array(z.string()).optional(),
  childWorkflowRuns: z.array(z.string()).optional(),
  workerId: z.string().optional(),
  input: z.string().optional(),
  output: z.string().optional(),
  status: zStepRunStatus,
  requeueAfter: z.string().datetime().optional(),
  result: z.object({}).optional(),
  error: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  startedAtEpoch: z.number().int().optional(),
  finishedAt: z.string().datetime().optional(),
  finishedAtEpoch: z.number().int().optional(),
  timeoutAt: z.string().datetime().optional(),
  timeoutAtEpoch: z.number().int().optional(),
  cancelledAt: z.string().datetime().optional(),
  cancelledAtEpoch: z.number().int().optional(),
  cancelledReason: z.string().optional(),
  cancelledError: z.string().optional(),
});

export const zStepRunEventReason = z.enum([
  "REQUEUED_NO_WORKER",
  "REQUEUED_RATE_LIMIT",
  "SCHEDULING_TIMED_OUT",
  "ASSIGNED",
  "STARTED",
  "ACKNOWLEDGED",
  "FINISHED",
  "FAILED",
  "RETRYING",
  "CANCELLED",
  "TIMEOUT_REFRESHED",
  "REASSIGNED",
  "TIMED_OUT",
  "SLOT_RELEASED",
  "RETRIED_BY_USER",
  "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
  "WORKFLOW_RUN_GROUP_KEY_FAILED",
]);

export const zStepRunEventSeverity = z.enum(["INFO", "WARNING", "CRITICAL"]);

export const zStepRunEvent = z.object({
  id: z.number().int(),
  timeFirstSeen: z.string().datetime(),
  timeLastSeen: z.string().datetime(),
  stepRunId: z.string().optional(),
  workflowRunId: z.string().optional(),
  reason: zStepRunEventReason,
  severity: zStepRunEventSeverity,
  message: z.string(),
  count: z.number().int(),
  data: z.object({}).optional(),
});

export const zStepRunEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zStepRunEvent).optional(),
});

export const zStepRunArchive = z.object({
  stepRunId: z.string(),
  order: z.number().int(),
  input: z.string().optional(),
  output: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  error: z.string().optional(),
  retryCount: z.number().int(),
  createdAt: z.string().datetime(),
  startedAtEpoch: z.number().int().optional(),
  finishedAt: z.string().datetime().optional(),
  finishedAtEpoch: z.number().int().optional(),
  timeoutAt: z.string().datetime().optional(),
  timeoutAtEpoch: z.number().int().optional(),
  cancelledAt: z.string().datetime().optional(),
  cancelledAtEpoch: z.number().int().optional(),
  cancelledReason: z.string().optional(),
  cancelledError: z.string().optional(),
});

export const zStepRunArchiveList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zStepRunArchive).optional(),
});

export const zWorkerRuntimeInfo = z.object({
  sdkVersion: z.string().optional(),
  language: z.enum(["GOLANG", "PYTHON", "TYPESCRIPT"]).optional(),
  languageVersion: z.string().optional(),
  os: z.string().optional(),
  runtimeExtra: z.string().optional(),
});

export const zWorkerRuntimeSdks = z.enum(["GOLANG", "PYTHON", "TYPESCRIPT"]);

export const zWorkerList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        name: z.string(),
        type: z.enum(["SELFHOSTED", "MANAGED", "WEBHOOK"]),
        lastHeartbeatAt: z.string().datetime().optional(),
        lastListenerEstablished: z.string().datetime().optional(),
        actions: z.array(z.string()).optional(),
        slots: z
          .array(
            z.object({
              stepRunId: z.string().uuid(),
              actionId: z.string(),
              startedAt: z.string().datetime().optional(),
              timeoutAt: z.string().datetime().optional(),
              workflowRunId: z.string().uuid(),
              status: zStepRunStatus,
            }),
          )
          .optional(),
        recentStepRuns: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              actionId: z.string(),
              status: zStepRunStatus,
              startedAt: z.string().datetime().optional(),
              finishedAt: z.string().datetime().optional(),
              cancelledAt: z.string().datetime().optional(),
              workflowRunId: z.string().uuid(),
            }),
          )
          .optional(),
        status: z.enum(["ACTIVE", "INACTIVE", "PAUSED"]).optional(),
        maxRuns: z.number().int().optional(),
        availableRuns: z.number().int().optional(),
        dispatcherId: z.string().uuid().length(36).optional(),
        labels: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              key: z.string(),
              value: z.string().optional(),
            }),
          )
          .optional(),
        webhookUrl: z.string().optional(),
        webhookId: z.string().uuid().optional(),
        runtimeInfo: zWorkerRuntimeInfo.optional(),
      }),
    )
    .optional(),
});

export const zSemaphoreSlots = z.object({
  stepRunId: z.string().uuid(),
  actionId: z.string(),
  startedAt: z.string().datetime().optional(),
  timeoutAt: z.string().datetime().optional(),
  workflowRunId: z.string().uuid(),
  status: zStepRunStatus,
});

export const zRecentStepRuns = z.object({
  metadata: zApiResourceMeta,
  actionId: z.string(),
  status: zStepRunStatus,
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  cancelledAt: z.string().datetime().optional(),
  workflowRunId: z.string().uuid(),
});

export const zWorker = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  type: z.enum(["SELFHOSTED", "MANAGED", "WEBHOOK"]),
  lastHeartbeatAt: z.string().datetime().optional(),
  lastListenerEstablished: z.string().datetime().optional(),
  actions: z.array(z.string()).optional(),
  slots: z.array(zSemaphoreSlots).optional(),
  recentStepRuns: z.array(zRecentStepRuns).optional(),
  status: z.enum(["ACTIVE", "INACTIVE", "PAUSED"]).optional(),
  maxRuns: z.number().int().optional(),
  availableRuns: z.number().int().optional(),
  dispatcherId: z.string().uuid().length(36).optional(),
  labels: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        key: z.string(),
        value: z.string().optional(),
      }),
    )
    .optional(),
  webhookUrl: z.string().optional(),
  webhookId: z.string().uuid().optional(),
  runtimeInfo: zWorkerRuntimeInfo.optional(),
});

export const zWorkerLabel = z.object({
  metadata: zApiResourceMeta,
  key: z.string(),
  value: z.string().optional(),
});

export const zUpdateWorkerRequest = z.object({
  isPaused: z.boolean().optional(),
});

export const zApiToken = z.object({
  metadata: zApiResourceMeta,
  name: z.string().max(255),
  expiresAt: z.string().datetime(),
});

export const zCreateApiTokenRequest = z.object({
  name: z.string().max(255),
  expiresIn: z.string().optional(),
});

export const zCreateApiTokenResponse = z.object({
  token: z.string(),
});

export const zListApiTokensResponse = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zApiToken).optional(),
});

export const zRerunStepRunRequest = z.object({
  input: z.object({}),
});

export const zTriggerWorkflowRunRequest = z.object({
  input: z.object({}),
  additionalMetadata: z.object({}).optional(),
});

export const zCreatePullRequestFromStepRun = z.object({
  branchName: z.string(),
});

export const zGetStepRunDiffResponse = z.object({
  diffs: z.array(
    z.object({
      key: z.string(),
      original: z.string(),
      modified: z.string(),
    }),
  ),
});

export const zStepRunDiff = z.object({
  key: z.string(),
  original: z.string(),
  modified: z.string(),
});

export const zListPullRequestsResponse = z.object({
  pullRequests: z.array(
    z.object({
      repositoryOwner: z.string(),
      repositoryName: z.string(),
      pullRequestID: z.number().int(),
      pullRequestTitle: z.string(),
      pullRequestNumber: z.number().int(),
      pullRequestHeadBranch: z.string(),
      pullRequestBaseBranch: z.string(),
      pullRequestState: z.enum(["open", "closed"]),
    }),
  ),
});

export const zPullRequest = z.object({
  repositoryOwner: z.string(),
  repositoryName: z.string(),
  pullRequestID: z.number().int(),
  pullRequestTitle: z.string(),
  pullRequestNumber: z.number().int(),
  pullRequestHeadBranch: z.string(),
  pullRequestBaseBranch: z.string(),
  pullRequestState: z.enum(["open", "closed"]),
});

export const zPullRequestState = z.enum(["open", "closed"]);

export const zLogLine = z.object({
  createdAt: z.string().datetime(),
  message: z.string(),
  metadata: z.object({}),
});

export const zLogLineLevel = z.enum(["DEBUG", "INFO", "WARN", "ERROR"]);

export const zLogLineList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zLogLine).optional(),
});

export const zLogLineOrderByField = z.enum(["createdAt"]);

export const zLogLineOrderByDirection = z.enum(["asc", "desc"]);

export const zLogLineSearch = z.string();

export const zLogLineLevelField = z.array(zLogLineLevel);

export const zSnsIntegration = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string().uuid(),
  topicArn: z.string(),
  ingestUrl: z.string().optional(),
});

export const zListSnsIntegrations = z.object({
  pagination: zPaginationResponse,
  rows: z.array(zSnsIntegration),
});

export const zSlackWebhook = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string().uuid(),
  teamName: z.string(),
  teamId: z.string(),
  channelName: z.string(),
  channelId: z.string(),
});

export const zListSlackWebhooks = z.object({
  pagination: zPaginationResponse,
  rows: z.array(zSlackWebhook),
});

export const zCreateSnsIntegrationRequest = z.object({
  topicArn: z.string(),
});

export const zWorkflowMetrics = z.object({
  groupKeyRunsCount: z.number().int().optional(),
  groupKeyCount: z.number().int().optional(),
});

export const zWebhookWorker = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
});

export const zWebhookWorkerRequestMethod = z.enum(["GET", "POST", "PUT"]);

export const zWebhookWorkerRequest = z.object({
  created_at: z.string().datetime(),
  method: zWebhookWorkerRequestMethod,
  statusCode: z.number().int(),
});

export const zWebhookWorkerRequestListResponse = z.object({
  requests: z.array(zWebhookWorkerRequest).optional(),
});

export const zWebhookWorkerCreated = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
  secret: z.string(),
});

export const zWebhookWorkerCreateRequest = z.object({
  name: z.string(),
  url: z.string(),
  secret: z.string().min(32).optional(),
});

export const zWebhookWorkerCreateResponse = z.object({
  worker: zWebhookWorkerCreated.optional(),
});

export const zWebhookWorkerListResponse = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zWebhookWorker).optional(),
});

export const zApiResourceMetaProperties = z.object({
  metadata: zApiResourceMeta.optional(),
});

export const zCommonResult = z.object({
  Success: z.boolean(),
  Message: z.string(),
});

export const zChatMessage = z.object({
  metadata: zApiResourceMeta,
  role: z.string(),
  content: z.string(),
  source: z.string().optional(),
  config: z
    .object({
      message_type: z.string().optional(),
      source: z.string().optional(),
    })
    .optional(),
});

export const zChatMessageList = z.object({
  metadata: zApiResourceMeta.optional(),
  rows: z.array(zChatMessage).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zAgentRunInput = z.object({
  teamId: z.string().optional(),
  sessionId: z.string().optional(),
  content: z.string(),
  tenantId: z.string().optional(),
  runId: z.string().optional(),
  stepRunId: z.string().optional(),
});

export const zChatHistoryList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zChatMessage).optional(),
});

export const zChatSession = z.object({
  metadata: zApiResourceMeta.optional(),
  name: z.string(),
  version: z.string(),
  team: z.string().optional(),
});

export const zChatSessionList = z.object({
  metadata: zApiResourceMeta.optional(),
  rows: z.array(zChatSession).optional(),
});

export const zWorkerConfig = z.object({
  workerToken: z.string().optional(),
});

export const zBlogGenConfig = z.object({
  name: z.string().max(255),
  description: z.string(),
  seo_keywords: z.string().optional(),
  dayPublishCountHint: z.number().optional(),
});

export const zGenTopicResult = z.object({
  topics: z.array(z.string()),
});

export const zGenArticleInput = z.object({
  topic: z.string(),
});

export const zRunNewTaskResponse = z.object({
  description: z.string().optional(),
});

export const zOperationEnum = z.enum(["startBlogTask", "stopBlogTask"]);

export const zCreateBlogPostRequest = z.object({
  blogId: z.string().uuid().length(36),
  authorId: z.string().uuid().length(36).optional(),
  title: z.string().min(3).max(200),
  content: z.string().min(50).max(10240),
});

export const zBlogList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        title: z.string(),
        description: z.string().optional(),
        tenant: zTenant.optional(),
        config: z
          .object({
            dayPublishCount: z.number().int().optional(),
            description: z.string().optional(),
          })
          .optional(),
        status: z.string().optional(),
        enabled: z.boolean().optional(),
        slug: z.string().optional(),
      }),
    )
    .optional(),
});

export const zBlog = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  description: z.string().optional(),
  tenant: zTenant.optional(),
  config: z
    .object({
      dayPublishCount: z.number().int().optional(),
      description: z.string().optional(),
    })
    .optional(),
  status: z.string().optional(),
  enabled: z.boolean().optional(),
  slug: z.string().optional(),
});

export const zCreateBlogRequest = z.object({
  title: z.string().optional(),
});

export const zUpdateBlogRequest = z.object({
  title: z.string().min(3).max(200),
  description: z.string().max(1024).optional(),
});

export const zBlogPost = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  content: z.string(),
  state: z
    .object({
      title: z.string().optional(),
      topic: z.string().optional(),
      outlines: z
        .array(
          z.object({
            title: z.string().optional(),
            content: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional(),
});

export const zBlogPostList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zBlogPost).optional(),
});

export const zUpdatePostRequest = z.object({
  blogId: z.string().uuid().length(36),
  authorId: z.string().uuid().length(36).optional(),
  title: z.string().min(3).max(200),
  content: z.string().min(50).max(10240),
});

export const zArtifactList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        title: z.string(),
        state: z.object({}),
        nextId: z.string().optional(),
        prevId: z.string().optional(),
      }),
    )
    .optional(),
});

export const zArtifact = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  state: z.object({}),
  nextId: z.string().optional(),
  prevId: z.string().optional(),
});

export const zCreateArtifacttRequest = z.object({
  artId: z.string().uuid().length(36),
  title: z.string().min(3).max(200),
  state: z.object({}),
});

export const zFlowTenantPayload = z.object({
  input: z.string().optional(),
});

export const zTextHighlight = z.object({
  fullMarkdown: z.string(),
  markdownBlock: z.string(),
  selectedText: z.string(),
});

export const zCodeHighlight = z.object({
  startCharIndex: z.number(),
  endCharIndex: z.number(),
});

export const zArtifactV3 = z.object({
  currentIndex: z.number().optional(),
  contents: z.array(z.unknown()).optional(),
});

export const zArtifactCodeV3 = z.object({
  index: z.number(),
  type: z.string(),
  title: z.string(),
  language: z.enum([
    "typescript",
    "javascript",
    "cpp",
    "java",
    "php",
    "python",
    "html",
    "sql",
    "json",
    "rust",
    "xml",
    "clojure",
    "csharp",
    "other",
  ]),
  code: z.string(),
});

export const zArtifactMarkdownV3 = z.object({
  index: z.number(),
  type: z.string(),
  title: z.string(),
  fullMarkdown: z.string(),
});

export const zCustomQuickAction = z.object({
  id: z.string(),
  title: z.string(),
  prompt: z.string(),
  includeReflections: z.boolean(),
  includePrefix: z.boolean(),
  includeRecentHistory: z.boolean(),
});

export const zReflections = z.object({
  styleRules: z.array(z.string()),
  content: z.array(z.string()),
});

export const zLanguageOptions = z.enum([
  "chinese",
  "english",
  "spanish",
  "french",
  "hindi",
]);

export const zArtifactLengthOptions = z.enum([
  "shortest",
  "short",
  "long",
  "longest",
]);

export const zRewriteArtifactMetaToolResponse = z.union([
  z.object({
    type: z.enum(["text"]),
    title: z.string().optional(),
    language: z.enum([
      "typescript",
      "javascript",
      "cpp",
      "java",
      "php",
      "python",
      "html",
      "sql",
      "json",
      "rust",
      "xml",
      "clojure",
      "csharp",
      "other",
    ]),
  }),
  z.object({
    type: z.enum(["code"]),
    title: z.string(),
    language: z.enum([
      "typescript",
      "javascript",
      "cpp",
      "java",
      "php",
      "python",
      "html",
      "sql",
      "json",
      "rust",
      "xml",
      "clojure",
      "csharp",
      "other",
    ]),
  }),
]);

export const zArtifactToolResponse = z.object({
  artifact: z.string().optional(),
  title: z.string().optional(),
  language: z.string().optional(),
  type: z.string().optional(),
});

export const zReadingLevelOptions = z.enum([
  "pirate",
  "child",
  "teenager",
  "college",
  "phd",
]);

export const zProgrammingLanguageOptions = z.enum([
  "typescript",
  "javascript",
  "cpp",
  "java",
  "php",
  "python",
  "html",
  "sql",
  "json",
  "rust",
  "xml",
  "clojure",
  "csharp",
  "other",
]);

export const zCanvasGraphParams = z.object({
  stepLimit: z.number().optional(),
  messages: z.array(zChatMessage).optional(),
  action: z
    .object({
      action: z.string().optional(),
      input: z.object({}).optional(),
    })
    .optional(),
  language: z.string().optional(),
  customQuickActionId: z.string().optional(),
  artifactId: z.string().optional(),
  fixBugs: z.boolean().optional(),
  highlightedCode: zCodeHighlight.optional(),
  highlightedText: zTextHighlight.optional(),
  regenerateWithEmojis: z.boolean().optional(),
  readingLevel: zReadingLevelOptions.optional(),
  artifactLength: zArtifactLengthOptions.optional(),
  artifact: zArtifactV3.optional(),
  addComments: z.boolean().optional(),
  addLogs: z.boolean().optional(),
  portLanguage: zProgrammingLanguageOptions.optional(),
});

export const zAgStateProperties = z.object({
  version: z.string().optional().default("1.0.0"),
  type: z.string().optional().default("TeamState"),
  state: z.object({}).default({}),
});

export const zAgState = zApiResourceMetaProperties.merge(zAgStateProperties);

export const zAgStateList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAgState).optional(),
});

export const zAgStateUpsert = zAgStateProperties.merge(
  z.object({
    stateId: z.string().optional(),
    componentId: z.string(),
    chatId: z.string(),
    tenantId: z.string().optional(),
  }),
);

export const zMtComponent = z
  .object({
    componentType: z
      .enum([
        "Assisant",
        "RoundRobinGroupChat",
        "SelectorGroupChat",
        "MagenticOneGroupChat",
      ])
      .optional(),
    version: z.number().int().optional().default(1),
    label: z.string().optional(),
    description: z.string().optional(),
    component: z.object({}),
  })
  .merge(zApiResourceMetaProperties);

export const zMtComponentList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zMtComponent).optional(),
});

export const zMtComponentProperties = z.object({
  componentType: z
    .enum([
      "Assisant",
      "RoundRobinGroupChat",
      "SelectorGroupChat",
      "MagenticOneGroupChat",
    ])
    .optional(),
  version: z.number().int().optional().default(1),
  label: z.string().optional(),
  description: z.string().optional(),
  component: z.object({}),
});

export const zComponentModel = z.object({
  provider: z.string(),
  component_type: z.enum(["team", "agent", "model", "tool", "termination"]),
  version: z.number().int().optional(),
  component_version: z.number().int().optional(),
  description: z.string().optional(),
  label: z.string().optional(),
  config: z.unknown(),
});

export const zGalleryComponents = z.object({
  agents: z.array(zComponentModel),
  models: z.array(zComponentModel),
  tools: z.array(zComponentModel),
  terminations: z.array(zComponentModel),
});

export const zGalleryItems = z.object({
  teams: z.array(zComponentModel),
  components: zGalleryComponents,
});

export const zGallery = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
  userId: z.string(),
  meta: z.object({
    author: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    version: z.string(),
    description: z.string().optional(),
    tags: z.array(z.unknown()).optional(),
    license: z.string().optional(),
    homepage: z.string().optional(),
    category: z.string().optional(),
    last_synced: z.string().optional(),
  }),
  items: zGalleryItems,
});

export const zGalleryList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zGallery).optional(),
});

export const zGalleryUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  userId: z.string(),
});

export const zAgEvent = z.object({
  metadata: zApiResourceMeta.optional(),
  userId: z.string().optional(),
  data: z.object({}),
  framework: z.string(),
  stepRunId: z.string(),
  meta: z.unknown().optional(),
});

export const zEventTypes = z.enum([
  "WorkflowRunStart",
  "WorkflowRunEnd",
  "StepRun",
  "TextMessage",
  "ModelClientStreamingChunkEvent",
  "EventNewAgentState",
]);

export const zAgEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAgEvent).optional(),
});

export const zOutline = z.object({
  pageTitle: z.string(),
  sections: z.array(
    z.object({
      section_title: z.string(),
      description: z.string(),
      subsections: z
        .array(
          z.object({
            subsectionTitle: z.string(),
            description: z.string(),
          }),
        )
        .optional(),
    }),
  ),
});

export const zAgentTaskStep = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  createAt: z.string(),
  inputType: z.string().optional(),
  input: z.string(),
  output: z.string(),
  isFinal: z.boolean().optional(),
  reason: z.string(),
});

export const zAgentStep = z.object({
  metadata: zApiResourceMeta,
  Action: z.object({
    Tool: z.string(),
    ToolInput: z.string(),
    Log: z.string(),
    ToolID: z.string(),
  }),
  Observation: z.string(),
});

export const zAgentAction = z.object({
  Tool: z.string(),
  ToolInput: z.string(),
  Log: z.string(),
  ToolID: z.string(),
});

export const zAgentFinish = z.object({
  ReturnValues: z.object({}),
  Log: z.string(),
});

export const zAgentNodeCreateRequest = z.object({
  title: z.string().optional(),
  prompt: z.string(),
  description: z.string().optional(),
});

export const zAgentNodeUpdateRequest = z.object({
  title: z.string().optional(),
  prompt: z.string(),
  type: z.string().optional(),
  description: z.string().optional(),
  state: z.unknown().optional(),
});

export const zFlowNames = z.enum([
  "assisant",
  "ag",
  "browser",
  "tenant",
  "news",
]);

export const zScrapeGraphParams = z.object({
  input: z.string().optional(),
});

export const zBrowserParams = z.object({
  input: z.string().optional(),
});

export const zTerminationTypes = z.enum([
  "MaxMessageTermination",
  "StopMessageTermination",
  "TextMentionTermination",
  "TimeoutTermination",
]);

export const zComponentTypes = z.enum([
  "team",
  "agent",
  "model",
  "tool",
  "termination",
]);

export const zRequestUsage = z.object({
  prompt_tokens: z.number(),
  completion_tokens: z.number(),
});

export const zFunctionCall = z.object({
  id: z.string(),
  arguments: z.string(),
  name: z.string(),
});

export const zFunctionExecutionResult = z.object({
  call_id: z.string(),
  content: z.string(),
});

export const zBaseMessageConfig = z.object({
  source: z.string().optional(),
  models_usage: zRequestUsage.optional(),
});

export const zImageContent = z.object({
  url: z.string(),
  alt: z.string().optional(),
  data: z.string().optional(),
});

export const zStopMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.string(),
  }),
);

export const zHandoffMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.string(),
    target: z.string(),
  }),
);

export const zToolCallMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.array(zFunctionCall),
  }),
);

export const zToolCallResultMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.array(zFunctionExecutionResult),
  }),
);

export const zTeamResult = z.object({
  task_result: z.object({}),
  usage: z.string(),
  duration: z.number(),
});

export const zInnerMessageConfig = z.union([
  zToolCallMessageConfig,
  zToolCallResultMessageConfig,
]);

export const zChatMessageConfig = z.union([
  zStopMessageConfig,
  zHandoffMessageConfig,
]);

export const zChatMessageUpsert = z.object({
  tenantId: z.string(),
  content: z.string(),
  componentId: z.string(),
  threadId: z.string().optional(),
  runId: z.string().optional(),
  role: z.string().optional(),
  source: z.string().optional().default("user"),
  messageType: z.string().optional(),
  agentType: z.string().optional(),
  workflowRunId: z.string().optional(),
  stepRunId: z.string().optional(),
});

export const zAgentMessageConfig = z.union([
  zStopMessageConfig,
  zHandoffMessageConfig,
  zToolCallMessageConfig,
  zToolCallResultMessageConfig,
]);

export const zMemoryConfig = zComponentModel;

export const zModelContext = zComponentModel;

export const zMtTaskResult = z.object({
  messages: z.array(zAgentMessageConfig),
  stop_reason: z.string().optional(),
});

export const zAgentTypes = z.enum([
  "AssistantAgent",
  "UserProxyAgent",
  "MultimodalWebSurfer",
  "FileSurfer",
  "MagenticOneCoderAgent",
]);

export const zToolTypes = z.enum(["PythonFunction"]);

export const zModel = z.object({
  metadata: zApiResourceMeta.optional(),
  config: z
    .object({
      model: z.string(),
      model_type: z.enum([
        "OpenAIChatCompletionClient",
        "AzureOpenAIChatCompletionClient",
      ]),
      api_key: z.string().optional(),
      base_url: z.string().optional(),
      timeout: z.number().optional(),
      max_retries: z.number().int().optional(),
      frequency_penalty: z.number().optional(),
      logit_bias: z.number().int().optional(),
      max_tokens: z.number().int().optional(),
      n: z.number().int().optional(),
      presence_penalty: z.number().optional(),
      response_format: z.enum(["json_object", "text"]).optional(),
      seed: z.number().int().optional(),
      stop: z.array(z.string()).optional(),
      temperature: z.number().optional(),
      top_p: z.number().optional(),
      user: z.string().optional(),
      organization: z.string().optional(),
      default_headers: z.object({}).optional(),
      model_info: z
        .object({
          family: z.enum(["r1", "openai", "unknown"]),
          vision: z.boolean(),
          function_calling: z.boolean(),
          json_output: z.boolean(),
        })
        .optional(),
    })
    .optional(),
});

export const zModelConfig = z.object({
  model: z.string(),
  model_type: z.enum([
    "OpenAIChatCompletionClient",
    "AzureOpenAIChatCompletionClient",
  ]),
  api_key: z.string().optional(),
  base_url: z.string().optional(),
  timeout: z.number().optional(),
  max_retries: z.number().int().optional(),
  frequency_penalty: z.number().optional(),
  logit_bias: z.number().int().optional(),
  max_tokens: z.number().int().optional(),
  n: z.number().int().optional(),
  presence_penalty: z.number().optional(),
  response_format: z.enum(["json_object", "text"]).optional(),
  seed: z.number().int().optional(),
  stop: z.array(z.string()).optional(),
  temperature: z.number().optional(),
  top_p: z.number().optional(),
  user: z.string().optional(),
  organization: z.string().optional(),
  default_headers: z.object({}).optional(),
  model_info: z
    .object({
      family: z.enum(["r1", "openai", "unknown"]),
      vision: z.boolean(),
      function_calling: z.boolean(),
      json_output: z.boolean(),
    })
    .optional(),
});

export const zModelFamily = z.enum(["r1", "openai", "unknown"]);

export const zModelInfo = z.object({
  family: zModelFamily,
  vision: z.boolean(),
  function_calling: z.boolean(),
  json_output: z.boolean(),
});

export const zModelTypes = z.enum([
  "OpenAIChatCompletionClient",
  "AzureOpenAIChatCompletionClient",
]);

export const zAzureOpenAiModelConfig = zModelConfig.merge(
  z.object({
    model_type: z.enum(["AzureOpenAIChatCompletionClient"]),
    azure_deployment: z.string(),
    api_version: z.string(),
    azure_endpoint: z.string(),
    azure_ad_token_provider: z.string(),
  }),
);

export const zOpenAiModelConfig = zModelConfig.merge(
  z.object({
    model_type: z.enum(["OpenAIChatCompletionClient"]),
  }),
);

export const zToolComponent = zComponentModel.merge(
  z.object({
    config: z.object({
      name: z.string(),
      description: z.string().optional(),
      source_code: z.string().optional(),
      global_imports: z.array(z.string()).optional(),
      has_cancellation_support: z.boolean().optional(),
    }),
  }),
);

export const zToolConfig = z.object({
  name: z.string(),
  description: z.string().optional(),
  source_code: z.string().optional(),
  global_imports: z.array(z.string()).optional(),
  has_cancellation_support: z.boolean().optional(),
});

export const zModelComponent = zComponentModel.merge(
  z.object({
    config: zModelConfig,
  }),
);

export const zResponseFormat = z.enum(["json_object", "text"]);

export const zRunStatus = z.enum([
  "created",
  "active",
  "awaiting_input",
  "timeout",
  "complete",
  "error",
  "stopped",
]);

export const zSection = z.object({
  section_title: z.string(),
  description: z.string(),
  subsections: z
    .array(
      z.object({
        subsectionTitle: z.string(),
        description: z.string(),
      }),
    )
    .optional(),
});

export const zSubsection = z.object({
  subsectionTitle: z.string(),
  description: z.string(),
});

export const zNodeRunAction = z.object({
  action: z.string().optional(),
  input: z.object({}).optional(),
});

export const zRoundRobinGroupChatConfig = z.object({
  team_type: z.enum(["RoundRobinGroupChat"]).optional(),
});

export const zSelectorGroupChatConfig = zComponentModel.merge(
  z.object({
    team_type: z.enum(["SelectorGroupChat"]).optional(),
    selector_prompt: z.string().optional(),
    model_client: zModelConfig.optional(),
  }),
);

export const zTerminationComponent = zComponentModel.merge(
  z.object({
    config: z.object({
      termination_type: zTerminationTypes.optional(),
      conditions: z
        .array(
          z.union([
            zComponentModel.merge(
              z.object({
                config: z.object({
                  termination_type: z.enum(["MaxMessageTermination"]),
                  max_messages: z.number().int(),
                }),
              }),
            ),
            zComponentModel.merge(
              z.object({
                config: z
                  .object({
                    text: z.string(),
                  })
                  .optional(),
              }),
            ),
          ]),
        )
        .optional(),
    }),
  }),
);

export const zTerminationConfig = z.object({
  termination_type: zTerminationTypes.optional(),
  conditions: z
    .array(
      z.union([
        zComponentModel.merge(
          z.object({
            config: z.object({
              termination_type: z.enum(["MaxMessageTermination"]),
              max_messages: z.number().int(),
            }),
          }),
        ),
        zComponentModel.merge(
          z.object({
            config: z
              .object({
                text: z.string(),
              })
              .optional(),
          }),
        ),
      ]),
    )
    .optional(),
});

export const zMaxMessageTerminationConfigComponent = zComponentModel.merge(
  z.object({
    config: z.object({
      termination_type: z.enum(["MaxMessageTermination"]),
      max_messages: z.number().int(),
    }),
  }),
);

export const zMaxMessageTerminationConfig = z.object({
  termination_type: z.enum(["MaxMessageTermination"]),
  max_messages: z.number().int(),
});

export const zTextMentionTerminationComponent = zComponentModel.merge(
  z.object({
    config: z
      .object({
        text: z.string(),
      })
      .optional(),
  }),
);

export const zTextMentionTerminationConfig = z.object({
  text: z.string(),
});

export const zTerminationConditions = z.union([
  zMaxMessageTerminationConfigComponent,
  zTextMentionTerminationComponent,
]);

export const zTeamTypes = z.enum([
  "Assisant",
  "RoundRobinGroupChat",
  "SelectorGroupChat",
  "MagenticOneGroupChat",
]);

export const zTenantParameter = z.string().uuid().length(36);

export const zHttpCommonStatusResponse = z.unknown();

export const zPrompt = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  content: z.string(),
  tags: z.array(z.string()),
});

export const zPromptList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zArtifact).optional(),
});

export const zComponentGet = z.object({
  id: z.string().optional(),
});

export const zBadRequest = z.unknown();

export const zForbidden = z.unknown();

export const zNotFound = z.unknown();

export const zModelList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zModel).optional(),
});

export const zUpdateModel = z.object({
  metadata: zApiResourceMeta.optional(),
  name: z.string().optional(),
});

export const zFormField = z.object({
  name: z.string(),
  type: z.string(),
});

export const zSchemaForm = z.object({
  title: z.string(),
  description: z.string().optional(),
  fields: z.array(zFormField),
});

export const zSite = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  description: z.string(),
});

export const zSiteList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zSite).optional(),
});

export const zCreateSiteRequest = z.object({
  title: z.string(),
  description: z.string(),
  host: z.string().optional(),
});

export const zCreateSiteResponse = zSite;

export const zUpdateSiteRequest = z.object({
  title: z.string().optional(),
});

export const zSiteHost = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  description: z.string(),
  host: z.string(),
});

export const zSiteHostList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zSiteHost).optional(),
});

export const zCreateSiteHostRequest = z.object({
  siteId: z.string(),
  title: z.string(),
  description: z.string(),
  host: z.string(),
});

export const zCreateSiteHostResponse = zSiteHost;

export const zUpdateSiteHostRequest = zSiteHost;

export const zUpdateSiteHostResponse = zSiteHost;

export const zPost = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  content: z.string(),
});

export const zPostList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zPost).optional(),
});

export const zCreatePostRequest = z.object({
  siteId: z.string().uuid().length(36),
  title: z.string().min(3).max(200),
  content: z.string().min(50).max(10240),
  slug: z.string().min(3).max(200),
  authorId: z.string().uuid().length(36).optional(),
  status: z.enum(["draft", "published"]).optional(),
});

export const zFrontendConfig = z.object({
  cookieAccessToken: z.string(),
  dashPath: z.string(),
  hotKeyDebug: z.string(),
  defaultTenantAccessToken: z.string(),
});

export const zSiderbarConfig = z.object({
  logo: z.string().optional(),
  sideritems: z
    .array(
      z.object({
        title: z.string(),
        url: z.string(),
        icon: z.string().optional(),
        defaultExpanded: z.boolean().optional(),
        adminOnly: z.boolean().optional(),
        children: z
          .array(
            z.object({
              title: z.string(),
              url: z.string(),
              icon: z.string().optional(),
              adminOnly: z.boolean().optional(),
            }),
          )
          .optional(),
      }),
    )
    .optional(),
});

export const zDashSidebarItem = z.object({
  title: z.string(),
  url: z.string(),
  icon: z.string().optional(),
  defaultExpanded: z.boolean().optional(),
  adminOnly: z.boolean().optional(),
  children: z
    .array(
      z.object({
        title: z.string(),
        url: z.string(),
        icon: z.string().optional(),
        adminOnly: z.boolean().optional(),
      }),
    )
    .optional(),
});

export const zDashSidebarItemLeaf = z.object({
  title: z.string(),
  url: z.string(),
  icon: z.string().optional(),
  adminOnly: z.boolean().optional(),
});

export const zHfAccount = z.object({
  metadata: zApiResourceMeta,
  username: z.string(),
  token: z.string(),
});

export const zEnv = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  value: z.string(),
});

export const zEnvList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zEnv).optional(),
});

export const zEndpoint = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
  token: z.string(),
  type: z.string(),
});

export const zEndpointList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zEndpoint).optional(),
});

export const zUpdateEndpointRequest = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  token: z.string().optional(),
});

export const zPlatform = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zPlatformList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zPlatform).optional(),
});

export const zPlatformUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zPlatformAccount = z.object({
  metadata: zApiResourceMeta,
  username: z.string(),
  email: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  type: z.string().optional(),
  platform: z.string(),
  enabled: z.boolean().optional(),
  comment: z.string().optional(),
  tags: z.array(z.string()).optional(),
  properties: z.object({}).optional(),
});

export const zPlatformAccountList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zPlatformAccount).optional(),
});

export const zPlatformAccountUpdate = z.object({
  metadata: zApiResourceMeta.optional(),
  username: z.string().optional(),
  email: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  type: z.string().optional(),
  platform: z.string().optional(),
  enabled: z.boolean().optional(),
  comment: z.string().optional(),
  tags: z.array(z.string()).optional(),
  properties: z.object({}).optional(),
});

export const zBrowser = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zBrowserList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zBrowser).optional(),
});

export const zBrowserUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zProxy = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zProxyList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zProxy).optional(),
});

export const zProxyUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zUiAgentState = z.object({
  welcome: z
    .object({
      title: z.string().optional(),
      content: z.string().optional(),
      subTitle: z.string().optional(),
      quick_starts: z
        .array(
          z.object({
            icon: z.string().optional(),
            com_id: z.string().optional(),
            title: z.string().optional(),
            content: z.string(),
            cn: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional(),
  thread_id: z.string().optional(),
  team_id: z.string().optional(),
});

export const zQuickStart = z.object({
  icon: z.string().optional(),
  com_id: z.string().optional(),
  title: z.string().optional(),
  content: z.string(),
  cn: z.string().optional(),
});

export const zUiAgentConfig = z.object({
  someValue: z.string().optional(),
});

export const zChatWelcome = z.object({
  title: z.string().optional(),
  content: z.string().optional(),
  subTitle: z.string().optional(),
  quick_starts: z.array(zQuickStart).optional(),
});

export const zAssignedAction = z.object({
  tenantId: z.string(),
  workflowRunId: z.string().optional(),
  getGroupKeyRunId: z.string().optional(),
  jobId: z.string(),
  jobName: z.string().optional(),
  stepId: z.string(),
  stepRunId: z.string().optional(),
  actionId: z.string(),
  actionType: z.string(),
  actionPayload: z.string(),
  stepName: z.string(),
  retryCount: z.number().int(),
  additional_metadata: z.string().optional(),
  child_workflow_index: z.number().int().optional(),
  child_workflow_key: z.string().optional(),
  parent_workflow_run_id: z.string().optional(),
});

export const zMetadataGetResponse = zApiMeta;

export const zCloudMetadataGetResponse = zApiErrors;

export const zMetadataListIntegrationsResponse = zListApiMetaIntegration;

export const zUserUpdateLoginResponse = zUser;

export const zSnsListResponse = zListSnsIntegrations;

export const zSnsCreateResponse = zSnsIntegration;

export const zAlertEmailGroupListResponse = zTenantAlertEmailGroupList;

export const zAlertEmailGroupCreateResponse = zTenantAlertEmailGroup;

export const zTenantResourcePolicyGetResponse = zTenantResourcePolicy;

export const zAlertEmailGroupDeleteResponse = z.void();

export const zAlertEmailGroupUpdateResponse = zTenantAlertEmailGroup;

export const zSnsDeleteResponse = z.void();

export const zSlackWebhookListResponse = zListSlackWebhooks;

export const zSlackWebhookDeleteResponse = z.void();

export const zUserGetCurrentResponse = zUser;

export const zUserUpdatePasswordResponse = zUser;

export const zUserCreateResponse = zUser;

export const zUserUpdateLogoutResponse = zUser;

export const zTenantMembershipsListResponse = zUserTenantMembershipsList;

export const zUserListTenantInvitesResponse = zTenantInviteList;

export const zTenantCreateResponse = zTenant;

export const zTenantUpdateResponse = zTenant;

export const zTenantAlertingSettingsGetResponse = zTenantAlertingSettings;

export const zTenantInviteListResponse = zTenantInviteList;

export const zTenantInviteCreateResponse = zTenantInvite;

export const zTenantInviteDeleteResponse = zTenantInvite;

export const zTenantInviteUpdateResponse = zTenantInvite;

export const zApiTokenListResponse = zListApiTokensResponse;

export const zApiTokenCreateResponse = zCreateApiTokenResponse;

export const zApiTokenUpdateRevokeResponse = z.void();

export const zTenantGetQueueMetricsResponse = zTenantQueueMetrics;

export const zTenantGetStepRunQueueMetricsResponse = zTenantStepRunQueueMetrics;

export const zEventListResponse = zEventList;

export const zEventUpdateCancelResponse = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)).optional(),
});

export const zRateLimitListResponse = zRateLimitList;

export const zTenantMemberListResponse = zTenantMemberList;

export const zTenantMemberDeleteResponse = zTenantMember;

export const zEventGetResponse = zEvent;

export const zEventDataGetResponse = zEventData;

export const zEventKeyListResponse = zEventKeyList;

export const zWorkflowListResponse = zWorkflowList;

export const zWorkflowScheduledListResponse = zScheduledWorkflowsList;

export const zWorkflowScheduledDeleteResponse = z.void();

export const zWorkflowScheduledGetResponse = zScheduledWorkflows;

export const zCronWorkflowListResponse = zCronWorkflowsList;

export const zWorkflowRunCancelResponse = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)).optional(),
});

export const zWorkflowDeleteResponse = z.void();

export const zWorkflowGetResponse = zWorkflow;

export const zWorkflowUpdateResponse = zWorkflow;

export const zWorkflowVersionGetResponse = zWorkflowVersion;

export const zWorkflowRunCreateResponse = zWorkflowRun;

export const zWorkflowGetMetricsResponse = zWorkflowMetrics;

export const zLogLineListResponse = zLogLineList;

export const zStepRunListEventsResponse = zStepRunEventList;

export const zWorkflowRunListStepRunEventsResponse = zStepRunEventList;

export const zStepRunListArchivesResponse = zStepRunArchiveList;

export const zWorkflowGetWorkersCountResponse = zWorkflowWorkersCount;

export const zWorkflowRunListResponse = zWorkflowRunList;

export const zWorkflowRunUpdateReplayResponse = zReplayWorkflowRunsResponse;

export const zWorkflowRunGetMetricsResponse = zWorkflowRunsMetrics;

export const zWorkflowRunGetResponse = zWorkflowRun;

export const zWorkflowRunGetShapeResponse = zWorkflowRunShape;

export const zStepRunGetResponse = zStepRun;

export const zStepRunUpdateRerunResponse = zStepRun;

export const zStepRunUpdateCancelResponse = zStepRun;

export const zStepRunGetSchemaResponse = z.object({});

export const zWorkerListResponse = zWorkerList;

export const zWorkerGetResponse = zWorker;

export const zWorkerUpdateResponse = zWorker;

export const zWebhookListResponse = zWebhookWorkerListResponse;

export const zWebhookCreateResponse = zWebhookWorkerCreated;

export const zWebhookRequestsListResponse = zWebhookWorkerRequestListResponse;

export const zWorkflowRunGetInputResponse = z.object({});

export const zWorkflowGetByNameResponse = zWorkflow;

export const zWorkerConfigResponse = zWorkerConfig;

export const zMtmaiBloggenconfigResponse = zBlogGenConfig;

export const zMtmaiWorkerConfigResponse = z.object({
  token: z.string(),
  grpcHostPort: z.string(),
  searxng: z.string().optional(),
});

export const zBlogListResponse = zBlogList;

export const zBlogCreateResponse = zBlog;

export const zBlogGetResponse = zBlog;

export const zBlogUpdateResponse = zBlog;

export const zSiteListResponse = zSiteList;

export const zSiteCreateResponse = zSite;

export const zSiteGetResponse = zSite;

export const zSiteUpdateResponse = zSite;

export const zSiteGetByHostResponse = zSite;

export const zSiteHostListResponse = zSiteHostList;

export const zSiteHostCreateResponse = zSiteHost;

export const zSiteHostGetResponse = zSiteHost;

export const zSiteHostUpdateResponse = zSiteHost;

export const zPostListPublicResponse = zPostList;

export const zPostGetResponse = zPost;

export const zPostListResponse = zPostList;

export const zPostCreateResponse = zPost;

export const zArtifactListResponse = zArtifactList;

export const zArtifactCreateResponse = zArtifact;

export const zArtifactGetResponse = zArtifact;

export const zComsListResponse = zMtComponentList;

export const zComsUpsertResponse = zMtComponent;

export const zComsGetResponse = zMtComponent;

export const zGalleryListResponse = zGalleryList;

export const zGalleryCreateResponse = zGallery;

export const zGalleryGetResponse = zGallery;

export const zAgEventListResponse = zAgEventList;

export const zAgEventGetResponse = zAgEvent;

export const zModelListResponse = zModelList;

export const zModelCreateResponse = zModel;

export const zModelGetResponse = zModel;

export const zModelUpdateResponse = zModel;

export const zPromptListResponse = zPromptList;

export const zPromptGetResponse = z.string();

export const zAdminReleaseConnResponse = zCommonResult;

export const zFrontendGetConfigResponse = zFrontendConfig;

export const zFrontendGetSiderbarResponse = zSiderbarConfig;

export const zHfAccountGetResponse = zHfAccount;

export const zEnvListResponse = zEnvList;

export const zEnvUpdateResponse = zBlog;

export const zEnvGetResponse = zEnv;

export const zEndpointListResponse = zEndpointList;

export const zEndpointUpdateResponse = zEndpoint;

export const zPlatformListResponse = zPlatformList;

export const zPlatformCreateResponse = zPlatform;

export const zPlatformGetResponse = zPlatform;

export const zPlatformUpdateResponse = zPlatform;

export const zPlatformAccountListResponse = zPlatformAccountList;

export const zPlatformAccountCreateResponse = zPlatformAccount;

export const zPlatformAccountGetResponse = zPlatformAccount;

export const zPlatformAccountUpdateResponse = zPlatformAccount;

export const zBrowserListResponse = zBrowserList;

export const zBrowserCreateResponse = zBrowser;

export const zBrowserGetResponse = zBrowser;

export const zBrowserUpdateResponse = zBrowser;

export const zProxyListResponse = zProxyList;

export const zProxyCreateResponse = zProxy;

export const zProxyGetResponse = zProxy;

export const zProxyUpdateResponse = zProxy;

export const zAgStateListResponse = zAgStateList;

export const zAgStateUpsertResponse = zAgState;

export const zAgStateGetResponse = zAgState;

export const zChatMessagesListResponse = zChatMessageList;

export const zChatSessionListResponse = zChatSessionList;

export const zChatMessageUpsertResponse = zChatMessage;

export const zChatSessionGetResponse = zChatSession;

export const zUiAgentGetResponse = zUiAgentState;

export const zDispatcherListenResponse = zAssignedAction;
