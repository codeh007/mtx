// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zApiMeta = z.object({
  auth: z
    .object({
      schemes: z.array(z.string()).optional(),
    })
    .optional(),
  pylonAppId: z.string().optional(),
  posthog: z
    .object({
      apiKey: z.string().optional(),
      apiHost: z.string().optional(),
    })
    .optional(),
  allowSignup: z.boolean().optional(),
  allowInvites: z.boolean().optional(),
  allowCreateTenant: z.boolean().optional(),
  allowChangePassword: z.boolean().optional(),
});

export const zApiMetaAuth = z.object({
  schemes: z.array(z.string()).optional(),
});

export const zApiMetaPosthog = z.object({
  apiKey: z.string().optional(),
  apiHost: z.string().optional(),
});

export const zListApiMetaIntegration = z.array(
  z.object({
    name: z.string(),
    enabled: z.boolean(),
  }),
);

export const zApiMetaIntegration = z.object({
  name: z.string(),
  enabled: z.boolean(),
});

export const zApiErrors = z.object({
  errors: z.array(
    z.object({
      code: z.number().int().optional(),
      field: z.string().optional(),
      description: z.string(),
      docs_link: z.string().optional(),
    }),
  ),
});

export const zApiError = z.object({
  code: z.number().int().optional(),
  field: z.string().optional(),
  description: z.string(),
  docs_link: z.string().optional(),
});

export const zPaginationResponse = z.object({
  current_page: z.coerce.bigint().optional(),
  next_page: z.coerce.bigint().optional(),
  num_pages: z.coerce.bigint().optional(),
});

export const zApiResourceMeta = z.object({
  id: z.string().min(0).max(36),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
});

export const zUser = z.object({
  metadata: zApiResourceMeta,
  name: z.string().optional(),
  email: z.string().email(),
  emailVerified: z.boolean(),
  hasPassword: z.boolean().optional(),
  emailHash: z.string().optional(),
  userToken: z.string().optional(),
});

export const zUserTenantPublic = z.object({
  email: z.string().email(),
  name: z.string().optional(),
});

export const zUserLoginRequest = z.object({
  email: z.string().email(),
  password: z.string(),
});

export const zUserChangePasswordRequest = z.object({
  password: z.string(),
  newPassword: z.string(),
});

export const zUserRegisterRequest = z.object({
  name: z.string(),
  email: z.string().email(),
  password: z.string(),
});

export const zUserTenantMembershipsList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        user: zUserTenantPublic,
        role: z.enum(["OWNER", "ADMIN", "MEMBER"]),
        tenant: z
          .object({
            metadata: zApiResourceMeta,
            name: z.string(),
            slug: z.string(),
            analyticsOptOut: z.boolean().optional(),
            alertMemberEmails: z.boolean().optional(),
          })
          .optional(),
      }),
    )
    .optional(),
});

export const zTenant = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  slug: z.string(),
  analyticsOptOut: z.boolean().optional(),
  alertMemberEmails: z.boolean().optional(),
});

export const zTenantMember = z.object({
  metadata: zApiResourceMeta,
  user: zUserTenantPublic,
  role: z.enum(["OWNER", "ADMIN", "MEMBER"]),
  tenant: zTenant.optional(),
});

export const zTenantMemberList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantMember).optional(),
});

export const zTenantMemberRole = z.enum(["OWNER", "ADMIN", "MEMBER"]);

export const zTenantResource = z.enum(["WORKER", "EVENT", "WORKFLOW_RUN", "CRON", "SCHEDULE"]);

export const zTenantResourceLimit = z.object({
  metadata: zApiResourceMeta,
  resource: zTenantResource,
  limitValue: z.number().int(),
  alarmValue: z.number().int().optional(),
  value: z.number().int(),
  window: z.string().optional(),
  lastRefill: z.string().datetime().optional(),
});

export const zTenantResourcePolicy = z.object({
  limits: z.array(zTenantResourceLimit),
});

export const zCreateTenantInviteRequest = z.object({
  email: z.string(),
  role: zTenantMemberRole,
});

export const zUpdateTenantInviteRequest = z.object({
  role: zTenantMemberRole,
});

export const zTenantAlertingSettings = z.object({
  metadata: zApiResourceMeta,
  alertMemberEmails: z.boolean().optional(),
  enableWorkflowRunFailureAlerts: z.boolean().optional(),
  enableExpiringTokenAlerts: z.boolean().optional(),
  enableTenantResourceLimitAlerts: z.boolean().optional(),
  maxAlertingFrequency: z.string(),
  lastAlertedAt: z.string().datetime().optional(),
});

export const zTenantAlertEmailGroup = z.object({
  metadata: zApiResourceMeta,
  emails: z.array(z.string()),
});

export const zTenantAlertEmailGroupList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantAlertEmailGroup).optional(),
});

export const zCreateTenantAlertEmailGroupRequest = z.object({
  emails: z.array(z.string()),
});

export const zUpdateTenantAlertEmailGroupRequest = z.object({
  emails: z.array(z.string()),
});

export const zTenantInvite = z.object({
  metadata: zApiResourceMeta,
  email: z.string(),
  role: zTenantMemberRole,
  tenantId: z.string(),
  tenantName: z.string().optional(),
  expires: z.string().datetime(),
});

export const zTenantInviteList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantInvite).optional(),
});

export const zQueueMetrics = z.object({
  numQueued: z.number().int(),
  numRunning: z.number().int(),
  numPending: z.number().int(),
});

export const zTenantQueueMetrics = z.object({
  total: zQueueMetrics.optional(),
  workflow: z.object({}).optional(),
  queues: z.object({}).optional(),
});

export const zTenantStepRunQueueMetrics = z.object({
  queues: z.object({}).optional(),
});

export const zAcceptInviteRequest = z.object({
  invite: z.string().length(36),
});

export const zRejectInviteRequest = z.object({
  invite: z.string().length(36),
});

export const zTenantList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenant).optional(),
});

export const zCreateTenantRequest = z.object({
  name: z.string(),
  slug: z.string(),
});

export const zUpdateTenantRequest = z.object({
  name: z.string().optional(),
  analyticsOptOut: z.boolean().optional(),
  alertMemberEmails: z.boolean().optional(),
  enableWorkflowRunFailureAlerts: z.boolean().optional(),
  enableExpiringTokenAlerts: z.boolean().optional(),
  enableTenantResourceLimitAlerts: z.boolean().optional(),
  maxAlertingFrequency: z.string().optional(),
});

export const zTenantSettingContent = z.object({
  enabled_instagram_task: z.boolean().optional(),
});

export const zTenantSettingProperties = z.object({
  content: zTenantSettingContent.optional(),
});

export const zTenantSetting = z
  .object({
    metadata: zApiResourceMeta,
  })
  .merge(zTenantSettingProperties);

export const zTenantSettingList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTenantSetting).optional(),
});

export const zTenantSettingUpsert = zTenantSettingProperties;

export const zEvent = z.object({
  metadata: zApiResourceMeta,
  key: z.string(),
  tenant: zTenant.optional(),
  tenantId: z.string(),
  workflowRunSummary: z
    .object({
      pending: z.coerce.bigint().optional(),
      running: z.coerce.bigint().optional(),
      queued: z.coerce.bigint().optional(),
      succeeded: z.coerce.bigint().optional(),
      failed: z.coerce.bigint().optional(),
    })
    .optional(),
  additionalMetadata: z.object({}).optional(),
});

export const zEventData = z.object({
  data: z.string(),
});

export const zCreateEventRequest = z.object({
  key: z.string(),
  data: z.object({}),
  additionalMetadata: z.object({}).optional(),
});

export const zBulkCreateEventRequest = z.object({
  events: z.array(zCreateEventRequest),
});

export const zBulkCreateEventResponse = z.object({
  metadata: zApiResourceMeta,
  events: z.array(zEvent),
});

export const zEventWorkflowRunSummary = z.object({
  pending: z.coerce.bigint().optional(),
  running: z.coerce.bigint().optional(),
  queued: z.coerce.bigint().optional(),
  succeeded: z.coerce.bigint().optional(),
  failed: z.coerce.bigint().optional(),
});

export const zEventOrderByField = z.enum(["createdAt"]);

export const zEventOrderByDirection = z.enum(["asc", "desc"]);

export const zEventSearch = z.string();

export const zEventKeyList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(z.string()).optional(),
});

export const zEventKey = z.string();

export const zWorkflowId = z.string();

export const zEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zEvent).optional(),
});

export const zRateLimit = z.object({
  key: z.string(),
  tenantId: z.string(),
  limitValue: z.number().int(),
  value: z.number().int(),
  window: z.string(),
  lastRefill: z.string().datetime(),
});

export const zRateLimitList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zRateLimit).optional(),
});

export const zRateLimitOrderByField = z.enum(["key", "value", "limitValue"]);

export const zRateLimitOrderByDirection = z.enum(["asc", "desc"]);

export const zReplayEventRequest = z.object({
  eventIds: z.array(z.string().uuid().length(36)),
});

export const zCancelEventRequest = z.object({
  eventIds: z.array(z.string().uuid().length(36)),
});

export const zWorkflow: z.ZodTypeAny = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  isPaused: z.boolean().optional(),
  versions: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        version: z.string(),
        order: z.number().int(),
        workflowId: z.string(),
        workflow: z
          .lazy(() => {
            return zWorkflow;
          })
          .optional(),
      }),
    )
    .optional(),
  tags: z
    .array(
      z.object({
        name: z.string(),
        color: z.string(),
      }),
    )
    .optional(),
  jobs: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        versionId: z.string(),
        name: z.string(),
        description: z.string().optional(),
        steps: z.array(
          z.object({
            metadata: zApiResourceMeta,
            readableId: z.string(),
            tenantId: z.string(),
            jobId: z.string(),
            action: z.string(),
            timeout: z.string().optional(),
            children: z.array(z.string()).optional(),
            parents: z.array(z.string()).optional(),
          }),
        ),
        timeout: z.string().optional(),
      }),
    )
    .optional(),
});

export const zWorkflowUpdateRequest = z.object({
  isPaused: z.boolean().optional(),
});

export const zWorkflowConcurrency = z.object({
  maxRuns: z.number().int(),
  limitStrategy: z.enum(["CANCEL_IN_PROGRESS", "DROP_NEWEST", "QUEUE_NEWEST", "GROUP_ROUND_ROBIN"]),
  getConcurrencyGroup: z.string(),
});

export const zWorkflowVersionMeta = z.object({
  metadata: zApiResourceMeta,
  version: z.string(),
  order: z.number().int(),
  workflowId: z.string(),
  workflow: zWorkflow.optional(),
});

export const zWorkflowVersion = z.object({
  metadata: zApiResourceMeta,
  version: z.string(),
  order: z.number().int(),
  workflowId: z.string(),
  sticky: z.string().optional(),
  defaultPriority: z.number().int().optional(),
  workflow: zWorkflow.optional(),
  concurrency: zWorkflowConcurrency.optional(),
  triggers: z
    .object({
      metadata: zApiResourceMeta.optional(),
      workflow_version_id: z.string().optional(),
      tenant_id: z.string().optional(),
      events: z
        .array(
          z.object({
            parent_id: z.string().optional(),
            event_key: z.string().optional(),
          }),
        )
        .optional(),
      crons: z
        .array(
          z.object({
            parent_id: z.string().optional(),
            cron: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional(),
  scheduleTimeout: z.string().optional(),
  jobs: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        versionId: z.string(),
        name: z.string(),
        description: z.string().optional(),
        steps: z.array(
          z.object({
            metadata: zApiResourceMeta,
            readableId: z.string(),
            tenantId: z.string(),
            jobId: z.string(),
            action: z.string(),
            timeout: z.string().optional(),
            children: z.array(z.string()).optional(),
            parents: z.array(z.string()).optional(),
          }),
        ),
        timeout: z.string().optional(),
      }),
    )
    .optional(),
});

export const zWorkflowVersionDefinition = z.object({
  rawDefinition: z.string(),
});

export const zWorkflowTag = z.object({
  name: z.string(),
  color: z.string(),
});

export const zWorkflowList = z.object({
  metadata: zApiResourceMeta.optional(),
  rows: z.array(zWorkflow).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zWorkflowTriggers = z.object({
  metadata: zApiResourceMeta.optional(),
  workflow_version_id: z.string().optional(),
  tenant_id: z.string().optional(),
  events: z
    .array(
      z.object({
        parent_id: z.string().optional(),
        event_key: z.string().optional(),
      }),
    )
    .optional(),
  crons: z
    .array(
      z.object({
        parent_id: z.string().optional(),
        cron: z.string().optional(),
      }),
    )
    .optional(),
});

export const zWorkflowTriggerEventRef = z.object({
  parent_id: z.string().optional(),
  event_key: z.string().optional(),
});

export const zWorkflowTriggerCronRef = z.object({
  parent_id: z.string().optional(),
  cron: z.string().optional(),
});

export const zJob = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  versionId: z.string(),
  name: z.string(),
  description: z.string().optional(),
  steps: z.array(
    z.object({
      metadata: zApiResourceMeta,
      readableId: z.string(),
      tenantId: z.string(),
      jobId: z.string(),
      action: z.string(),
      timeout: z.string().optional(),
      children: z.array(z.string()).optional(),
      parents: z.array(z.string()).optional(),
    }),
  ),
  timeout: z.string().optional(),
});

export const zStep = z.object({
  metadata: zApiResourceMeta,
  readableId: z.string(),
  tenantId: z.string(),
  jobId: z.string(),
  action: z.string(),
  timeout: z.string().optional(),
  children: z.array(z.string()).optional(),
  parents: z.array(z.string()).optional(),
});

export const zWorkflowWorkersCount = z.object({
  freeSlotCount: z.number().int().optional(),
  maxSlotCount: z.number().int().optional(),
  workflowRunId: z.string().optional(),
  other: z
    .union([
      z.enum(["code_executor", "social_login"]),
      z.enum([
        "sys",
        "tenant",
        "assistant",
        "ag",
        "browser",
        "resource",
        "instagram",
        "social",
        "team",
        "adk",
      ]),
      z.enum([
        "user",
        "human",
        "instagram",
        "browser",
        "socioety",
        "code",
        "router",
        "research",
        "writer",
        "tenant",
        "closure",
        "response",
      ]),
      z.enum(["agent", "team", "termination"]),
      z.enum([
        "SelectorGroupChat",
        "SocialTeam",
        "AssistantAgent",
        "InstagramAgent",
        "UserProxyAgent",
        "CodeExecutorAgent",
        "SocietyOfMindAgent",
        "OpenAIChatCompletionClient",
        "TextMentionTermination",
        "HandoffTermination",
        "TimeoutTermination",
        "SourceMatchTermination",
        "FunctionCallTermination",
        "TokenUsageTermination",
        "MaxMessageTermination",
        "StopMessageTermination",
        "TextMessageTermination",
      ]),
      z.enum([
        "ThoughtEvent",
        "TextMessage",
        "PlatformAccountFlowInput",
        "ChatMessageInput",
        "SocialAddFollowersInput",
        "SocialLoginInput",
        "TenantInitInput",
        "AskUserFunctionCallInput",
        "StartNewChatInput",
      ]),
      z.enum([
        "InstagramAgentState",
        "SocialTeamManagerState",
        "TeamState",
        "RuntimeState",
        "AssistantAgentState",
        "RoundRobinManagerState",
        "SelectorManagerState",
        "SwarmManagerState",
        "MagenticOneOrchestratorState",
        "SocietyOfMindAgentState",
        "ChatAgentContainerState",
        "BaseGroupChatManagerState",
      ]),
      z.enum([
        "closure",
        "router",
        "user_proxy",
        "assistant",
        "social",
        "browser",
        "resource",
        "instagram",
      ]),
      z.object({
        type: z.string(),
        error: z.string(),
      }),
      z.object({
        app_name: z.string(),
        session_id: z.string(),
        component: z
          .object({
            provider: z.string().optional(),
            component_type: z.string().optional(),
            version: z.number().int().optional(),
            component_version: z.number().int().optional(),
            description: z.string().optional(),
            label: z.string().optional(),
            config: z.object({}).optional(),
          })
          .merge(
            z.object({
              component_type: z.enum(["team"]),
            }),
          ),
        task: z.union([
          z
            .object({
              type: z.literal("ThoughtEvent").optional(),
            })
            .merge(
              z
                .object({
                  type: z.string(),
                  source: z.string(),
                  models_usage: z
                    .object({
                      prompt_tokens: z.number().int(),
                      completion_tokens: z.number().int(),
                    })
                    .optional(),
                  metadata: z.object({}).optional(),
                })
                .merge(
                  z.object({
                    type: z.enum(["ThoughtEvent"]),
                    content: z.string(),
                  }),
                ),
            ),
          z
            .object({
              type: z.literal("TextMessage").optional(),
            })
            .merge(
              z
                .object({
                  type: z.string().optional(),
                  source: z.string(),
                  models_usage: z
                    .object({
                      prompt_tokens: z.number().int(),
                      completion_tokens: z.number().int(),
                    })
                    .optional(),
                  metadata: z.object({}).optional(),
                  content: z.string(),
                })
                .merge(
                  z.object({
                    type: z.enum(["TextMessage"]),
                    content: z.string(),
                  }),
                ),
            ),
          z
            .object({
              type: z.literal("PlatformAccountFlowInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["PlatformAccountFlowInput"]),
                platform_account_id: z.string().optional(),
              }),
            ),
          z
            .object({
              type: z.literal("SocialAddFollowersInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["SocialAddFollowersInput"]),
                platform_account_id: z.string().optional(),
                count_to_follow: z.number().default(1),
              }),
            ),
          z
            .object({
              type: z.literal("SocialLoginInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["SocialLoginInput"]),
                username: z.string(),
                password: z.string(),
                otp_key: z.string().optional(),
              }),
            ),
          z
            .object({
              type: z.literal("TenantInitInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["TenantInitInput"]),
                tenant_id: z.string(),
              }),
            ),
          z
            .object({
              type: z.literal("ChatMessageInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["ChatMessageInput"]),
                content: z.string(),
              }),
            ),
          z
            .object({
              type: z.literal("AskUserFunctionCallInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["AskUserFunctionCallInput"]),
                title: z.string(),
              }),
            ),
          z
            .object({
              type: z.literal("StartNewChatInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["StartNewChatInput"]),
                task: z.string(),
                config: z
                  .object({
                    participants: z.array(
                      z.union([
                        z
                          .object({
                            provider: z.literal("AssistantAgent").optional(),
                          })
                          .merge(
                            z
                              .object({
                                provider: z.string().optional(),
                                component_type: z.string().optional(),
                                version: z.number().int().optional(),
                                component_version: z.number().int().optional(),
                                description: z.string().optional(),
                                label: z.string().optional(),
                                config: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["AssistantAgent"]),
                                  component_type: z.enum(["agent"]),
                                  config: z
                                    .object({
                                      name: z.string(),
                                      description: z.string(),
                                      model_context: z.object({}).optional(),
                                      memory: z.object({}).optional(),
                                      model_client_stream: z.boolean().optional().default(false),
                                      system_message: z.string().optional(),
                                      model_client: z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["OpenAIChatCompletionClient"]),
                                            config: z
                                              .object({
                                                frequency_penalty: z.number().optional(),
                                                logit_bias: z.object({}).optional(),
                                                max_tokens: z.number().int().optional(),
                                                n: z.number().int().optional(),
                                                presence_penalty: z.number().optional(),
                                                response_format: z.string().optional(),
                                                seed: z.number().int().optional(),
                                                stop: z.array(z.string()).optional(),
                                                temperature: z.number().optional(),
                                                top_p: z.number().optional(),
                                                user: z.string().optional(),
                                                stream_options: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  model: z.string().optional(),
                                                  api_key: z.string().optional(),
                                                  timeout: z.number().optional(),
                                                  max_retries: z.number().int().optional(),
                                                  model_capabilities: z.object({}).optional(),
                                                  model_info: z.object({}).optional(),
                                                  add_name_prefixes: z.boolean().optional(),
                                                  default_headers: z.object({}).optional(),
                                                }),
                                              )
                                              .merge(
                                                z.object({
                                                  organization: z.string().optional(),
                                                  base_url: z.string().optional(),
                                                }),
                                              ),
                                          }),
                                        ),
                                      tools: z.array(z.object({})).default([]),
                                      handoffs: z.array(z.string()).optional().default([]),
                                      reflect_on_tool_use: z.boolean().default(false),
                                      tool_call_summary_format: z.string().default("{result}"),
                                      metadata: z.object({}).optional(),
                                    })
                                    .optional(),
                                }),
                              ),
                          ),
                        z
                          .object({
                            provider: z.literal("InstagramAgent").optional(),
                          })
                          .merge(
                            z
                              .object({
                                provider: z.string().optional(),
                                component_type: z.string().optional(),
                                version: z.number().int().optional(),
                                component_version: z.number().int().optional(),
                                description: z.string().optional(),
                                label: z.string().optional(),
                                config: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["InstagramAgent"]),
                                  config: z
                                    .object({
                                      name: z.string(),
                                      description: z.string(),
                                      model_context: z.object({}).optional(),
                                      memory: z.object({}).optional(),
                                      model_client_stream: z.boolean().optional().default(false),
                                      system_message: z.string().optional(),
                                      model_client: z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["OpenAIChatCompletionClient"]),
                                            config: z
                                              .object({
                                                frequency_penalty: z.number().optional(),
                                                logit_bias: z.object({}).optional(),
                                                max_tokens: z.number().int().optional(),
                                                n: z.number().int().optional(),
                                                presence_penalty: z.number().optional(),
                                                response_format: z.string().optional(),
                                                seed: z.number().int().optional(),
                                                stop: z.array(z.string()).optional(),
                                                temperature: z.number().optional(),
                                                top_p: z.number().optional(),
                                                user: z.string().optional(),
                                                stream_options: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  model: z.string().optional(),
                                                  api_key: z.string().optional(),
                                                  timeout: z.number().optional(),
                                                  max_retries: z.number().int().optional(),
                                                  model_capabilities: z.object({}).optional(),
                                                  model_info: z.object({}).optional(),
                                                  add_name_prefixes: z.boolean().optional(),
                                                  default_headers: z.object({}).optional(),
                                                }),
                                              )
                                              .merge(
                                                z.object({
                                                  organization: z.string().optional(),
                                                  base_url: z.string().optional(),
                                                }),
                                              ),
                                          }),
                                        ),
                                      tools: z.array(z.object({})).default([]),
                                      handoffs: z.array(z.string()).optional().default([]),
                                      reflect_on_tool_use: z.boolean().default(false),
                                      tool_call_summary_format: z.string().default("{result}"),
                                      metadata: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        credentials: z
                                          .object({
                                            username: z.string(),
                                            password: z.string(),
                                            otp_key: z.string().optional(),
                                          })
                                          .optional(),
                                        proxy_url: z.string().optional(),
                                      }),
                                    ),
                                }),
                              ),
                          ),
                        z
                          .object({
                            provider: z.literal("UserProxyAgent").optional(),
                          })
                          .merge(
                            z
                              .object({
                                provider: z.string().optional(),
                                component_type: z.string().optional(),
                                version: z.number().int().optional(),
                                component_version: z.number().int().optional(),
                                description: z.string().optional(),
                                label: z.string().optional(),
                                config: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["UserProxyAgent"]),
                                  config: z.object({
                                    name: z.string(),
                                    description: z.string().default("A human user"),
                                    input_func: z.string().optional().default("None"),
                                  }),
                                }),
                              ),
                          ),
                      ]),
                    ),
                    termination_condition: z.union([
                      z
                        .object({
                          provider: z.literal("TextMentionTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["TextMentionTermination"]),
                            config: z.object({
                              text: z.string(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("HandoffTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["HandoffTermination"]),
                            config: z.object({
                              target: z.string(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("TimeoutTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["TimeoutTermination"]),
                            config: z.object({
                              timeout_seconds: z.number().int(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("SourceMatchTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["SourceMatchTermination"]),
                            config: z.object({
                              sources: z.array(z.string()),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("FunctionCallTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["FunctionCallTermination"]),
                            config: z.object({
                              function_name: z.string(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("TokenUsageTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["TokenUsageTermination"]),
                            config: z.object({
                              max_total_token: z.number().int().optional(),
                              max_prompt_token: z.number().int().optional(),
                              max_completion_token: z.number().int().optional(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("MaxMessageTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["MaxMessageTermination"]),
                            config: z.object({
                              max_messages: z.number().int(),
                              include_agent_event: z.boolean().optional().default(false),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("StopMessageTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["StopMessageTermination"]),
                            config: z.object({
                              some_thing: z.string().optional(),
                            }),
                          }),
                        ),
                    ]),
                    max_turns: z.number().int().default(25),
                  })
                  .merge(
                    z.object({
                      selector_prompt: z.string().optional(),
                      allow_repeated_speaker: z.boolean().optional(),
                      max_selector_attempts: z.number().int().optional(),
                      selector_func: z.string().optional(),
                      proxy_url: z.string().optional(),
                      enable_swarm: z.boolean().optional().default(false),
                    }),
                  ),
              }),
            ),
        ]),
        init_state: z
          .union([
            z
              .object({
                type: z.literal("InstagramAgentState").optional(),
              })
              .merge(
                z
                  .object({
                    type: z.enum([
                      "InstagramAgentState",
                      "SocialTeamManagerState",
                      "TeamState",
                      "RuntimeState",
                      "AssistantAgentState",
                      "RoundRobinManagerState",
                      "SelectorManagerState",
                      "SwarmManagerState",
                      "MagenticOneOrchestratorState",
                      "SocietyOfMindAgentState",
                      "ChatAgentContainerState",
                      "BaseGroupChatManagerState",
                    ]),
                    version: z.string().optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["InstagramAgentState"]),
                      llm_context: z.unknown().optional(),
                      username: z.string().optional(),
                      password: z.string().optional(),
                      otp_key: z.string().optional(),
                      session_state: z.object({}).optional(),
                      is_wait_user_input: z.boolean().optional(),
                      ig_settings: z.object({}).optional(),
                      proxy_url: z.string().optional(),
                      platform_account_id: z.string().optional(),
                      credentials: z
                        .object({
                          username: z.string(),
                          password: z.string(),
                          otp_key: z.string().optional(),
                        })
                        .optional(),
                    }),
                  ),
              ),
            z
              .object({
                type: z.literal("SocialTeamManagerState").optional(),
              })
              .merge(
                z
                  .object({
                    type: z.enum([
                      "InstagramAgentState",
                      "SocialTeamManagerState",
                      "TeamState",
                      "RuntimeState",
                      "AssistantAgentState",
                      "RoundRobinManagerState",
                      "SelectorManagerState",
                      "SwarmManagerState",
                      "MagenticOneOrchestratorState",
                      "SocietyOfMindAgentState",
                      "ChatAgentContainerState",
                      "BaseGroupChatManagerState",
                    ]),
                    version: z.string().optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["SocialTeamManagerState"]),
                      next_speaker_index: z.number().int().optional().default(0),
                      previous_speaker: z.string().optional(),
                      current_speaker: z.string().optional(),
                      selector_prompt: z.string().optional(),
                      allow_repeated_speaker: z.boolean().optional(),
                      max_selector_attempts: z.number().int().optional(),
                      selector_func: z.string().optional(),
                      current_turn: z.number().int().optional().default(0),
                      message_thread: z
                        .array(
                          z.union([
                            z
                              .object({
                                type: z.literal("ThoughtEvent").optional(),
                              })
                              .merge(
                                z
                                  .object({
                                    type: z.string(),
                                    source: z.string(),
                                    models_usage: z
                                      .object({
                                        prompt_tokens: z.number().int(),
                                        completion_tokens: z.number().int(),
                                      })
                                      .optional(),
                                    metadata: z.object({}).optional(),
                                  })
                                  .merge(
                                    z.object({
                                      type: z.enum(["ThoughtEvent"]),
                                      content: z.string(),
                                    }),
                                  ),
                              ),
                            z
                              .object({
                                type: z.literal("TextMessage").optional(),
                              })
                              .merge(
                                z
                                  .object({
                                    type: z.string().optional(),
                                    source: z.string(),
                                    models_usage: z
                                      .object({
                                        prompt_tokens: z.number().int(),
                                        completion_tokens: z.number().int(),
                                      })
                                      .optional(),
                                    metadata: z.object({}).optional(),
                                    content: z.string(),
                                  })
                                  .merge(
                                    z.object({
                                      type: z.enum(["TextMessage"]),
                                      content: z.string(),
                                    }),
                                  ),
                              ),
                            z
                              .object({
                                type: z.literal("PlatformAccountFlowInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["PlatformAccountFlowInput"]),
                                  platform_account_id: z.string().optional(),
                                }),
                              ),
                            z
                              .object({
                                type: z.literal("SocialAddFollowersInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["SocialAddFollowersInput"]),
                                  platform_account_id: z.string().optional(),
                                  count_to_follow: z.number().default(1),
                                }),
                              ),
                            z
                              .object({
                                type: z.literal("SocialLoginInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["SocialLoginInput"]),
                                  username: z.string(),
                                  password: z.string(),
                                  otp_key: z.string().optional(),
                                }),
                              ),
                            z
                              .object({
                                type: z.literal("TenantInitInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["TenantInitInput"]),
                                  tenant_id: z.string(),
                                }),
                              ),
                            z
                              .object({
                                type: z.literal("ChatMessageInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["ChatMessageInput"]),
                                  content: z.string(),
                                }),
                              ),
                            z
                              .object({
                                type: z.literal("AskUserFunctionCallInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["AskUserFunctionCallInput"]),
                                  title: z.string(),
                                }),
                              ),
                            z
                              .object({
                                type: z.literal("StartNewChatInput").optional(),
                              })
                              .merge(
                                z.object({
                                  type: z.enum(["StartNewChatInput"]),
                                  task: z.string(),
                                  config: z
                                    .object({
                                      participants: z.array(
                                        z.union([
                                          z
                                            .object({
                                              provider: z.literal("AssistantAgent").optional(),
                                            })
                                            .merge(
                                              z
                                                .object({
                                                  provider: z.string().optional(),
                                                  component_type: z.string().optional(),
                                                  version: z.number().int().optional(),
                                                  component_version: z.number().int().optional(),
                                                  description: z.string().optional(),
                                                  label: z.string().optional(),
                                                  config: z.object({}).optional(),
                                                })
                                                .merge(
                                                  z.object({
                                                    provider: z.enum(["AssistantAgent"]),
                                                    component_type: z.enum(["agent"]),
                                                    config: z
                                                      .object({
                                                        name: z.string(),
                                                        description: z.string(),
                                                        model_context: z.object({}).optional(),
                                                        memory: z.object({}).optional(),
                                                        model_client_stream: z
                                                          .boolean()
                                                          .optional()
                                                          .default(false),
                                                        system_message: z.string().optional(),
                                                        model_client: z
                                                          .object({
                                                            provider: z.string().optional(),
                                                            component_type: z.string().optional(),
                                                            version: z.number().int().optional(),
                                                            component_version: z
                                                              .number()
                                                              .int()
                                                              .optional(),
                                                            description: z.string().optional(),
                                                            label: z.string().optional(),
                                                            config: z.object({}).optional(),
                                                          })
                                                          .merge(
                                                            z.object({
                                                              provider: z.enum([
                                                                "OpenAIChatCompletionClient",
                                                              ]),
                                                              config: z
                                                                .object({
                                                                  frequency_penalty: z
                                                                    .number()
                                                                    .optional(),
                                                                  logit_bias: z
                                                                    .object({})
                                                                    .optional(),
                                                                  max_tokens: z
                                                                    .number()
                                                                    .int()
                                                                    .optional(),
                                                                  n: z.number().int().optional(),
                                                                  presence_penalty: z
                                                                    .number()
                                                                    .optional(),
                                                                  response_format: z
                                                                    .string()
                                                                    .optional(),
                                                                  seed: z.number().int().optional(),
                                                                  stop: z
                                                                    .array(z.string())
                                                                    .optional(),
                                                                  temperature: z
                                                                    .number()
                                                                    .optional(),
                                                                  top_p: z.number().optional(),
                                                                  user: z.string().optional(),
                                                                  stream_options: z
                                                                    .object({})
                                                                    .optional(),
                                                                })
                                                                .merge(
                                                                  z.object({
                                                                    model: z.string().optional(),
                                                                    api_key: z.string().optional(),
                                                                    timeout: z.number().optional(),
                                                                    max_retries: z
                                                                      .number()
                                                                      .int()
                                                                      .optional(),
                                                                    model_capabilities: z
                                                                      .object({})
                                                                      .optional(),
                                                                    model_info: z
                                                                      .object({})
                                                                      .optional(),
                                                                    add_name_prefixes: z
                                                                      .boolean()
                                                                      .optional(),
                                                                    default_headers: z
                                                                      .object({})
                                                                      .optional(),
                                                                  }),
                                                                )
                                                                .merge(
                                                                  z.object({
                                                                    organization: z
                                                                      .string()
                                                                      .optional(),
                                                                    base_url: z.string().optional(),
                                                                  }),
                                                                ),
                                                            }),
                                                          ),
                                                        tools: z.array(z.object({})).default([]),
                                                        handoffs: z
                                                          .array(z.string())
                                                          .optional()
                                                          .default([]),
                                                        reflect_on_tool_use: z
                                                          .boolean()
                                                          .default(false),
                                                        tool_call_summary_format: z
                                                          .string()
                                                          .default("{result}"),
                                                        metadata: z.object({}).optional(),
                                                      })
                                                      .optional(),
                                                  }),
                                                ),
                                            ),
                                          z
                                            .object({
                                              provider: z.literal("InstagramAgent").optional(),
                                            })
                                            .merge(
                                              z
                                                .object({
                                                  provider: z.string().optional(),
                                                  component_type: z.string().optional(),
                                                  version: z.number().int().optional(),
                                                  component_version: z.number().int().optional(),
                                                  description: z.string().optional(),
                                                  label: z.string().optional(),
                                                  config: z.object({}).optional(),
                                                })
                                                .merge(
                                                  z.object({
                                                    provider: z.enum(["InstagramAgent"]),
                                                    config: z
                                                      .object({
                                                        name: z.string(),
                                                        description: z.string(),
                                                        model_context: z.object({}).optional(),
                                                        memory: z.object({}).optional(),
                                                        model_client_stream: z
                                                          .boolean()
                                                          .optional()
                                                          .default(false),
                                                        system_message: z.string().optional(),
                                                        model_client: z
                                                          .object({
                                                            provider: z.string().optional(),
                                                            component_type: z.string().optional(),
                                                            version: z.number().int().optional(),
                                                            component_version: z
                                                              .number()
                                                              .int()
                                                              .optional(),
                                                            description: z.string().optional(),
                                                            label: z.string().optional(),
                                                            config: z.object({}).optional(),
                                                          })
                                                          .merge(
                                                            z.object({
                                                              provider: z.enum([
                                                                "OpenAIChatCompletionClient",
                                                              ]),
                                                              config: z
                                                                .object({
                                                                  frequency_penalty: z
                                                                    .number()
                                                                    .optional(),
                                                                  logit_bias: z
                                                                    .object({})
                                                                    .optional(),
                                                                  max_tokens: z
                                                                    .number()
                                                                    .int()
                                                                    .optional(),
                                                                  n: z.number().int().optional(),
                                                                  presence_penalty: z
                                                                    .number()
                                                                    .optional(),
                                                                  response_format: z
                                                                    .string()
                                                                    .optional(),
                                                                  seed: z.number().int().optional(),
                                                                  stop: z
                                                                    .array(z.string())
                                                                    .optional(),
                                                                  temperature: z
                                                                    .number()
                                                                    .optional(),
                                                                  top_p: z.number().optional(),
                                                                  user: z.string().optional(),
                                                                  stream_options: z
                                                                    .object({})
                                                                    .optional(),
                                                                })
                                                                .merge(
                                                                  z.object({
                                                                    model: z.string().optional(),
                                                                    api_key: z.string().optional(),
                                                                    timeout: z.number().optional(),
                                                                    max_retries: z
                                                                      .number()
                                                                      .int()
                                                                      .optional(),
                                                                    model_capabilities: z
                                                                      .object({})
                                                                      .optional(),
                                                                    model_info: z
                                                                      .object({})
                                                                      .optional(),
                                                                    add_name_prefixes: z
                                                                      .boolean()
                                                                      .optional(),
                                                                    default_headers: z
                                                                      .object({})
                                                                      .optional(),
                                                                  }),
                                                                )
                                                                .merge(
                                                                  z.object({
                                                                    organization: z
                                                                      .string()
                                                                      .optional(),
                                                                    base_url: z.string().optional(),
                                                                  }),
                                                                ),
                                                            }),
                                                          ),
                                                        tools: z.array(z.object({})).default([]),
                                                        handoffs: z
                                                          .array(z.string())
                                                          .optional()
                                                          .default([]),
                                                        reflect_on_tool_use: z
                                                          .boolean()
                                                          .default(false),
                                                        tool_call_summary_format: z
                                                          .string()
                                                          .default("{result}"),
                                                        metadata: z.object({}).optional(),
                                                      })
                                                      .merge(
                                                        z.object({
                                                          credentials: z
                                                            .object({
                                                              username: z.string(),
                                                              password: z.string(),
                                                              otp_key: z.string().optional(),
                                                            })
                                                            .optional(),
                                                          proxy_url: z.string().optional(),
                                                        }),
                                                      ),
                                                  }),
                                                ),
                                            ),
                                          z
                                            .object({
                                              provider: z.literal("UserProxyAgent").optional(),
                                            })
                                            .merge(
                                              z
                                                .object({
                                                  provider: z.string().optional(),
                                                  component_type: z.string().optional(),
                                                  version: z.number().int().optional(),
                                                  component_version: z.number().int().optional(),
                                                  description: z.string().optional(),
                                                  label: z.string().optional(),
                                                  config: z.object({}).optional(),
                                                })
                                                .merge(
                                                  z.object({
                                                    provider: z.enum(["UserProxyAgent"]),
                                                    config: z.object({
                                                      name: z.string(),
                                                      description: z
                                                        .string()
                                                        .default("A human user"),
                                                      input_func: z
                                                        .string()
                                                        .optional()
                                                        .default("None"),
                                                    }),
                                                  }),
                                                ),
                                            ),
                                        ]),
                                      ),
                                      termination_condition: z.union([
                                        z
                                          .object({
                                            provider: z
                                              .literal("TextMentionTermination")
                                              .optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["TextMentionTermination"]),
                                              config: z.object({
                                                text: z.string(),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z.literal("HandoffTermination").optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["HandoffTermination"]),
                                              config: z.object({
                                                target: z.string(),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z.literal("TimeoutTermination").optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["TimeoutTermination"]),
                                              config: z.object({
                                                timeout_seconds: z.number().int(),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z
                                              .literal("SourceMatchTermination")
                                              .optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["SourceMatchTermination"]),
                                              config: z.object({
                                                sources: z.array(z.string()),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z
                                              .literal("FunctionCallTermination")
                                              .optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["FunctionCallTermination"]),
                                              config: z.object({
                                                function_name: z.string(),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z.literal("TokenUsageTermination").optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["TokenUsageTermination"]),
                                              config: z.object({
                                                max_total_token: z.number().int().optional(),
                                                max_prompt_token: z.number().int().optional(),
                                                max_completion_token: z.number().int().optional(),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z.literal("MaxMessageTermination").optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["MaxMessageTermination"]),
                                              config: z.object({
                                                max_messages: z.number().int(),
                                                include_agent_event: z
                                                  .boolean()
                                                  .optional()
                                                  .default(false),
                                              }),
                                            }),
                                          ),
                                        z
                                          .object({
                                            provider: z
                                              .literal("StopMessageTermination")
                                              .optional(),
                                          })
                                          .merge(
                                            z.object({
                                              provider: z.enum(["StopMessageTermination"]),
                                              config: z.object({
                                                some_thing: z.string().optional(),
                                              }),
                                            }),
                                          ),
                                      ]),
                                      max_turns: z.number().int().default(25),
                                    })
                                    .merge(
                                      z.object({
                                        selector_prompt: z.string().optional(),
                                        allow_repeated_speaker: z.boolean().optional(),
                                        max_selector_attempts: z.number().int().optional(),
                                        selector_func: z.string().optional(),
                                        proxy_url: z.string().optional(),
                                        enable_swarm: z.boolean().optional().default(false),
                                      }),
                                    ),
                                }),
                              ),
                          ]),
                        )
                        .optional(),
                    }),
                  ),
              ),
            z
              .object({
                type: z.literal("ChatAgentContainerState").optional(),
              })
              .merge(
                z
                  .object({
                    type: z.enum([
                      "InstagramAgentState",
                      "SocialTeamManagerState",
                      "TeamState",
                      "RuntimeState",
                      "AssistantAgentState",
                      "RoundRobinManagerState",
                      "SelectorManagerState",
                      "SwarmManagerState",
                      "MagenticOneOrchestratorState",
                      "SocietyOfMindAgentState",
                      "ChatAgentContainerState",
                      "BaseGroupChatManagerState",
                    ]),
                    version: z.string().optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["ChatAgentContainerState"]),
                      agent_state: z.object({}).optional(),
                      message_buffer: z.array(z.unknown()).optional(),
                    }),
                  ),
              ),
          ])
          .optional(),
        content: z
          .object({
            role: z.string().optional(),
            parts: z
              .array(
                z.object({
                  text: z.string().optional(),
                  video_metadata: z.object({}).optional(),
                  thought: z.boolean().optional(),
                  code_execution_result: z.object({}).optional(),
                  executable_code: z.string().optional(),
                  file_data: z.object({}).optional(),
                  function_call: z
                    .object({
                      id: z.string(),
                      name: z.string(),
                      args: z.object({}).optional(),
                    })
                    .optional(),
                  function_response: z
                    .object({
                      id: z.string().optional().default(""),
                      name: z.string(),
                      response: z.object({}),
                    })
                    .optional(),
                  inline_data: z.object({}).optional(),
                }),
              )
              .optional(),
          })
          .optional(),
      }),
      z.object({
        output: z.string(),
        success: z.boolean(),
      }),
      z.object({
        type: z.enum(["SocialLoginInput"]),
        username: z.string(),
        password: z.string(),
        otp_key: z.string().optional(),
      }),
      z.object({
        success: z.boolean(),
      }),
      z.union([
        z
          .object({
            type: z.literal("FlowLoginResult").optional(),
          })
          .merge(
            z.object({
              type: z.enum(["FlowLoginResult"]),
              success: z.boolean().optional(),
              source: z.string().optional(),
              account_id: z.string().optional(),
            }),
          ),
        z
          .object({
            type: z.literal("FlowHandoffResult").optional(),
          })
          .merge(
            z.object({
              type: z.enum(["FlowHandoffResult"]),
              success: z.boolean().optional(),
              name: z.string().optional(),
            }),
          ),
      ]),
      z
        .object({
          provider: z.string().optional(),
          component_type: z.string().optional(),
          version: z.number().int().optional(),
          component_version: z.number().int().optional(),
          description: z.string().optional(),
          label: z.string().optional(),
          config: z.object({}).optional(),
        })
        .merge(
          z.object({
            component_type: z.enum(["team"]),
          }),
        )
        .merge(
          z.object({
            provider: z.enum(["SocialTeam"]),
            component_type: z.enum(["team"]).optional(),
            config: z
              .object({
                participants: z.array(
                  z.union([
                    z
                      .object({
                        provider: z.literal("AssistantAgent").optional(),
                      })
                      .merge(
                        z
                          .object({
                            provider: z.string().optional(),
                            component_type: z.string().optional(),
                            version: z.number().int().optional(),
                            component_version: z.number().int().optional(),
                            description: z.string().optional(),
                            label: z.string().optional(),
                            config: z.object({}).optional(),
                          })
                          .merge(
                            z.object({
                              provider: z.enum(["AssistantAgent"]),
                              component_type: z.enum(["agent"]),
                              config: z
                                .object({
                                  name: z.string(),
                                  description: z.string(),
                                  model_context: z.object({}).optional(),
                                  memory: z.object({}).optional(),
                                  model_client_stream: z.boolean().optional().default(false),
                                  system_message: z.string().optional(),
                                  model_client: z
                                    .object({
                                      provider: z.string().optional(),
                                      component_type: z.string().optional(),
                                      version: z.number().int().optional(),
                                      component_version: z.number().int().optional(),
                                      description: z.string().optional(),
                                      label: z.string().optional(),
                                      config: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        provider: z.enum(["OpenAIChatCompletionClient"]),
                                        config: z
                                          .object({
                                            frequency_penalty: z.number().optional(),
                                            logit_bias: z.object({}).optional(),
                                            max_tokens: z.number().int().optional(),
                                            n: z.number().int().optional(),
                                            presence_penalty: z.number().optional(),
                                            response_format: z.string().optional(),
                                            seed: z.number().int().optional(),
                                            stop: z.array(z.string()).optional(),
                                            temperature: z.number().optional(),
                                            top_p: z.number().optional(),
                                            user: z.string().optional(),
                                            stream_options: z.object({}).optional(),
                                          })
                                          .merge(
                                            z.object({
                                              model: z.string().optional(),
                                              api_key: z.string().optional(),
                                              timeout: z.number().optional(),
                                              max_retries: z.number().int().optional(),
                                              model_capabilities: z.object({}).optional(),
                                              model_info: z.object({}).optional(),
                                              add_name_prefixes: z.boolean().optional(),
                                              default_headers: z.object({}).optional(),
                                            }),
                                          )
                                          .merge(
                                            z.object({
                                              organization: z.string().optional(),
                                              base_url: z.string().optional(),
                                            }),
                                          ),
                                      }),
                                    ),
                                  tools: z.array(z.object({})).default([]),
                                  handoffs: z.array(z.string()).optional().default([]),
                                  reflect_on_tool_use: z.boolean().default(false),
                                  tool_call_summary_format: z.string().default("{result}"),
                                  metadata: z.object({}).optional(),
                                })
                                .optional(),
                            }),
                          ),
                      ),
                    z
                      .object({
                        provider: z.literal("InstagramAgent").optional(),
                      })
                      .merge(
                        z
                          .object({
                            provider: z.string().optional(),
                            component_type: z.string().optional(),
                            version: z.number().int().optional(),
                            component_version: z.number().int().optional(),
                            description: z.string().optional(),
                            label: z.string().optional(),
                            config: z.object({}).optional(),
                          })
                          .merge(
                            z.object({
                              provider: z.enum(["InstagramAgent"]),
                              config: z
                                .object({
                                  name: z.string(),
                                  description: z.string(),
                                  model_context: z.object({}).optional(),
                                  memory: z.object({}).optional(),
                                  model_client_stream: z.boolean().optional().default(false),
                                  system_message: z.string().optional(),
                                  model_client: z
                                    .object({
                                      provider: z.string().optional(),
                                      component_type: z.string().optional(),
                                      version: z.number().int().optional(),
                                      component_version: z.number().int().optional(),
                                      description: z.string().optional(),
                                      label: z.string().optional(),
                                      config: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        provider: z.enum(["OpenAIChatCompletionClient"]),
                                        config: z
                                          .object({
                                            frequency_penalty: z.number().optional(),
                                            logit_bias: z.object({}).optional(),
                                            max_tokens: z.number().int().optional(),
                                            n: z.number().int().optional(),
                                            presence_penalty: z.number().optional(),
                                            response_format: z.string().optional(),
                                            seed: z.number().int().optional(),
                                            stop: z.array(z.string()).optional(),
                                            temperature: z.number().optional(),
                                            top_p: z.number().optional(),
                                            user: z.string().optional(),
                                            stream_options: z.object({}).optional(),
                                          })
                                          .merge(
                                            z.object({
                                              model: z.string().optional(),
                                              api_key: z.string().optional(),
                                              timeout: z.number().optional(),
                                              max_retries: z.number().int().optional(),
                                              model_capabilities: z.object({}).optional(),
                                              model_info: z.object({}).optional(),
                                              add_name_prefixes: z.boolean().optional(),
                                              default_headers: z.object({}).optional(),
                                            }),
                                          )
                                          .merge(
                                            z.object({
                                              organization: z.string().optional(),
                                              base_url: z.string().optional(),
                                            }),
                                          ),
                                      }),
                                    ),
                                  tools: z.array(z.object({})).default([]),
                                  handoffs: z.array(z.string()).optional().default([]),
                                  reflect_on_tool_use: z.boolean().default(false),
                                  tool_call_summary_format: z.string().default("{result}"),
                                  metadata: z.object({}).optional(),
                                })
                                .merge(
                                  z.object({
                                    credentials: z
                                      .object({
                                        username: z.string(),
                                        password: z.string(),
                                        otp_key: z.string().optional(),
                                      })
                                      .optional(),
                                    proxy_url: z.string().optional(),
                                  }),
                                ),
                            }),
                          ),
                      ),
                    z
                      .object({
                        provider: z.literal("UserProxyAgent").optional(),
                      })
                      .merge(
                        z
                          .object({
                            provider: z.string().optional(),
                            component_type: z.string().optional(),
                            version: z.number().int().optional(),
                            component_version: z.number().int().optional(),
                            description: z.string().optional(),
                            label: z.string().optional(),
                            config: z.object({}).optional(),
                          })
                          .merge(
                            z.object({
                              provider: z.enum(["UserProxyAgent"]),
                              config: z.object({
                                name: z.string(),
                                description: z.string().default("A human user"),
                                input_func: z.string().optional().default("None"),
                              }),
                            }),
                          ),
                      ),
                  ]),
                ),
                termination_condition: z.union([
                  z
                    .object({
                      provider: z.literal("TextMentionTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["TextMentionTermination"]),
                        config: z.object({
                          text: z.string(),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("HandoffTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["HandoffTermination"]),
                        config: z.object({
                          target: z.string(),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("TimeoutTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["TimeoutTermination"]),
                        config: z.object({
                          timeout_seconds: z.number().int(),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("SourceMatchTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["SourceMatchTermination"]),
                        config: z.object({
                          sources: z.array(z.string()),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("FunctionCallTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["FunctionCallTermination"]),
                        config: z.object({
                          function_name: z.string(),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("TokenUsageTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["TokenUsageTermination"]),
                        config: z.object({
                          max_total_token: z.number().int().optional(),
                          max_prompt_token: z.number().int().optional(),
                          max_completion_token: z.number().int().optional(),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("MaxMessageTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["MaxMessageTermination"]),
                        config: z.object({
                          max_messages: z.number().int(),
                          include_agent_event: z.boolean().optional().default(false),
                        }),
                      }),
                    ),
                  z
                    .object({
                      provider: z.literal("StopMessageTermination").optional(),
                    })
                    .merge(
                      z.object({
                        provider: z.enum(["StopMessageTermination"]),
                        config: z.object({
                          some_thing: z.string().optional(),
                        }),
                      }),
                    ),
                ]),
                max_turns: z.number().int().default(25),
              })
              .merge(
                z.object({
                  selector_prompt: z.string().optional(),
                  allow_repeated_speaker: z.boolean().optional(),
                  max_selector_attempts: z.number().int().optional(),
                  selector_func: z.string().optional(),
                  proxy_url: z.string().optional(),
                  enable_swarm: z.boolean().optional().default(false),
                }),
              ),
          }),
        ),
      z
        .object({
          type: z.enum([
            "InstagramAgentState",
            "SocialTeamManagerState",
            "TeamState",
            "RuntimeState",
            "AssistantAgentState",
            "RoundRobinManagerState",
            "SelectorManagerState",
            "SwarmManagerState",
            "MagenticOneOrchestratorState",
            "SocietyOfMindAgentState",
            "ChatAgentContainerState",
            "BaseGroupChatManagerState",
          ]),
          version: z.string().optional(),
        })
        .merge(
          z.object({
            type: z.string(),
            is_agent_run_local: z.boolean().optional(),
            counter: z.number().optional(),
            color: z.string().optional(),
            mainViewType: z.enum(["chat", "scheduler"]).optional(),
            chatHistoryIds: z.array(z.string()).optional(),
            currentChatHistoryIds: z.string().optional(),
            currentChatHistory: z.object({}).optional(),
            mcpServers: z
              .array(
                z.object({
                  url: z.string().optional(),
                  state: z
                    .enum(["authenticating", "connecting", "ready", "discovering", "failed"])
                    .optional(),
                  auth_url: z.string().optional(),
                }),
              )
              .optional(),
            mcpTools: z.array(z.object({})).optional(),
            mcpPrompts: z.array(z.object({})).optional(),
            mcpResources: z.array(z.unknown()).optional(),
          }),
        ),
      z.enum(["YES", "NO"]),
      z.union([
        z
          .object({
            type: z.literal("AgentScheduledEvent").optional(),
          })
          .merge(
            z.object({
              type: z.enum(["AgentScheduledEvent"]),
              data: z.array(
                z.object({
                  id: z.string(),
                  type: z.enum(["cron", "scheduled", "delayed"]),
                  trigger: z.string(),
                  nextTrigger: z.string(),
                  description: z.string(),
                }),
              ),
            }),
          ),
        z
          .object({
            type: z.literal("AgentRunScheduledEvent").optional(),
          })
          .merge(
            z.object({
              type: z.enum(["AgentRunScheduledEvent"]),
              data: z.array(
                z.object({
                  id: z.string(),
                  type: z.enum(["cron", "scheduled", "delayed"]),
                  trigger: z.string(),
                  nextTrigger: z.string(),
                  description: z.string(),
                }),
              ),
            }),
          ),
        z
          .object({
            type: z.literal("AgentErrorEvent").optional(),
          })
          .merge(
            z.object({
              type: z.string(),
              data: z.object({}),
            }),
          ),
        z
          .object({
            type: z.literal("AgentToastEvent").optional(),
          })
          .merge(
            z.object({
              type: z.string(),
              title: z.string(),
              message: z.string(),
            }),
          ),
        z
          .object({
            type: z.literal("AgentConnectedEvent").optional(),
          })
          .merge(
            z.object({
              type: z.string(),
            }),
          ),
      ]),
      z.object({
        eval_id: z.string(),
        session_id: z.string(),
        user_id: z.string(),
      }),
      z
        .object({
          grounding_metadata: z.object({}).optional(),
          partial: z.boolean().optional().default(false),
          turn_complete: z.boolean().optional().default(false),
          error_code: z.string().optional(),
          error_message: z.string().optional(),
          interrupted: z.boolean().optional(),
          custom_metadata: z.object({}).optional(),
          content: z
            .object({
              role: z.string().optional(),
              parts: z
                .array(
                  z.object({
                    text: z.string().optional(),
                    video_metadata: z.object({}).optional(),
                    thought: z.boolean().optional(),
                    code_execution_result: z.object({}).optional(),
                    executable_code: z.string().optional(),
                    file_data: z.object({}).optional(),
                    function_call: z
                      .object({
                        id: z.string(),
                        name: z.string(),
                        args: z.object({}).optional(),
                      })
                      .optional(),
                    function_response: z
                      .object({
                        id: z.string().optional().default(""),
                        name: z.string(),
                        response: z.object({}),
                      })
                      .optional(),
                    inline_data: z.object({}).optional(),
                  }),
                )
                .optional(),
            })
            .optional(),
        })
        .merge(
          z.object({
            invocation_id: z.string(),
            author: z.string(),
            actions: z.object({}),
            long_running_tool_ids: z.array(z.string()).optional(),
            branch: z.string().optional(),
            partial: z.boolean().optional(),
            timestamp: z.string().optional(),
            id: z.string().optional(),
          }),
        ),
      z.enum(["root", "instagram_agent", "assistant", "open_deep_research"]),
      z.object({
        role: z.string().optional(),
        parts: z
          .array(
            z.object({
              text: z.string().optional(),
              video_metadata: z.object({}).optional(),
              thought: z.boolean().optional(),
              code_execution_result: z.object({}).optional(),
              executable_code: z.string().optional(),
              file_data: z.object({}).optional(),
              function_call: z
                .object({
                  id: z.string(),
                  name: z.string(),
                  args: z.object({}).optional(),
                })
                .optional(),
              function_response: z
                .object({
                  id: z.string().optional().default(""),
                  name: z.string(),
                  response: z.object({}),
                })
                .optional(),
              inline_data: z.object({}).optional(),
            }),
          )
          .optional(),
      }),
      z.object({
        app_name: z.string(),
        user_id: z.string().optional(),
        session_id: z.string().optional(),
        init_state: z.object({}).optional(),
        new_message: z.object({
          role: z.string().optional(),
          parts: z
            .array(
              z.object({
                text: z.string().optional(),
                video_metadata: z.object({}).optional(),
                thought: z.boolean().optional(),
                code_execution_result: z.object({}).optional(),
                executable_code: z.string().optional(),
                file_data: z.object({}).optional(),
                function_call: z
                  .object({
                    id: z.string(),
                    name: z.string(),
                    args: z.object({}).optional(),
                  })
                  .optional(),
                function_response: z
                  .object({
                    id: z.string().optional().default(""),
                    name: z.string(),
                    response: z.object({}),
                  })
                  .optional(),
                inline_data: z.object({}).optional(),
              }),
            )
            .optional(),
        }),
        streaming: z.boolean().optional().default(false),
      }),
    ])
    .optional(),
});

export const zWorkflowRun: z.ZodTypeAny = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowVersionId: z.string(),
  workflowVersion: zWorkflowVersion.optional(),
  status: z.enum(["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "QUEUED", "BACKOFF"]),
  displayName: z.string().optional(),
  jobRuns: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        workflowRunId: z.string(),
        workflowRun: z
          .lazy(() => {
            return zWorkflowRun;
          })
          .optional(),
        jobId: z.string(),
        job: zJob.optional(),
        tickerId: z.string().optional(),
        stepRuns: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              tenantId: z.string(),
              jobRunId: z.string(),
              jobRun: z.object({}).optional(),
              stepId: z.string(),
              step: zStep.optional(),
              childWorkflowsCount: z.number().int().optional(),
              parents: z.array(z.string()).optional(),
              childWorkflowRuns: z.array(z.string()).optional(),
              workerId: z.string().optional(),
              input: z.string().optional(),
              output: z.string().optional(),
              status: z.enum([
                "PENDING",
                "PENDING_ASSIGNMENT",
                "ASSIGNED",
                "RUNNING",
                "SUCCEEDED",
                "FAILED",
                "CANCELLED",
                "CANCELLING",
                "BACKOFF",
              ]),
              requeueAfter: z.string().datetime().optional(),
              result: z.object({}).optional(),
              error: z.string().optional(),
              startedAt: z.string().datetime().optional(),
              startedAtEpoch: z.number().int().optional(),
              finishedAt: z.string().datetime().optional(),
              finishedAtEpoch: z.number().int().optional(),
              timeoutAt: z.string().datetime().optional(),
              timeoutAtEpoch: z.number().int().optional(),
              cancelledAt: z.string().datetime().optional(),
              cancelledAtEpoch: z.number().int().optional(),
              cancelledReason: z.string().optional(),
              cancelledError: z.string().optional(),
            }),
          )
          .optional(),
        status: z.enum(["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "BACKOFF"]),
        result: z.object({}).optional(),
        startedAt: z.string().datetime().optional(),
        finishedAt: z.string().datetime().optional(),
        timeoutAt: z.string().datetime().optional(),
        cancelledAt: z.string().datetime().optional(),
        cancelledReason: z.string().optional(),
        cancelledError: z.string().optional(),
      }),
    )
    .optional(),
  triggeredBy: z.object({
    metadata: zApiResourceMeta,
    parentWorkflowRunId: z.string().optional(),
    eventId: z.string().optional(),
    cronParentId: z.string().optional(),
    cronSchedule: z.string().optional(),
  }),
  input: z.object({}).optional(),
  error: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  duration: z.number().int().optional(),
  parentId: z.string().uuid().length(36).optional(),
  parentStepRunId: z.string().uuid().length(36).optional(),
  additionalMetadata: z.object({}).optional(),
});

export const zWorkflowRunShape = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowId: z.string().optional(),
  workflowVersionId: z.string(),
  workflowVersion: zWorkflowVersion.optional(),
  status: z.enum(["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "QUEUED", "BACKOFF"]),
  displayName: z.string().optional(),
  jobRuns: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        workflowRunId: z.string(),
        workflowRun: zWorkflowRun.optional(),
        jobId: z.string(),
        job: zJob.optional(),
        tickerId: z.string().optional(),
        stepRuns: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              tenantId: z.string(),
              jobRunId: z.string(),
              jobRun: z.object({}).optional(),
              stepId: z.string(),
              step: zStep.optional(),
              childWorkflowsCount: z.number().int().optional(),
              parents: z.array(z.string()).optional(),
              childWorkflowRuns: z.array(z.string()).optional(),
              workerId: z.string().optional(),
              input: z.string().optional(),
              output: z.string().optional(),
              status: z.enum([
                "PENDING",
                "PENDING_ASSIGNMENT",
                "ASSIGNED",
                "RUNNING",
                "SUCCEEDED",
                "FAILED",
                "CANCELLED",
                "CANCELLING",
                "BACKOFF",
              ]),
              requeueAfter: z.string().datetime().optional(),
              result: z.object({}).optional(),
              error: z.string().optional(),
              startedAt: z.string().datetime().optional(),
              startedAtEpoch: z.number().int().optional(),
              finishedAt: z.string().datetime().optional(),
              finishedAtEpoch: z.number().int().optional(),
              timeoutAt: z.string().datetime().optional(),
              timeoutAtEpoch: z.number().int().optional(),
              cancelledAt: z.string().datetime().optional(),
              cancelledAtEpoch: z.number().int().optional(),
              cancelledReason: z.string().optional(),
              cancelledError: z.string().optional(),
            }),
          )
          .optional(),
        status: z.enum(["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "BACKOFF"]),
        result: z.object({}).optional(),
        startedAt: z.string().datetime().optional(),
        finishedAt: z.string().datetime().optional(),
        timeoutAt: z.string().datetime().optional(),
        cancelledAt: z.string().datetime().optional(),
        cancelledReason: z.string().optional(),
        cancelledError: z.string().optional(),
      }),
    )
    .optional(),
  triggeredBy: z.object({
    metadata: zApiResourceMeta,
    parentWorkflowRunId: z.string().optional(),
    eventId: z.string().optional(),
    cronParentId: z.string().optional(),
    cronSchedule: z.string().optional(),
  }),
  input: z.object({}).optional(),
  error: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  duration: z.number().int().optional(),
  parentId: z.string().uuid().length(36).optional(),
  parentStepRunId: z.string().uuid().length(36).optional(),
  additionalMetadata: z.object({}).optional(),
});

export const zReplayWorkflowRunsRequest = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)),
});

export const zReplayWorkflowRunsResponse = z.object({
  workflowRuns: z.array(zWorkflowRun),
});

export const zWorkflowRunList = z.object({
  rows: z.array(zWorkflowRun).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zScheduledWorkflows = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowVersionId: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  triggerAt: z.string().datetime(),
  input: z.object({}).optional(),
  additionalMetadata: z.object({}).optional(),
  workflowRunCreatedAt: z.string().datetime().optional(),
  workflowRunName: z.string().optional(),
  workflowRunStatus: z
    .enum(["PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "QUEUED", "BACKOFF"])
    .optional(),
  workflowRunId: z.string().uuid().length(36).optional(),
  method: z.enum(["DEFAULT", "API"]),
});

export const zScheduledWorkflowsList = z.object({
  rows: z.array(zScheduledWorkflows).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zScheduledWorkflowsOrderByField = z.enum(["triggerAt", "createdAt"]);

export const zScheduledRunStatus = z.enum([
  "PENDING",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "QUEUED",
  "SCHEDULED",
]);

export const zCronWorkflows = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowVersionId: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  cron: z.string(),
  name: z.string().optional(),
  input: z.object({}).optional(),
  additionalMetadata: z.object({}).optional(),
  enabled: z.boolean(),
  method: z.enum(["DEFAULT", "API"]),
});

export const zCronWorkflowsList = z.object({
  rows: z.array(zCronWorkflows).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zCronWorkflowsOrderByField = z.enum(["name", "createdAt"]);

export const zWorkflowRunOrderByField = z.enum([
  "createdAt",
  "startedAt",
  "finishedAt",
  "duration",
]);

export const zWorkflowRunOrderByDirection = z.enum(["ASC", "DESC"]);

export const zWorkflowRunsMetrics = z.object({
  counts: z
    .object({
      PENDING: z.number().int().optional(),
      RUNNING: z.number().int().optional(),
      SUCCEEDED: z.number().int().optional(),
      FAILED: z.number().int().optional(),
      QUEUED: z.number().int().optional(),
      CANCELLED: z.number().int().optional(),
    })
    .optional(),
});

export const zWorkflowRunsMetricsCounts = z.object({
  PENDING: z.number().int().optional(),
  RUNNING: z.number().int().optional(),
  SUCCEEDED: z.number().int().optional(),
  FAILED: z.number().int().optional(),
  QUEUED: z.number().int().optional(),
  CANCELLED: z.number().int().optional(),
});

export const zWorkflowRunStatus = z.enum([
  "PENDING",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "QUEUED",
  "BACKOFF",
]);

export const zWorkflowRunStatusList = z.array(zWorkflowRunStatus);

export const zWorkflowKind = z.enum(["FUNCTION", "DURABLE", "DAG"]);

export const zWorkflowKindList = z.array(zWorkflowKind);

export const zWorkflowRunsCancelRequest = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)),
});

export const zJobRunStatus = z.enum([
  "PENDING",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "BACKOFF",
]);

export const zStepRunStatus = z.enum([
  "PENDING",
  "PENDING_ASSIGNMENT",
  "ASSIGNED",
  "RUNNING",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "CANCELLING",
  "BACKOFF",
]);

export const zJobRun = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  workflowRunId: z.string(),
  workflowRun: zWorkflowRun.optional(),
  jobId: z.string(),
  job: zJob.optional(),
  tickerId: z.string().optional(),
  stepRuns: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        tenantId: z.string(),
        jobRunId: z.string(),
        jobRun: z.object({}).optional(),
        stepId: z.string(),
        step: zStep.optional(),
        childWorkflowsCount: z.number().int().optional(),
        parents: z.array(z.string()).optional(),
        childWorkflowRuns: z.array(z.string()).optional(),
        workerId: z.string().optional(),
        input: z.string().optional(),
        output: z.string().optional(),
        status: zStepRunStatus,
        requeueAfter: z.string().datetime().optional(),
        result: z.object({}).optional(),
        error: z.string().optional(),
        startedAt: z.string().datetime().optional(),
        startedAtEpoch: z.number().int().optional(),
        finishedAt: z.string().datetime().optional(),
        finishedAtEpoch: z.number().int().optional(),
        timeoutAt: z.string().datetime().optional(),
        timeoutAtEpoch: z.number().int().optional(),
        cancelledAt: z.string().datetime().optional(),
        cancelledAtEpoch: z.number().int().optional(),
        cancelledReason: z.string().optional(),
        cancelledError: z.string().optional(),
      }),
    )
    .optional(),
  status: zJobRunStatus,
  result: z.object({}).optional(),
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  timeoutAt: z.string().datetime().optional(),
  cancelledAt: z.string().datetime().optional(),
  cancelledReason: z.string().optional(),
  cancelledError: z.string().optional(),
});

export const zWorkflowRunTriggeredBy = z.object({
  metadata: zApiResourceMeta,
  parentWorkflowRunId: z.string().optional(),
  eventId: z.string().optional(),
  cronParentId: z.string().optional(),
  cronSchedule: z.string().optional(),
});

export const zStepRun = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string(),
  jobRunId: z.string(),
  jobRun: z.object({}).optional(),
  stepId: z.string(),
  step: zStep.optional(),
  childWorkflowsCount: z.number().int().optional(),
  parents: z.array(z.string()).optional(),
  childWorkflowRuns: z.array(z.string()).optional(),
  workerId: z.string().optional(),
  input: z.string().optional(),
  output: z.string().optional(),
  status: zStepRunStatus,
  requeueAfter: z.string().datetime().optional(),
  result: z.object({}).optional(),
  error: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  startedAtEpoch: z.number().int().optional(),
  finishedAt: z.string().datetime().optional(),
  finishedAtEpoch: z.number().int().optional(),
  timeoutAt: z.string().datetime().optional(),
  timeoutAtEpoch: z.number().int().optional(),
  cancelledAt: z.string().datetime().optional(),
  cancelledAtEpoch: z.number().int().optional(),
  cancelledReason: z.string().optional(),
  cancelledError: z.string().optional(),
});

export const zStepRunEventReason = z.enum([
  "REQUEUED_NO_WORKER",
  "REQUEUED_RATE_LIMIT",
  "SCHEDULING_TIMED_OUT",
  "ASSIGNED",
  "STARTED",
  "ACKNOWLEDGED",
  "FINISHED",
  "FAILED",
  "RETRYING",
  "CANCELLED",
  "TIMEOUT_REFRESHED",
  "REASSIGNED",
  "TIMED_OUT",
  "SLOT_RELEASED",
  "RETRIED_BY_USER",
  "WORKFLOW_RUN_GROUP_KEY_SUCCEEDED",
  "WORKFLOW_RUN_GROUP_KEY_FAILED",
]);

export const zStepRunEventSeverity = z.enum(["INFO", "WARNING", "CRITICAL"]);

export const zStepRunEvent = z.object({
  id: z.number().int(),
  timeFirstSeen: z.string().datetime(),
  timeLastSeen: z.string().datetime(),
  stepRunId: z.string().optional(),
  workflowRunId: z.string().optional(),
  reason: zStepRunEventReason,
  severity: zStepRunEventSeverity,
  message: z.string(),
  count: z.number().int(),
  data: z.object({}).optional(),
});

export const zStepRunEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zStepRunEvent).optional(),
});

export const zStepRunArchive = z.object({
  stepRunId: z.string(),
  order: z.number().int(),
  input: z.string().optional(),
  output: z.string().optional(),
  startedAt: z.string().datetime().optional(),
  error: z.string().optional(),
  retryCount: z.number().int(),
  createdAt: z.string().datetime(),
  startedAtEpoch: z.number().int().optional(),
  finishedAt: z.string().datetime().optional(),
  finishedAtEpoch: z.number().int().optional(),
  timeoutAt: z.string().datetime().optional(),
  timeoutAtEpoch: z.number().int().optional(),
  cancelledAt: z.string().datetime().optional(),
  cancelledAtEpoch: z.number().int().optional(),
  cancelledReason: z.string().optional(),
  cancelledError: z.string().optional(),
});

export const zStepRunArchiveList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zStepRunArchive).optional(),
});

export const zWorkerRuntimeInfo = z.object({
  sdkVersion: z.string().optional(),
  language: z.enum(["GOLANG", "PYTHON", "TYPESCRIPT"]).optional(),
  languageVersion: z.string().optional(),
  os: z.string().optional(),
  runtimeExtra: z.string().optional(),
});

export const zWorkerRuntimeSdks = z.enum(["GOLANG", "PYTHON", "TYPESCRIPT"]);

export const zWorkerList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        name: z.string(),
        type: z.enum(["SELFHOSTED", "MANAGED", "WEBHOOK"]),
        lastHeartbeatAt: z.string().datetime().optional(),
        lastListenerEstablished: z.string().datetime().optional(),
        actions: z.array(z.string()).optional(),
        slots: z
          .array(
            z.object({
              stepRunId: z.string().uuid(),
              actionId: z.string(),
              startedAt: z.string().datetime().optional(),
              timeoutAt: z.string().datetime().optional(),
              workflowRunId: z.string().uuid(),
              status: zStepRunStatus,
            }),
          )
          .optional(),
        recentStepRuns: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              actionId: z.string(),
              status: zStepRunStatus,
              startedAt: z.string().datetime().optional(),
              finishedAt: z.string().datetime().optional(),
              cancelledAt: z.string().datetime().optional(),
              workflowRunId: z.string().uuid(),
            }),
          )
          .optional(),
        status: z.enum(["ACTIVE", "INACTIVE", "PAUSED"]).optional(),
        maxRuns: z.number().int().optional(),
        availableRuns: z.number().int().optional(),
        dispatcherId: z.string().uuid().length(36).optional(),
        labels: z
          .array(
            z.object({
              metadata: zApiResourceMeta,
              key: z.string(),
              value: z.string().optional(),
            }),
          )
          .optional(),
        webhookUrl: z.string().optional(),
        webhookId: z.string().uuid().optional(),
        runtimeInfo: zWorkerRuntimeInfo.optional(),
      }),
    )
    .optional(),
});

export const zSemaphoreSlots = z.object({
  stepRunId: z.string().uuid(),
  actionId: z.string(),
  startedAt: z.string().datetime().optional(),
  timeoutAt: z.string().datetime().optional(),
  workflowRunId: z.string().uuid(),
  status: zStepRunStatus,
});

export const zRecentStepRuns = z.object({
  metadata: zApiResourceMeta,
  actionId: z.string(),
  status: zStepRunStatus,
  startedAt: z.string().datetime().optional(),
  finishedAt: z.string().datetime().optional(),
  cancelledAt: z.string().datetime().optional(),
  workflowRunId: z.string().uuid(),
});

export const zWorker = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  type: z.enum(["SELFHOSTED", "MANAGED", "WEBHOOK"]),
  lastHeartbeatAt: z.string().datetime().optional(),
  lastListenerEstablished: z.string().datetime().optional(),
  actions: z.array(z.string()).optional(),
  slots: z.array(zSemaphoreSlots).optional(),
  recentStepRuns: z.array(zRecentStepRuns).optional(),
  status: z.enum(["ACTIVE", "INACTIVE", "PAUSED"]).optional(),
  maxRuns: z.number().int().optional(),
  availableRuns: z.number().int().optional(),
  dispatcherId: z.string().uuid().length(36).optional(),
  labels: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        key: z.string(),
        value: z.string().optional(),
      }),
    )
    .optional(),
  webhookUrl: z.string().optional(),
  webhookId: z.string().uuid().optional(),
  runtimeInfo: zWorkerRuntimeInfo.optional(),
});

export const zWorkerLabel = z.object({
  metadata: zApiResourceMeta,
  key: z.string(),
  value: z.string().optional(),
});

export const zUpdateWorkerRequest = z.object({
  isPaused: z.boolean().optional(),
});

export const zApiToken = z.object({
  metadata: zApiResourceMeta,
  name: z.string().max(255),
  expiresAt: z.string().datetime(),
});

export const zCreateApiTokenRequest = z.object({
  name: z.string().max(255),
  expiresIn: z.string().optional(),
});

export const zCreateApiTokenResponse = z.object({
  token: z.string(),
});

export const zListApiTokensResponse = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zApiToken).optional(),
});

export const zRerunStepRunRequest = z.object({
  input: z.object({}),
});

export const zTriggerWorkflowRunRequest = z.object({
  input: z.object({}),
  additionalMetadata: z.object({}).optional(),
});

export const zCreatePullRequestFromStepRun = z.object({
  branchName: z.string(),
});

export const zGetStepRunDiffResponse = z.object({
  diffs: z.array(
    z.object({
      key: z.string(),
      original: z.string(),
      modified: z.string(),
    }),
  ),
});

export const zStepRunDiff = z.object({
  key: z.string(),
  original: z.string(),
  modified: z.string(),
});

export const zListPullRequestsResponse = z.object({
  pullRequests: z.array(
    z.object({
      repositoryOwner: z.string(),
      repositoryName: z.string(),
      pullRequestID: z.number().int(),
      pullRequestTitle: z.string(),
      pullRequestNumber: z.number().int(),
      pullRequestHeadBranch: z.string(),
      pullRequestBaseBranch: z.string(),
      pullRequestState: z.enum(["open", "closed"]),
    }),
  ),
});

export const zPullRequest = z.object({
  repositoryOwner: z.string(),
  repositoryName: z.string(),
  pullRequestID: z.number().int(),
  pullRequestTitle: z.string(),
  pullRequestNumber: z.number().int(),
  pullRequestHeadBranch: z.string(),
  pullRequestBaseBranch: z.string(),
  pullRequestState: z.enum(["open", "closed"]),
});

export const zPullRequestState = z.enum(["open", "closed"]);

export const zLogLine = z.object({
  createdAt: z.string().datetime(),
  message: z.string(),
  metadata: z.object({}),
});

export const zLogLineLevel = z.enum(["DEBUG", "INFO", "WARN", "ERROR"]);

export const zLogLineList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zLogLine).optional(),
});

export const zLogLineOrderByField = z.enum(["createdAt"]);

export const zLogLineOrderByDirection = z.enum(["asc", "desc"]);

export const zLogLineSearch = z.string();

export const zLogLineLevelField = z.array(zLogLineLevel);

export const zSnsIntegration = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string().uuid(),
  topicArn: z.string(),
  ingestUrl: z.string().optional(),
});

export const zListSnsIntegrations = z.object({
  pagination: zPaginationResponse,
  rows: z.array(zSnsIntegration),
});

export const zSlackWebhook = z.object({
  metadata: zApiResourceMeta,
  tenantId: z.string().uuid(),
  teamName: z.string(),
  teamId: z.string(),
  channelName: z.string(),
  channelId: z.string(),
});

export const zListSlackWebhooks = z.object({
  pagination: zPaginationResponse,
  rows: z.array(zSlackWebhook),
});

export const zCreateSnsIntegrationRequest = z.object({
  topicArn: z.string(),
});

export const zWorkflowMetrics = z.object({
  groupKeyRunsCount: z.number().int().optional(),
  groupKeyCount: z.number().int().optional(),
});

export const zWebhookWorker = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
});

export const zWebhookWorkerRequestMethod = z.enum(["GET", "POST", "PUT"]);

export const zWebhookWorkerRequest = z.object({
  created_at: z.string().datetime(),
  method: zWebhookWorkerRequestMethod,
  statusCode: z.number().int(),
});

export const zWebhookWorkerRequestListResponse = z.object({
  requests: z.array(zWebhookWorkerRequest).optional(),
});

export const zWebhookWorkerCreated = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
  secret: z.string(),
});

export const zWebhookWorkerCreateRequest = z.object({
  name: z.string(),
  url: z.string(),
  secret: z.string().min(32).optional(),
});

export const zWebhookWorkerCreateResponse = z.object({
  worker: zWebhookWorkerCreated.optional(),
});

export const zWebhookWorkerListResponse = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zWebhookWorker).optional(),
});

export const zApiResourceMetaProperties = z.object({
  metadata: zApiResourceMeta,
});

export const zCommonResult = z.object({
  Success: z.boolean(),
  Message: z.string(),
});

export const zTenantParameter = z.string().uuid().length(36);

export const zHttpCommonStatusResponse = z.unknown();

export const zBadRequest = z.unknown();

export const zForbidden = z.unknown();

export const zNotFound = z.unknown();

export const zChatMessageProperties = z.object({
  type: z.enum([
    "AssistantMessage",
    "SystemMessage",
    "UserMessage",
    "FunctionExecutionResultMessage",
  ]),
  content: z.string(),
  llm_message: z.union([
    z
      .object({
        type: z.literal("UserMessage").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["UserMessage"]),
          content: z.string(),
          source: z.string().optional(),
        }),
      ),
    z
      .object({
        type: z.literal("SystemMessage").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["SystemMessage"]),
          content: z.string(),
        }),
      ),
    z
      .object({
        type: z.literal("AssistantMessage").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["AssistantMessage"]),
          content: z.union([
            z.string(),
            z.array(
              z.object({
                id: z.string(),
                arguments: z.string(),
                name: z.string(),
              }),
            ),
          ]),
          source: z.string().optional(),
          thought: z.string().optional(),
        }),
      ),
    z
      .object({
        type: z.literal("FunctionExecutionResultMessage").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["FunctionExecutionResultMessage"]),
          content: z.array(
            z.object({
              content: z.string(),
              name: z.string(),
              call_id: z.string(),
              is_error: z.boolean().optional(),
            }),
          ),
        }),
      ),
  ]),
  content_type: z.enum(["text", "function_call"]),
  source: z.string(),
  topic: z.string(),
  thread_id: z.string(),
  config: z
    .object({
      message_type: z.string().optional(),
      source: z.string().optional(),
    })
    .optional(),
  model_usage: z
    .object({
      model: z.string().optional(),
      prompt_tokens: z.number().int().optional(),
      completion_tokens: z.number().int().optional(),
    })
    .optional(),
});

export const zChatMessage = zApiResourceMetaProperties.merge(zChatMessageProperties);

export const zModelUsage = z.object({
  model: z.string().optional(),
  prompt_tokens: z.number().int().optional(),
  completion_tokens: z.number().int().optional(),
});

export const zChatMessageList = z.object({
  metadata: zApiResourceMeta.optional(),
  rows: z.array(zChatMessage).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zChatSessionProperties = z.object({
  metadata: zApiResourceMeta.optional(),
  title: z.string(),
  name: z.string(),
  state: z.object({}),
  state_type: z.string(),
});

export const zChatUpsert = zChatSessionProperties;

export const zChatHistoryList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zChatMessage).optional(),
});

export const zChatSession = zApiResourceMetaProperties.merge(zChatSessionProperties);

export const zChatSessionList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zChatSession).optional(),
});

export const zChatMessageUpsert = zChatMessageProperties;

export const zBrowserTask = z.object({
  content: z.string(),
});

export const zBrowserOpenTask = z.object({
  url: z.string(),
});

export const zBrowserConfig = z.object({
  persistent: z.boolean().optional(),
});

export const zWorkerConfig = z.object({
  workerToken: z.string().optional(),
  token: z.string(),
  grpcHostPort: z.string(),
  searxng: z.string().optional(),
});

export const zCreateBlogPostRequest = z.object({
  blogId: z.string().uuid().length(36),
  authorId: z.string().uuid().length(36).optional(),
  title: z.string().min(3).max(200),
  content: z.string().min(50).max(10240),
});

export const zBlogList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        title: z.string(),
        description: z.string().optional(),
        tenant: zTenant.optional(),
        config: z
          .object({
            dayPublishCount: z.number().int().optional(),
            description: z.string().optional(),
          })
          .optional(),
        status: z.string().optional(),
        enabled: z.boolean().optional(),
        slug: z.string().optional(),
      }),
    )
    .optional(),
});

export const zBlog = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  description: z.string().optional(),
  tenant: zTenant.optional(),
  config: z
    .object({
      dayPublishCount: z.number().int().optional(),
      description: z.string().optional(),
    })
    .optional(),
  status: z.string().optional(),
  enabled: z.boolean().optional(),
  slug: z.string().optional(),
});

export const zCreateBlogRequest = z.object({
  title: z.string().optional(),
});

export const zUpdateBlogRequest = z.object({
  title: z.string().min(3).max(200),
  description: z.string().max(1024).optional(),
});

export const zBlogPost = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  content: z.string(),
  state: z
    .object({
      title: z.string().optional(),
      topic: z.string().optional(),
      outlines: z
        .array(
          z.object({
            title: z.string().optional(),
            content: z.string().optional(),
          }),
        )
        .optional(),
    })
    .optional(),
});

export const zBlogPostList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zBlogPost).optional(),
});

export const zUpdatePostRequest = z.object({
  blogId: z.string().uuid().length(36),
  authorId: z.string().uuid().length(36).optional(),
  title: z.string().min(3).max(200),
  content: z.string().min(50).max(10240),
});

export const zArtifactList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z
    .array(
      z.object({
        metadata: zApiResourceMeta,
        title: z.string(),
        state: z.object({}),
        nextId: z.string().optional(),
        prevId: z.string().optional(),
      }),
    )
    .optional(),
});

export const zArtifact = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  state: z.object({}),
  nextId: z.string().optional(),
  prevId: z.string().optional(),
});

export const zAgStateProperties = z.object({
  type: z.enum([
    "InstagramAgentState",
    "SocialTeamManagerState",
    "TeamState",
    "RuntimeState",
    "AssistantAgentState",
    "RoundRobinManagerState",
    "SelectorManagerState",
    "SwarmManagerState",
    "MagenticOneOrchestratorState",
    "SocietyOfMindAgentState",
    "ChatAgentContainerState",
    "BaseGroupChatManagerState",
  ]),
  chatId: z.string().optional(),
  topic: z.string(),
  source: z.string(),
  state: z.union([
    z
      .object({
        type: z.literal("InstagramAgentState").optional(),
      })
      .merge(
        z
          .object({
            type: z.enum([
              "InstagramAgentState",
              "SocialTeamManagerState",
              "TeamState",
              "RuntimeState",
              "AssistantAgentState",
              "RoundRobinManagerState",
              "SelectorManagerState",
              "SwarmManagerState",
              "MagenticOneOrchestratorState",
              "SocietyOfMindAgentState",
              "ChatAgentContainerState",
              "BaseGroupChatManagerState",
            ]),
            version: z.string().optional(),
          })
          .merge(
            z.object({
              type: z.enum(["InstagramAgentState"]),
              llm_context: z.unknown().optional(),
              username: z.string().optional(),
              password: z.string().optional(),
              otp_key: z.string().optional(),
              session_state: z.object({}).optional(),
              is_wait_user_input: z.boolean().optional(),
              ig_settings: z.object({}).optional(),
              proxy_url: z.string().optional(),
              platform_account_id: z.string().optional(),
              credentials: z
                .object({
                  username: z.string(),
                  password: z.string(),
                  otp_key: z.string().optional(),
                })
                .optional(),
            }),
          ),
      ),
    z
      .object({
        type: z.literal("SocialTeamManagerState").optional(),
      })
      .merge(
        z
          .object({
            type: z.enum([
              "InstagramAgentState",
              "SocialTeamManagerState",
              "TeamState",
              "RuntimeState",
              "AssistantAgentState",
              "RoundRobinManagerState",
              "SelectorManagerState",
              "SwarmManagerState",
              "MagenticOneOrchestratorState",
              "SocietyOfMindAgentState",
              "ChatAgentContainerState",
              "BaseGroupChatManagerState",
            ]),
            version: z.string().optional(),
          })
          .merge(
            z.object({
              type: z.enum(["SocialTeamManagerState"]),
              next_speaker_index: z.number().int().optional().default(0),
              previous_speaker: z.string().optional(),
              current_speaker: z.string().optional(),
              selector_prompt: z.string().optional(),
              allow_repeated_speaker: z.boolean().optional(),
              max_selector_attempts: z.number().int().optional(),
              selector_func: z.string().optional(),
              current_turn: z.number().int().optional().default(0),
              message_thread: z
                .array(
                  z.union([
                    z
                      .object({
                        type: z.literal("ThoughtEvent").optional(),
                      })
                      .merge(
                        z
                          .object({
                            type: z.string(),
                            source: z.string(),
                            models_usage: z
                              .object({
                                prompt_tokens: z.number().int(),
                                completion_tokens: z.number().int(),
                              })
                              .optional(),
                            metadata: z.object({}).optional(),
                          })
                          .merge(
                            z.object({
                              type: z.enum(["ThoughtEvent"]),
                              content: z.string(),
                            }),
                          ),
                      ),
                    z
                      .object({
                        type: z.literal("TextMessage").optional(),
                      })
                      .merge(
                        z
                          .object({
                            type: z.string().optional(),
                            source: z.string(),
                            models_usage: z
                              .object({
                                prompt_tokens: z.number().int(),
                                completion_tokens: z.number().int(),
                              })
                              .optional(),
                            metadata: z.object({}).optional(),
                            content: z.string(),
                          })
                          .merge(
                            z.object({
                              type: z.enum(["TextMessage"]),
                              content: z.string(),
                            }),
                          ),
                      ),
                    z
                      .object({
                        type: z.literal("PlatformAccountFlowInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["PlatformAccountFlowInput"]),
                          platform_account_id: z.string().optional(),
                        }),
                      ),
                    z
                      .object({
                        type: z.literal("SocialAddFollowersInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["SocialAddFollowersInput"]),
                          platform_account_id: z.string().optional(),
                          count_to_follow: z.number().default(1),
                        }),
                      ),
                    z
                      .object({
                        type: z.literal("SocialLoginInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["SocialLoginInput"]),
                          username: z.string(),
                          password: z.string(),
                          otp_key: z.string().optional(),
                        }),
                      ),
                    z
                      .object({
                        type: z.literal("TenantInitInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["TenantInitInput"]),
                          tenant_id: z.string(),
                        }),
                      ),
                    z
                      .object({
                        type: z.literal("ChatMessageInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["ChatMessageInput"]),
                          content: z.string(),
                        }),
                      ),
                    z
                      .object({
                        type: z.literal("AskUserFunctionCallInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["AskUserFunctionCallInput"]),
                          title: z.string(),
                        }),
                      ),
                    z
                      .object({
                        type: z.literal("StartNewChatInput").optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["StartNewChatInput"]),
                          task: z.string(),
                          config: z
                            .object({
                              participants: z.array(
                                z.union([
                                  z
                                    .object({
                                      provider: z.literal("AssistantAgent").optional(),
                                    })
                                    .merge(
                                      z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["AssistantAgent"]),
                                            component_type: z.enum(["agent"]),
                                            config: z
                                              .object({
                                                name: z.string(),
                                                description: z.string(),
                                                model_context: z.object({}).optional(),
                                                memory: z.object({}).optional(),
                                                model_client_stream: z
                                                  .boolean()
                                                  .optional()
                                                  .default(false),
                                                system_message: z.string().optional(),
                                                model_client: z
                                                  .object({
                                                    provider: z.string().optional(),
                                                    component_type: z.string().optional(),
                                                    version: z.number().int().optional(),
                                                    component_version: z.number().int().optional(),
                                                    description: z.string().optional(),
                                                    label: z.string().optional(),
                                                    config: z.object({}).optional(),
                                                  })
                                                  .merge(
                                                    z.object({
                                                      provider: z.enum([
                                                        "OpenAIChatCompletionClient",
                                                      ]),
                                                      config: z
                                                        .object({
                                                          frequency_penalty: z.number().optional(),
                                                          logit_bias: z.object({}).optional(),
                                                          max_tokens: z.number().int().optional(),
                                                          n: z.number().int().optional(),
                                                          presence_penalty: z.number().optional(),
                                                          response_format: z.string().optional(),
                                                          seed: z.number().int().optional(),
                                                          stop: z.array(z.string()).optional(),
                                                          temperature: z.number().optional(),
                                                          top_p: z.number().optional(),
                                                          user: z.string().optional(),
                                                          stream_options: z.object({}).optional(),
                                                        })
                                                        .merge(
                                                          z.object({
                                                            model: z.string().optional(),
                                                            api_key: z.string().optional(),
                                                            timeout: z.number().optional(),
                                                            max_retries: z
                                                              .number()
                                                              .int()
                                                              .optional(),
                                                            model_capabilities: z
                                                              .object({})
                                                              .optional(),
                                                            model_info: z.object({}).optional(),
                                                            add_name_prefixes: z
                                                              .boolean()
                                                              .optional(),
                                                            default_headers: z
                                                              .object({})
                                                              .optional(),
                                                          }),
                                                        )
                                                        .merge(
                                                          z.object({
                                                            organization: z.string().optional(),
                                                            base_url: z.string().optional(),
                                                          }),
                                                        ),
                                                    }),
                                                  ),
                                                tools: z.array(z.object({})).default([]),
                                                handoffs: z
                                                  .array(z.string())
                                                  .optional()
                                                  .default([]),
                                                reflect_on_tool_use: z.boolean().default(false),
                                                tool_call_summary_format: z
                                                  .string()
                                                  .default("{result}"),
                                                metadata: z.object({}).optional(),
                                              })
                                              .optional(),
                                          }),
                                        ),
                                    ),
                                  z
                                    .object({
                                      provider: z.literal("InstagramAgent").optional(),
                                    })
                                    .merge(
                                      z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["InstagramAgent"]),
                                            config: z
                                              .object({
                                                name: z.string(),
                                                description: z.string(),
                                                model_context: z.object({}).optional(),
                                                memory: z.object({}).optional(),
                                                model_client_stream: z
                                                  .boolean()
                                                  .optional()
                                                  .default(false),
                                                system_message: z.string().optional(),
                                                model_client: z
                                                  .object({
                                                    provider: z.string().optional(),
                                                    component_type: z.string().optional(),
                                                    version: z.number().int().optional(),
                                                    component_version: z.number().int().optional(),
                                                    description: z.string().optional(),
                                                    label: z.string().optional(),
                                                    config: z.object({}).optional(),
                                                  })
                                                  .merge(
                                                    z.object({
                                                      provider: z.enum([
                                                        "OpenAIChatCompletionClient",
                                                      ]),
                                                      config: z
                                                        .object({
                                                          frequency_penalty: z.number().optional(),
                                                          logit_bias: z.object({}).optional(),
                                                          max_tokens: z.number().int().optional(),
                                                          n: z.number().int().optional(),
                                                          presence_penalty: z.number().optional(),
                                                          response_format: z.string().optional(),
                                                          seed: z.number().int().optional(),
                                                          stop: z.array(z.string()).optional(),
                                                          temperature: z.number().optional(),
                                                          top_p: z.number().optional(),
                                                          user: z.string().optional(),
                                                          stream_options: z.object({}).optional(),
                                                        })
                                                        .merge(
                                                          z.object({
                                                            model: z.string().optional(),
                                                            api_key: z.string().optional(),
                                                            timeout: z.number().optional(),
                                                            max_retries: z
                                                              .number()
                                                              .int()
                                                              .optional(),
                                                            model_capabilities: z
                                                              .object({})
                                                              .optional(),
                                                            model_info: z.object({}).optional(),
                                                            add_name_prefixes: z
                                                              .boolean()
                                                              .optional(),
                                                            default_headers: z
                                                              .object({})
                                                              .optional(),
                                                          }),
                                                        )
                                                        .merge(
                                                          z.object({
                                                            organization: z.string().optional(),
                                                            base_url: z.string().optional(),
                                                          }),
                                                        ),
                                                    }),
                                                  ),
                                                tools: z.array(z.object({})).default([]),
                                                handoffs: z
                                                  .array(z.string())
                                                  .optional()
                                                  .default([]),
                                                reflect_on_tool_use: z.boolean().default(false),
                                                tool_call_summary_format: z
                                                  .string()
                                                  .default("{result}"),
                                                metadata: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  credentials: z
                                                    .object({
                                                      username: z.string(),
                                                      password: z.string(),
                                                      otp_key: z.string().optional(),
                                                    })
                                                    .optional(),
                                                  proxy_url: z.string().optional(),
                                                }),
                                              ),
                                          }),
                                        ),
                                    ),
                                  z
                                    .object({
                                      provider: z.literal("UserProxyAgent").optional(),
                                    })
                                    .merge(
                                      z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["UserProxyAgent"]),
                                            config: z.object({
                                              name: z.string(),
                                              description: z.string().default("A human user"),
                                              input_func: z.string().optional().default("None"),
                                            }),
                                          }),
                                        ),
                                    ),
                                ]),
                              ),
                              termination_condition: z.union([
                                z
                                  .object({
                                    provider: z.literal("TextMentionTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["TextMentionTermination"]),
                                      config: z.object({
                                        text: z.string(),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("HandoffTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["HandoffTermination"]),
                                      config: z.object({
                                        target: z.string(),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("TimeoutTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["TimeoutTermination"]),
                                      config: z.object({
                                        timeout_seconds: z.number().int(),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("SourceMatchTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["SourceMatchTermination"]),
                                      config: z.object({
                                        sources: z.array(z.string()),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("FunctionCallTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["FunctionCallTermination"]),
                                      config: z.object({
                                        function_name: z.string(),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("TokenUsageTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["TokenUsageTermination"]),
                                      config: z.object({
                                        max_total_token: z.number().int().optional(),
                                        max_prompt_token: z.number().int().optional(),
                                        max_completion_token: z.number().int().optional(),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("MaxMessageTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["MaxMessageTermination"]),
                                      config: z.object({
                                        max_messages: z.number().int(),
                                        include_agent_event: z.boolean().optional().default(false),
                                      }),
                                    }),
                                  ),
                                z
                                  .object({
                                    provider: z.literal("StopMessageTermination").optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["StopMessageTermination"]),
                                      config: z.object({
                                        some_thing: z.string().optional(),
                                      }),
                                    }),
                                  ),
                              ]),
                              max_turns: z.number().int().default(25),
                            })
                            .merge(
                              z.object({
                                selector_prompt: z.string().optional(),
                                allow_repeated_speaker: z.boolean().optional(),
                                max_selector_attempts: z.number().int().optional(),
                                selector_func: z.string().optional(),
                                proxy_url: z.string().optional(),
                                enable_swarm: z.boolean().optional().default(false),
                              }),
                            ),
                        }),
                      ),
                  ]),
                )
                .optional(),
            }),
          ),
      ),
    z
      .object({
        type: z.literal("ChatAgentContainerState").optional(),
      })
      .merge(
        z
          .object({
            type: z.enum([
              "InstagramAgentState",
              "SocialTeamManagerState",
              "TeamState",
              "RuntimeState",
              "AssistantAgentState",
              "RoundRobinManagerState",
              "SelectorManagerState",
              "SwarmManagerState",
              "MagenticOneOrchestratorState",
              "SocietyOfMindAgentState",
              "ChatAgentContainerState",
              "BaseGroupChatManagerState",
            ]),
            version: z.string().optional(),
          })
          .merge(
            z.object({
              type: z.enum(["ChatAgentContainerState"]),
              agent_state: z.object({}).optional(),
              message_buffer: z.array(z.unknown()).optional(),
            }),
          ),
      ),
  ]),
});

export const zAgState = zApiResourceMetaProperties.merge(zAgStateProperties);

export const zAgStateList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAgState).optional(),
});

export const zRootAgentState = z
  .object({
    type: z.enum([
      "InstagramAgentState",
      "SocialTeamManagerState",
      "TeamState",
      "RuntimeState",
      "AssistantAgentState",
      "RoundRobinManagerState",
      "SelectorManagerState",
      "SwarmManagerState",
      "MagenticOneOrchestratorState",
      "SocietyOfMindAgentState",
      "ChatAgentContainerState",
      "BaseGroupChatManagerState",
    ]),
    version: z.string().optional(),
  })
  .merge(
    z.object({
      type: z.string(),
      is_agent_run_local: z.boolean().optional(),
      counter: z.number().optional(),
      color: z.string().optional(),
      mainViewType: z.enum(["chat", "scheduler"]).optional(),
      chatHistoryIds: z.array(z.string()).optional(),
      currentChatHistoryIds: z.string().optional(),
      currentChatHistory: z.object({}).optional(),
      mcpServers: z
        .array(
          z.object({
            url: z.string().optional(),
            state: z
              .enum(["authenticating", "connecting", "ready", "discovering", "failed"])
              .optional(),
            auth_url: z.string().optional(),
          }),
        )
        .optional(),
      mcpTools: z.array(z.object({})).optional(),
      mcpPrompts: z.array(z.object({})).optional(),
      mcpResources: z.array(z.unknown()).optional(),
    }),
  );

export const zMcpServer = z.object({
  url: z.string().optional(),
  state: z.enum(["authenticating", "connecting", "ready", "discovering", "failed"]).optional(),
  auth_url: z.string().optional(),
});

export const zAgStateUpsert = zAgStateProperties;

export const zBaseState = z.object({
  type: z.enum([
    "InstagramAgentState",
    "SocialTeamManagerState",
    "TeamState",
    "RuntimeState",
    "AssistantAgentState",
    "RoundRobinManagerState",
    "SelectorManagerState",
    "SwarmManagerState",
    "MagenticOneOrchestratorState",
    "SocietyOfMindAgentState",
    "ChatAgentContainerState",
    "BaseGroupChatManagerState",
  ]),
  version: z.string().optional(),
});

export const zAssistantAgentState = zBaseState.merge(
  z.object({
    type: z.enum(["AssistantAgentState"]),
    llm_context: z.unknown().optional(),
  }),
);

export const zInstagramAgentState = zBaseState.merge(
  z.object({
    type: z.enum(["InstagramAgentState"]),
    llm_context: z.unknown().optional(),
    username: z.string().optional(),
    password: z.string().optional(),
    otp_key: z.string().optional(),
    session_state: z.object({}).optional(),
    is_wait_user_input: z.boolean().optional(),
    ig_settings: z.object({}).optional(),
    proxy_url: z.string().optional(),
    platform_account_id: z.string().optional(),
    credentials: z
      .object({
        username: z.string(),
        password: z.string(),
        otp_key: z.string().optional(),
      })
      .optional(),
  }),
);

export const zBaseGroupChatManagerState = zBaseState.merge(
  z.object({
    type: z.enum(["BaseGroupChatManagerState"]).optional(),
    message_thread: z.array(z.object({})).optional(),
    current_turn: z.number().int().optional(),
  }),
);

export const zAgentStates = z.union([
  z
    .object({
      type: z.literal("InstagramAgentState").optional(),
    })
    .merge(zInstagramAgentState),
  z
    .object({
      type: z.literal("SocialTeamManagerState").optional(),
    })
    .merge(
      zBaseState.merge(
        z.object({
          type: z.enum(["SocialTeamManagerState"]),
          next_speaker_index: z.number().int().optional().default(0),
          previous_speaker: z.string().optional(),
          current_speaker: z.string().optional(),
          selector_prompt: z.string().optional(),
          allow_repeated_speaker: z.boolean().optional(),
          max_selector_attempts: z.number().int().optional(),
          selector_func: z.string().optional(),
          current_turn: z.number().int().optional().default(0),
          message_thread: z
            .array(
              z.union([
                z
                  .object({
                    type: z.literal("ThoughtEvent").optional(),
                  })
                  .merge(
                    z
                      .object({
                        type: z.string(),
                        source: z.string(),
                        models_usage: z
                          .object({
                            prompt_tokens: z.number().int(),
                            completion_tokens: z.number().int(),
                          })
                          .optional(),
                        metadata: z.object({}).optional(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["ThoughtEvent"]),
                          content: z.string(),
                        }),
                      ),
                  ),
                z
                  .object({
                    type: z.literal("TextMessage").optional(),
                  })
                  .merge(
                    z
                      .object({
                        type: z.string().optional(),
                        source: z.string(),
                        models_usage: z
                          .object({
                            prompt_tokens: z.number().int(),
                            completion_tokens: z.number().int(),
                          })
                          .optional(),
                        metadata: z.object({}).optional(),
                        content: z.string(),
                      })
                      .merge(
                        z.object({
                          type: z.enum(["TextMessage"]),
                          content: z.string(),
                        }),
                      ),
                  ),
                z
                  .object({
                    type: z.literal("PlatformAccountFlowInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["PlatformAccountFlowInput"]),
                      platform_account_id: z.string().optional(),
                    }),
                  ),
                z
                  .object({
                    type: z.literal("SocialAddFollowersInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["SocialAddFollowersInput"]),
                      platform_account_id: z.string().optional(),
                      count_to_follow: z.number().default(1),
                    }),
                  ),
                z
                  .object({
                    type: z.literal("SocialLoginInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["SocialLoginInput"]),
                      username: z.string(),
                      password: z.string(),
                      otp_key: z.string().optional(),
                    }),
                  ),
                z
                  .object({
                    type: z.literal("TenantInitInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["TenantInitInput"]),
                      tenant_id: z.string(),
                    }),
                  ),
                z
                  .object({
                    type: z.literal("ChatMessageInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["ChatMessageInput"]),
                      content: z.string(),
                    }),
                  ),
                z
                  .object({
                    type: z.literal("AskUserFunctionCallInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["AskUserFunctionCallInput"]),
                      title: z.string(),
                    }),
                  ),
                z
                  .object({
                    type: z.literal("StartNewChatInput").optional(),
                  })
                  .merge(
                    z.object({
                      type: z.enum(["StartNewChatInput"]),
                      task: z.string(),
                      config: z
                        .object({
                          participants: z.array(
                            z.union([
                              z
                                .object({
                                  provider: z.literal("AssistantAgent").optional(),
                                })
                                .merge(
                                  z
                                    .object({
                                      provider: z.string().optional(),
                                      component_type: z.string().optional(),
                                      version: z.number().int().optional(),
                                      component_version: z.number().int().optional(),
                                      description: z.string().optional(),
                                      label: z.string().optional(),
                                      config: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        provider: z.enum(["AssistantAgent"]),
                                        component_type: z.enum(["agent"]),
                                        config: z
                                          .object({
                                            name: z.string(),
                                            description: z.string(),
                                            model_context: z.object({}).optional(),
                                            memory: z.object({}).optional(),
                                            model_client_stream: z
                                              .boolean()
                                              .optional()
                                              .default(false),
                                            system_message: z.string().optional(),
                                            model_client: z
                                              .object({
                                                provider: z.string().optional(),
                                                component_type: z.string().optional(),
                                                version: z.number().int().optional(),
                                                component_version: z.number().int().optional(),
                                                description: z.string().optional(),
                                                label: z.string().optional(),
                                                config: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  provider: z.enum(["OpenAIChatCompletionClient"]),
                                                  config: z
                                                    .object({
                                                      frequency_penalty: z.number().optional(),
                                                      logit_bias: z.object({}).optional(),
                                                      max_tokens: z.number().int().optional(),
                                                      n: z.number().int().optional(),
                                                      presence_penalty: z.number().optional(),
                                                      response_format: z.string().optional(),
                                                      seed: z.number().int().optional(),
                                                      stop: z.array(z.string()).optional(),
                                                      temperature: z.number().optional(),
                                                      top_p: z.number().optional(),
                                                      user: z.string().optional(),
                                                      stream_options: z.object({}).optional(),
                                                    })
                                                    .merge(
                                                      z.object({
                                                        model: z.string().optional(),
                                                        api_key: z.string().optional(),
                                                        timeout: z.number().optional(),
                                                        max_retries: z.number().int().optional(),
                                                        model_capabilities: z.object({}).optional(),
                                                        model_info: z.object({}).optional(),
                                                        add_name_prefixes: z.boolean().optional(),
                                                        default_headers: z.object({}).optional(),
                                                      }),
                                                    )
                                                    .merge(
                                                      z.object({
                                                        organization: z.string().optional(),
                                                        base_url: z.string().optional(),
                                                      }),
                                                    ),
                                                }),
                                              ),
                                            tools: z.array(z.object({})).default([]),
                                            handoffs: z.array(z.string()).optional().default([]),
                                            reflect_on_tool_use: z.boolean().default(false),
                                            tool_call_summary_format: z
                                              .string()
                                              .default("{result}"),
                                            metadata: z.object({}).optional(),
                                          })
                                          .optional(),
                                      }),
                                    ),
                                ),
                              z
                                .object({
                                  provider: z.literal("InstagramAgent").optional(),
                                })
                                .merge(
                                  z
                                    .object({
                                      provider: z.string().optional(),
                                      component_type: z.string().optional(),
                                      version: z.number().int().optional(),
                                      component_version: z.number().int().optional(),
                                      description: z.string().optional(),
                                      label: z.string().optional(),
                                      config: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        provider: z.enum(["InstagramAgent"]),
                                        config: z
                                          .object({
                                            name: z.string(),
                                            description: z.string(),
                                            model_context: z.object({}).optional(),
                                            memory: z.object({}).optional(),
                                            model_client_stream: z
                                              .boolean()
                                              .optional()
                                              .default(false),
                                            system_message: z.string().optional(),
                                            model_client: z
                                              .object({
                                                provider: z.string().optional(),
                                                component_type: z.string().optional(),
                                                version: z.number().int().optional(),
                                                component_version: z.number().int().optional(),
                                                description: z.string().optional(),
                                                label: z.string().optional(),
                                                config: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  provider: z.enum(["OpenAIChatCompletionClient"]),
                                                  config: z
                                                    .object({
                                                      frequency_penalty: z.number().optional(),
                                                      logit_bias: z.object({}).optional(),
                                                      max_tokens: z.number().int().optional(),
                                                      n: z.number().int().optional(),
                                                      presence_penalty: z.number().optional(),
                                                      response_format: z.string().optional(),
                                                      seed: z.number().int().optional(),
                                                      stop: z.array(z.string()).optional(),
                                                      temperature: z.number().optional(),
                                                      top_p: z.number().optional(),
                                                      user: z.string().optional(),
                                                      stream_options: z.object({}).optional(),
                                                    })
                                                    .merge(
                                                      z.object({
                                                        model: z.string().optional(),
                                                        api_key: z.string().optional(),
                                                        timeout: z.number().optional(),
                                                        max_retries: z.number().int().optional(),
                                                        model_capabilities: z.object({}).optional(),
                                                        model_info: z.object({}).optional(),
                                                        add_name_prefixes: z.boolean().optional(),
                                                        default_headers: z.object({}).optional(),
                                                      }),
                                                    )
                                                    .merge(
                                                      z.object({
                                                        organization: z.string().optional(),
                                                        base_url: z.string().optional(),
                                                      }),
                                                    ),
                                                }),
                                              ),
                                            tools: z.array(z.object({})).default([]),
                                            handoffs: z.array(z.string()).optional().default([]),
                                            reflect_on_tool_use: z.boolean().default(false),
                                            tool_call_summary_format: z
                                              .string()
                                              .default("{result}"),
                                            metadata: z.object({}).optional(),
                                          })
                                          .merge(
                                            z.object({
                                              credentials: z
                                                .object({
                                                  username: z.string(),
                                                  password: z.string(),
                                                  otp_key: z.string().optional(),
                                                })
                                                .optional(),
                                              proxy_url: z.string().optional(),
                                            }),
                                          ),
                                      }),
                                    ),
                                ),
                              z
                                .object({
                                  provider: z.literal("UserProxyAgent").optional(),
                                })
                                .merge(
                                  z
                                    .object({
                                      provider: z.string().optional(),
                                      component_type: z.string().optional(),
                                      version: z.number().int().optional(),
                                      component_version: z.number().int().optional(),
                                      description: z.string().optional(),
                                      label: z.string().optional(),
                                      config: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        provider: z.enum(["UserProxyAgent"]),
                                        config: z.object({
                                          name: z.string(),
                                          description: z.string().default("A human user"),
                                          input_func: z.string().optional().default("None"),
                                        }),
                                      }),
                                    ),
                                ),
                            ]),
                          ),
                          termination_condition: z.union([
                            z
                              .object({
                                provider: z.literal("TextMentionTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["TextMentionTermination"]),
                                  config: z.object({
                                    text: z.string(),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("HandoffTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["HandoffTermination"]),
                                  config: z.object({
                                    target: z.string(),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("TimeoutTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["TimeoutTermination"]),
                                  config: z.object({
                                    timeout_seconds: z.number().int(),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("SourceMatchTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["SourceMatchTermination"]),
                                  config: z.object({
                                    sources: z.array(z.string()),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("FunctionCallTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["FunctionCallTermination"]),
                                  config: z.object({
                                    function_name: z.string(),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("TokenUsageTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["TokenUsageTermination"]),
                                  config: z.object({
                                    max_total_token: z.number().int().optional(),
                                    max_prompt_token: z.number().int().optional(),
                                    max_completion_token: z.number().int().optional(),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("MaxMessageTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["MaxMessageTermination"]),
                                  config: z.object({
                                    max_messages: z.number().int(),
                                    include_agent_event: z.boolean().optional().default(false),
                                  }),
                                }),
                              ),
                            z
                              .object({
                                provider: z.literal("StopMessageTermination").optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["StopMessageTermination"]),
                                  config: z.object({
                                    some_thing: z.string().optional(),
                                  }),
                                }),
                              ),
                          ]),
                          max_turns: z.number().int().default(25),
                        })
                        .merge(
                          z.object({
                            selector_prompt: z.string().optional(),
                            allow_repeated_speaker: z.boolean().optional(),
                            max_selector_attempts: z.number().int().optional(),
                            selector_func: z.string().optional(),
                            proxy_url: z.string().optional(),
                            enable_swarm: z.boolean().optional().default(false),
                          }),
                        ),
                    }),
                  ),
              ]),
            )
            .optional(),
        }),
      ),
    ),
  z
    .object({
      type: z.literal("ChatAgentContainerState").optional(),
    })
    .merge(
      zBaseState.merge(
        z.object({
          type: z.enum(["ChatAgentContainerState"]),
          agent_state: z.object({}).optional(),
          message_buffer: z.array(z.unknown()).optional(),
        }),
      ),
    ),
]);

export const zSocialTeamManagerState = zBaseState.merge(
  z.object({
    type: z.enum(["SocialTeamManagerState"]),
    next_speaker_index: z.number().int().optional().default(0),
    previous_speaker: z.string().optional(),
    current_speaker: z.string().optional(),
    selector_prompt: z.string().optional(),
    allow_repeated_speaker: z.boolean().optional(),
    max_selector_attempts: z.number().int().optional(),
    selector_func: z.string().optional(),
    current_turn: z.number().int().optional().default(0),
    message_thread: z
      .array(
        z.union([
          z
            .object({
              type: z.literal("ThoughtEvent").optional(),
            })
            .merge(
              z
                .object({
                  type: z.string(),
                  source: z.string(),
                  models_usage: z
                    .object({
                      prompt_tokens: z.number().int(),
                      completion_tokens: z.number().int(),
                    })
                    .optional(),
                  metadata: z.object({}).optional(),
                })
                .merge(
                  z.object({
                    type: z.enum(["ThoughtEvent"]),
                    content: z.string(),
                  }),
                ),
            ),
          z
            .object({
              type: z.literal("TextMessage").optional(),
            })
            .merge(
              z
                .object({
                  type: z.string().optional(),
                  source: z.string(),
                  models_usage: z
                    .object({
                      prompt_tokens: z.number().int(),
                      completion_tokens: z.number().int(),
                    })
                    .optional(),
                  metadata: z.object({}).optional(),
                  content: z.string(),
                })
                .merge(
                  z.object({
                    type: z.enum(["TextMessage"]),
                    content: z.string(),
                  }),
                ),
            ),
          z
            .object({
              type: z.literal("PlatformAccountFlowInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["PlatformAccountFlowInput"]),
                platform_account_id: z.string().optional(),
              }),
            ),
          z
            .object({
              type: z.literal("SocialAddFollowersInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["SocialAddFollowersInput"]),
                platform_account_id: z.string().optional(),
                count_to_follow: z.number().default(1),
              }),
            ),
          z
            .object({
              type: z.literal("SocialLoginInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["SocialLoginInput"]),
                username: z.string(),
                password: z.string(),
                otp_key: z.string().optional(),
              }),
            ),
          z
            .object({
              type: z.literal("TenantInitInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["TenantInitInput"]),
                tenant_id: z.string(),
              }),
            ),
          z
            .object({
              type: z.literal("ChatMessageInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["ChatMessageInput"]),
                content: z.string(),
              }),
            ),
          z
            .object({
              type: z.literal("AskUserFunctionCallInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["AskUserFunctionCallInput"]),
                title: z.string(),
              }),
            ),
          z
            .object({
              type: z.literal("StartNewChatInput").optional(),
            })
            .merge(
              z.object({
                type: z.enum(["StartNewChatInput"]),
                task: z.string(),
                config: z
                  .object({
                    participants: z.array(
                      z.union([
                        z
                          .object({
                            provider: z.literal("AssistantAgent").optional(),
                          })
                          .merge(
                            z
                              .object({
                                provider: z.string().optional(),
                                component_type: z.string().optional(),
                                version: z.number().int().optional(),
                                component_version: z.number().int().optional(),
                                description: z.string().optional(),
                                label: z.string().optional(),
                                config: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["AssistantAgent"]),
                                  component_type: z.enum(["agent"]),
                                  config: z
                                    .object({
                                      name: z.string(),
                                      description: z.string(),
                                      model_context: z.object({}).optional(),
                                      memory: z.object({}).optional(),
                                      model_client_stream: z.boolean().optional().default(false),
                                      system_message: z.string().optional(),
                                      model_client: z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["OpenAIChatCompletionClient"]),
                                            config: z
                                              .object({
                                                frequency_penalty: z.number().optional(),
                                                logit_bias: z.object({}).optional(),
                                                max_tokens: z.number().int().optional(),
                                                n: z.number().int().optional(),
                                                presence_penalty: z.number().optional(),
                                                response_format: z.string().optional(),
                                                seed: z.number().int().optional(),
                                                stop: z.array(z.string()).optional(),
                                                temperature: z.number().optional(),
                                                top_p: z.number().optional(),
                                                user: z.string().optional(),
                                                stream_options: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  model: z.string().optional(),
                                                  api_key: z.string().optional(),
                                                  timeout: z.number().optional(),
                                                  max_retries: z.number().int().optional(),
                                                  model_capabilities: z.object({}).optional(),
                                                  model_info: z.object({}).optional(),
                                                  add_name_prefixes: z.boolean().optional(),
                                                  default_headers: z.object({}).optional(),
                                                }),
                                              )
                                              .merge(
                                                z.object({
                                                  organization: z.string().optional(),
                                                  base_url: z.string().optional(),
                                                }),
                                              ),
                                          }),
                                        ),
                                      tools: z.array(z.object({})).default([]),
                                      handoffs: z.array(z.string()).optional().default([]),
                                      reflect_on_tool_use: z.boolean().default(false),
                                      tool_call_summary_format: z.string().default("{result}"),
                                      metadata: z.object({}).optional(),
                                    })
                                    .optional(),
                                }),
                              ),
                          ),
                        z
                          .object({
                            provider: z.literal("InstagramAgent").optional(),
                          })
                          .merge(
                            z
                              .object({
                                provider: z.string().optional(),
                                component_type: z.string().optional(),
                                version: z.number().int().optional(),
                                component_version: z.number().int().optional(),
                                description: z.string().optional(),
                                label: z.string().optional(),
                                config: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["InstagramAgent"]),
                                  config: z
                                    .object({
                                      name: z.string(),
                                      description: z.string(),
                                      model_context: z.object({}).optional(),
                                      memory: z.object({}).optional(),
                                      model_client_stream: z.boolean().optional().default(false),
                                      system_message: z.string().optional(),
                                      model_client: z
                                        .object({
                                          provider: z.string().optional(),
                                          component_type: z.string().optional(),
                                          version: z.number().int().optional(),
                                          component_version: z.number().int().optional(),
                                          description: z.string().optional(),
                                          label: z.string().optional(),
                                          config: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            provider: z.enum(["OpenAIChatCompletionClient"]),
                                            config: z
                                              .object({
                                                frequency_penalty: z.number().optional(),
                                                logit_bias: z.object({}).optional(),
                                                max_tokens: z.number().int().optional(),
                                                n: z.number().int().optional(),
                                                presence_penalty: z.number().optional(),
                                                response_format: z.string().optional(),
                                                seed: z.number().int().optional(),
                                                stop: z.array(z.string()).optional(),
                                                temperature: z.number().optional(),
                                                top_p: z.number().optional(),
                                                user: z.string().optional(),
                                                stream_options: z.object({}).optional(),
                                              })
                                              .merge(
                                                z.object({
                                                  model: z.string().optional(),
                                                  api_key: z.string().optional(),
                                                  timeout: z.number().optional(),
                                                  max_retries: z.number().int().optional(),
                                                  model_capabilities: z.object({}).optional(),
                                                  model_info: z.object({}).optional(),
                                                  add_name_prefixes: z.boolean().optional(),
                                                  default_headers: z.object({}).optional(),
                                                }),
                                              )
                                              .merge(
                                                z.object({
                                                  organization: z.string().optional(),
                                                  base_url: z.string().optional(),
                                                }),
                                              ),
                                          }),
                                        ),
                                      tools: z.array(z.object({})).default([]),
                                      handoffs: z.array(z.string()).optional().default([]),
                                      reflect_on_tool_use: z.boolean().default(false),
                                      tool_call_summary_format: z.string().default("{result}"),
                                      metadata: z.object({}).optional(),
                                    })
                                    .merge(
                                      z.object({
                                        credentials: z
                                          .object({
                                            username: z.string(),
                                            password: z.string(),
                                            otp_key: z.string().optional(),
                                          })
                                          .optional(),
                                        proxy_url: z.string().optional(),
                                      }),
                                    ),
                                }),
                              ),
                          ),
                        z
                          .object({
                            provider: z.literal("UserProxyAgent").optional(),
                          })
                          .merge(
                            z
                              .object({
                                provider: z.string().optional(),
                                component_type: z.string().optional(),
                                version: z.number().int().optional(),
                                component_version: z.number().int().optional(),
                                description: z.string().optional(),
                                label: z.string().optional(),
                                config: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  provider: z.enum(["UserProxyAgent"]),
                                  config: z.object({
                                    name: z.string(),
                                    description: z.string().default("A human user"),
                                    input_func: z.string().optional().default("None"),
                                  }),
                                }),
                              ),
                          ),
                      ]),
                    ),
                    termination_condition: z.union([
                      z
                        .object({
                          provider: z.literal("TextMentionTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["TextMentionTermination"]),
                            config: z.object({
                              text: z.string(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("HandoffTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["HandoffTermination"]),
                            config: z.object({
                              target: z.string(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("TimeoutTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["TimeoutTermination"]),
                            config: z.object({
                              timeout_seconds: z.number().int(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("SourceMatchTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["SourceMatchTermination"]),
                            config: z.object({
                              sources: z.array(z.string()),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("FunctionCallTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["FunctionCallTermination"]),
                            config: z.object({
                              function_name: z.string(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("TokenUsageTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["TokenUsageTermination"]),
                            config: z.object({
                              max_total_token: z.number().int().optional(),
                              max_prompt_token: z.number().int().optional(),
                              max_completion_token: z.number().int().optional(),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("MaxMessageTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["MaxMessageTermination"]),
                            config: z.object({
                              max_messages: z.number().int(),
                              include_agent_event: z.boolean().optional().default(false),
                            }),
                          }),
                        ),
                      z
                        .object({
                          provider: z.literal("StopMessageTermination").optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["StopMessageTermination"]),
                            config: z.object({
                              some_thing: z.string().optional(),
                            }),
                          }),
                        ),
                    ]),
                    max_turns: z.number().int().default(25),
                  })
                  .merge(
                    z.object({
                      selector_prompt: z.string().optional(),
                      allow_repeated_speaker: z.boolean().optional(),
                      max_selector_attempts: z.number().int().optional(),
                      selector_func: z.string().optional(),
                      proxy_url: z.string().optional(),
                      enable_swarm: z.boolean().optional().default(false),
                    }),
                  ),
              }),
            ),
        ]),
      )
      .optional(),
  }),
);

export const zInstagramCredentials = z.object({
  username: z.string(),
  password: z.string(),
  otp_key: z.string().optional(),
});

export const zAgentStateTypes = z.enum([
  "InstagramAgentState",
  "SocialTeamManagerState",
  "TeamState",
  "RuntimeState",
  "AssistantAgentState",
  "RoundRobinManagerState",
  "SelectorManagerState",
  "SwarmManagerState",
  "MagenticOneOrchestratorState",
  "SocietyOfMindAgentState",
  "ChatAgentContainerState",
  "BaseGroupChatManagerState",
]);

export const zTeamState = z.object({
  agent_states: z.object({}),
  type: z.enum(["TeamState"]),
});

export const zChatAgentContainerState = zBaseState.merge(
  z.object({
    type: z.enum(["ChatAgentContainerState"]),
    agent_state: z.object({}).optional(),
    message_buffer: z.array(z.unknown()).optional(),
  }),
);

export const zMessageThread = z.array(
  z.union([
    z
      .object({
        type: z.literal("ThoughtEvent").optional(),
      })
      .merge(
        z
          .object({
            type: z.string(),
            source: z.string(),
            models_usage: z
              .object({
                prompt_tokens: z.number().int(),
                completion_tokens: z.number().int(),
              })
              .optional(),
            metadata: z.object({}).optional(),
          })
          .merge(
            z.object({
              type: z.enum(["ThoughtEvent"]),
              content: z.string(),
            }),
          ),
      ),
    z
      .object({
        type: z.literal("TextMessage").optional(),
      })
      .merge(
        z
          .object({
            type: z.string().optional(),
            source: z.string(),
            models_usage: z
              .object({
                prompt_tokens: z.number().int(),
                completion_tokens: z.number().int(),
              })
              .optional(),
            metadata: z.object({}).optional(),
            content: z.string(),
          })
          .merge(
            z.object({
              type: z.enum(["TextMessage"]),
              content: z.string(),
            }),
          ),
      ),
    z
      .object({
        type: z.literal("PlatformAccountFlowInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["PlatformAccountFlowInput"]),
          platform_account_id: z.string().optional(),
        }),
      ),
    z
      .object({
        type: z.literal("SocialAddFollowersInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["SocialAddFollowersInput"]),
          platform_account_id: z.string().optional(),
          count_to_follow: z.number().default(1),
        }),
      ),
    z
      .object({
        type: z.literal("SocialLoginInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["SocialLoginInput"]),
          username: z.string(),
          password: z.string(),
          otp_key: z.string().optional(),
        }),
      ),
    z
      .object({
        type: z.literal("TenantInitInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["TenantInitInput"]),
          tenant_id: z.string(),
        }),
      ),
    z
      .object({
        type: z.literal("ChatMessageInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["ChatMessageInput"]),
          content: z.string(),
        }),
      ),
    z
      .object({
        type: z.literal("AskUserFunctionCallInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["AskUserFunctionCallInput"]),
          title: z.string(),
        }),
      ),
    z
      .object({
        type: z.literal("StartNewChatInput").optional(),
      })
      .merge(
        z.object({
          type: z.enum(["StartNewChatInput"]),
          task: z.string(),
          config: z
            .object({
              participants: z.array(
                z.union([
                  z
                    .object({
                      provider: z.literal("AssistantAgent").optional(),
                    })
                    .merge(
                      z
                        .object({
                          provider: z.string().optional(),
                          component_type: z.string().optional(),
                          version: z.number().int().optional(),
                          component_version: z.number().int().optional(),
                          description: z.string().optional(),
                          label: z.string().optional(),
                          config: z.object({}).optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["AssistantAgent"]),
                            component_type: z.enum(["agent"]),
                            config: z
                              .object({
                                name: z.string(),
                                description: z.string(),
                                model_context: z.object({}).optional(),
                                memory: z.object({}).optional(),
                                model_client_stream: z.boolean().optional().default(false),
                                system_message: z.string().optional(),
                                model_client: z
                                  .object({
                                    provider: z.string().optional(),
                                    component_type: z.string().optional(),
                                    version: z.number().int().optional(),
                                    component_version: z.number().int().optional(),
                                    description: z.string().optional(),
                                    label: z.string().optional(),
                                    config: z.object({}).optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["OpenAIChatCompletionClient"]),
                                      config: z
                                        .object({
                                          frequency_penalty: z.number().optional(),
                                          logit_bias: z.object({}).optional(),
                                          max_tokens: z.number().int().optional(),
                                          n: z.number().int().optional(),
                                          presence_penalty: z.number().optional(),
                                          response_format: z.string().optional(),
                                          seed: z.number().int().optional(),
                                          stop: z.array(z.string()).optional(),
                                          temperature: z.number().optional(),
                                          top_p: z.number().optional(),
                                          user: z.string().optional(),
                                          stream_options: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            model: z.string().optional(),
                                            api_key: z.string().optional(),
                                            timeout: z.number().optional(),
                                            max_retries: z.number().int().optional(),
                                            model_capabilities: z.object({}).optional(),
                                            model_info: z.object({}).optional(),
                                            add_name_prefixes: z.boolean().optional(),
                                            default_headers: z.object({}).optional(),
                                          }),
                                        )
                                        .merge(
                                          z.object({
                                            organization: z.string().optional(),
                                            base_url: z.string().optional(),
                                          }),
                                        ),
                                    }),
                                  ),
                                tools: z.array(z.object({})).default([]),
                                handoffs: z.array(z.string()).optional().default([]),
                                reflect_on_tool_use: z.boolean().default(false),
                                tool_call_summary_format: z.string().default("{result}"),
                                metadata: z.object({}).optional(),
                              })
                              .optional(),
                          }),
                        ),
                    ),
                  z
                    .object({
                      provider: z.literal("InstagramAgent").optional(),
                    })
                    .merge(
                      z
                        .object({
                          provider: z.string().optional(),
                          component_type: z.string().optional(),
                          version: z.number().int().optional(),
                          component_version: z.number().int().optional(),
                          description: z.string().optional(),
                          label: z.string().optional(),
                          config: z.object({}).optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["InstagramAgent"]),
                            config: z
                              .object({
                                name: z.string(),
                                description: z.string(),
                                model_context: z.object({}).optional(),
                                memory: z.object({}).optional(),
                                model_client_stream: z.boolean().optional().default(false),
                                system_message: z.string().optional(),
                                model_client: z
                                  .object({
                                    provider: z.string().optional(),
                                    component_type: z.string().optional(),
                                    version: z.number().int().optional(),
                                    component_version: z.number().int().optional(),
                                    description: z.string().optional(),
                                    label: z.string().optional(),
                                    config: z.object({}).optional(),
                                  })
                                  .merge(
                                    z.object({
                                      provider: z.enum(["OpenAIChatCompletionClient"]),
                                      config: z
                                        .object({
                                          frequency_penalty: z.number().optional(),
                                          logit_bias: z.object({}).optional(),
                                          max_tokens: z.number().int().optional(),
                                          n: z.number().int().optional(),
                                          presence_penalty: z.number().optional(),
                                          response_format: z.string().optional(),
                                          seed: z.number().int().optional(),
                                          stop: z.array(z.string()).optional(),
                                          temperature: z.number().optional(),
                                          top_p: z.number().optional(),
                                          user: z.string().optional(),
                                          stream_options: z.object({}).optional(),
                                        })
                                        .merge(
                                          z.object({
                                            model: z.string().optional(),
                                            api_key: z.string().optional(),
                                            timeout: z.number().optional(),
                                            max_retries: z.number().int().optional(),
                                            model_capabilities: z.object({}).optional(),
                                            model_info: z.object({}).optional(),
                                            add_name_prefixes: z.boolean().optional(),
                                            default_headers: z.object({}).optional(),
                                          }),
                                        )
                                        .merge(
                                          z.object({
                                            organization: z.string().optional(),
                                            base_url: z.string().optional(),
                                          }),
                                        ),
                                    }),
                                  ),
                                tools: z.array(z.object({})).default([]),
                                handoffs: z.array(z.string()).optional().default([]),
                                reflect_on_tool_use: z.boolean().default(false),
                                tool_call_summary_format: z.string().default("{result}"),
                                metadata: z.object({}).optional(),
                              })
                              .merge(
                                z.object({
                                  credentials: zInstagramCredentials.optional(),
                                  proxy_url: z.string().optional(),
                                }),
                              ),
                          }),
                        ),
                    ),
                  z
                    .object({
                      provider: z.literal("UserProxyAgent").optional(),
                    })
                    .merge(
                      z
                        .object({
                          provider: z.string().optional(),
                          component_type: z.string().optional(),
                          version: z.number().int().optional(),
                          component_version: z.number().int().optional(),
                          description: z.string().optional(),
                          label: z.string().optional(),
                          config: z.object({}).optional(),
                        })
                        .merge(
                          z.object({
                            provider: z.enum(["UserProxyAgent"]),
                            config: z.object({
                              name: z.string(),
                              description: z.string().default("A human user"),
                              input_func: z.string().optional().default("None"),
                            }),
                          }),
                        ),
                    ),
                ]),
              ),
              termination_condition: z.union([
                z
                  .object({
                    provider: z.literal("TextMentionTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["TextMentionTermination"]),
                      config: z.object({
                        text: z.string(),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("HandoffTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["HandoffTermination"]),
                      config: z.object({
                        target: z.string(),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("TimeoutTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["TimeoutTermination"]),
                      config: z.object({
                        timeout_seconds: z.number().int(),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("SourceMatchTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["SourceMatchTermination"]),
                      config: z.object({
                        sources: z.array(z.string()),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("FunctionCallTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["FunctionCallTermination"]),
                      config: z.object({
                        function_name: z.string(),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("TokenUsageTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["TokenUsageTermination"]),
                      config: z.object({
                        max_total_token: z.number().int().optional(),
                        max_prompt_token: z.number().int().optional(),
                        max_completion_token: z.number().int().optional(),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("MaxMessageTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["MaxMessageTermination"]),
                      config: z.object({
                        max_messages: z.number().int(),
                        include_agent_event: z.boolean().optional().default(false),
                      }),
                    }),
                  ),
                z
                  .object({
                    provider: z.literal("StopMessageTermination").optional(),
                  })
                  .merge(
                    z.object({
                      provider: z.enum(["StopMessageTermination"]),
                      config: z.object({
                        some_thing: z.string().optional(),
                      }),
                    }),
                  ),
              ]),
              max_turns: z.number().int().default(25),
            })
            .merge(
              z.object({
                selector_prompt: z.string().optional(),
                allow_repeated_speaker: z.boolean().optional(),
                max_selector_attempts: z.number().int().optional(),
                selector_func: z.string().optional(),
                proxy_url: z.string().optional(),
                enable_swarm: z.boolean().optional().default(false),
              }),
            ),
        }),
      ),
  ]),
);

export const zScheduledItem = z.object({
  id: z.string(),
  type: z.enum(["cron", "scheduled", "delayed"]),
  trigger: z.string(),
  nextTrigger: z.string(),
  description: z.string(),
});

export const zAdkSessionState = z
  .object({
    type: z.literal("RootAgentState").optional(),
  })
  .merge(zRootAgentState);

export const zToolTypes = z.enum(["code_executor", "social_login"]);

export const zCodeExecutionInput = z.object({
  code: z.string(),
});

export const zCodeExecutionResult = z.object({
  output: z.string(),
  success: z.boolean(),
});

export const zSocialLoginResult = z.object({
  success: z.boolean(),
});

export const zComponent = zApiResourceMetaProperties.merge(
  z.object({
    label: z.string(),
    description: z.string(),
    provider: z.string(),
    component_type: z.string(),
    version: z.number().int(),
    component_version: z.number().int(),
    config: z.object({}),
  }),
);

export const zComponentList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zComponent).optional(),
});

export const zComponentUpsert = z.object({
  label: z.string(),
  description: z.string(),
  provider: z.string(),
  component_type: z.string(),
  version: z.number().int(),
  component_version: z.number().int(),
  config: z.object({}),
});

export const zTeamConfig = z.object({
  participants: z.array(
    z.union([
      z
        .object({
          provider: z.literal("AssistantAgent").optional(),
        })
        .merge(
          z
            .object({
              provider: z.string().optional(),
              component_type: z.string().optional(),
              version: z.number().int().optional(),
              component_version: z.number().int().optional(),
              description: z.string().optional(),
              label: z.string().optional(),
              config: z.object({}).optional(),
            })
            .merge(
              z.object({
                provider: z.enum(["AssistantAgent"]),
                component_type: z.enum(["agent"]),
                config: z
                  .object({
                    name: z.string(),
                    description: z.string(),
                    model_context: z.object({}).optional(),
                    memory: z.object({}).optional(),
                    model_client_stream: z.boolean().optional().default(false),
                    system_message: z.string().optional(),
                    model_client: z
                      .object({
                        provider: z.string().optional(),
                        component_type: z.string().optional(),
                        version: z.number().int().optional(),
                        component_version: z.number().int().optional(),
                        description: z.string().optional(),
                        label: z.string().optional(),
                        config: z.object({}).optional(),
                      })
                      .merge(
                        z.object({
                          provider: z.enum(["OpenAIChatCompletionClient"]),
                          config: z
                            .object({
                              frequency_penalty: z.number().optional(),
                              logit_bias: z.object({}).optional(),
                              max_tokens: z.number().int().optional(),
                              n: z.number().int().optional(),
                              presence_penalty: z.number().optional(),
                              response_format: z.string().optional(),
                              seed: z.number().int().optional(),
                              stop: z.array(z.string()).optional(),
                              temperature: z.number().optional(),
                              top_p: z.number().optional(),
                              user: z.string().optional(),
                              stream_options: z.object({}).optional(),
                            })
                            .merge(
                              z.object({
                                model: z.string().optional(),
                                api_key: z.string().optional(),
                                timeout: z.number().optional(),
                                max_retries: z.number().int().optional(),
                                model_capabilities: z.object({}).optional(),
                                model_info: z.object({}).optional(),
                                add_name_prefixes: z.boolean().optional(),
                                default_headers: z.object({}).optional(),
                              }),
                            )
                            .merge(
                              z.object({
                                organization: z.string().optional(),
                                base_url: z.string().optional(),
                              }),
                            ),
                        }),
                      ),
                    tools: z.array(z.object({})).default([]),
                    handoffs: z.array(z.string()).optional().default([]),
                    reflect_on_tool_use: z.boolean().default(false),
                    tool_call_summary_format: z.string().default("{result}"),
                    metadata: z.object({}).optional(),
                  })
                  .optional(),
              }),
            ),
        ),
      z
        .object({
          provider: z.literal("InstagramAgent").optional(),
        })
        .merge(
          z
            .object({
              provider: z.string().optional(),
              component_type: z.string().optional(),
              version: z.number().int().optional(),
              component_version: z.number().int().optional(),
              description: z.string().optional(),
              label: z.string().optional(),
              config: z.object({}).optional(),
            })
            .merge(
              z.object({
                provider: z.enum(["InstagramAgent"]),
                config: z
                  .object({
                    name: z.string(),
                    description: z.string(),
                    model_context: z.object({}).optional(),
                    memory: z.object({}).optional(),
                    model_client_stream: z.boolean().optional().default(false),
                    system_message: z.string().optional(),
                    model_client: z
                      .object({
                        provider: z.string().optional(),
                        component_type: z.string().optional(),
                        version: z.number().int().optional(),
                        component_version: z.number().int().optional(),
                        description: z.string().optional(),
                        label: z.string().optional(),
                        config: z.object({}).optional(),
                      })
                      .merge(
                        z.object({
                          provider: z.enum(["OpenAIChatCompletionClient"]),
                          config: z
                            .object({
                              frequency_penalty: z.number().optional(),
                              logit_bias: z.object({}).optional(),
                              max_tokens: z.number().int().optional(),
                              n: z.number().int().optional(),
                              presence_penalty: z.number().optional(),
                              response_format: z.string().optional(),
                              seed: z.number().int().optional(),
                              stop: z.array(z.string()).optional(),
                              temperature: z.number().optional(),
                              top_p: z.number().optional(),
                              user: z.string().optional(),
                              stream_options: z.object({}).optional(),
                            })
                            .merge(
                              z.object({
                                model: z.string().optional(),
                                api_key: z.string().optional(),
                                timeout: z.number().optional(),
                                max_retries: z.number().int().optional(),
                                model_capabilities: z.object({}).optional(),
                                model_info: z.object({}).optional(),
                                add_name_prefixes: z.boolean().optional(),
                                default_headers: z.object({}).optional(),
                              }),
                            )
                            .merge(
                              z.object({
                                organization: z.string().optional(),
                                base_url: z.string().optional(),
                              }),
                            ),
                        }),
                      ),
                    tools: z.array(z.object({})).default([]),
                    handoffs: z.array(z.string()).optional().default([]),
                    reflect_on_tool_use: z.boolean().default(false),
                    tool_call_summary_format: z.string().default("{result}"),
                    metadata: z.object({}).optional(),
                  })
                  .merge(
                    z.object({
                      credentials: zInstagramCredentials.optional(),
                      proxy_url: z.string().optional(),
                    }),
                  ),
              }),
            ),
        ),
      z
        .object({
          provider: z.literal("UserProxyAgent").optional(),
        })
        .merge(
          z
            .object({
              provider: z.string().optional(),
              component_type: z.string().optional(),
              version: z.number().int().optional(),
              component_version: z.number().int().optional(),
              description: z.string().optional(),
              label: z.string().optional(),
              config: z.object({}).optional(),
            })
            .merge(
              z.object({
                provider: z.enum(["UserProxyAgent"]),
                config: z.object({
                  name: z.string(),
                  description: z.string().default("A human user"),
                  input_func: z.string().optional().default("None"),
                }),
              }),
            ),
        ),
    ]),
  ),
  termination_condition: z.union([
    z
      .object({
        provider: z.literal("TextMentionTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["TextMentionTermination"]),
          config: z.object({
            text: z.string(),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("HandoffTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["HandoffTermination"]),
          config: z.object({
            target: z.string(),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("TimeoutTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["TimeoutTermination"]),
          config: z.object({
            timeout_seconds: z.number().int(),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("SourceMatchTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["SourceMatchTermination"]),
          config: z.object({
            sources: z.array(z.string()),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("FunctionCallTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["FunctionCallTermination"]),
          config: z.object({
            function_name: z.string(),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("TokenUsageTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["TokenUsageTermination"]),
          config: z.object({
            max_total_token: z.number().int().optional(),
            max_prompt_token: z.number().int().optional(),
            max_completion_token: z.number().int().optional(),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("MaxMessageTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["MaxMessageTermination"]),
          config: z.object({
            max_messages: z.number().int(),
            include_agent_event: z.boolean().optional().default(false),
          }),
        }),
      ),
    z
      .object({
        provider: z.literal("StopMessageTermination").optional(),
      })
      .merge(
        z.object({
          provider: z.enum(["StopMessageTermination"]),
          config: z.object({
            some_thing: z.string().optional(),
          }),
        }),
      ),
  ]),
  max_turns: z.number().int().default(25),
});

export const zComponentTypes = z.enum(["agent", "team", "termination"]);

export const zComponentProperties = z.object({
  label: z.string(),
  description: z.string(),
  provider: z.string(),
  component_type: z.string(),
  version: z.number().int(),
  component_version: z.number().int(),
  config: z.object({}),
});

export const zAssistantAgent = z
  .object({
    provider: z.string().optional(),
    component_type: z.string().optional(),
    version: z.number().int().optional(),
    component_version: z.number().int().optional(),
    description: z.string().optional(),
    label: z.string().optional(),
    config: z.object({}).optional(),
  })
  .merge(
    z.object({
      provider: z.enum(["AssistantAgent"]),
      component_type: z.enum(["agent"]),
      config: z
        .object({
          name: z.string(),
          description: z.string(),
          model_context: z.object({}).optional(),
          memory: z.object({}).optional(),
          model_client_stream: z.boolean().optional().default(false),
          system_message: z.string().optional(),
          model_client: z
            .object({
              provider: z.string().optional(),
              component_type: z.string().optional(),
              version: z.number().int().optional(),
              component_version: z.number().int().optional(),
              description: z.string().optional(),
              label: z.string().optional(),
              config: z.object({}).optional(),
            })
            .merge(
              z.object({
                provider: z.enum(["OpenAIChatCompletionClient"]),
                config: z
                  .object({
                    frequency_penalty: z.number().optional(),
                    logit_bias: z.object({}).optional(),
                    max_tokens: z.number().int().optional(),
                    n: z.number().int().optional(),
                    presence_penalty: z.number().optional(),
                    response_format: z.string().optional(),
                    seed: z.number().int().optional(),
                    stop: z.array(z.string()).optional(),
                    temperature: z.number().optional(),
                    top_p: z.number().optional(),
                    user: z.string().optional(),
                    stream_options: z.object({}).optional(),
                  })
                  .merge(
                    z.object({
                      model: z.string().optional(),
                      api_key: z.string().optional(),
                      timeout: z.number().optional(),
                      max_retries: z.number().int().optional(),
                      model_capabilities: z.object({}).optional(),
                      model_info: z.object({}).optional(),
                      add_name_prefixes: z.boolean().optional(),
                      default_headers: z.object({}).optional(),
                    }),
                  )
                  .merge(
                    z.object({
                      organization: z.string().optional(),
                      base_url: z.string().optional(),
                    }),
                  ),
              }),
            ),
          tools: z.array(z.object({})).default([]),
          handoffs: z.array(z.string()).optional().default([]),
          reflect_on_tool_use: z.boolean().default(false),
          tool_call_summary_format: z.string().default("{result}"),
          metadata: z.object({}).optional(),
        })
        .optional(),
    }),
  );

export const zAssistantAgentConfig = z.object({
  name: z.string(),
  description: z.string(),
  model_context: z.object({}).optional(),
  memory: z.object({}).optional(),
  model_client_stream: z.boolean().optional().default(false),
  system_message: z.string().optional(),
  model_client: z
    .object({
      provider: z.string().optional(),
      component_type: z.string().optional(),
      version: z.number().int().optional(),
      component_version: z.number().int().optional(),
      description: z.string().optional(),
      label: z.string().optional(),
      config: z.object({}).optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["OpenAIChatCompletionClient"]),
        config: z
          .object({
            frequency_penalty: z.number().optional(),
            logit_bias: z.object({}).optional(),
            max_tokens: z.number().int().optional(),
            n: z.number().int().optional(),
            presence_penalty: z.number().optional(),
            response_format: z.string().optional(),
            seed: z.number().int().optional(),
            stop: z.array(z.string()).optional(),
            temperature: z.number().optional(),
            top_p: z.number().optional(),
            user: z.string().optional(),
            stream_options: z.object({}).optional(),
          })
          .merge(
            z.object({
              model: z.string().optional(),
              api_key: z.string().optional(),
              timeout: z.number().optional(),
              max_retries: z.number().int().optional(),
              model_capabilities: z.object({}).optional(),
              model_info: z.object({}).optional(),
              add_name_prefixes: z.boolean().optional(),
              default_headers: z.object({}).optional(),
            }),
          )
          .merge(
            z.object({
              organization: z.string().optional(),
              base_url: z.string().optional(),
            }),
          ),
      }),
    ),
  tools: z.array(z.object({})).default([]),
  handoffs: z.array(z.string()).optional().default([]),
  reflect_on_tool_use: z.boolean().default(false),
  tool_call_summary_format: z.string().default("{result}"),
  metadata: z.object({}).optional(),
});

export const zProviderTypes = z.enum([
  "SelectorGroupChat",
  "SocialTeam",
  "AssistantAgent",
  "InstagramAgent",
  "UserProxyAgent",
  "CodeExecutorAgent",
  "SocietyOfMindAgent",
  "OpenAIChatCompletionClient",
  "TextMentionTermination",
  "HandoffTermination",
  "TimeoutTermination",
  "SourceMatchTermination",
  "FunctionCallTermination",
  "TokenUsageTermination",
  "MaxMessageTermination",
  "StopMessageTermination",
  "TextMessageTermination",
]);

export const zCodeExecutorAgent = zAssistantAgent.merge(
  z.object({
    config: z
      .object({
        provider: z.enum(["CodeExecutorAgent"]),
        code: z.string(),
      })
      .optional(),
  }),
);

export const zCodeExecutorAgentConfig = z.object({
  provider: z.enum(["CodeExecutorAgent"]),
  code: z.string(),
});

export const zSocietyOfMindAgent = zAssistantAgent.merge(
  z.object({
    config: z
      .object({
        code: z.string(),
        provider: z.enum(["SocietyOfMindAgent"]),
      })
      .optional(),
  }),
);

export const zSocietyOfMindAgentConfig = z.object({
  code: z.string(),
  provider: z.enum(["SocietyOfMindAgent"]),
});

export const zUserProxyAgent = z
  .object({
    provider: z.string().optional(),
    component_type: z.string().optional(),
    version: z.number().int().optional(),
    component_version: z.number().int().optional(),
    description: z.string().optional(),
    label: z.string().optional(),
    config: z.object({}).optional(),
  })
  .merge(
    z.object({
      provider: z.enum(["UserProxyAgent"]),
      config: z.object({
        name: z.string(),
        description: z.string().default("A human user"),
        input_func: z.string().optional().default("None"),
      }),
    }),
  );

export const zUserProxyAgentConfig = z.object({
  name: z.string(),
  description: z.string().default("A human user"),
  input_func: z.string().optional().default("None"),
});

export const zAgents = z.union([
  z
    .object({
      provider: z.literal("AssistantAgent").optional(),
    })
    .merge(zAssistantAgent),
  z
    .object({
      provider: z.literal("InstagramAgent").optional(),
    })
    .merge(
      z
        .object({
          provider: z.string().optional(),
          component_type: z.string().optional(),
          version: z.number().int().optional(),
          component_version: z.number().int().optional(),
          description: z.string().optional(),
          label: z.string().optional(),
          config: z.object({}).optional(),
        })
        .merge(
          z.object({
            provider: z.enum(["InstagramAgent"]),
            config: zAssistantAgentConfig.merge(
              z.object({
                credentials: zInstagramCredentials.optional(),
                proxy_url: z.string().optional(),
              }),
            ),
          }),
        ),
    ),
  z
    .object({
      provider: z.literal("UserProxyAgent").optional(),
    })
    .merge(zUserProxyAgent),
]);

export const zOpenAiClientConfigurationConfigModel = z
  .object({
    frequency_penalty: z.number().optional(),
    logit_bias: z.object({}).optional(),
    max_tokens: z.number().int().optional(),
    n: z.number().int().optional(),
    presence_penalty: z.number().optional(),
    response_format: z.string().optional(),
    seed: z.number().int().optional(),
    stop: z.array(z.string()).optional(),
    temperature: z.number().optional(),
    top_p: z.number().optional(),
    user: z.string().optional(),
    stream_options: z.object({}).optional(),
  })
  .merge(
    z.object({
      model: z.string().optional(),
      api_key: z.string().optional(),
      timeout: z.number().optional(),
      max_retries: z.number().int().optional(),
      model_capabilities: z.object({}).optional(),
      model_info: z.object({}).optional(),
      add_name_prefixes: z.boolean().optional(),
      default_headers: z.object({}).optional(),
    }),
  )
  .merge(
    z.object({
      organization: z.string().optional(),
      base_url: z.string().optional(),
    }),
  );

export const zBaseOpenAiClientConfigurationConfigModel = z
  .object({
    frequency_penalty: z.number().optional(),
    logit_bias: z.object({}).optional(),
    max_tokens: z.number().int().optional(),
    n: z.number().int().optional(),
    presence_penalty: z.number().optional(),
    response_format: z.string().optional(),
    seed: z.number().int().optional(),
    stop: z.array(z.string()).optional(),
    temperature: z.number().optional(),
    top_p: z.number().optional(),
    user: z.string().optional(),
    stream_options: z.object({}).optional(),
  })
  .merge(
    z.object({
      model: z.string().optional(),
      api_key: z.string().optional(),
      timeout: z.number().optional(),
      max_retries: z.number().int().optional(),
      model_capabilities: z.object({}).optional(),
      model_info: z.object({}).optional(),
      add_name_prefixes: z.boolean().optional(),
      default_headers: z.object({}).optional(),
    }),
  );

export const zCreateArgumentsConfigModel = z.object({
  frequency_penalty: z.number().optional(),
  logit_bias: z.object({}).optional(),
  max_tokens: z.number().int().optional(),
  n: z.number().int().optional(),
  presence_penalty: z.number().optional(),
  response_format: z.string().optional(),
  seed: z.number().int().optional(),
  stop: z.array(z.string()).optional(),
  temperature: z.number().optional(),
  top_p: z.number().optional(),
  user: z.string().optional(),
  stream_options: z.object({}).optional(),
});

export const zGalleryComponents = z.object({
  agents: z.array(z.object({})),
  models: z.array(z.object({})),
  tools: z.array(z.object({})),
  terminations: z.array(z.object({})),
});

export const zGalleryItems = z.object({
  teams: z.array(z.object({})),
  components: zGalleryComponents,
});

export const zGallery = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
  author: z.string(),
  homepage: z.string(),
  description: z.string(),
  tags: z.array(z.string()),
  license: z.string(),
  lastSynced: z.string().optional(),
});

export const zGalleryList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zGallery).optional(),
});

export const zGalleryUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  userId: z.string(),
});

export const zGalleryMetadata = z.object({
  author: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  version: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  license: z.string().optional(),
  homepage: z.string().optional(),
  category: z.string().optional(),
  last_synced: z.string().optional(),
});

export const zFlowNames = z.enum([
  "sys",
  "tenant",
  "assistant",
  "ag",
  "browser",
  "resource",
  "instagram",
  "social",
  "team",
  "adk",
]);

export const zAgEvent = z.object({
  metadata: zApiResourceMeta.optional(),
  userId: z.string().optional(),
  data: z.object({}),
  framework: z.string(),
  stepRunId: z.string(),
  meta: z.unknown().optional(),
});

export const zEventTypes = z.enum([
  "WorkflowRunStart",
  "WorkflowRunEnd",
  "StepRun",
  "TextMessage",
  "ModelClientStreamingChunkEvent",
  "EventNewAgentState",
]);

export const zAgentTypes = z.enum([
  "closure",
  "router",
  "user_proxy",
  "assistant",
  "social",
  "browser",
  "resource",
  "instagram",
]);

export const zAgEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAgEvent).optional(),
});

export const zOutline = z.object({
  pageTitle: z.string(),
  sections: z.array(
    z.object({
      section_title: z.string(),
      description: z.string(),
      subsections: z
        .array(
          z.object({
            subsectionTitle: z.string(),
            description: z.string(),
          }),
        )
        .optional(),
    }),
  ),
});

export const zBaseMessageConfig = z.object({
  source: z.string().optional(),
  models_usage: z
    .object({
      prompt_tokens: z.number().int(),
      completion_tokens: z.number().int(),
    })
    .optional(),
});

export const zImageContent = z.object({
  url: z.string(),
  alt: z.string().optional(),
  data: z.string().optional(),
});

export const zStopMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.string(),
  }),
);

export const zHandoffMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.string(),
    target: z.string(),
  }),
);

export const zToolCallMessageConfig = zBaseMessageConfig.merge(
  z.object({
    content: z.array(
      z.object({
        id: z.string(),
        arguments: z.string(),
        name: z.string(),
      }),
    ),
  }),
);

export const zUpsertModel = z.object({
  name: z.string(),
  model: z.string(),
  provider: z.string(),
  apiKey: z.string(),
  apiBase: z.string(),
  vendor: z.string(),
  description: z.string().optional(),
  family: z.string(),
  vision: z.boolean(),
  functionCalling: z.boolean(),
  jsonOutput: z.boolean(),
  tags: z.array(z.string()).optional(),
});

export const zToolConfig = z.object({
  name: z.string(),
  description: z.string().optional(),
  source_code: z.string().optional(),
  global_imports: z.array(z.string()).optional(),
  has_cancellation_support: z.boolean().optional(),
});

export const zSection = z.object({
  section_title: z.string(),
  description: z.string(),
  subsections: z
    .array(
      z.object({
        subsectionTitle: z.string(),
        description: z.string(),
      }),
    )
    .optional(),
});

export const zSubsection = z.object({
  subsectionTitle: z.string(),
  description: z.string(),
});

export const zTextHighlight = z.object({
  fullMarkdown: z.string(),
  markdownBlock: z.string(),
  selectedText: z.string(),
});

export const zLlmMessageTypes = z.enum([
  "AssistantMessage",
  "SystemMessage",
  "UserMessage",
  "FunctionExecutionResultMessage",
]);

export const zQuickStart = z.object({
  icon: z.string().optional(),
  com_id: z.string().optional(),
  title: z.string().optional(),
  content: z.string(),
  cn: z.string().optional(),
});

export const zPrompt = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  content: z.string(),
  tags: z.array(z.string()),
});

export const zPromptList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zArtifact).optional(),
});

export const zModel = zApiResourceMetaProperties.merge(
  z.object({
    name: z.string(),
    model: z.string(),
    provider: z.string(),
    apiKey: z.string(),
    apiBase: z.string(),
    vendor: z.string(),
    description: z.string().optional(),
    family: z.string(),
    vision: z.boolean(),
    functionCalling: z.boolean(),
    jsonOutput: z.boolean(),
    tags: z.array(z.string()).optional(),
  }),
);

export const zModelFamily = z.enum(["r1", "openai", "unknown"]);

export const zModelInfo = z.object({
  family: zModelFamily,
  vision: z.boolean(),
  function_calling: z.boolean(),
  json_output: z.boolean(),
  structured_output: z.boolean(),
});

export const zModelTypes = z.enum([
  "OpenAIChatCompletionClient",
  "AzureOpenAIChatCompletionClient",
]);

export const zModelProperties = z.object({
  name: z.string(),
  model: z.string(),
  provider: z.string(),
  apiKey: z.string(),
  apiBase: z.string(),
  vendor: z.string(),
  description: z.string().optional(),
  family: z.string(),
  vision: z.boolean(),
  functionCalling: z.boolean(),
  jsonOutput: z.boolean(),
  tags: z.array(z.string()).optional(),
});

export const zModelList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zModel).optional(),
});

export const zFormField = z.object({
  type: z.enum(["text", "number", "boolean", "array", "object"]),
  name: z.string(),
  default_value: z.string().optional(),
  label: z.string().optional(),
  description: z.string().optional(),
  required: z.boolean().optional(),
  min: z.number().optional(),
  max: z.number().optional(),
  placeholder: z.string().optional(),
});

export const zSchemaForm = z.object({
  form_type: z.enum(["schema", "custom"]).optional(),
  form_name: z.string().optional(),
  title: z.string(),
  description: z.string().optional(),
  layout: z.enum(["vertical", "horizontal"]).optional(),
  fields: z.array(zFormField),
});

export const zModelRunProperties = z.object({
  llmMessages: z.object({}).optional(),
  llmResponse: z.object({}).optional(),
});

export const zModelRun = zApiResourceMetaProperties.merge(zModelRunProperties);

export const zModelRunList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zModelRun).optional(),
});

export const zModelRunUpsert = zModelRunProperties;

export const zSite = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  description: z.string(),
});

export const zSiteList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zSite).optional(),
});

export const zCreateSiteRequest = z.object({
  title: z.string(),
  description: z.string(),
  host: z.string().optional(),
});

export const zCreateSiteResponse = zSite;

export const zUpdateSiteRequest = z.object({
  title: z.string().optional(),
});

export const zSiteHost = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  description: z.string(),
  host: z.string(),
});

export const zSiteHostList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zSiteHost).optional(),
});

export const zCreateSiteHostRequest = z.object({
  siteId: z.string(),
  title: z.string(),
  description: z.string(),
  host: z.string(),
});

export const zCreateSiteHostResponse = zSiteHost;

export const zUpdateSiteHostRequest = zSiteHost;

export const zUpdateSiteHostResponse = zSiteHost;

export const zPost = z.object({
  metadata: zApiResourceMeta,
  title: z.string(),
  content: z.string(),
});

export const zPostList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zPost).optional(),
});

export const zCreatePostRequest = z.object({
  siteId: z.string().uuid().length(36),
  title: z.string().min(3).max(200),
  content: z.string().min(50).max(10240),
  slug: z.string().min(3).max(200),
  authorId: z.string().uuid().length(36).optional(),
  status: z.enum(["draft", "published"]).optional(),
});

export const zFrontendConfig = z.object({
  cookieAccessToken: z.string(),
  dashPath: z.string(),
  hotKeyDebug: z.string(),
  defaultTenantAccessToken: z.string(),
});

export const zSiderbarConfig = z.object({
  logo: z.string().optional(),
  sideritems: z
    .array(
      z.object({
        title: z.string(),
        url: z.string(),
        icon: z.string().optional(),
        defaultExpanded: z.boolean().optional(),
        adminOnly: z.boolean().optional(),
        children: z
          .array(
            z.object({
              title: z.string(),
              url: z.string(),
              icon: z.string().optional(),
              adminOnly: z.boolean().optional(),
            }),
          )
          .optional(),
      }),
    )
    .optional(),
});

export const zDashSidebarItem = z.object({
  title: z.string(),
  url: z.string(),
  icon: z.string().optional(),
  defaultExpanded: z.boolean().optional(),
  adminOnly: z.boolean().optional(),
  children: z
    .array(
      z.object({
        title: z.string(),
        url: z.string(),
        icon: z.string().optional(),
        adminOnly: z.boolean().optional(),
      }),
    )
    .optional(),
});

export const zDashSidebarItemLeaf = z.object({
  title: z.string(),
  url: z.string(),
  icon: z.string().optional(),
  adminOnly: z.boolean().optional(),
});

export const zHfAccount = z.object({
  metadata: zApiResourceMeta,
  username: z.string(),
  token: z.string(),
});

export const zEnv = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  value: z.string(),
});

export const zEnvList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zEnv).optional(),
});

export const zEndpoint = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  url: z.string(),
  token: z.string(),
  type: z.string(),
});

export const zEndpointList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zEndpoint).optional(),
});

export const zUpdateEndpointRequest = z.object({
  name: z.string().optional(),
  url: z.string().optional(),
  token: z.string().optional(),
});

export const zPlatform = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zPlatformList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zPlatform).optional(),
});

export const zPlatformUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zPlatformAccountProperties = z.object({
  label: z.string().optional(),
  description: z.string().optional(),
  username: z.string(),
  email: z.string().optional(),
  password: z.string(),
  token: z.string().optional(),
  type: z.string().optional(),
  platform: z.string(),
  enabled: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  state: z.object({}).optional(),
  error: z.string().optional(),
});

export const zPlatformAccountCreate = zPlatformAccountProperties;

export const zPlatformAccount = zApiResourceMetaProperties.merge(zPlatformAccountProperties);

export const zPlatformAccountList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zPlatformAccount).optional(),
});

export const zPlatformAccountUpsert = zPlatformAccountProperties;

export const zBrowser = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zBrowserList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zBrowser).optional(),
});

export const zBrowserUpdate = z.object({
  metadata: zApiResourceMeta,
  name: z.string(),
  description: z.string().optional(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
});

export const zBrowserOpenRequest = z.object({
  url: z.string(),
  title: z.string().optional(),
});

export const zBrowserOpenResult = z.object({
  url: z.string(),
  title: z.string(),
});

export const zProxyProperties = z.object({
  name: z.string(),
  description: z.string(),
  url: z.string(),
  loginUrl: z.string().optional(),
  properties: z.object({}).optional(),
  tags: z.array(z.string()).optional(),
  enabled: z.boolean().optional(),
  provider: z.string().optional(),
});

export const zProxy = zApiResourceMetaProperties.merge(zProxyProperties);

export const zProxyList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zProxy).optional(),
});

export const zProxyUpsert = zProxyProperties;

export const zUiAgentState = z.object({
  welcome: z
    .object({
      title: z.string().optional(),
      content: z.string().optional(),
      subTitle: z.string().optional(),
      quick_starts: z.array(zQuickStart).optional(),
    })
    .optional(),
  thread_id: z.string().optional(),
  team_id: z.string().optional(),
});

export const zChatWelcome = z.object({
  title: z.string().optional(),
  content: z.string().optional(),
  subTitle: z.string().optional(),
  quick_starts: z.array(zQuickStart).optional(),
});

export const zAssignedAction = z.object({
  tenantId: z.string(),
  workflowRunId: z.string().optional(),
  getGroupKeyRunId: z.string().optional(),
  jobId: z.string(),
  jobName: z.string().optional(),
  stepId: z.string(),
  stepRunId: z.string().optional(),
  actionId: z.string(),
  actionType: z.string(),
  actionPayload: z.string(),
  stepName: z.string(),
  retryCount: z.number().int(),
  additional_metadata: z.string().optional(),
  child_workflow_index: z.number().int().optional(),
  child_workflow_key: z.string().optional(),
  parent_workflow_run_id: z.string().optional(),
});

export const zResourceProperties = z.object({
  title: z.string(),
  description: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
  type: z.string(),
  content: z.object({}).optional(),
  enabled: z.boolean().optional(),
});

export const zResource = zApiResourceMetaProperties.merge(zResourceProperties);

export const zResourceList = z.object({
  metadata: zApiResourceMeta.optional(),
  rows: z.array(zResource).optional(),
  pagination: zPaginationResponse.optional(),
});

export const zResourceUpsert = zResourceProperties;

export const zPlatformAccountData = z.object({
  type: z.enum(["platform_account"]).optional(),
  email: z.string().optional(),
  password: z.string().optional(),
  username: z.string().optional(),
  api_token: z.string().optional(),
});

export const zBrowserData = z.object({
  type: z.enum(["browser"]).optional(),
  cookies: z.string().optional(),
  session: z.string().optional(),
});

export const zInstagramTask = z.object({
  resourceId: z.string().optional(),
  content: z.string().optional(),
});

export const zChatSessionStartEvent = z.object({
  type: z.string().optional(),
  threadId: z.string().optional(),
  source: z.string().optional(),
});

export const zComponentModel = z.object({
  provider: z.string().optional(),
  component_type: z.string().optional(),
  version: z.number().int().optional(),
  component_version: z.number().int().optional(),
  description: z.string().optional(),
  label: z.string().optional(),
  config: z.object({}).optional(),
});

export const zTeamComponent = zComponentModel.merge(
  z.object({
    component_type: z.enum(["team"]),
  }),
);

export const zSocialTeamConfig = zTeamConfig.merge(
  z.object({
    selector_prompt: z.string().optional(),
    allow_repeated_speaker: z.boolean().optional(),
    max_selector_attempts: z.number().int().optional(),
    selector_func: z.string().optional(),
    proxy_url: z.string().optional(),
    enable_swarm: z.boolean().optional().default(false),
  }),
);

export const zSocialTeam = zTeamComponent.merge(
  z.object({
    provider: z.enum(["SocialTeam"]),
    component_type: z.enum(["team"]).optional(),
    config: zSocialTeamConfig,
  }),
);

export const zAgentEventType = z.enum([
  "ThoughtEvent",
  "TextMessage",
  "PlatformAccountFlowInput",
  "ChatMessageInput",
  "SocialAddFollowersInput",
  "SocialLoginInput",
  "TenantInitInput",
  "AskUserFunctionCallInput",
  "StartNewChatInput",
]);

export const zAgEvents = z.union([
  z
    .object({
      type: z.literal("ThoughtEvent").optional(),
    })
    .merge(
      z
        .object({
          type: z.string(),
          source: z.string(),
          models_usage: z
            .object({
              prompt_tokens: z.number().int(),
              completion_tokens: z.number().int(),
            })
            .optional(),
          metadata: z.object({}).optional(),
        })
        .merge(
          z.object({
            type: z.enum(["ThoughtEvent"]),
            content: z.string(),
          }),
        ),
    ),
  z
    .object({
      type: z.literal("TextMessage").optional(),
    })
    .merge(
      z
        .object({
          type: z.string().optional(),
          source: z.string(),
          models_usage: z
            .object({
              prompt_tokens: z.number().int(),
              completion_tokens: z.number().int(),
            })
            .optional(),
          metadata: z.object({}).optional(),
          content: z.string(),
        })
        .merge(
          z.object({
            type: z.enum(["TextMessage"]),
            content: z.string(),
          }),
        ),
    ),
  z
    .object({
      type: z.literal("PlatformAccountFlowInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["PlatformAccountFlowInput"]),
        platform_account_id: z.string().optional(),
      }),
    ),
  z
    .object({
      type: z.literal("SocialAddFollowersInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["SocialAddFollowersInput"]),
        platform_account_id: z.string().optional(),
        count_to_follow: z.number().default(1),
      }),
    ),
  z
    .object({
      type: z.literal("SocialLoginInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["SocialLoginInput"]),
        username: z.string(),
        password: z.string(),
        otp_key: z.string().optional(),
      }),
    ),
  z
    .object({
      type: z.literal("TenantInitInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["TenantInitInput"]),
        tenant_id: z.string(),
      }),
    ),
  z
    .object({
      type: z.literal("ChatMessageInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["ChatMessageInput"]),
        content: z.string(),
      }),
    ),
  z
    .object({
      type: z.literal("AskUserFunctionCallInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["AskUserFunctionCallInput"]),
        title: z.string(),
      }),
    ),
  z
    .object({
      type: z.literal("StartNewChatInput").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["StartNewChatInput"]),
        task: z.string(),
        config: zSocialTeamConfig,
      }),
    ),
]);

export const zTextMessage = z
  .object({
    type: z.string().optional(),
    source: z.string(),
    models_usage: z
      .object({
        prompt_tokens: z.number().int(),
        completion_tokens: z.number().int(),
      })
      .optional(),
    metadata: z.object({}).optional(),
    content: z.string(),
  })
  .merge(
    z.object({
      type: z.enum(["TextMessage"]),
      content: z.string(),
    }),
  );

export const zThoughtEvent = z
  .object({
    type: z.string(),
    source: z.string(),
    models_usage: z
      .object({
        prompt_tokens: z.number().int(),
        completion_tokens: z.number().int(),
      })
      .optional(),
    metadata: z.object({}).optional(),
  })
  .merge(
    z.object({
      type: z.enum(["ThoughtEvent"]),
      content: z.string(),
    }),
  );

export const zTenantInitInput = z.object({
  type: z.enum(["TenantInitInput"]),
  tenant_id: z.string(),
});

export const zChatStartInput = z.object({
  type: z.enum(["ChatStartInput"]).optional(),
  tenant_id: z.string().optional(),
});

export const zAskUserFunctionCall = z.object({
  type: z.enum(["AskUserFunctionCall"]).optional(),
  id: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  fields: z.array(zFormField).optional(),
});

export const zAskUserFunctionCallInput = z.object({
  type: z.enum(["AskUserFunctionCallInput"]),
  title: z.string(),
});

export const zAskUserFunctionCallInputFieldValue = z.object({
  name: z.string().optional(),
  value: z.string(),
});

export const zStartNewChatInput = z.object({
  type: z.enum(["StartNewChatInput"]),
  task: z.string(),
  config: zSocialTeamConfig,
});

export const zToolCallRequestEvent = z.object({
  type: z.enum(["ToolCallRequestEvent"]),
  content: z.array(
    z.object({
      id: z.string(),
      arguments: z.string(),
      name: z.string(),
    }),
  ),
});

export const zMyDemoAgentEvent = z.object({
  type: z.enum(["MyDemoAgentEvent"]),
  content: z.string(),
});

export const zUserInputRequestedEvent = z.object({
  type: z.enum(["UserInputRequestedEvent"]),
  request_id: z.string(),
  content: z.string(),
});

export const zChatMessageInput = z.object({
  type: z.enum(["ChatMessageInput"]),
  content: z.string(),
});

export const zFlowError = z.object({
  type: z.string(),
  error: z.string(),
});

export const zSocialAddFollowersInput = z.object({
  type: z.enum(["SocialAddFollowersInput"]),
  platform_account_id: z.string().optional(),
  count_to_follow: z.number().default(1),
});

export const zFlowTeamInput = z.object({
  app_name: z.string(),
  session_id: z.string(),
  component: zTeamComponent,
  task: zAgEvents,
  init_state: zAgentStates.optional(),
  content: z
    .object({
      role: z.string().optional(),
      parts: z
        .array(
          z.object({
            text: z.string().optional(),
            video_metadata: z.object({}).optional(),
            thought: z.boolean().optional(),
            code_execution_result: z.object({}).optional(),
            executable_code: z.string().optional(),
            file_data: z.object({}).optional(),
            function_call: z
              .object({
                id: z.string(),
                name: z.string(),
                args: z.object({}).optional(),
              })
              .optional(),
            function_response: z
              .object({
                id: z.string().optional().default(""),
                name: z.string(),
                response: z.object({}),
              })
              .optional(),
            inline_data: z.object({}).optional(),
          }),
        )
        .optional(),
    })
    .optional(),
});

export const zPlatformAccountFlowInput = z.object({
  type: z.enum(["PlatformAccountFlowInput"]),
  platform_account_id: z.string().optional(),
});

export const zFunctionCall = z.object({
  id: z.string(),
  arguments: z.string(),
  name: z.string(),
});

export const zFunctionExecutionResultMessage = z.object({
  type: z.enum(["FunctionExecutionResultMessage"]),
  content: z.array(
    z.object({
      content: z.string(),
      name: z.string(),
      call_id: z.string(),
      is_error: z.boolean().optional(),
    }),
  ),
});

export const zFunctionExecutionResult = z.object({
  content: z.string(),
  name: z.string(),
  call_id: z.string(),
  is_error: z.boolean().optional(),
});

export const zFlowResult = z.union([
  z
    .object({
      type: z.literal("FlowLoginResult").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["FlowLoginResult"]),
        success: z.boolean().optional(),
        source: z.string().optional(),
        account_id: z.string().optional(),
      }),
    ),
  z
    .object({
      type: z.literal("FlowHandoffResult").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["FlowHandoffResult"]),
        success: z.boolean().optional(),
        name: z.string().optional(),
      }),
    ),
]);

export const zFlowLoginResult = z.object({
  type: z.enum(["FlowLoginResult"]),
  success: z.boolean().optional(),
  source: z.string().optional(),
  account_id: z.string().optional(),
});

export const zFlowHandoffResult = z.object({
  type: z.enum(["FlowHandoffResult"]),
  success: z.boolean().optional(),
  name: z.string().optional(),
});

export const zLlmMessage = z.union([
  z
    .object({
      type: z.literal("UserMessage").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["UserMessage"]),
        content: z.string(),
        source: z.string().optional(),
      }),
    ),
  z
    .object({
      type: z.literal("SystemMessage").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["SystemMessage"]),
        content: z.string(),
      }),
    ),
  z
    .object({
      type: z.literal("AssistantMessage").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["AssistantMessage"]),
        content: z.union([z.string(), z.array(zFunctionCall)]),
        source: z.string().optional(),
        thought: z.string().optional(),
      }),
    ),
  z
    .object({
      type: z.literal("FunctionExecutionResultMessage").optional(),
    })
    .merge(zFunctionExecutionResultMessage),
]);

export const zUserMessage = z.object({
  type: z.enum(["UserMessage"]),
  content: z.string(),
  source: z.string().optional(),
});

export const zSystemMessage = z.object({
  type: z.enum(["SystemMessage"]),
  content: z.string(),
});

export const zAssistantMessage = z.object({
  type: z.enum(["AssistantMessage"]),
  content: z.union([z.string(), z.array(zFunctionCall)]),
  source: z.string().optional(),
  thought: z.string().optional(),
});

export const zRequestUsage = z.object({
  prompt_tokens: z.number().int(),
  completion_tokens: z.number().int(),
});

export const zBaseChatMessage = z.object({
  type: z.string().optional(),
  source: z.string(),
  models_usage: zRequestUsage.optional(),
  metadata: z.object({}).optional(),
  content: z.string(),
});

export const zBaseTextChatMessage = zBaseChatMessage;

export const zStructuredMessage = zBaseChatMessage.merge(
  z.object({
    type: z.enum(["StructuredMessage"]),
    content: z.string(),
  }),
);

export const zMultiModalMessage = zBaseChatMessage.merge(
  z.object({
    type: z.enum(["MultiModalMessage"]),
    content: z.string(),
  }),
);

export const zBaseAgentEvent = z.object({
  type: z.string(),
  source: z.string(),
  models_usage: zRequestUsage.optional(),
  metadata: z.object({}).optional(),
});

export const zHandoffMessage = zBaseTextChatMessage.merge(
  z.object({
    type: z.enum(["HandoffMessage"]),
    target: z.string().optional(),
    context: z.array(zLlmMessage).optional(),
  }),
);

export const zSocialLoginInput = z.object({
  type: z.enum(["SocialLoginInput"]),
  username: z.string(),
  password: z.string(),
  otp_key: z.string().optional(),
});

export const zAgentIncomingEvent = z.enum(["YES", "NO"]);

export const zAgentOutgoingEvent = z.union([
  z
    .object({
      type: z.literal("AgentScheduledEvent").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["AgentScheduledEvent"]),
        data: z.array(zScheduledItem),
      }),
    ),
  z
    .object({
      type: z.literal("AgentRunScheduledEvent").optional(),
    })
    .merge(
      z.object({
        type: z.enum(["AgentRunScheduledEvent"]),
        data: z.array(zScheduledItem),
      }),
    ),
  z
    .object({
      type: z.literal("AgentErrorEvent").optional(),
    })
    .merge(
      z.object({
        type: z.string(),
        data: z.object({}),
      }),
    ),
  z
    .object({
      type: z.literal("AgentToastEvent").optional(),
    })
    .merge(
      z.object({
        type: z.string(),
        title: z.string(),
        message: z.string(),
      }),
    ),
  z
    .object({
      type: z.literal("AgentConnectedEvent").optional(),
    })
    .merge(
      z.object({
        type: z.string(),
      }),
    ),
]);

export const zAgentApprovalEvent = z.enum(["YES", "NO"]);

export const zAgentScheduledEvent = z.object({
  type: z.enum(["AgentScheduledEvent"]),
  data: z.array(zScheduledItem),
});

export const zAgentRunScheduledEvent = z.object({
  type: z.enum(["AgentRunScheduledEvent"]),
  data: z.array(zScheduledItem),
});

export const zAgentErrorEvent = z.object({
  type: z.string(),
  data: z.object({}),
});

export const zAgentToastEvent = z.object({
  type: z.string(),
  title: z.string(),
  message: z.string(),
});

export const zAgentConnectedEvent = z.object({
  type: z.string(),
});

export const zAddSessionToEvalSetRequest = z.object({
  eval_id: z.string(),
  session_id: z.string(),
  user_id: z.string(),
});

export const zAdkRawEvent = z
  .object({
    grounding_metadata: z.object({}).optional(),
    partial: z.boolean().optional().default(false),
    turn_complete: z.boolean().optional().default(false),
    error_code: z.string().optional(),
    error_message: z.string().optional(),
    interrupted: z.boolean().optional(),
    custom_metadata: z.object({}).optional(),
    content: z
      .object({
        role: z.string().optional(),
        parts: z
          .array(
            z.object({
              text: z.string().optional(),
              video_metadata: z.object({}).optional(),
              thought: z.boolean().optional(),
              code_execution_result: z.object({}).optional(),
              executable_code: z.string().optional(),
              file_data: z.object({}).optional(),
              function_call: z
                .object({
                  id: z.string(),
                  name: z.string(),
                  args: z.object({}).optional(),
                })
                .optional(),
              function_response: z
                .object({
                  id: z.string().optional().default(""),
                  name: z.string(),
                  response: z.object({}),
                })
                .optional(),
              inline_data: z.object({}).optional(),
            }),
          )
          .optional(),
      })
      .optional(),
  })
  .merge(
    z.object({
      invocation_id: z.string(),
      author: z.string(),
      actions: z.object({}),
      long_running_tool_ids: z.array(z.string()).optional(),
      branch: z.string().optional(),
      partial: z.boolean().optional(),
      timestamp: z.string().optional(),
      id: z.string().optional(),
    }),
  );

export const zAdkLlmResponse = z.object({
  grounding_metadata: z.object({}).optional(),
  partial: z.boolean().optional().default(false),
  turn_complete: z.boolean().optional().default(false),
  error_code: z.string().optional(),
  error_message: z.string().optional(),
  interrupted: z.boolean().optional(),
  custom_metadata: z.object({}).optional(),
  content: z
    .object({
      role: z.string().optional(),
      parts: z
        .array(
          z.object({
            text: z.string().optional(),
            video_metadata: z.object({}).optional(),
            thought: z.boolean().optional(),
            code_execution_result: z.object({}).optional(),
            executable_code: z.string().optional(),
            file_data: z.object({}).optional(),
            function_call: z
              .object({
                id: z.string(),
                name: z.string(),
                args: z.object({}).optional(),
              })
              .optional(),
            function_response: z
              .object({
                id: z.string().optional().default(""),
                name: z.string(),
                response: z.object({}),
              })
              .optional(),
            inline_data: z.object({}).optional(),
          }),
        )
        .optional(),
    })
    .optional(),
});

export const zFunctionCallDict = z.object({
  id: z.string(),
  name: z.string(),
  args: z.object({}).optional(),
});

export const zAgentProperties = z.object({
  name: z.string(),
  description: z.string(),
  provider: z.string(),
  config: z.object({}),
  teamId: z.string(),
});

export const zAgent = zApiResourceMetaProperties.merge(zAgentProperties);

export const zAgentList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAgent).optional(),
});

export const zAgentTopicTypes = z.enum([
  "user",
  "human",
  "instagram",
  "browser",
  "socioety",
  "code",
  "router",
  "research",
  "writer",
  "tenant",
  "closure",
  "response",
]);

export const zInstagramAgent = zComponentModel.merge(
  z.object({
    provider: z.enum(["InstagramAgent"]),
    config: zAssistantAgentConfig.merge(
      z.object({
        credentials: zInstagramCredentials.optional(),
        proxy_url: z.string().optional(),
      }),
    ),
  }),
);

export const zInstagramAgentConfig = zAssistantAgentConfig.merge(
  z.object({
    credentials: zInstagramCredentials.optional(),
    proxy_url: z.string().optional(),
  }),
);

export const zOpenAiChatCompletionClient = zComponentModel.merge(
  z.object({
    provider: z.enum(["OpenAIChatCompletionClient"]),
    config: zOpenAiClientConfigurationConfigModel,
  }),
);

export const zTerminations = z.union([
  z
    .object({
      provider: z.literal("TextMentionTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["TextMentionTermination"]),
        config: z.object({
          text: z.string(),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("HandoffTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["HandoffTermination"]),
        config: z.object({
          target: z.string(),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("TimeoutTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["TimeoutTermination"]),
        config: z.object({
          timeout_seconds: z.number().int(),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("SourceMatchTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["SourceMatchTermination"]),
        config: z.object({
          sources: z.array(z.string()),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("FunctionCallTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["FunctionCallTermination"]),
        config: z.object({
          function_name: z.string(),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("TokenUsageTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["TokenUsageTermination"]),
        config: z.object({
          max_total_token: z.number().int().optional(),
          max_prompt_token: z.number().int().optional(),
          max_completion_token: z.number().int().optional(),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("MaxMessageTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["MaxMessageTermination"]),
        config: z.object({
          max_messages: z.number().int(),
          include_agent_event: z.boolean().optional().default(false),
        }),
      }),
    ),
  z
    .object({
      provider: z.literal("StopMessageTermination").optional(),
    })
    .merge(
      z.object({
        provider: z.enum(["StopMessageTermination"]),
        config: z.object({
          some_thing: z.string().optional(),
        }),
      }),
    ),
]);

export const zTextMentionTermination = z.object({
  provider: z.enum(["TextMentionTermination"]),
  config: z.object({
    text: z.string(),
  }),
});

export const zTextMentionTerminationConfig = z.object({
  text: z.string(),
});

export const zTextMessageTermination = z.object({
  provider: z.enum(["TextMessageTermination"]),
  config: z.object({
    source: z.string(),
  }),
});

export const zTextMessageTerminationConfig = z.object({
  source: z.string(),
});

export const zHandoffTermination = z.object({
  provider: z.enum(["HandoffTermination"]),
  config: z.object({
    target: z.string(),
  }),
});

export const zHandoffTerminationConfig = z.object({
  target: z.string(),
});

export const zTimeoutTermination = z.object({
  provider: z.enum(["TimeoutTermination"]),
  config: z.object({
    timeout_seconds: z.number().int(),
  }),
});

export const zTimeoutTerminationConfig = z.object({
  timeout_seconds: z.number().int(),
});

export const zSourceMatchTermination = z.object({
  provider: z.enum(["SourceMatchTermination"]),
  config: z.object({
    sources: z.array(z.string()),
  }),
});

export const zSourceMatchTerminationConfig = z.object({
  sources: z.array(z.string()),
});

export const zFunctionCallTermination = z.object({
  provider: z.enum(["FunctionCallTermination"]),
  config: z.object({
    function_name: z.string(),
  }),
});

export const zFunctionCallTerminationConfig = z.object({
  function_name: z.string(),
});

export const zTokenUsageTermination = z.object({
  provider: z.enum(["TokenUsageTermination"]),
  config: z.object({
    max_total_token: z.number().int().optional(),
    max_prompt_token: z.number().int().optional(),
    max_completion_token: z.number().int().optional(),
  }),
});

export const zTokenUsageTerminationConfig = z.object({
  max_total_token: z.number().int().optional(),
  max_prompt_token: z.number().int().optional(),
  max_completion_token: z.number().int().optional(),
});

export const zMaxMessageTermination = z.object({
  provider: z.enum(["MaxMessageTermination"]),
  config: z.object({
    max_messages: z.number().int(),
    include_agent_event: z.boolean().optional().default(false),
  }),
});

export const zMaxMessageTerminationConfig = z.object({
  max_messages: z.number().int(),
  include_agent_event: z.boolean().optional().default(false),
});

export const zStopMessageTermination = z.object({
  provider: z.enum(["StopMessageTermination"]),
  config: z.object({
    some_thing: z.string().optional(),
  }),
});

export const zStopMessageTerminationConfig = z.object({
  some_thing: z.string().optional(),
});

export const zComponents = z.union([
  z
    .object({
      provider: z.literal("SocialTeam").optional(),
    })
    .merge(zSocialTeam),
  z
    .object({
      provider: z.literal("AssistantAgent").optional(),
    })
    .merge(zAssistantAgent),
  z
    .object({
      provider: z.literal("InstagramAgent").optional(),
    })
    .merge(zInstagramAgent),
  z
    .object({
      provider: z.literal("UserProxyAgent").optional(),
    })
    .merge(zUserProxyAgent),
]);

export const zTeamProperties = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  provider: z.string(),
  config: z.object({}),
  maxTurns: z.number().int().default(25),
});

export const zTeam = zApiResourceMetaProperties.merge(zTeamProperties);

export const zTeamList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zTeam).optional(),
});

export const zTeamRun = z.object({
  task: z.string().optional(),
  name: z.string().optional(),
});

export const zTeamRunResult = z.object({
  workflowRun: zWorkflowRun.optional(),
});

export const zIgLogin = z.object({
  username: z.string().optional(),
  password: z.string().optional(),
  twofa_code: z.string().optional(),
});

export const zIgLoginResponse = z.object({
  message: z.string().optional(),
});

export const zFlowStateProperties = z.object({
  sessionId: z.string(),
  state: z.object({}),
});

export const zFlowState = zApiResourceMetaProperties.merge(zFlowStateProperties);

export const zFlowStateList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zFlowState).optional(),
});

export const zFlowStateUpsert = zFlowStateProperties;

export const zAdkEventProperties = z.object({
  id: z.string(),
  app_name: z.string(),
  user_id: z.string(),
  session_id: z.string(),
  invocation_id: z.string(),
  author: z.string(),
  branch: z.string().optional(),
  timestamp: z.string(),
  content: z.object({
    role: z.string().optional(),
    parts: z
      .array(
        z.object({
          text: z.string().optional(),
          video_metadata: z.object({}).optional(),
          thought: z.boolean().optional(),
          code_execution_result: z.object({}).optional(),
          executable_code: z.string().optional(),
          file_data: z.object({}).optional(),
          function_call: zFunctionCallDict.optional(),
          function_response: z
            .object({
              id: z.string().optional().default(""),
              name: z.string(),
              response: z.object({}),
            })
            .optional(),
          inline_data: z.object({}).optional(),
        }),
      )
      .optional(),
  }),
  actions: z.object({}),
});

export const zAdkEventList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zApiResourceMetaProperties.merge(zAdkEventProperties)).optional(),
});

export const zAdkEvent = zApiResourceMetaProperties.merge(zAdkEventProperties);

export const zAdkEventUpsert = zAdkEventProperties;

export const zAdkEventOrderByField = z.enum(["createdAt"]);

export const zAdkAppProperties = z.object({
  id: z.string(),
  app_name: z.string(),
  user_id: z.string(),
  session_id: z.string(),
  invocation_id: z.string(),
  author: z.string(),
  branch: z.string(),
  timestamp: z.string(),
  content: z.object({}),
  actions: z.object({}),
});

export const zAdkAppList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zApiResourceMetaProperties.merge(zAdkAppProperties)).optional(),
});

export const zAdkApp = zApiResourceMetaProperties.merge(zAdkAppProperties);

export const zAdkAppUpsert = zAdkAppProperties;

export const zAdkAppTypes = z.enum(["root", "instagram_agent", "assistant", "open_deep_research"]);

export const zAgentRunRequestV3 = z.object({
  app_name: z.string(),
  user_id: z.string().optional(),
  session_id: z.string().optional(),
  init_state: z.object({}).optional(),
  new_message: z.object({
    role: z.string().optional(),
    parts: z
      .array(
        z.object({
          text: z.string().optional(),
          video_metadata: z.object({}).optional(),
          thought: z.boolean().optional(),
          code_execution_result: z.object({}).optional(),
          executable_code: z.string().optional(),
          file_data: z.object({}).optional(),
          function_call: zFunctionCallDict.optional(),
          function_response: z
            .object({
              id: z.string().optional().default(""),
              name: z.string(),
              response: z.object({}),
            })
            .optional(),
          inline_data: z.object({}).optional(),
        }),
      )
      .optional(),
  }),
  streaming: z.boolean().optional().default(false),
});

export const zAdkSessionProperties = z.object({
  id: z.string(),
  app_name: z.string(),
  user_id: z.string(),
  state: zAdkSessionState,
  title: z.string().optional(),
  create_time: z.string(),
  update_time: z.string(),
});

export const zAdkSession = zApiResourceMetaProperties.merge(zAdkSessionProperties);

export const zAdkSessionList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAdkSession).optional(),
});

export const zAdkSessionUpsert = zAdkSessionProperties;

export const zAdkUserStateProperties = z.object({
  id: z.string(),
  app_name: z.string(),
  user_id: z.string(),
  session_id: z.string(),
  invocation_id: z.string(),
  author: z.string(),
  branch: z.string(),
  timestamp: z.string(),
  content: z.object({}),
  actions: z.object({}),
});

export const zAdkUserState = zApiResourceMetaProperties.merge(zAdkUserStateProperties);

export const zAdkUserStateList = z.object({
  pagination: zPaginationResponse.optional(),
  rows: z.array(zAdkUserState).optional(),
});

export const zAdkUserStateUpsert = zAdkUserStateProperties;

export const zContent = z.object({
  role: z.string().optional(),
  parts: z
    .array(
      z.object({
        text: z.string().optional(),
        video_metadata: z.object({}).optional(),
        thought: z.boolean().optional(),
        code_execution_result: z.object({}).optional(),
        executable_code: z.string().optional(),
        file_data: z.object({}).optional(),
        function_call: zFunctionCallDict.optional(),
        function_response: z
          .object({
            id: z.string().optional().default(""),
            name: z.string(),
            response: z.object({}),
          })
          .optional(),
        inline_data: z.object({}).optional(),
      }),
    )
    .optional(),
});

export const zUserContent = z.object({
  role: z.enum(["user"]),
  parts: z.array(
    z.object({
      text: z.string().optional(),
      video_metadata: z.object({}).optional(),
      thought: z.boolean().optional(),
      code_execution_result: z.object({}).optional(),
      executable_code: z.string().optional(),
      file_data: z.object({}).optional(),
      function_call: zFunctionCallDict.optional(),
      function_response: z
        .object({
          id: z.string().optional().default(""),
          name: z.string(),
          response: z.object({}),
        })
        .optional(),
      inline_data: z.object({}).optional(),
    }),
  ),
});

export const zModelContent = z.object({
  role: z.enum(["model"]),
  parts: z.array(
    z.object({
      text: z.string().optional(),
      video_metadata: z.object({}).optional(),
      thought: z.boolean().optional(),
      code_execution_result: z.object({}).optional(),
      executable_code: z.string().optional(),
      file_data: z.object({}).optional(),
      function_call: zFunctionCallDict.optional(),
      function_response: z
        .object({
          id: z.string().optional().default(""),
          name: z.string(),
          response: z.object({}),
        })
        .optional(),
      inline_data: z.object({}).optional(),
    }),
  ),
});

export const zPart = z.object({
  text: z.string().optional(),
  video_metadata: z.object({}).optional(),
  thought: z.boolean().optional(),
  code_execution_result: z.object({}).optional(),
  executable_code: z.string().optional(),
  file_data: z.object({}).optional(),
  function_call: zFunctionCallDict.optional(),
  function_response: z
    .object({
      id: z.string().optional().default(""),
      name: z.string(),
      response: z.object({}),
    })
    .optional(),
  inline_data: z.object({}).optional(),
});

export const zFunctionResponse = z.object({
  id: z.string().optional().default(""),
  name: z.string(),
  response: z.object({}),
});

export const zMetadataGetResponse = zApiMeta;

export const zCloudMetadataGetResponse = zApiErrors;

export const zMetadataListIntegrationsResponse = zListApiMetaIntegration;

export const zUserUpdateLoginResponse = zUser;

export const zTenantSettingsListResponse = zTenantSettingList;

export const zTenantDefaultSettingGetResponse = zTenantSetting;

export const zTenantDefaultSettingResponse = zTenantSetting;

export const zTenantSettingsDeleteResponse = z.void();

export const zTenantSettingsGetResponse = zTenantSetting;

export const zTenantSettingsUpsertResponse = zTenantSetting;

export const zSnsListResponse = zListSnsIntegrations;

export const zSnsCreateResponse = zSnsIntegration;

export const zAlertEmailGroupListResponse = zTenantAlertEmailGroupList;

export const zAlertEmailGroupCreateResponse = zTenantAlertEmailGroup;

export const zTenantResourcePolicyGetResponse = zTenantResourcePolicy;

export const zAlertEmailGroupDeleteResponse = z.void();

export const zAlertEmailGroupUpdateResponse = zTenantAlertEmailGroup;

export const zSnsDeleteResponse = z.void();

export const zSlackWebhookListResponse = zListSlackWebhooks;

export const zSlackWebhookDeleteResponse = z.void();

export const zUserGetCurrentResponse = zUser;

export const zUserUpdatePasswordResponse = zUser;

export const zUserCreateResponse = zUser;

export const zUserUpdateLogoutResponse = zUser;

export const zTenantMembershipsListResponse = zUserTenantMembershipsList;

export const zUserListTenantInvitesResponse = zTenantInviteList;

export const zTenantCreateResponse = zTenant;

export const zTenantUpdateResponse = zTenant;

export const zTenantAlertingSettingsGetResponse = zTenantAlertingSettings;

export const zTenantInviteListResponse = zTenantInviteList;

export const zTenantInviteCreateResponse = zTenantInvite;

export const zTenantInviteDeleteResponse = zTenantInvite;

export const zTenantInviteUpdateResponse = zTenantInvite;

export const zApiTokenListResponse = zListApiTokensResponse;

export const zApiTokenCreateResponse = zCreateApiTokenResponse;

export const zApiTokenUpdateRevokeResponse = z.void();

export const zTenantGetQueueMetricsResponse = zTenantQueueMetrics;

export const zTenantGetStepRunQueueMetricsResponse = zTenantStepRunQueueMetrics;

export const zEventListResponse = zEventList;

export const zEventUpdateCancelResponse = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)).optional(),
});

export const zRateLimitListResponse = zRateLimitList;

export const zTenantMemberListResponse = zTenantMemberList;

export const zTenantMemberDeleteResponse = zTenantMember;

export const zEventGetResponse = zEvent;

export const zEventDataGetResponse = zEventData;

export const zEventKeyListResponse = zEventKeyList;

export const zWorkflowListResponse = zWorkflowList;

export const zWorkflowScheduledListResponse = zScheduledWorkflowsList;

export const zWorkflowScheduledDeleteResponse = z.void();

export const zWorkflowScheduledGetResponse = zScheduledWorkflows;

export const zCronWorkflowListResponse = zCronWorkflowsList;

export const zWorkflowRunCancelResponse = z.object({
  workflowRunIds: z.array(z.string().uuid().length(36)).optional(),
});

export const zWorkflowDeleteResponse = z.void();

export const zWorkflowGetResponse = zWorkflow;

export const zWorkflowUpdateResponse = zWorkflow;

export const zWorkflowVersionGetResponse = zWorkflowVersion;

export const zWorkflowRunCreateResponse = zWorkflowRun;

export const zWorkflowGetMetricsResponse = zWorkflowMetrics;

export const zLogLineListResponse = zLogLineList;

export const zStepRunListEventsResponse = zStepRunEventList;

export const zWorkflowRunListStepRunEventsResponse = zStepRunEventList;

export const zStepRunListArchivesResponse = zStepRunArchiveList;

export const zWorkflowGetWorkersCountResponse = zWorkflowWorkersCount;

export const zWorkflowRunListResponse = zWorkflowRunList;

export const zWorkflowRunUpdateReplayResponse = zReplayWorkflowRunsResponse;

export const zWorkflowRunGetMetricsResponse = zWorkflowRunsMetrics;

export const zWorkflowRunGetResponse = zWorkflowRun;

export const zWorkflowRunGetShapeResponse = zWorkflowRunShape;

export const zStepRunGetResponse = zStepRun;

export const zStepRunUpdateRerunResponse = zStepRun;

export const zStepRunUpdateCancelResponse = zStepRun;

export const zStepRunGetSchemaResponse = z.object({});

export const zWorkerListResponse = zWorkerList;

export const zWorkerGetResponse = zWorker;

export const zWorkerUpdateResponse = zWorker;

export const zWebhookListResponse = zWebhookWorkerListResponse;

export const zWebhookCreateResponse = zWebhookWorkerCreated;

export const zWebhookRequestsListResponse = zWebhookWorkerRequestListResponse;

export const zWorkflowRunGetInputResponse = z.object({});

export const zWorkflowGetByNameResponse = zWorkflow;

export const zBlogListResponse = zBlogList;

export const zBlogCreateResponse = zBlog;

export const zBlogGetResponse = zBlog;

export const zBlogUpdateResponse = zBlog;

export const zSiteListResponse = zSiteList;

export const zSiteCreateResponse = zSite;

export const zSiteGetResponse = zSite;

export const zSiteUpdateResponse = zSite;

export const zSiteGetByHostResponse = zSite;

export const zSiteHostListResponse = zSiteHostList;

export const zSiteHostCreateResponse = zSiteHost;

export const zSiteHostGetResponse = zSiteHost;

export const zSiteHostUpdateResponse = zSiteHost;

export const zPostListPublicResponse = zPostList;

export const zPostGetResponse = zPost;

export const zPostListResponse = zPostList;

export const zPostCreateResponse = zPost;

export const zArtifactListResponse = zArtifactList;

export const zArtifactGetResponse = zArtifact;

export const zComsListResponse = zComponentList;

export const zComsUpsertResponse = zComponent;

export const zComsGetResponse = zComponent;

export const zGalleryListResponse = zGalleryList;

export const zGalleryCreateResponse = zGallery;

export const zGalleryGetResponse = zGallery;

export const zAgEventListResponse = zAgEventList;

export const zAgEventGetResponse = zAgEvent;

export const zModelListResponse = zModelList;

export const zModelGetResponse = zModel;

export const zModelUpsertResponse = zModel;

export const zModelRunsListResponse = zModelList;

export const zModelRunGetResponse = zModelRun;

export const zModelRunUpsertResponse = zModelRun;

export const zPromptListResponse = zPromptList;

export const zPromptGetResponse = z.string();

export const zAdminReleaseConnResponse = zCommonResult;

export const zAdminResetDbResponse = zCommonResult;

export const zFrontendGetConfigResponse = zFrontendConfig;

export const zFrontendGetSiderbarResponse = zSiderbarConfig;

export const zHfAccountGetResponse = zHfAccount;

export const zEnvListResponse = zEnvList;

export const zEnvUpdateResponse = zBlog;

export const zEnvGetResponse = zEnv;

export const zEndpointListResponse = zEndpointList;

export const zEndpointUpdateResponse = zEndpoint;

export const zPlatformListResponse = zPlatformList;

export const zPlatformCreateResponse = zPlatform;

export const zPlatformGetResponse = zPlatform;

export const zPlatformUpdateResponse = zPlatform;

export const zPlatformAccountListResponse = zPlatformAccountList;

export const zPlatformAccountCreateResponse = zPlatformAccount;

export const zPlatformAccountGetResponse = zPlatformAccount;

export const zPlatformAccountUpsertResponse = zPlatformAccount;

export const zBrowserListResponse = zBrowserList;

export const zBrowserCreateResponse = zBrowser;

export const zBrowserOpenResponse = zBrowserOpenResult;

export const zBrowserGetResponse = zBrowser;

export const zBrowserUpdateResponse = zBrowser;

export const zProxyListResponse = zProxyList;

export const zProxyGetResponse = zProxy;

export const zProxyUpsertResponse = zProxy;

export const zAgStateListResponse = zAgStateList;

export const zAgStateGetResponse = zAgState;

export const zAgStateUpsertResponse = zAgState;

export const zChatMessagesListResponse = zChatMessageList;

export const zChatSessionListResponse = zChatSessionList;

export const zChatMessageUpsertResponse = zChatMessage;

export const zChatSessionGetResponse = zChatSession;

export const zChatSessionUpsertResponse = zChatSession;

export const zFlowStateListResponse = zFlowStateList;

export const zFlowStateGetResponse = zFlowState;

export const zFlowStateUpsertResponse = zFlowState;

export const zUiAgentGetResponse = zUiAgentState;

export const zDispatcherListenResponse = zAssignedAction;

export const zResourceListResponse = zResourceList;

export const zResourceUpsertResponse = zResource;

export const zResourceDeleteResponse = z.void();

export const zResourceGetResponse = zResource;

export const zInstagramLoginResponse = zIgLoginResponse;

export const zAdkAppListResponse = zAdkEventList;

export const zAdkAppUpsertResponse = zAdkApp;

export const zAdkAppGetResponse = zAdkApp;

export const zAdkSessionListResponse = zAdkSessionList;

export const zAdkSessionUpsertResponse = zAdkSession;

export const zAdkSessionGetResponse = zAdkSession;

export const zAdkUserStateListResponse = zAdkUserStateList;

export const zAdkUserStateUpsertResponse = zAdkUserState;

export const zAdkUserStateGetResponse = zAdkUserState;

export const zAdkEventsListResponse = zAdkEventList;

export const zAdkEventsUpsertResponse = zAdkEvent;

export const zAdkEventsGetResponse = zAdkEvent;
