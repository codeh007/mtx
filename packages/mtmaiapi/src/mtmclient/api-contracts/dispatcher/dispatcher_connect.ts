// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file api-contracts/dispatcher/dispatcher.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  ActionEventResponse,
  AssignedAction,
  GroupKeyActionEvent,
  HeartbeatRequest,
  HeartbeatResponse,
  OverridesData,
  OverridesDataResponse,
  RefreshTimeoutRequest,
  RefreshTimeoutResponse,
  ReleaseSlotRequest,
  ReleaseSlotResponse,
  StepActionEvent,
  SubscribeToWorkflowEventsRequest,
  SubscribeToWorkflowRunsRequest,
  UpsertWorkerLabelsRequest,
  UpsertWorkerLabelsResponse,
  WorkerListenRequest,
  WorkerRegisterRequest,
  WorkerRegisterResponse,
  WorkerUnsubscribeRequest,
  WorkerUnsubscribeResponse,
  WorkflowEvent,
  WorkflowRunEvent,
} from "./dispatcher_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service Dispatcher
 */
export const Dispatcher = {
  typeName: "Dispatcher",
  methods: {
    /**
     * @generated from rpc Dispatcher.Register
     */
    register: {
      name: "Register",
      I: WorkerRegisterRequest,
      O: WorkerRegisterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.Listen
     */
    listen: {
      name: "Listen",
      I: WorkerListenRequest,
      O: AssignedAction,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ListenV2 is like listen, but implementation does not include heartbeats. This should only used by SDKs
     * against engine version v0.18.1+
     *
     * @generated from rpc Dispatcher.ListenV2
     */
    listenV2: {
      name: "ListenV2",
      I: WorkerListenRequest,
      O: AssignedAction,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Heartbeat is a method for workers to send heartbeats to the dispatcher
     *
     * @generated from rpc Dispatcher.Heartbeat
     */
    heartbeat: {
      name: "Heartbeat",
      I: HeartbeatRequest,
      O: HeartbeatResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.SubscribeToWorkflowEvents
     */
    subscribeToWorkflowEvents: {
      name: "SubscribeToWorkflowEvents",
      I: SubscribeToWorkflowEventsRequest,
      O: WorkflowEvent,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc Dispatcher.SubscribeToWorkflowRuns
     */
    subscribeToWorkflowRuns: {
      name: "SubscribeToWorkflowRuns",
      I: SubscribeToWorkflowRunsRequest,
      O: WorkflowRunEvent,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * @generated from rpc Dispatcher.SendStepActionEvent
     */
    sendStepActionEvent: {
      name: "SendStepActionEvent",
      I: StepActionEvent,
      O: ActionEventResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.SendGroupKeyActionEvent
     */
    sendGroupKeyActionEvent: {
      name: "SendGroupKeyActionEvent",
      I: GroupKeyActionEvent,
      O: ActionEventResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.PutOverridesData
     */
    putOverridesData: {
      name: "PutOverridesData",
      I: OverridesData,
      O: OverridesDataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.Unsubscribe
     */
    unsubscribe: {
      name: "Unsubscribe",
      I: WorkerUnsubscribeRequest,
      O: WorkerUnsubscribeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.RefreshTimeout
     */
    refreshTimeout: {
      name: "RefreshTimeout",
      I: RefreshTimeoutRequest,
      O: RefreshTimeoutResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.ReleaseSlot
     */
    releaseSlot: {
      name: "ReleaseSlot",
      I: ReleaseSlotRequest,
      O: ReleaseSlotResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc Dispatcher.UpsertWorkerLabels
     */
    upsertWorkerLabels: {
      name: "UpsertWorkerLabels",
      I: UpsertWorkerLabelsRequest,
      O: UpsertWorkerLabelsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
