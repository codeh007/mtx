"use client";
import { useRouter } from "next-nprogress-bar";
import { usePathname, useSearchParams } from "next/navigation";
import { useCallback, useMemo } from "react";
import { useDebouncedCallback } from "use-debounce";

/*
提示： next-nprogress-bar 的 router 本身已经封装了 nextjs 的router。
      这个router 可以触发顶部 页面 跳转 进度条。
      这里在 next-nprogress-bar router 基础上，进一步封装
*/
export const useMtRouter = () => {
  const router = useRouter();
  return {
    ...router,
  };
};

export const useGo = () => {
  const router = useRouter();
  const pathName = usePathname();

  const goParent = useCallback(() => {
    const pathSegments = pathName.split("/");
    const a = pathSegments.slice(0, -1).join("/");
    console.log(a);
    router.replace(a);
  }, [pathName, router]);
  return {
    goParent,
  };
};

// 取代 nextjs 的 useSearchParams hook
export const useMtSearchParams = () => {
  const searchParamsFromNextjs = useSearchParams();
  const finnalParams = useMemo(() => {
    return Object.fromEntries(searchParamsFromNextjs);
  }, [searchParamsFromNextjs]);

  const router = useMtRouter();
  const pathName = usePathname();
  const pushUrl = useDebouncedCallback(router.push, 300);
  const patchSearchs = useCallback(
    (values: Record<string, string>) => {
      const params = { ...finnalParams, ...values };
      // biome-ignore lint/complexity/noForEach: <explanation>
      Object.keys(params).forEach((k) => {
        if (!params[k]) {
          delete params[k];
        }
      });
      //
      if (typeof window !== "undefined") {
        pushUrl(`${pathName}?${new URLSearchParams(params).toString()}`);
        // window.location.replace(`${pathName}?${new URLSearchParams(params).toString()}`);
      }
    },
    [finnalParams, pathName, pushUrl],
  );
  return {
    params: finnalParams,
    get: (name: string) => {
      // biome-ignore lint/complexity/useOptionalChain: <explanation>
      return finnalParams && finnalParams[name];
    },
    patchSearchs,
  };
};
