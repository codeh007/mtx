"use client";

import type { LucideIcon } from "lucide-react";
import Link from "next/link";
import { cn } from "../../lib/utils";
import { buttonVariants } from "../../ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "../../ui/tooltip";
import { useDash5Store } from "./dash5.store";

interface NavProps {
	isCollapsed: boolean;
	links: {
		title: string;
		label?: string;
		icon: LucideIcon;
		variant: "default" | "ghost";
	}[];
}

export function Nav({ links, isCollapsed }: NavProps) {
	return (
		<div
			data-collapsed={isCollapsed}
			className="group flex flex-col gap-4 py-2 data-[collapsed=true]:py-2"
		>
			<nav className="grid gap-1 px-2 group-[[data-collapsed=true]]:justify-center group-[[data-collapsed=true]]:px-2">
				{links.map((link, index) =>
					isCollapsed ? (
						// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
						<Tooltip key={index} delayDuration={0}>
							<TooltipTrigger asChild>
								<Link
									href="#"
									className={cn(
										buttonVariants({ variant: link.variant, size: "icon" }),
										"h-9 w-9",
										link.variant === "default" &&
											"dark:bg-muted dark:text-muted-foreground dark:hover:bg-muted dark:hover:text-white",
									)}
								>
									<link.icon className="h-4 w-4" />
									<span className="sr-only">{link.title}</span>
								</Link>
							</TooltipTrigger>
							<TooltipContent side="right" className="flex items-center gap-4">
								{link.title}
								{link.label && (
									<span className="ml-auto text-muted-foreground">
										{link.label}
									</span>
								)}
							</TooltipContent>
						</Tooltip>
					) : (
						<Link
							// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
							key={index}
							href="#"
							className={cn(
								buttonVariants({ variant: link.variant, size: "sm" }),
								link.variant === "default" &&
									"dark:bg-muted dark:text-white dark:hover:bg-muted dark:hover:text-white",
								"justify-start",
							)}
						>
							<link.icon className="mr-2 h-4 w-4" />
							{link.title}
							{link.label && (
								<span
									className={cn(
										"ml-auto",
										link.variant === "default" &&
											"text-background dark:text-white",
									)}
								>
									{link.label}
								</span>
							)}
						</Link>
					),
				)}
			</nav>
			<div className="mt-auto pb-4">
				<CollapseButton />
			</div>
		</div>
	);
}

const CollapseButton = () => {
	const isSideCollapsed = useDash5Store((x) => x.isSideCollapsed);
	const setIsSideCollapsed = useDash5Store((x) => x.setIsSideCollapsed);
	return (
		<>
			{/* biome-ignore lint/a11y/useButtonType: <explanation> */}
			<button
				onClick={() => setIsSideCollapsed(!isSideCollapsed)}
				className="flex w-full items-center justify-center p-2 text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800 transition-colors"
				aria-label={isSideCollapsed ? "Expand sidebar" : "Collapse sidebar"}
			>
				{isSideCollapsed ? (
					// biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						className="h-6 w-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							strokeLinecap="round"
							strokeLinejoin="round"
							strokeWidth={2}
							d="M13 5l7 7-7 7M5 5l7 7-7 7"
						/>
					</svg>
				) : (
					// biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						className="h-6 w-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							strokeLinecap="round"
							strokeLinejoin="round"
							strokeWidth={2}
							d="M11 19l-7-7 7-7m8 14l-7-7 7-7"
						/>
					</svg>
				)}
			</button>
		</>
	);
};
