"use client";
import { keepPreviousData, useQuery } from "@tanstack/react-query";
// import {
//   agentGetAgentTaskStepsOptions,
//   getTaskOptions,
// } from "mtmaiapi/@tanstack/react-query.gen";
import { DebugValue } from "mtxuilib/components/devtools/DebugValue";
import { Icons } from "mtxuilib/icons/icons";
import { Skeleton } from "mtxuilib";
import { useEffect, useState } from "react";
import { useCostCalculator } from "../../../../hooks/useCostCalculator";
import { useMtmaiV2 } from "../../../../stores/StoreProvider";
import { Status } from "../../../api/types";
import { ZoomableImage } from "../../../components/ZoomableImage";
import { statusIsNotFinalized, statusIsRunningOrQueued } from "../types";
import { ActionScreenshot } from "./ActionScreenshot";
import { ScrollableActionList } from "./ScrollableActionList";
import { useActions } from "./hooks/useActions";
import React from "react";
import {
  type TaskActionsProps,
  TaskActionProvider,
  useTaskActionStore,
} from "./taskAction.store.tsx--";
// import {
//   TaskActionProvider,
//   type TaskActionsProps,
//   useTaskActionStore,
// } from "./taskAction.store.tsx--";

const formatter = Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
});

// type StreamMessage = {
//   task_id: string;
//   status: string;
//   screenshot?: string;
// };

// const socket: WebSocket | null = null;

export function TaskActions({ taskId }: TaskActionsProps) {
  const accessToken = useMtmaiV2((x) => x.accessToken);

  return (
    <TaskActionProvider taskId={taskId} accessToken={accessToken}>
      <TaskActionImpl />
    </TaskActionProvider>
  );
}

const TaskActionImpl = () => {
  const taskId = useTaskActionStore((x) => x.taskId);

  const [streamImgSrc, setStreamImgSrc] = useState<string>("");
  const [selectedAction, setSelectedAction] = useState<number | "stream">(0);
  const costCalculator = useCostCalculator();
  const task = useTaskActionStore((x) => x.task);
  const setTask = useTaskActionStore((x) => x.setTask);

  const taskIsLoading = useTaskActionStore((x) => x.taskIsLoading);
  const setTaskIsLoading = useTaskActionStore((x) => x.setTaskIsLoading);

  const latestTaskStatus = useTaskActionStore((x) => x.latestTaskStatus);

  const run = useTaskActionStore((x) => x.run);
  const { data, isLoading } = useQuery({
    ...getTaskOptions({
      path: {
        task_id: taskId,
      },
    }),
    refetchInterval: (query) => {
      if (!query.state.data) {
        return false;
      }
      if (statusIsNotFinalized(query.state.data)) {
        return 5000;
      }
      return false;
    },
    placeholderData: keepPreviousData,
  });

  useEffect(() => {
    if (data) {
      setTask(data);
    }
  }, [data, setTask]);

  useEffect(() => {
    if (isLoading) {
      setTaskIsLoading(true);
    } else {
      setTaskIsLoading(false);
    }
  }, [isLoading, setTaskIsLoading]);
  const taskIsNotFinalized = task && statusIsNotFinalized(task);
  const taskIsRunningOrQueued = task && statusIsRunningOrQueued(task);

  useEffect(() => {
    if (!taskIsRunningOrQueued) {
      return;
    }
    const clean = run();

    if (clean) return clean;
  }, [run, taskIsRunningOrQueued]);

  // useEffect(() => {
  //   if (!taskIsRunningOrQueued) {
  //     return;
  //   }

  //   // async function run() {
  //   //   const credential = `?token=Bearer ${accessToken}`;
  //   //   if (socket) {
  //   //     socket.close();
  //   //   }
  //   //   socket = new WebSocket(
  //   //     `${wsUrl}/api/v1/stream/tasks/${taskId}${credential}`,
  //   //   );
  //   //   // Listen for messages
  //   //   socket.addEventListener("message", (event) => {
  //   //     try {
  //   //       const message: StreamMessage = JSON.parse(event.data);
  //   //       if (message.screenshot) {
  //   //         setStreamImgSrc(message.screenshot);
  //   //       }
  //   //       if (
  //   //         message.status === "completed" ||
  //   //         message.status === "failed" ||
  //   //         message.status === "terminated"
  //   //       ) {
  //   //         socket?.close();
  //   //         setSelectedAction(0);
  //   //         if (
  //   //           message.status === "failed" ||
  //   //           message.status === "terminated"
  //   //         ) {
  //   //           toast({
  //   //             title: "Task Failed",
  //   //             description: "The task has failed.",
  //   //             variant: "destructive",
  //   //           });
  //   //         } else if (message.status === "completed") {
  //   //           toast({
  //   //             title: "Task Completed",
  //   //             description: "The task has been completed.",
  //   //             variant: "success",
  //   //           });
  //   //         }
  //   //       }
  //   //     } catch (e) {
  //   //       console.error("Failed to parse message", e);
  //   //     }
  //   //   });

  //   //   socket.addEventListener("close", () => {
  //   //     socket = null;
  //   //   });
  //   // }
  //   // run();

  //   return () => {
  //     if (socket) {
  //       socket.close();
  //       socket = null;
  //     }
  //   };
  // }, [taskId, taskIsRunningOrQueued]);

  useEffect(() => {
    if (!taskIsLoading && taskIsNotFinalized) {
      setSelectedAction("stream");
    }
  }, [taskIsLoading, taskIsNotFinalized]);

  const { data: steps, isLoading: stepsIsLoading } = useQuery({
    ...agentGetAgentTaskStepsOptions({
      path: {
        task_id: taskId,
      },
    }),
    enabled: !!task,
    refetchOnWindowFocus: taskIsNotFinalized,
    refetchInterval: taskIsNotFinalized ? 5000 : false,
    placeholderData: keepPreviousData,
  });

  const { data: actions, isLoading: actionsIsLoading } = useActions({
    taskId: taskId,
  });

  if (taskIsLoading || actionsIsLoading || stepsIsLoading) {
    return (
      <div className="flex gap-2">
        <div className="h-[40rem] w-3/4">
          <Skeleton className="h-full" />
        </div>
        <div className="h-[40rem] w-1/4">
          <Skeleton className="h-full" />
        </div>
      </div>
    );
  }

  const activeAction =
    typeof selectedAction === "number" &&
    actions?.[actions.length - selectedAction - 1];

  function getStream() {
    if (task?.status === Status.Created) {
      return (
        <div className="flex h-full w-full flex-col items-center justify-center gap-4 bg-slate-elevation1 text-lg">
          <span>Task has been created.</span>
          <span>Stream will start when the task is running.</span>
        </div>
      );
    }
    if (task?.status === Status.Queued) {
      return (
        <div className="flex h-full w-full flex-col items-center justify-center gap-4 bg-slate-elevation1 text-lg">
          <span>Your task is queued. Typical queue time is 1-2 minutes.</span>
          <span>Stream will start when the task is running.</span>
        </div>
      );
    }

    if (task?.status === Status.Running && streamImgSrc.length === 0) {
      return (
        <div className="flex h-full w-full items-center justify-center bg-slate-elevation1 text-lg">
          {/* 正在拉取实时截屏... */}
          <Icons.spinner className="h-10 w-10 animate-spin" />
        </div>
      );
    }

    if (task?.status === Status.Running && streamImgSrc.length > 0) {
      return (
        <div className="h-full w-full">
          <ZoomableImage src={`data:image/png;base64,${streamImgSrc}`} />
        </div>
      );
    }
    return null;
  }

  const showCost = typeof costCalculator === "function";
  const notRunningSteps = steps?.filter((step) => step.status !== "running");

  return (
    <div className="flex gap-2">
      <div className="w-2/3 rounded border">
        <div className="h-full w-full p-4">
          {selectedAction === "stream" ? getStream() : null}
          {typeof selectedAction === "number" && activeAction ? (
            <ActionScreenshot
              taskId={taskId}
              stepId={activeAction.stepId}
              index={activeAction.index}
            />
          ) : null}
        </div>
      </div>

      <DebugValue
        data={{
          latestTaskStatus,
          actions,
          taskId,
          selectedAction,
          steps,
          task,
        }}
        title="actions"
      />
      <ScrollableActionList
        taskId={taskId}
        activeIndex={selectedAction}
        data={actions ?? []}
        onActiveIndexChange={setSelectedAction}
        showStreamOption={Boolean(taskIsNotFinalized)}
        taskDetails={{
          steps: steps?.length ?? 0,
          actions: actions?.length ?? 0,
          cost: showCost
            ? formatter.format(costCalculator(notRunningSteps ?? []))
            : undefined,
        }}
        onNext={() => {
          if (!actions) {
            return;
          }
          setSelectedAction((prev) => {
            if (taskIsNotFinalized) {
              if (actions.length === 0) {
                return "stream";
              }
              if (prev === actions.length - 1) {
                return actions.length - 1;
              }
              if (prev === "stream") {
                return 0;
              }
              return prev + 1;
            }
            if (typeof prev === "number") {
              return prev === actions.length - 1 ? prev : prev + 1;
            }
            return 0;
          });
        }}
        onPrevious={() => {
          if (!actions) {
            return;
          }
          setSelectedAction((prev) => {
            if (taskIsNotFinalized) {
              if (actions.length === 0) {
                return "stream";
              }
              if (prev === 0) {
                return "stream";
              }
              if (prev === "stream") {
                return "stream";
              }
              return prev - 1;
            }
            if (typeof prev === "number") {
              return prev === 0 ? prev : prev - 1;
            }
            return 0;
          });
        }}
      />
    </div>
  );
};
