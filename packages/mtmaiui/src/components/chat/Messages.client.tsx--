"use client";
import type { Message } from "ai";
import { classNames } from "mtxuilib";

import { DebugValue } from "mtxuilib/components/devtools/DebugValue";
import { Icons } from "mtxuilib/icons/icons";
import { forwardRef } from "react";
// import { AssistantMessage } from "./AssistantMessage.tsx--";

import { AssistantMessage } from "@assistant-ui/react";
import { modificationsRegex } from "../../lib/utils/diff";
import { Markdown } from "../markdown/Markdown";

interface UserMessageProps {
  content: string;
}

export function UserMessage({ content }: UserMessageProps) {
  return (
    <div className="overflow-hidden pt-[4px]">
      <Markdown limitedMarkdown>{sanitizeUserMessage(content)}</Markdown>
    </div>
  );
}

function sanitizeUserMessage(content: string) {
  return content.replace(modificationsRegex, "").trim();
}

interface MessagesProps {
  id?: string;
  className?: string;
  isStreaming?: boolean;
  messages?: Message[];
}

export const Messages = forwardRef<HTMLDivElement, MessagesProps>(
  (props: MessagesProps, ref) => {
    const { id, isStreaming = false, messages = [] } = props;

    return (
      <div id={id} ref={ref} className={props.className}>
        <DebugValue
          data={{
            messages,
            id,
            isStreaming,
          }}
          title={"messages"}
        />
        {messages.length > 0
          ? messages.map((message, index) => {
              const { role, name, content } = message;
              // const content = message.output;
              const isUserMessage =
                role?.toLocaleLowerCase() === "user" ||
                name?.toLocaleLowerCase() === "user";
              const isFirst = index === 0;
              const isLast = index === messages.length - 1;

              return (
                <div
                  // biome-ignore lint/suspicious/noArrayIndexKey: <explanation>
                  key={index}
                  className={classNames(
                    "flex gap-4 p-6 w-full rounded-[calc(0.75rem-1px)]",
                    {
                      "bg-bolt-elements-messages-background":
                        isUserMessage ||
                        !isStreaming ||
                        (isStreaming && !isLast),
                      "bg-gradient-to-b from-bolt-elements-messages-background from-30% to-transparent":
                        isStreaming && isLast,
                      "mt-4": !isFirst,
                    },
                  )}
                >
                  {isUserMessage && (
                    <div className="flex items-center justify-center w-[34px] h-[34px] overflow-hidden bg-white text-gray-600 rounded-full shrink-0 self-start">
                      {/* <div className="i-ph:user-fill text-xl" /> */}
                      <Icons.user className="size-4" />
                    </div>
                  )}
                  <div className="grid grid-col-1 w-full">
                    {isUserMessage ? (
                      <UserMessage content={content} />
                    ) : (
                      <AssistantMessage content={content} />
                    )}
                  </div>
                </div>
              );
            })
          : null}
        {isStreaming && (
          <div className="text-center w-full text-bolt-elements-textSecondary i-svg-spinners:3-dots-fade text-4xl mt-4">
            <span>思考中...</span>
          </div>
        )}
      </div>
    );
  },
);
