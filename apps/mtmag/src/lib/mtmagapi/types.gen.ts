// This file is auto-generated by @hey-api/openapi-ts

export type UserSelect = {
  id: string;
  name: string;
  age: number;
};

export type CreateMessageObject = {
  message: string;
};

export type CreateError = {
  issues: Array<{
    code: string;
    path: Array<string | number>;
    message?: string;
  }>;
  name: string;
};

export type UserInsert = {
  name: string;
  age: number;
};

export type IdParams = string;

export type PlateformAccountInsert = {
  name: string;
  age: number;
};

export type GetUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/users";
};

export type GetUsersResponses = {
  /**
   * The list of users
   */
  200: Array<UserSelect>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type CreateUserData = {
  /**
   * The user to create
   */
  body: UserInsert;
  path?: never;
  query?: never;
  url: "/api/users";
};

export type CreateUserErrors = {
  /**
   * User not found
   */
  404: CreateMessageObject;
  /**
   * The validation error(s)
   */
  422: {
    success: boolean;
    error: CreateError;
  };
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * The created user
   */
  200: UserSelect;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type GetUserData = {
  body?: never;
  path: {
    id: IdParams;
  };
  query?: never;
  url: "/api/users/{id}";
};

export type GetUserErrors = {
  /**
   * User not found
   */
  404: CreateMessageObject;
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: CreateError;
  };
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
  /**
   * The requested user
   */
  200: UserSelect;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type ListPlateformAccountData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/plateform_account";
};

export type ListPlateformAccountResponses = {
  /**
   * The list of plateform accounts
   */
  200: Array<UserSelect>;
};

export type ListPlateformAccountResponse =
  ListPlateformAccountResponses[keyof ListPlateformAccountResponses];

export type CreatePlateformAccountData = {
  /**
   * The plateform account to create
   */
  body: PlateformAccountInsert;
  path?: never;
  query?: never;
  url: "/api/plateform_account";
};

export type CreatePlateformAccountErrors = {
  /**
   * User not found
   */
  404: CreateMessageObject;
  /**
   * The validation error(s)
   */
  422: {
    success: boolean;
    error: CreateError;
  };
};

export type CreatePlateformAccountError =
  CreatePlateformAccountErrors[keyof CreatePlateformAccountErrors];

export type CreatePlateformAccountResponses = {
  /**
   * The created user
   */
  200: UserSelect;
};

export type CreatePlateformAccountResponse =
  CreatePlateformAccountResponses[keyof CreatePlateformAccountResponses];

export type GetPlateformAccountData = {
  body?: never;
  path: {
    id: IdParams;
  };
  query?: never;
  url: "/api/plateform_account/{id}";
};

export type GetPlateformAccountErrors = {
  /**
   * User not found
   */
  404: CreateMessageObject;
  /**
   * Invalid id error
   */
  422: {
    success: boolean;
    error: CreateError;
  };
};

export type GetPlateformAccountError = GetPlateformAccountErrors[keyof GetPlateformAccountErrors];

export type GetPlateformAccountResponses = {
  /**
   * The requested user
   */
  200: UserSelect;
};

export type GetPlateformAccountResponse =
  GetPlateformAccountResponses[keyof GetPlateformAccountResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:6111/" | (string & {});
};
