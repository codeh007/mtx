// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-fetch";
import type {
  GetUsersData,
  GetUsersResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  GetUserData,
  GetUserResponse,
  GetUserError,
  ListPlateformAccountData,
  ListPlateformAccountResponse,
  CreatePlateformAccountData,
  CreatePlateformAccountResponse,
  CreatePlateformAccountError,
  GetPlateformAccountData,
  GetPlateformAccountResponse,
  GetPlateformAccountError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
    url: "/api/users",
    ...options,
  });
};

export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
    url: "/api/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
    url: "/api/users/{id}",
    ...options,
  });
};

export const listPlateformAccount = <ThrowOnError extends boolean = false>(
  options?: Options<ListPlateformAccountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListPlateformAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/plateform_account",
    ...options,
  });
};

export const createPlateformAccount = <ThrowOnError extends boolean = false>(
  options: Options<CreatePlateformAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePlateformAccountResponse,
    CreatePlateformAccountError,
    ThrowOnError
  >({
    url: "/api/plateform_account",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getPlateformAccount = <ThrowOnError extends boolean = false>(
  options: Options<GetPlateformAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPlateformAccountResponse,
    GetPlateformAccountError,
    ThrowOnError
  >({
    url: "/api/plateform_account/{id}",
    ...options,
  });
};
