// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getUsers,
  createUser,
  getUser,
  listPlateformAccount,
  createPlateformAccount,
  getPlateformAccount,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  GetUsersData,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  GetUserData,
  ListPlateformAccountData,
  CreatePlateformAccountData,
  CreatePlateformAccountError,
  CreatePlateformAccountResponse,
  GetPlateformAccountData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getUsersQueryKey = (options?: Options<GetUsersData>) =>
  createQueryKey("getUsers", options);

export const getUsersOptions = (options?: Options<GetUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUsersQueryKey(options),
  });
};

export const createUserQueryKey = (options: Options<CreateUserData>) =>
  createQueryKey("createUser", options);

export const createUserOptions = (options: Options<CreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createUserQueryKey(options),
  });
};

export const createUserMutation = (options?: Partial<Options<CreateUserData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateUserResponse,
    CreateUserError,
    Options<CreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserQueryKey = (options: Options<GetUserData>) =>
  createQueryKey("getUser", options);

export const getUserOptions = (options: Options<GetUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserQueryKey(options),
  });
};

export const listPlateformAccountQueryKey = (options?: Options<ListPlateformAccountData>) =>
  createQueryKey("listPlateformAccount", options);

export const listPlateformAccountOptions = (options?: Options<ListPlateformAccountData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listPlateformAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listPlateformAccountQueryKey(options),
  });
};

export const createPlateformAccountQueryKey = (options: Options<CreatePlateformAccountData>) =>
  createQueryKey("createPlateformAccount", options);

export const createPlateformAccountOptions = (options: Options<CreatePlateformAccountData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createPlateformAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createPlateformAccountQueryKey(options),
  });
};

export const createPlateformAccountMutation = (
  options?: Partial<Options<CreatePlateformAccountData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreatePlateformAccountResponse,
    CreatePlateformAccountError,
    Options<CreatePlateformAccountData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createPlateformAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getPlateformAccountQueryKey = (options: Options<GetPlateformAccountData>) =>
  createQueryKey("getPlateformAccount", options);

export const getPlateformAccountOptions = (options: Options<GetPlateformAccountData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPlateformAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPlateformAccountQueryKey(options),
  });
};
