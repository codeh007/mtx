/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as IndexImport } from './routes/~index'

// Create Virtual Routes

const SessionRouteLazyImport = createFileRoute('/session')()
const ProxyRouteLazyImport = createFileRoute('/proxy')()
const SessionSchedulerRouteLazyImport = createFileRoute('/session/scheduler')()
const SessionRootagRouteLazyImport = createFileRoute('/session/root_ag')()
const SessionMcpagentRouteLazyImport = createFileRoute('/session/mcp_agent')()
const SessionSessionIdRouteLazyImport = createFileRoute('/session/$sessionId')()
const ProxyNewRouteLazyImport = createFileRoute('/proxy/new')()
const ProxyProxyIdRouteLazyImport = createFileRoute('/proxy/$proxyId')()
const SessionIndexLazyImport = createFileRoute('/session/')()
const ProxyIndexLazyImport = createFileRoute('/proxy/')()
const SessionSessionIdStateRouteLazyImport = createFileRoute(
  '/session/$sessionId/state',
)()
const SessionSessionIdConfigRouteLazyImport = createFileRoute(
  '/session/$sessionId/config',
)()
const SessionSessionIdActionsRouteLazyImport = createFileRoute(
  '/session/$sessionId/actions',
)()
const ProxyProxyIdActionsRouteLazyImport = createFileRoute(
  '/proxy/$proxyId/actions',
)()
const SessionSchedulerIndexLazyImport = createFileRoute('/session/scheduler/')()
const SessionRootagIndexLazyImport = createFileRoute('/session/root_ag/')()
const SessionMcpagentIndexLazyImport = createFileRoute('/session/mcp_agent/')()
const SessionSessionIdIndexLazyImport = createFileRoute(
  '/session/$sessionId/',
)()
const ProxyProxyIdIndexLazyImport = createFileRoute('/proxy/$proxyId/')()
const SessionSessionIdStateIndexLazyImport = createFileRoute(
  '/session/$sessionId/state/',
)()
const SessionSessionIdConfigIndexLazyImport = createFileRoute(
  '/session/$sessionId/config/',
)()
const SessionSessionIdActionsIndexLazyImport = createFileRoute(
  '/session/$sessionId/actions/',
)()
const ProxyProxyIdActionsIndexLazyImport = createFileRoute(
  '/proxy/$proxyId/actions/',
)()

// Create/Update Routes

const SessionRouteLazyRoute = SessionRouteLazyImport.update({
  id: '/session',
  path: '/session',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~session/~route.lazy').then((d) => d.Route),
)

const ProxyRouteLazyRoute = ProxyRouteLazyImport.update({
  id: '/proxy',
  path: '/proxy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~proxy/~route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SessionSchedulerRouteLazyRoute = SessionSchedulerRouteLazyImport.update({
  id: '/scheduler',
  path: '/scheduler',
  getParentRoute: () => SessionRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~scheduler/~route.lazy').then((d) => d.Route),
)

const SessionRootagRouteLazyRoute = SessionRootagRouteLazyImport.update({
  id: '/root_ag',
  path: '/root_ag',
  getParentRoute: () => SessionRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~root_ag/~route.lazy').then((d) => d.Route),
)

const SessionMcpagentRouteLazyRoute = SessionMcpagentRouteLazyImport.update({
  id: '/mcp_agent',
  path: '/mcp_agent',
  getParentRoute: () => SessionRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~mcp_agent/~route.lazy').then((d) => d.Route),
)

const SessionSessionIdRouteLazyRoute = SessionSessionIdRouteLazyImport.update({
  id: '/$sessionId',
  path: '/$sessionId',
  getParentRoute: () => SessionRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~$sessionId/~route.lazy').then((d) => d.Route),
)

const ProxyNewRouteLazyRoute = ProxyNewRouteLazyImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ProxyRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~proxy/~new/~route.lazy').then((d) => d.Route),
)

const ProxyProxyIdRouteLazyRoute = ProxyProxyIdRouteLazyImport.update({
  id: '/$proxyId',
  path: '/$proxyId',
  getParentRoute: () => ProxyRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~proxy/~$proxyId/~route.lazy').then((d) => d.Route),
)

const SessionIndexLazyRoute = SessionIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SessionRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~index.lazy').then((d) => d.Route),
)

const ProxyIndexLazyRoute = ProxyIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProxyRouteLazyRoute,
} as any).lazy(() => import('./routes/~proxy/~index.lazy').then((d) => d.Route))

const SessionSessionIdStateRouteLazyRoute =
  SessionSessionIdStateRouteLazyImport.update({
    id: '/state',
    path: '/state',
    getParentRoute: () => SessionSessionIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~session/~$sessionId/~state/~route.lazy').then(
      (d) => d.Route,
    ),
  )

const SessionSessionIdConfigRouteLazyRoute =
  SessionSessionIdConfigRouteLazyImport.update({
    id: '/config',
    path: '/config',
    getParentRoute: () => SessionSessionIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~session/~$sessionId/~config/~route.lazy').then(
      (d) => d.Route,
    ),
  )

const SessionSessionIdActionsRouteLazyRoute =
  SessionSessionIdActionsRouteLazyImport.update({
    id: '/actions',
    path: '/actions',
    getParentRoute: () => SessionSessionIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~session/~$sessionId/~actions/~route.lazy').then(
      (d) => d.Route,
    ),
  )

const ProxyProxyIdActionsRouteLazyRoute =
  ProxyProxyIdActionsRouteLazyImport.update({
    id: '/actions',
    path: '/actions',
    getParentRoute: () => ProxyProxyIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~proxy/~$proxyId/~actions/~route.lazy').then(
      (d) => d.Route,
    ),
  )

const SessionSchedulerIndexLazyRoute = SessionSchedulerIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SessionSchedulerRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~scheduler/~index.lazy').then((d) => d.Route),
)

const SessionRootagIndexLazyRoute = SessionRootagIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SessionRootagRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~root_ag/~index.lazy').then((d) => d.Route),
)

const SessionMcpagentIndexLazyRoute = SessionMcpagentIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SessionMcpagentRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~mcp_agent/~index.lazy').then((d) => d.Route),
)

const SessionSessionIdIndexLazyRoute = SessionSessionIdIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SessionSessionIdRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~session/~$sessionId/~index.lazy').then((d) => d.Route),
)

const ProxyProxyIdIndexLazyRoute = ProxyProxyIdIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProxyProxyIdRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~proxy/~$proxyId/~index.lazy').then((d) => d.Route),
)

const SessionSessionIdStateIndexLazyRoute =
  SessionSessionIdStateIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => SessionSessionIdStateRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~session/~$sessionId/~state/~index.lazy').then(
      (d) => d.Route,
    ),
  )

const SessionSessionIdConfigIndexLazyRoute =
  SessionSessionIdConfigIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => SessionSessionIdConfigRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~session/~$sessionId/~config/~index.lazy').then(
      (d) => d.Route,
    ),
  )

const SessionSessionIdActionsIndexLazyRoute =
  SessionSessionIdActionsIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => SessionSessionIdActionsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~session/~$sessionId/~actions/~index.lazy').then(
      (d) => d.Route,
    ),
  )

const ProxyProxyIdActionsIndexLazyRoute =
  ProxyProxyIdActionsIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProxyProxyIdActionsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~proxy/~$proxyId/~actions/~index.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/proxy': {
      id: '/proxy'
      path: '/proxy'
      fullPath: '/proxy'
      preLoaderRoute: typeof ProxyRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/session': {
      id: '/session'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof SessionRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/proxy/': {
      id: '/proxy/'
      path: '/'
      fullPath: '/proxy/'
      preLoaderRoute: typeof ProxyIndexLazyImport
      parentRoute: typeof ProxyRouteLazyImport
    }
    '/session/': {
      id: '/session/'
      path: '/'
      fullPath: '/session/'
      preLoaderRoute: typeof SessionIndexLazyImport
      parentRoute: typeof SessionRouteLazyImport
    }
    '/proxy/$proxyId': {
      id: '/proxy/$proxyId'
      path: '/$proxyId'
      fullPath: '/proxy/$proxyId'
      preLoaderRoute: typeof ProxyProxyIdRouteLazyImport
      parentRoute: typeof ProxyRouteLazyImport
    }
    '/proxy/new': {
      id: '/proxy/new'
      path: '/new'
      fullPath: '/proxy/new'
      preLoaderRoute: typeof ProxyNewRouteLazyImport
      parentRoute: typeof ProxyRouteLazyImport
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdRouteLazyImport
      parentRoute: typeof SessionRouteLazyImport
    }
    '/session/mcp_agent': {
      id: '/session/mcp_agent'
      path: '/mcp_agent'
      fullPath: '/session/mcp_agent'
      preLoaderRoute: typeof SessionMcpagentRouteLazyImport
      parentRoute: typeof SessionRouteLazyImport
    }
    '/session/root_ag': {
      id: '/session/root_ag'
      path: '/root_ag'
      fullPath: '/session/root_ag'
      preLoaderRoute: typeof SessionRootagRouteLazyImport
      parentRoute: typeof SessionRouteLazyImport
    }
    '/session/scheduler': {
      id: '/session/scheduler'
      path: '/scheduler'
      fullPath: '/session/scheduler'
      preLoaderRoute: typeof SessionSchedulerRouteLazyImport
      parentRoute: typeof SessionRouteLazyImport
    }
    '/proxy/$proxyId/': {
      id: '/proxy/$proxyId/'
      path: '/'
      fullPath: '/proxy/$proxyId/'
      preLoaderRoute: typeof ProxyProxyIdIndexLazyImport
      parentRoute: typeof ProxyProxyIdRouteLazyImport
    }
    '/session/$sessionId/': {
      id: '/session/$sessionId/'
      path: '/'
      fullPath: '/session/$sessionId/'
      preLoaderRoute: typeof SessionSessionIdIndexLazyImport
      parentRoute: typeof SessionSessionIdRouteLazyImport
    }
    '/session/mcp_agent/': {
      id: '/session/mcp_agent/'
      path: '/'
      fullPath: '/session/mcp_agent/'
      preLoaderRoute: typeof SessionMcpagentIndexLazyImport
      parentRoute: typeof SessionMcpagentRouteLazyImport
    }
    '/session/root_ag/': {
      id: '/session/root_ag/'
      path: '/'
      fullPath: '/session/root_ag/'
      preLoaderRoute: typeof SessionRootagIndexLazyImport
      parentRoute: typeof SessionRootagRouteLazyImport
    }
    '/session/scheduler/': {
      id: '/session/scheduler/'
      path: '/'
      fullPath: '/session/scheduler/'
      preLoaderRoute: typeof SessionSchedulerIndexLazyImport
      parentRoute: typeof SessionSchedulerRouteLazyImport
    }
    '/proxy/$proxyId/actions': {
      id: '/proxy/$proxyId/actions'
      path: '/actions'
      fullPath: '/proxy/$proxyId/actions'
      preLoaderRoute: typeof ProxyProxyIdActionsRouteLazyImport
      parentRoute: typeof ProxyProxyIdRouteLazyImport
    }
    '/session/$sessionId/actions': {
      id: '/session/$sessionId/actions'
      path: '/actions'
      fullPath: '/session/$sessionId/actions'
      preLoaderRoute: typeof SessionSessionIdActionsRouteLazyImport
      parentRoute: typeof SessionSessionIdRouteLazyImport
    }
    '/session/$sessionId/config': {
      id: '/session/$sessionId/config'
      path: '/config'
      fullPath: '/session/$sessionId/config'
      preLoaderRoute: typeof SessionSessionIdConfigRouteLazyImport
      parentRoute: typeof SessionSessionIdRouteLazyImport
    }
    '/session/$sessionId/state': {
      id: '/session/$sessionId/state'
      path: '/state'
      fullPath: '/session/$sessionId/state'
      preLoaderRoute: typeof SessionSessionIdStateRouteLazyImport
      parentRoute: typeof SessionSessionIdRouteLazyImport
    }
    '/proxy/$proxyId/actions/': {
      id: '/proxy/$proxyId/actions/'
      path: '/'
      fullPath: '/proxy/$proxyId/actions/'
      preLoaderRoute: typeof ProxyProxyIdActionsIndexLazyImport
      parentRoute: typeof ProxyProxyIdActionsRouteLazyImport
    }
    '/session/$sessionId/actions/': {
      id: '/session/$sessionId/actions/'
      path: '/'
      fullPath: '/session/$sessionId/actions/'
      preLoaderRoute: typeof SessionSessionIdActionsIndexLazyImport
      parentRoute: typeof SessionSessionIdActionsRouteLazyImport
    }
    '/session/$sessionId/config/': {
      id: '/session/$sessionId/config/'
      path: '/'
      fullPath: '/session/$sessionId/config/'
      preLoaderRoute: typeof SessionSessionIdConfigIndexLazyImport
      parentRoute: typeof SessionSessionIdConfigRouteLazyImport
    }
    '/session/$sessionId/state/': {
      id: '/session/$sessionId/state/'
      path: '/'
      fullPath: '/session/$sessionId/state/'
      preLoaderRoute: typeof SessionSessionIdStateIndexLazyImport
      parentRoute: typeof SessionSessionIdStateRouteLazyImport
    }
  }
}

// Create and export the route tree

interface ProxyProxyIdActionsRouteLazyRouteChildren {
  ProxyProxyIdActionsIndexLazyRoute: typeof ProxyProxyIdActionsIndexLazyRoute
}

const ProxyProxyIdActionsRouteLazyRouteChildren: ProxyProxyIdActionsRouteLazyRouteChildren =
  {
    ProxyProxyIdActionsIndexLazyRoute: ProxyProxyIdActionsIndexLazyRoute,
  }

const ProxyProxyIdActionsRouteLazyRouteWithChildren =
  ProxyProxyIdActionsRouteLazyRoute._addFileChildren(
    ProxyProxyIdActionsRouteLazyRouteChildren,
  )

interface ProxyProxyIdRouteLazyRouteChildren {
  ProxyProxyIdIndexLazyRoute: typeof ProxyProxyIdIndexLazyRoute
  ProxyProxyIdActionsRouteLazyRoute: typeof ProxyProxyIdActionsRouteLazyRouteWithChildren
}

const ProxyProxyIdRouteLazyRouteChildren: ProxyProxyIdRouteLazyRouteChildren = {
  ProxyProxyIdIndexLazyRoute: ProxyProxyIdIndexLazyRoute,
  ProxyProxyIdActionsRouteLazyRoute:
    ProxyProxyIdActionsRouteLazyRouteWithChildren,
}

const ProxyProxyIdRouteLazyRouteWithChildren =
  ProxyProxyIdRouteLazyRoute._addFileChildren(
    ProxyProxyIdRouteLazyRouteChildren,
  )

interface ProxyRouteLazyRouteChildren {
  ProxyIndexLazyRoute: typeof ProxyIndexLazyRoute
  ProxyProxyIdRouteLazyRoute: typeof ProxyProxyIdRouteLazyRouteWithChildren
  ProxyNewRouteLazyRoute: typeof ProxyNewRouteLazyRoute
}

const ProxyRouteLazyRouteChildren: ProxyRouteLazyRouteChildren = {
  ProxyIndexLazyRoute: ProxyIndexLazyRoute,
  ProxyProxyIdRouteLazyRoute: ProxyProxyIdRouteLazyRouteWithChildren,
  ProxyNewRouteLazyRoute: ProxyNewRouteLazyRoute,
}

const ProxyRouteLazyRouteWithChildren = ProxyRouteLazyRoute._addFileChildren(
  ProxyRouteLazyRouteChildren,
)

interface SessionSessionIdActionsRouteLazyRouteChildren {
  SessionSessionIdActionsIndexLazyRoute: typeof SessionSessionIdActionsIndexLazyRoute
}

const SessionSessionIdActionsRouteLazyRouteChildren: SessionSessionIdActionsRouteLazyRouteChildren =
  {
    SessionSessionIdActionsIndexLazyRoute:
      SessionSessionIdActionsIndexLazyRoute,
  }

const SessionSessionIdActionsRouteLazyRouteWithChildren =
  SessionSessionIdActionsRouteLazyRoute._addFileChildren(
    SessionSessionIdActionsRouteLazyRouteChildren,
  )

interface SessionSessionIdConfigRouteLazyRouteChildren {
  SessionSessionIdConfigIndexLazyRoute: typeof SessionSessionIdConfigIndexLazyRoute
}

const SessionSessionIdConfigRouteLazyRouteChildren: SessionSessionIdConfigRouteLazyRouteChildren =
  {
    SessionSessionIdConfigIndexLazyRoute: SessionSessionIdConfigIndexLazyRoute,
  }

const SessionSessionIdConfigRouteLazyRouteWithChildren =
  SessionSessionIdConfigRouteLazyRoute._addFileChildren(
    SessionSessionIdConfigRouteLazyRouteChildren,
  )

interface SessionSessionIdStateRouteLazyRouteChildren {
  SessionSessionIdStateIndexLazyRoute: typeof SessionSessionIdStateIndexLazyRoute
}

const SessionSessionIdStateRouteLazyRouteChildren: SessionSessionIdStateRouteLazyRouteChildren =
  {
    SessionSessionIdStateIndexLazyRoute: SessionSessionIdStateIndexLazyRoute,
  }

const SessionSessionIdStateRouteLazyRouteWithChildren =
  SessionSessionIdStateRouteLazyRoute._addFileChildren(
    SessionSessionIdStateRouteLazyRouteChildren,
  )

interface SessionSessionIdRouteLazyRouteChildren {
  SessionSessionIdIndexLazyRoute: typeof SessionSessionIdIndexLazyRoute
  SessionSessionIdActionsRouteLazyRoute: typeof SessionSessionIdActionsRouteLazyRouteWithChildren
  SessionSessionIdConfigRouteLazyRoute: typeof SessionSessionIdConfigRouteLazyRouteWithChildren
  SessionSessionIdStateRouteLazyRoute: typeof SessionSessionIdStateRouteLazyRouteWithChildren
}

const SessionSessionIdRouteLazyRouteChildren: SessionSessionIdRouteLazyRouteChildren =
  {
    SessionSessionIdIndexLazyRoute: SessionSessionIdIndexLazyRoute,
    SessionSessionIdActionsRouteLazyRoute:
      SessionSessionIdActionsRouteLazyRouteWithChildren,
    SessionSessionIdConfigRouteLazyRoute:
      SessionSessionIdConfigRouteLazyRouteWithChildren,
    SessionSessionIdStateRouteLazyRoute:
      SessionSessionIdStateRouteLazyRouteWithChildren,
  }

const SessionSessionIdRouteLazyRouteWithChildren =
  SessionSessionIdRouteLazyRoute._addFileChildren(
    SessionSessionIdRouteLazyRouteChildren,
  )

interface SessionMcpagentRouteLazyRouteChildren {
  SessionMcpagentIndexLazyRoute: typeof SessionMcpagentIndexLazyRoute
}

const SessionMcpagentRouteLazyRouteChildren: SessionMcpagentRouteLazyRouteChildren =
  {
    SessionMcpagentIndexLazyRoute: SessionMcpagentIndexLazyRoute,
  }

const SessionMcpagentRouteLazyRouteWithChildren =
  SessionMcpagentRouteLazyRoute._addFileChildren(
    SessionMcpagentRouteLazyRouteChildren,
  )

interface SessionRootagRouteLazyRouteChildren {
  SessionRootagIndexLazyRoute: typeof SessionRootagIndexLazyRoute
}

const SessionRootagRouteLazyRouteChildren: SessionRootagRouteLazyRouteChildren =
  {
    SessionRootagIndexLazyRoute: SessionRootagIndexLazyRoute,
  }

const SessionRootagRouteLazyRouteWithChildren =
  SessionRootagRouteLazyRoute._addFileChildren(
    SessionRootagRouteLazyRouteChildren,
  )

interface SessionSchedulerRouteLazyRouteChildren {
  SessionSchedulerIndexLazyRoute: typeof SessionSchedulerIndexLazyRoute
}

const SessionSchedulerRouteLazyRouteChildren: SessionSchedulerRouteLazyRouteChildren =
  {
    SessionSchedulerIndexLazyRoute: SessionSchedulerIndexLazyRoute,
  }

const SessionSchedulerRouteLazyRouteWithChildren =
  SessionSchedulerRouteLazyRoute._addFileChildren(
    SessionSchedulerRouteLazyRouteChildren,
  )

interface SessionRouteLazyRouteChildren {
  SessionIndexLazyRoute: typeof SessionIndexLazyRoute
  SessionSessionIdRouteLazyRoute: typeof SessionSessionIdRouteLazyRouteWithChildren
  SessionMcpagentRouteLazyRoute: typeof SessionMcpagentRouteLazyRouteWithChildren
  SessionRootagRouteLazyRoute: typeof SessionRootagRouteLazyRouteWithChildren
  SessionSchedulerRouteLazyRoute: typeof SessionSchedulerRouteLazyRouteWithChildren
}

const SessionRouteLazyRouteChildren: SessionRouteLazyRouteChildren = {
  SessionIndexLazyRoute: SessionIndexLazyRoute,
  SessionSessionIdRouteLazyRoute: SessionSessionIdRouteLazyRouteWithChildren,
  SessionMcpagentRouteLazyRoute: SessionMcpagentRouteLazyRouteWithChildren,
  SessionRootagRouteLazyRoute: SessionRootagRouteLazyRouteWithChildren,
  SessionSchedulerRouteLazyRoute: SessionSchedulerRouteLazyRouteWithChildren,
}

const SessionRouteLazyRouteWithChildren =
  SessionRouteLazyRoute._addFileChildren(SessionRouteLazyRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/proxy': typeof ProxyRouteLazyRouteWithChildren
  '/session': typeof SessionRouteLazyRouteWithChildren
  '/proxy/': typeof ProxyIndexLazyRoute
  '/session/': typeof SessionIndexLazyRoute
  '/proxy/$proxyId': typeof ProxyProxyIdRouteLazyRouteWithChildren
  '/proxy/new': typeof ProxyNewRouteLazyRoute
  '/session/$sessionId': typeof SessionSessionIdRouteLazyRouteWithChildren
  '/session/mcp_agent': typeof SessionMcpagentRouteLazyRouteWithChildren
  '/session/root_ag': typeof SessionRootagRouteLazyRouteWithChildren
  '/session/scheduler': typeof SessionSchedulerRouteLazyRouteWithChildren
  '/proxy/$proxyId/': typeof ProxyProxyIdIndexLazyRoute
  '/session/$sessionId/': typeof SessionSessionIdIndexLazyRoute
  '/session/mcp_agent/': typeof SessionMcpagentIndexLazyRoute
  '/session/root_ag/': typeof SessionRootagIndexLazyRoute
  '/session/scheduler/': typeof SessionSchedulerIndexLazyRoute
  '/proxy/$proxyId/actions': typeof ProxyProxyIdActionsRouteLazyRouteWithChildren
  '/session/$sessionId/actions': typeof SessionSessionIdActionsRouteLazyRouteWithChildren
  '/session/$sessionId/config': typeof SessionSessionIdConfigRouteLazyRouteWithChildren
  '/session/$sessionId/state': typeof SessionSessionIdStateRouteLazyRouteWithChildren
  '/proxy/$proxyId/actions/': typeof ProxyProxyIdActionsIndexLazyRoute
  '/session/$sessionId/actions/': typeof SessionSessionIdActionsIndexLazyRoute
  '/session/$sessionId/config/': typeof SessionSessionIdConfigIndexLazyRoute
  '/session/$sessionId/state/': typeof SessionSessionIdStateIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/proxy': typeof ProxyIndexLazyRoute
  '/session': typeof SessionIndexLazyRoute
  '/proxy/new': typeof ProxyNewRouteLazyRoute
  '/proxy/$proxyId': typeof ProxyProxyIdIndexLazyRoute
  '/session/$sessionId': typeof SessionSessionIdIndexLazyRoute
  '/session/mcp_agent': typeof SessionMcpagentIndexLazyRoute
  '/session/root_ag': typeof SessionRootagIndexLazyRoute
  '/session/scheduler': typeof SessionSchedulerIndexLazyRoute
  '/proxy/$proxyId/actions': typeof ProxyProxyIdActionsIndexLazyRoute
  '/session/$sessionId/actions': typeof SessionSessionIdActionsIndexLazyRoute
  '/session/$sessionId/config': typeof SessionSessionIdConfigIndexLazyRoute
  '/session/$sessionId/state': typeof SessionSessionIdStateIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/proxy': typeof ProxyRouteLazyRouteWithChildren
  '/session': typeof SessionRouteLazyRouteWithChildren
  '/proxy/': typeof ProxyIndexLazyRoute
  '/session/': typeof SessionIndexLazyRoute
  '/proxy/$proxyId': typeof ProxyProxyIdRouteLazyRouteWithChildren
  '/proxy/new': typeof ProxyNewRouteLazyRoute
  '/session/$sessionId': typeof SessionSessionIdRouteLazyRouteWithChildren
  '/session/mcp_agent': typeof SessionMcpagentRouteLazyRouteWithChildren
  '/session/root_ag': typeof SessionRootagRouteLazyRouteWithChildren
  '/session/scheduler': typeof SessionSchedulerRouteLazyRouteWithChildren
  '/proxy/$proxyId/': typeof ProxyProxyIdIndexLazyRoute
  '/session/$sessionId/': typeof SessionSessionIdIndexLazyRoute
  '/session/mcp_agent/': typeof SessionMcpagentIndexLazyRoute
  '/session/root_ag/': typeof SessionRootagIndexLazyRoute
  '/session/scheduler/': typeof SessionSchedulerIndexLazyRoute
  '/proxy/$proxyId/actions': typeof ProxyProxyIdActionsRouteLazyRouteWithChildren
  '/session/$sessionId/actions': typeof SessionSessionIdActionsRouteLazyRouteWithChildren
  '/session/$sessionId/config': typeof SessionSessionIdConfigRouteLazyRouteWithChildren
  '/session/$sessionId/state': typeof SessionSessionIdStateRouteLazyRouteWithChildren
  '/proxy/$proxyId/actions/': typeof ProxyProxyIdActionsIndexLazyRoute
  '/session/$sessionId/actions/': typeof SessionSessionIdActionsIndexLazyRoute
  '/session/$sessionId/config/': typeof SessionSessionIdConfigIndexLazyRoute
  '/session/$sessionId/state/': typeof SessionSessionIdStateIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/proxy'
    | '/session'
    | '/proxy/'
    | '/session/'
    | '/proxy/$proxyId'
    | '/proxy/new'
    | '/session/$sessionId'
    | '/session/mcp_agent'
    | '/session/root_ag'
    | '/session/scheduler'
    | '/proxy/$proxyId/'
    | '/session/$sessionId/'
    | '/session/mcp_agent/'
    | '/session/root_ag/'
    | '/session/scheduler/'
    | '/proxy/$proxyId/actions'
    | '/session/$sessionId/actions'
    | '/session/$sessionId/config'
    | '/session/$sessionId/state'
    | '/proxy/$proxyId/actions/'
    | '/session/$sessionId/actions/'
    | '/session/$sessionId/config/'
    | '/session/$sessionId/state/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/proxy'
    | '/session'
    | '/proxy/new'
    | '/proxy/$proxyId'
    | '/session/$sessionId'
    | '/session/mcp_agent'
    | '/session/root_ag'
    | '/session/scheduler'
    | '/proxy/$proxyId/actions'
    | '/session/$sessionId/actions'
    | '/session/$sessionId/config'
    | '/session/$sessionId/state'
  id:
    | '__root__'
    | '/'
    | '/proxy'
    | '/session'
    | '/proxy/'
    | '/session/'
    | '/proxy/$proxyId'
    | '/proxy/new'
    | '/session/$sessionId'
    | '/session/mcp_agent'
    | '/session/root_ag'
    | '/session/scheduler'
    | '/proxy/$proxyId/'
    | '/session/$sessionId/'
    | '/session/mcp_agent/'
    | '/session/root_ag/'
    | '/session/scheduler/'
    | '/proxy/$proxyId/actions'
    | '/session/$sessionId/actions'
    | '/session/$sessionId/config'
    | '/session/$sessionId/state'
    | '/proxy/$proxyId/actions/'
    | '/session/$sessionId/actions/'
    | '/session/$sessionId/config/'
    | '/session/$sessionId/state/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProxyRouteLazyRoute: typeof ProxyRouteLazyRouteWithChildren
  SessionRouteLazyRoute: typeof SessionRouteLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProxyRouteLazyRoute: ProxyRouteLazyRouteWithChildren,
  SessionRouteLazyRoute: SessionRouteLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/proxy",
        "/session"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/proxy": {
      "filePath": "~proxy/~route.lazy.tsx",
      "children": [
        "/proxy/",
        "/proxy/$proxyId",
        "/proxy/new"
      ]
    },
    "/session": {
      "filePath": "~session/~route.lazy.tsx",
      "children": [
        "/session/",
        "/session/$sessionId",
        "/session/mcp_agent",
        "/session/root_ag",
        "/session/scheduler"
      ]
    },
    "/proxy/": {
      "filePath": "~proxy/~index.lazy.tsx",
      "parent": "/proxy"
    },
    "/session/": {
      "filePath": "~session/~index.lazy.tsx",
      "parent": "/session"
    },
    "/proxy/$proxyId": {
      "filePath": "~proxy/~$proxyId/~route.lazy.tsx",
      "parent": "/proxy",
      "children": [
        "/proxy/$proxyId/",
        "/proxy/$proxyId/actions"
      ]
    },
    "/proxy/new": {
      "filePath": "~proxy/~new/~route.lazy.tsx",
      "parent": "/proxy"
    },
    "/session/$sessionId": {
      "filePath": "~session/~$sessionId/~route.lazy.tsx",
      "parent": "/session",
      "children": [
        "/session/$sessionId/",
        "/session/$sessionId/actions",
        "/session/$sessionId/config",
        "/session/$sessionId/state"
      ]
    },
    "/session/mcp_agent": {
      "filePath": "~session/~mcp_agent/~route.lazy.tsx",
      "parent": "/session",
      "children": [
        "/session/mcp_agent/"
      ]
    },
    "/session/root_ag": {
      "filePath": "~session/~root_ag/~route.lazy.tsx",
      "parent": "/session",
      "children": [
        "/session/root_ag/"
      ]
    },
    "/session/scheduler": {
      "filePath": "~session/~scheduler/~route.lazy.tsx",
      "parent": "/session",
      "children": [
        "/session/scheduler/"
      ]
    },
    "/proxy/$proxyId/": {
      "filePath": "~proxy/~$proxyId/~index.lazy.tsx",
      "parent": "/proxy/$proxyId"
    },
    "/session/$sessionId/": {
      "filePath": "~session/~$sessionId/~index.lazy.tsx",
      "parent": "/session/$sessionId"
    },
    "/session/mcp_agent/": {
      "filePath": "~session/~mcp_agent/~index.lazy.tsx",
      "parent": "/session/mcp_agent"
    },
    "/session/root_ag/": {
      "filePath": "~session/~root_ag/~index.lazy.tsx",
      "parent": "/session/root_ag"
    },
    "/session/scheduler/": {
      "filePath": "~session/~scheduler/~index.lazy.tsx",
      "parent": "/session/scheduler"
    },
    "/proxy/$proxyId/actions": {
      "filePath": "~proxy/~$proxyId/~actions/~route.lazy.tsx",
      "parent": "/proxy/$proxyId",
      "children": [
        "/proxy/$proxyId/actions/"
      ]
    },
    "/session/$sessionId/actions": {
      "filePath": "~session/~$sessionId/~actions/~route.lazy.tsx",
      "parent": "/session/$sessionId",
      "children": [
        "/session/$sessionId/actions/"
      ]
    },
    "/session/$sessionId/config": {
      "filePath": "~session/~$sessionId/~config/~route.lazy.tsx",
      "parent": "/session/$sessionId",
      "children": [
        "/session/$sessionId/config/"
      ]
    },
    "/session/$sessionId/state": {
      "filePath": "~session/~$sessionId/~state/~route.lazy.tsx",
      "parent": "/session/$sessionId",
      "children": [
        "/session/$sessionId/state/"
      ]
    },
    "/proxy/$proxyId/actions/": {
      "filePath": "~proxy/~$proxyId/~actions/~index.lazy.tsx",
      "parent": "/proxy/$proxyId/actions"
    },
    "/session/$sessionId/actions/": {
      "filePath": "~session/~$sessionId/~actions/~index.lazy.tsx",
      "parent": "/session/$sessionId/actions"
    },
    "/session/$sessionId/config/": {
      "filePath": "~session/~$sessionId/~config/~index.lazy.tsx",
      "parent": "/session/$sessionId/config"
    },
    "/session/$sessionId/state/": {
      "filePath": "~session/~$sessionId/~state/~index.lazy.tsx",
      "parent": "/session/$sessionId/state"
    }
  }
}
ROUTE_MANIFEST_END */
