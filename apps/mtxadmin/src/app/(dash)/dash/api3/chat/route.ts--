
import { MAX_RESPONSE_SEGMENTS, MAX_TOKENS } from "../../../lib/server/llm/llm_config";
import {
	type StreamingOptions,
	streamTextV2,
} from "../../../lib/server/llm/stream-text";
import SwitchableStream from "../../../lib/server/llm/switchable-stream";
import { getArticleGenSystemPrompt } from "../../../lib/server/prompts/prompt_articlegen";
import { CONTINUE_PROMPT, getSystemPrompt } from "../../../lib/server/prompts/prompts";

// export const runtime = "edge";

async function handler(req: Request) {
	const { messages, ...props } = await req.json();
	const chatProfile = req.headers.get("X-Chat-Profile") || "articleGen";
	let systemPrompt = getSystemPrompt()
	if (chatProfile=="articleGen") {
		systemPrompt = getArticleGenSystemPrompt()
	}

	const stream = new SwitchableStream();
		try {
			const options: StreamingOptions = {
				toolChoice: "none",
				onFinish: async ({ text: content, finishReason }) => {
					if (finishReason !== "length") {
						return stream.close();
					}

					if (stream.switches >= MAX_RESPONSE_SEGMENTS) {
						throw Error("Cannot continue message: Maximum segments reached");
					}

					const switchesLeft = MAX_RESPONSE_SEGMENTS - stream.switches;

					console.log(
						`Reached max token limit (${MAX_TOKENS}): Continuing message (${switchesLeft} switches left)`,
					);

					messages.push({ role: "assistant", content });
					messages.push({ role: "user", content: CONTINUE_PROMPT });


					const result = await streamTextV2(
						messages,
						process.env,
						systemPrompt,
						options,
					);

					return stream.switchSource(result.toAIStream());
				},
			};

			const result = await streamTextV2(messages,process.env,systemPrompt, options);

			stream.switchSource(result.toAIStream());

			return new Response(stream.readable, {
				status: 200,
				headers: {
					contentType: "text/plain; charset=utf-8",
				},
			});
		} catch (error) {
			console.error("chat api error",error);
			throw new Response(null, {
				status: 500,
				statusText: "Internal Server Error",
			});
		}

}

export const GET = handler;
export const POST = handler;
