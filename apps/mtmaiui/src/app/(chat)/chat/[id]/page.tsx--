"use client";
import { useQuery } from "@tanstack/react-query";
import { MtSuspenseBoundary } from "mtxuilib/components/MtSuspenseBoundary";
import { SidebarInset } from "mtxuilib/ui/sidebar";
import { AppSidebar } from "../../../../aichatbot/app-sidebar";
import { Chat } from "../../../../aichatbot/chat";
import { DataStreamHandler } from "../../../../aichatbot/data-stream-handler";
import { DEFAULT_CHAT_MODEL } from "../../../../aichatbot/lib/ai/models";
import { getMessagesByChatId } from "../../../../db/queries";
import { convertToUIMessages } from "../../../../lib/aisdk_utils";
import { WorkbrenchProvider } from "../../../../stores/workbrench.store";

export default function Page(props: { params: Promise<{ id: string }> }) {
  const params = await props.params;
  const { id } = params;
  // const chat = await getChatById({ id });
  const getChatQuery = useQuery({
    queryKey: ["chat", id],
    queryFn: async () => {
      const response = await fetch(`/api/chats/${id}`);
      if (!response.ok) {
        throw new Error("Failed to fetch chat");
      }
      return response.json();
    },
  });

  // if (!chat) {
  //   return <div>chat not fount</div>;
  // }
  if (getChatQuery.isLoading) {
    return <div>Loading...</div>;
  }
  if (getChatQuery.isError) {
    return <div>Error: {getChatQuery.error.message}</div>;
  }
  const chat = getChatQuery.data;

  // const session = await auth();

  // if (!session) {
  //   // redirect("/api/auth/guest");
  //   window.location.href = "/api/auth/guest";
  // }

  // if (chat.visibility === "private") {
  //   if (!session.user) {
  //     return notFound();
  //   }

  //   if (session.user.id !== chat.userId) {
  //     return notFound();
  //   }
  // }

  // const messagesFromDb = await getMessagesByChatId({
  //   id,
  // });
  return (
    <>
      <WorkbrenchProvider>
        <MtSuspenseBoundary>
          <AppSidebar />
        </MtSuspenseBoundary>
        <MtSuspenseBoundary>
          <SidebarInset>
            <Chat
              key={id}
              id={id}
              initialMessages={convertToUIMessages(messagesFromDb)}
              initialChatModel={DEFAULT_CHAT_MODEL}
              initialVisibilityType="private"
              isReadonly={false}
              // session={session}
              autoResume={false}
              api="/api/chat"
            />
            <DataStreamHandler id={id} />
          </SidebarInset>
        </MtSuspenseBoundary>
      </WorkbrenchProvider>
    </>
  );
}
