/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as IndexImport } from './routes/~index'
import { Route as TriggerAgImport } from './routes/~trigger/~ag'
import { Route as TeamTeamIdImport } from './routes/~team/~$teamId'
import { Route as SiteSiteIdRouteImport } from './routes/~site/~$siteId/~route'
import { Route as GalleryGalleryIdImport } from './routes/~gallery/~$galleryId'
import { Route as EnvsCreateImport } from './routes/~envs/~create'
import { Route as SiteIndexImport } from './routes/~site/~index'
import { Route as PlatformIndexImport } from './routes/~platform/~index'
import { Route as GalleryIndexImport } from './routes/~gallery/~index'
import { Route as SiteSiteIdHostRouteImport } from './routes/~site/~$siteId/~host/~route'
import { Route as SiteSiteIdEditImport } from './routes/~site/~$siteId/~edit'
import { Route as SiteCreateIndexImport } from './routes/~site/~create/~index'
import { Route as SiteSiteIdIndexImport } from './routes/~site/~$siteId/~index'
import { Route as OnboardingCreateTenantIndexImport } from './routes/~onboarding/~create-tenant/~index'
import { Route as SiteSiteIdHostIndexImport } from './routes/~site/~$siteId/~host/~index'
import { Route as PlayChatSessionIdIndexImport } from './routes/~play/~chat/~$sessionId/~index'

// Create Virtual Routes

const WorkflowsRouteLazyImport = createFileRoute('/workflows')()
const WorkflowRunsRouteLazyImport = createFileRoute('/workflow-runs')()
const TriggerRouteLazyImport = createFileRoute('/trigger')()
const TeamRouteLazyImport = createFileRoute('/team')()
const SiteRouteLazyImport = createFileRoute('/site')()
const SettingsRouteLazyImport = createFileRoute('/settings')()
const PostRouteLazyImport = createFileRoute('/post')()
const PlayRouteLazyImport = createFileRoute('/play')()
const PlatformAccountRouteLazyImport = createFileRoute('/platform-account')()
const PlatformRouteLazyImport = createFileRoute('/platform')()
const ModelRouteLazyImport = createFileRoute('/model')()
const GalleryRouteLazyImport = createFileRoute('/gallery')()
const EventsRouteLazyImport = createFileRoute('/events')()
const EnvsRouteLazyImport = createFileRoute('/envs')()
const EndpointRouteLazyImport = createFileRoute('/endpoint')()
const AuthRouteLazyImport = createFileRoute('/auth')()
const AgstateRouteLazyImport = createFileRoute('/ag_state')()
const AgEventsRouteLazyImport = createFileRoute('/agEvents')()
const WorkflowsWorkflowIdLazyImport = createFileRoute(
  '/workflows/$workflowId',
)()
const WorkflowRunsWorkflowRunIdLazyImport = createFileRoute(
  '/workflow-runs/$workflowRunId',
)()
const TriggerIdLazyImport = createFileRoute('/trigger/$id')()
const PostCreateLazyImport = createFileRoute('/post/create')()
const PlayChatRouteLazyImport = createFileRoute('/play/chat')()
const PlatformAccountCreateLazyImport = createFileRoute(
  '/platform-account/create',
)()
const PlatformAccountPlatformAccountIdRouteLazyImport = createFileRoute(
  '/platform-account/$platformAccountId',
)()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginRouteLazyImport = createFileRoute('/auth/login')()
const WorkflowsIndexLazyImport = createFileRoute('/workflows/')()
const WorkflowRunsIndexLazyImport = createFileRoute('/workflow-runs/')()
const TeamIndexLazyImport = createFileRoute('/team/')()
const SettingsIndexLazyImport = createFileRoute('/settings/')()
const PostIndexLazyImport = createFileRoute('/post/')()
const PlayIndexLazyImport = createFileRoute('/play/')()
const PlatformAccountIndexLazyImport = createFileRoute('/platform-account/')()
const ModelIndexLazyImport = createFileRoute('/model/')()
const EventsIndexLazyImport = createFileRoute('/events/')()
const EnvsIndexLazyImport = createFileRoute('/envs/')()
const EndpointIndexLazyImport = createFileRoute('/endpoint/')()
const AgEventsIndexLazyImport = createFileRoute('/agEvents/')()
const PlayChatSessionIdRouteLazyImport = createFileRoute(
  '/play/chat/$sessionId',
)()
const PlayChatIndexLazyImport = createFileRoute('/play/chat/')()
const PlatformAccountPlatformAccountIdIndexLazyImport = createFileRoute(
  '/platform-account/$platformAccountId/',
)()
const AuthLoginIndexLazyImport = createFileRoute('/auth/login/')()
const PlayChatSessionIdTeamLazyImport = createFileRoute(
  '/play/chat/$sessionId/team',
)()
const PlayChatSessionIdStateLazyImport = createFileRoute(
  '/play/chat/$sessionId/state',
)()
const PlayChatSessionIdResultLazyImport = createFileRoute(
  '/play/chat/$sessionId/result',
)()
const PlayChatSessionIdEditLazyImport = createFileRoute(
  '/play/chat/$sessionId/edit',
)()
const PlayChatSessionIdDebugLazyImport = createFileRoute(
  '/play/chat/$sessionId/debug',
)()

// Create/Update Routes

const WorkflowsRouteLazyRoute = WorkflowsRouteLazyImport.update({
  id: '/workflows',
  path: '/workflows',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~workflows/~route.lazy').then((d) => d.Route),
)

const WorkflowRunsRouteLazyRoute = WorkflowRunsRouteLazyImport.update({
  id: '/workflow-runs',
  path: '/workflow-runs',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~workflow-runs/~route.lazy').then((d) => d.Route),
)

const TriggerRouteLazyRoute = TriggerRouteLazyImport.update({
  id: '/trigger',
  path: '/trigger',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~trigger/~route.lazy').then((d) => d.Route),
)

const TeamRouteLazyRoute = TeamRouteLazyImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~team/~route.lazy').then((d) => d.Route))

const SiteRouteLazyRoute = SiteRouteLazyImport.update({
  id: '/site',
  path: '/site',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~site/~route.lazy').then((d) => d.Route))

const SettingsRouteLazyRoute = SettingsRouteLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~settings/~route.lazy').then((d) => d.Route),
)

const PostRouteLazyRoute = PostRouteLazyImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~post/~route.lazy').then((d) => d.Route))

const PlayRouteLazyRoute = PlayRouteLazyImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~play/~route.lazy').then((d) => d.Route))

const PlatformAccountRouteLazyRoute = PlatformAccountRouteLazyImport.update({
  id: '/platform-account',
  path: '/platform-account',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~platform-account/~route.lazy').then((d) => d.Route),
)

const PlatformRouteLazyRoute = PlatformRouteLazyImport.update({
  id: '/platform',
  path: '/platform',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~platform/~route.lazy').then((d) => d.Route),
)

const ModelRouteLazyRoute = ModelRouteLazyImport.update({
  id: '/model',
  path: '/model',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~model/~route.lazy').then((d) => d.Route))

const GalleryRouteLazyRoute = GalleryRouteLazyImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~gallery/~route.lazy').then((d) => d.Route),
)

const EventsRouteLazyRoute = EventsRouteLazyImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~events/~route.lazy').then((d) => d.Route),
)

const EnvsRouteLazyRoute = EnvsRouteLazyImport.update({
  id: '/envs',
  path: '/envs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~envs/~route.lazy').then((d) => d.Route))

const EndpointRouteLazyRoute = EndpointRouteLazyImport.update({
  id: '/endpoint',
  path: '/endpoint',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~endpoint/~route.lazy').then((d) => d.Route),
)

const AuthRouteLazyRoute = AuthRouteLazyImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~auth/~route.lazy').then((d) => d.Route))

const AgstateRouteLazyRoute = AgstateRouteLazyImport.update({
  id: '/ag_state',
  path: '/ag_state',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~ag_state/~route.lazy').then((d) => d.Route),
)

const AgEventsRouteLazyRoute = AgEventsRouteLazyImport.update({
  id: '/agEvents',
  path: '/agEvents',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/~agEvents/~route.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkflowsWorkflowIdLazyRoute = WorkflowsWorkflowIdLazyImport.update({
  id: '/$workflowId',
  path: '/$workflowId',
  getParentRoute: () => WorkflowsRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~workflows/~$workflowId.lazy').then((d) => d.Route),
)

const WorkflowRunsWorkflowRunIdLazyRoute =
  WorkflowRunsWorkflowRunIdLazyImport.update({
    id: '/$workflowRunId',
    path: '/$workflowRunId',
    getParentRoute: () => WorkflowRunsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~workflow-runs/~$workflowRunId.lazy').then((d) => d.Route),
  )

const TriggerIdLazyRoute = TriggerIdLazyImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TriggerRouteLazyRoute,
} as any).lazy(() => import('./routes/~trigger/~$id.lazy').then((d) => d.Route))

const PostCreateLazyRoute = PostCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => PostRouteLazyRoute,
} as any).lazy(() => import('./routes/~post/~create.lazy').then((d) => d.Route))

const PlayChatRouteLazyRoute = PlayChatRouteLazyImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => PlayRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~play/~chat/~route.lazy').then((d) => d.Route),
)

const PlatformAccountCreateLazyRoute = PlatformAccountCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => PlatformAccountRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~platform-account/~create.lazy').then((d) => d.Route),
)

const PlatformAccountPlatformAccountIdRouteLazyRoute =
  PlatformAccountPlatformAccountIdRouteLazyImport.update({
    id: '/$platformAccountId',
    path: '/$platformAccountId',
    getParentRoute: () => PlatformAccountRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~platform-account/~$platformAccountId/~route.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~auth/~register.lazy').then((d) => d.Route),
)

const AuthLoginRouteLazyRoute = AuthLoginRouteLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~auth/~login/~route.lazy').then((d) => d.Route),
)

const WorkflowsIndexLazyRoute = WorkflowsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkflowsRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~workflows/~index.lazy').then((d) => d.Route),
)

const WorkflowRunsIndexLazyRoute = WorkflowRunsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkflowRunsRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~workflow-runs/~index.lazy').then((d) => d.Route),
)

const TeamIndexLazyRoute = TeamIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TeamRouteLazyRoute,
} as any).lazy(() => import('./routes/~team/~index.lazy').then((d) => d.Route))

const SettingsIndexLazyRoute = SettingsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~settings/~index.lazy').then((d) => d.Route),
)

const PostIndexLazyRoute = PostIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostRouteLazyRoute,
} as any).lazy(() => import('./routes/~post/~index.lazy').then((d) => d.Route))

const PlayIndexLazyRoute = PlayIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlayRouteLazyRoute,
} as any).lazy(() => import('./routes/~play/~index.lazy').then((d) => d.Route))

const PlatformAccountIndexLazyRoute = PlatformAccountIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlatformAccountRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~platform-account/~index.lazy').then((d) => d.Route),
)

const ModelIndexLazyRoute = ModelIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ModelRouteLazyRoute,
} as any).lazy(() => import('./routes/~model/~index.lazy').then((d) => d.Route))

const EventsIndexLazyRoute = EventsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EventsRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~events/~index.lazy').then((d) => d.Route),
)

const EnvsIndexLazyRoute = EnvsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EnvsRouteLazyRoute,
} as any).lazy(() => import('./routes/~envs/~index.lazy').then((d) => d.Route))

const EndpointIndexLazyRoute = EndpointIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EndpointRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~endpoint/~index.lazy').then((d) => d.Route),
)

const AgEventsIndexLazyRoute = AgEventsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AgEventsRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~agEvents/~index.lazy').then((d) => d.Route),
)

const TriggerAgRoute = TriggerAgImport.update({
  id: '/ag',
  path: '/ag',
  getParentRoute: () => TriggerRouteLazyRoute,
} as any)

const TeamTeamIdRoute = TeamTeamIdImport.update({
  id: '/$teamId',
  path: '/$teamId',
  getParentRoute: () => TeamRouteLazyRoute,
} as any)

const SiteSiteIdRouteRoute = SiteSiteIdRouteImport.update({
  id: '/$siteId',
  path: '/$siteId',
  getParentRoute: () => SiteRouteLazyRoute,
} as any)

const GalleryGalleryIdRoute = GalleryGalleryIdImport.update({
  id: '/$galleryId',
  path: '/$galleryId',
  getParentRoute: () => GalleryRouteLazyRoute,
} as any)

const EnvsCreateRoute = EnvsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => EnvsRouteLazyRoute,
} as any)

const SiteIndexRoute = SiteIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SiteRouteLazyRoute,
} as any)

const PlatformIndexRoute = PlatformIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlatformRouteLazyRoute,
} as any)

const GalleryIndexRoute = GalleryIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GalleryRouteLazyRoute,
} as any)

const PlayChatSessionIdRouteLazyRoute = PlayChatSessionIdRouteLazyImport.update(
  {
    id: '/$sessionId',
    path: '/$sessionId',
    getParentRoute: () => PlayChatRouteLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/~play/~chat/~$sessionId/~route.lazy').then((d) => d.Route),
)

const PlayChatIndexLazyRoute = PlayChatIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlayChatRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~play/~chat/~index.lazy').then((d) => d.Route),
)

const PlatformAccountPlatformAccountIdIndexLazyRoute =
  PlatformAccountPlatformAccountIdIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => PlatformAccountPlatformAccountIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~platform-account/~$platformAccountId/~index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthLoginIndexLazyRoute = AuthLoginIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthLoginRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~auth/~login/~index.lazy').then((d) => d.Route),
)

const SiteSiteIdHostRouteRoute = SiteSiteIdHostRouteImport.update({
  id: '/host',
  path: '/host',
  getParentRoute: () => SiteSiteIdRouteRoute,
} as any)

const SiteSiteIdEditRoute = SiteSiteIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => SiteSiteIdRouteRoute,
} as any)

const SiteCreateIndexRoute = SiteCreateIndexImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => SiteRouteLazyRoute,
} as any)

const SiteSiteIdIndexRoute = SiteSiteIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SiteSiteIdRouteRoute,
} as any)

const OnboardingCreateTenantIndexRoute =
  OnboardingCreateTenantIndexImport.update({
    id: '/onboarding/create-tenant/',
    path: '/onboarding/create-tenant/',
    getParentRoute: () => rootRoute,
  } as any)

const PlayChatSessionIdTeamLazyRoute = PlayChatSessionIdTeamLazyImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => PlayChatSessionIdRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~play/~chat/~$sessionId/~team.lazy').then((d) => d.Route),
)

const PlayChatSessionIdStateLazyRoute = PlayChatSessionIdStateLazyImport.update(
  {
    id: '/state',
    path: '/state',
    getParentRoute: () => PlayChatSessionIdRouteLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/~play/~chat/~$sessionId/~state.lazy').then((d) => d.Route),
)

const PlayChatSessionIdResultLazyRoute =
  PlayChatSessionIdResultLazyImport.update({
    id: '/result',
    path: '/result',
    getParentRoute: () => PlayChatSessionIdRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/~play/~chat/~$sessionId/~result.lazy').then(
      (d) => d.Route,
    ),
  )

const PlayChatSessionIdEditLazyRoute = PlayChatSessionIdEditLazyImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PlayChatSessionIdRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/~play/~chat/~$sessionId/~edit.lazy').then((d) => d.Route),
)

const PlayChatSessionIdDebugLazyRoute = PlayChatSessionIdDebugLazyImport.update(
  {
    id: '/debug',
    path: '/debug',
    getParentRoute: () => PlayChatSessionIdRouteLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/~play/~chat/~$sessionId/~debug.lazy').then((d) => d.Route),
)

const SiteSiteIdHostIndexRoute = SiteSiteIdHostIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SiteSiteIdHostRouteRoute,
} as any)

const PlayChatSessionIdIndexRoute = PlayChatSessionIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlayChatSessionIdRouteLazyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/agEvents': {
      id: '/agEvents'
      path: '/agEvents'
      fullPath: '/agEvents'
      preLoaderRoute: typeof AgEventsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/ag_state': {
      id: '/ag_state'
      path: '/ag_state'
      fullPath: '/ag_state'
      preLoaderRoute: typeof AgstateRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/endpoint': {
      id: '/endpoint'
      path: '/endpoint'
      fullPath: '/endpoint'
      preLoaderRoute: typeof EndpointRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/envs': {
      id: '/envs'
      path: '/envs'
      fullPath: '/envs'
      preLoaderRoute: typeof EnvsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/model': {
      id: '/model'
      path: '/model'
      fullPath: '/model'
      preLoaderRoute: typeof ModelRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/platform': {
      id: '/platform'
      path: '/platform'
      fullPath: '/platform'
      preLoaderRoute: typeof PlatformRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/platform-account': {
      id: '/platform-account'
      path: '/platform-account'
      fullPath: '/platform-account'
      preLoaderRoute: typeof PlatformAccountRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/play': {
      id: '/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/post': {
      id: '/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/site': {
      id: '/site'
      path: '/site'
      fullPath: '/site'
      preLoaderRoute: typeof SiteRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/team': {
      id: '/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/trigger': {
      id: '/trigger'
      path: '/trigger'
      fullPath: '/trigger'
      preLoaderRoute: typeof TriggerRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/workflow-runs': {
      id: '/workflow-runs'
      path: '/workflow-runs'
      fullPath: '/workflow-runs'
      preLoaderRoute: typeof WorkflowRunsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/workflows': {
      id: '/workflows'
      path: '/workflows'
      fullPath: '/workflows'
      preLoaderRoute: typeof WorkflowsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/gallery/': {
      id: '/gallery/'
      path: '/'
      fullPath: '/gallery/'
      preLoaderRoute: typeof GalleryIndexImport
      parentRoute: typeof GalleryRouteLazyImport
    }
    '/platform/': {
      id: '/platform/'
      path: '/'
      fullPath: '/platform/'
      preLoaderRoute: typeof PlatformIndexImport
      parentRoute: typeof PlatformRouteLazyImport
    }
    '/site/': {
      id: '/site/'
      path: '/'
      fullPath: '/site/'
      preLoaderRoute: typeof SiteIndexImport
      parentRoute: typeof SiteRouteLazyImport
    }
    '/envs/create': {
      id: '/envs/create'
      path: '/create'
      fullPath: '/envs/create'
      preLoaderRoute: typeof EnvsCreateImport
      parentRoute: typeof EnvsRouteLazyImport
    }
    '/gallery/$galleryId': {
      id: '/gallery/$galleryId'
      path: '/$galleryId'
      fullPath: '/gallery/$galleryId'
      preLoaderRoute: typeof GalleryGalleryIdImport
      parentRoute: typeof GalleryRouteLazyImport
    }
    '/site/$siteId': {
      id: '/site/$siteId'
      path: '/$siteId'
      fullPath: '/site/$siteId'
      preLoaderRoute: typeof SiteSiteIdRouteImport
      parentRoute: typeof SiteRouteLazyImport
    }
    '/team/$teamId': {
      id: '/team/$teamId'
      path: '/$teamId'
      fullPath: '/team/$teamId'
      preLoaderRoute: typeof TeamTeamIdImport
      parentRoute: typeof TeamRouteLazyImport
    }
    '/trigger/ag': {
      id: '/trigger/ag'
      path: '/ag'
      fullPath: '/trigger/ag'
      preLoaderRoute: typeof TriggerAgImport
      parentRoute: typeof TriggerRouteLazyImport
    }
    '/agEvents/': {
      id: '/agEvents/'
      path: '/'
      fullPath: '/agEvents/'
      preLoaderRoute: typeof AgEventsIndexLazyImport
      parentRoute: typeof AgEventsRouteLazyImport
    }
    '/endpoint/': {
      id: '/endpoint/'
      path: '/'
      fullPath: '/endpoint/'
      preLoaderRoute: typeof EndpointIndexLazyImport
      parentRoute: typeof EndpointRouteLazyImport
    }
    '/envs/': {
      id: '/envs/'
      path: '/'
      fullPath: '/envs/'
      preLoaderRoute: typeof EnvsIndexLazyImport
      parentRoute: typeof EnvsRouteLazyImport
    }
    '/events/': {
      id: '/events/'
      path: '/'
      fullPath: '/events/'
      preLoaderRoute: typeof EventsIndexLazyImport
      parentRoute: typeof EventsRouteLazyImport
    }
    '/model/': {
      id: '/model/'
      path: '/'
      fullPath: '/model/'
      preLoaderRoute: typeof ModelIndexLazyImport
      parentRoute: typeof ModelRouteLazyImport
    }
    '/platform-account/': {
      id: '/platform-account/'
      path: '/'
      fullPath: '/platform-account/'
      preLoaderRoute: typeof PlatformAccountIndexLazyImport
      parentRoute: typeof PlatformAccountRouteLazyImport
    }
    '/play/': {
      id: '/play/'
      path: '/'
      fullPath: '/play/'
      preLoaderRoute: typeof PlayIndexLazyImport
      parentRoute: typeof PlayRouteLazyImport
    }
    '/post/': {
      id: '/post/'
      path: '/'
      fullPath: '/post/'
      preLoaderRoute: typeof PostIndexLazyImport
      parentRoute: typeof PostRouteLazyImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexLazyImport
      parentRoute: typeof SettingsRouteLazyImport
    }
    '/team/': {
      id: '/team/'
      path: '/'
      fullPath: '/team/'
      preLoaderRoute: typeof TeamIndexLazyImport
      parentRoute: typeof TeamRouteLazyImport
    }
    '/workflow-runs/': {
      id: '/workflow-runs/'
      path: '/'
      fullPath: '/workflow-runs/'
      preLoaderRoute: typeof WorkflowRunsIndexLazyImport
      parentRoute: typeof WorkflowRunsRouteLazyImport
    }
    '/workflows/': {
      id: '/workflows/'
      path: '/'
      fullPath: '/workflows/'
      preLoaderRoute: typeof WorkflowsIndexLazyImport
      parentRoute: typeof WorkflowsRouteLazyImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/platform-account/$platformAccountId': {
      id: '/platform-account/$platformAccountId'
      path: '/$platformAccountId'
      fullPath: '/platform-account/$platformAccountId'
      preLoaderRoute: typeof PlatformAccountPlatformAccountIdRouteLazyImport
      parentRoute: typeof PlatformAccountRouteLazyImport
    }
    '/platform-account/create': {
      id: '/platform-account/create'
      path: '/create'
      fullPath: '/platform-account/create'
      preLoaderRoute: typeof PlatformAccountCreateLazyImport
      parentRoute: typeof PlatformAccountRouteLazyImport
    }
    '/play/chat': {
      id: '/play/chat'
      path: '/chat'
      fullPath: '/play/chat'
      preLoaderRoute: typeof PlayChatRouteLazyImport
      parentRoute: typeof PlayRouteLazyImport
    }
    '/post/create': {
      id: '/post/create'
      path: '/create'
      fullPath: '/post/create'
      preLoaderRoute: typeof PostCreateLazyImport
      parentRoute: typeof PostRouteLazyImport
    }
    '/trigger/$id': {
      id: '/trigger/$id'
      path: '/$id'
      fullPath: '/trigger/$id'
      preLoaderRoute: typeof TriggerIdLazyImport
      parentRoute: typeof TriggerRouteLazyImport
    }
    '/workflow-runs/$workflowRunId': {
      id: '/workflow-runs/$workflowRunId'
      path: '/$workflowRunId'
      fullPath: '/workflow-runs/$workflowRunId'
      preLoaderRoute: typeof WorkflowRunsWorkflowRunIdLazyImport
      parentRoute: typeof WorkflowRunsRouteLazyImport
    }
    '/workflows/$workflowId': {
      id: '/workflows/$workflowId'
      path: '/$workflowId'
      fullPath: '/workflows/$workflowId'
      preLoaderRoute: typeof WorkflowsWorkflowIdLazyImport
      parentRoute: typeof WorkflowsRouteLazyImport
    }
    '/onboarding/create-tenant/': {
      id: '/onboarding/create-tenant/'
      path: '/onboarding/create-tenant'
      fullPath: '/onboarding/create-tenant'
      preLoaderRoute: typeof OnboardingCreateTenantIndexImport
      parentRoute: typeof rootRoute
    }
    '/site/$siteId/': {
      id: '/site/$siteId/'
      path: '/'
      fullPath: '/site/$siteId/'
      preLoaderRoute: typeof SiteSiteIdIndexImport
      parentRoute: typeof SiteSiteIdRouteImport
    }
    '/site/create/': {
      id: '/site/create/'
      path: '/create'
      fullPath: '/site/create'
      preLoaderRoute: typeof SiteCreateIndexImport
      parentRoute: typeof SiteRouteLazyImport
    }
    '/site/$siteId/edit': {
      id: '/site/$siteId/edit'
      path: '/edit'
      fullPath: '/site/$siteId/edit'
      preLoaderRoute: typeof SiteSiteIdEditImport
      parentRoute: typeof SiteSiteIdRouteImport
    }
    '/site/$siteId/host': {
      id: '/site/$siteId/host'
      path: '/host'
      fullPath: '/site/$siteId/host'
      preLoaderRoute: typeof SiteSiteIdHostRouteImport
      parentRoute: typeof SiteSiteIdRouteImport
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/'
      fullPath: '/auth/login/'
      preLoaderRoute: typeof AuthLoginIndexLazyImport
      parentRoute: typeof AuthLoginRouteLazyImport
    }
    '/platform-account/$platformAccountId/': {
      id: '/platform-account/$platformAccountId/'
      path: '/'
      fullPath: '/platform-account/$platformAccountId/'
      preLoaderRoute: typeof PlatformAccountPlatformAccountIdIndexLazyImport
      parentRoute: typeof PlatformAccountPlatformAccountIdRouteLazyImport
    }
    '/play/chat/': {
      id: '/play/chat/'
      path: '/'
      fullPath: '/play/chat/'
      preLoaderRoute: typeof PlayChatIndexLazyImport
      parentRoute: typeof PlayChatRouteLazyImport
    }
    '/play/chat/$sessionId': {
      id: '/play/chat/$sessionId'
      path: '/$sessionId'
      fullPath: '/play/chat/$sessionId'
      preLoaderRoute: typeof PlayChatSessionIdRouteLazyImport
      parentRoute: typeof PlayChatRouteLazyImport
    }
    '/play/chat/$sessionId/': {
      id: '/play/chat/$sessionId/'
      path: '/'
      fullPath: '/play/chat/$sessionId/'
      preLoaderRoute: typeof PlayChatSessionIdIndexImport
      parentRoute: typeof PlayChatSessionIdRouteLazyImport
    }
    '/site/$siteId/host/': {
      id: '/site/$siteId/host/'
      path: '/'
      fullPath: '/site/$siteId/host/'
      preLoaderRoute: typeof SiteSiteIdHostIndexImport
      parentRoute: typeof SiteSiteIdHostRouteImport
    }
    '/play/chat/$sessionId/debug': {
      id: '/play/chat/$sessionId/debug'
      path: '/debug'
      fullPath: '/play/chat/$sessionId/debug'
      preLoaderRoute: typeof PlayChatSessionIdDebugLazyImport
      parentRoute: typeof PlayChatSessionIdRouteLazyImport
    }
    '/play/chat/$sessionId/edit': {
      id: '/play/chat/$sessionId/edit'
      path: '/edit'
      fullPath: '/play/chat/$sessionId/edit'
      preLoaderRoute: typeof PlayChatSessionIdEditLazyImport
      parentRoute: typeof PlayChatSessionIdRouteLazyImport
    }
    '/play/chat/$sessionId/result': {
      id: '/play/chat/$sessionId/result'
      path: '/result'
      fullPath: '/play/chat/$sessionId/result'
      preLoaderRoute: typeof PlayChatSessionIdResultLazyImport
      parentRoute: typeof PlayChatSessionIdRouteLazyImport
    }
    '/play/chat/$sessionId/state': {
      id: '/play/chat/$sessionId/state'
      path: '/state'
      fullPath: '/play/chat/$sessionId/state'
      preLoaderRoute: typeof PlayChatSessionIdStateLazyImport
      parentRoute: typeof PlayChatSessionIdRouteLazyImport
    }
    '/play/chat/$sessionId/team': {
      id: '/play/chat/$sessionId/team'
      path: '/team'
      fullPath: '/play/chat/$sessionId/team'
      preLoaderRoute: typeof PlayChatSessionIdTeamLazyImport
      parentRoute: typeof PlayChatSessionIdRouteLazyImport
    }
  }
}

// Create and export the route tree

interface AgEventsRouteLazyRouteChildren {
  AgEventsIndexLazyRoute: typeof AgEventsIndexLazyRoute
}

const AgEventsRouteLazyRouteChildren: AgEventsRouteLazyRouteChildren = {
  AgEventsIndexLazyRoute: AgEventsIndexLazyRoute,
}

const AgEventsRouteLazyRouteWithChildren =
  AgEventsRouteLazyRoute._addFileChildren(AgEventsRouteLazyRouteChildren)

interface AuthLoginRouteLazyRouteChildren {
  AuthLoginIndexLazyRoute: typeof AuthLoginIndexLazyRoute
}

const AuthLoginRouteLazyRouteChildren: AuthLoginRouteLazyRouteChildren = {
  AuthLoginIndexLazyRoute: AuthLoginIndexLazyRoute,
}

const AuthLoginRouteLazyRouteWithChildren =
  AuthLoginRouteLazyRoute._addFileChildren(AuthLoginRouteLazyRouteChildren)

interface AuthRouteLazyRouteChildren {
  AuthLoginRouteLazyRoute: typeof AuthLoginRouteLazyRouteWithChildren
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
}

const AuthRouteLazyRouteChildren: AuthRouteLazyRouteChildren = {
  AuthLoginRouteLazyRoute: AuthLoginRouteLazyRouteWithChildren,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
}

const AuthRouteLazyRouteWithChildren = AuthRouteLazyRoute._addFileChildren(
  AuthRouteLazyRouteChildren,
)

interface EndpointRouteLazyRouteChildren {
  EndpointIndexLazyRoute: typeof EndpointIndexLazyRoute
}

const EndpointRouteLazyRouteChildren: EndpointRouteLazyRouteChildren = {
  EndpointIndexLazyRoute: EndpointIndexLazyRoute,
}

const EndpointRouteLazyRouteWithChildren =
  EndpointRouteLazyRoute._addFileChildren(EndpointRouteLazyRouteChildren)

interface EnvsRouteLazyRouteChildren {
  EnvsCreateRoute: typeof EnvsCreateRoute
  EnvsIndexLazyRoute: typeof EnvsIndexLazyRoute
}

const EnvsRouteLazyRouteChildren: EnvsRouteLazyRouteChildren = {
  EnvsCreateRoute: EnvsCreateRoute,
  EnvsIndexLazyRoute: EnvsIndexLazyRoute,
}

const EnvsRouteLazyRouteWithChildren = EnvsRouteLazyRoute._addFileChildren(
  EnvsRouteLazyRouteChildren,
)

interface EventsRouteLazyRouteChildren {
  EventsIndexLazyRoute: typeof EventsIndexLazyRoute
}

const EventsRouteLazyRouteChildren: EventsRouteLazyRouteChildren = {
  EventsIndexLazyRoute: EventsIndexLazyRoute,
}

const EventsRouteLazyRouteWithChildren = EventsRouteLazyRoute._addFileChildren(
  EventsRouteLazyRouteChildren,
)

interface GalleryRouteLazyRouteChildren {
  GalleryIndexRoute: typeof GalleryIndexRoute
  GalleryGalleryIdRoute: typeof GalleryGalleryIdRoute
}

const GalleryRouteLazyRouteChildren: GalleryRouteLazyRouteChildren = {
  GalleryIndexRoute: GalleryIndexRoute,
  GalleryGalleryIdRoute: GalleryGalleryIdRoute,
}

const GalleryRouteLazyRouteWithChildren =
  GalleryRouteLazyRoute._addFileChildren(GalleryRouteLazyRouteChildren)

interface ModelRouteLazyRouteChildren {
  ModelIndexLazyRoute: typeof ModelIndexLazyRoute
}

const ModelRouteLazyRouteChildren: ModelRouteLazyRouteChildren = {
  ModelIndexLazyRoute: ModelIndexLazyRoute,
}

const ModelRouteLazyRouteWithChildren = ModelRouteLazyRoute._addFileChildren(
  ModelRouteLazyRouteChildren,
)

interface PlatformRouteLazyRouteChildren {
  PlatformIndexRoute: typeof PlatformIndexRoute
}

const PlatformRouteLazyRouteChildren: PlatformRouteLazyRouteChildren = {
  PlatformIndexRoute: PlatformIndexRoute,
}

const PlatformRouteLazyRouteWithChildren =
  PlatformRouteLazyRoute._addFileChildren(PlatformRouteLazyRouteChildren)

interface PlatformAccountPlatformAccountIdRouteLazyRouteChildren {
  PlatformAccountPlatformAccountIdIndexLazyRoute: typeof PlatformAccountPlatformAccountIdIndexLazyRoute
}

const PlatformAccountPlatformAccountIdRouteLazyRouteChildren: PlatformAccountPlatformAccountIdRouteLazyRouteChildren =
  {
    PlatformAccountPlatformAccountIdIndexLazyRoute:
      PlatformAccountPlatformAccountIdIndexLazyRoute,
  }

const PlatformAccountPlatformAccountIdRouteLazyRouteWithChildren =
  PlatformAccountPlatformAccountIdRouteLazyRoute._addFileChildren(
    PlatformAccountPlatformAccountIdRouteLazyRouteChildren,
  )

interface PlatformAccountRouteLazyRouteChildren {
  PlatformAccountIndexLazyRoute: typeof PlatformAccountIndexLazyRoute
  PlatformAccountPlatformAccountIdRouteLazyRoute: typeof PlatformAccountPlatformAccountIdRouteLazyRouteWithChildren
  PlatformAccountCreateLazyRoute: typeof PlatformAccountCreateLazyRoute
}

const PlatformAccountRouteLazyRouteChildren: PlatformAccountRouteLazyRouteChildren =
  {
    PlatformAccountIndexLazyRoute: PlatformAccountIndexLazyRoute,
    PlatformAccountPlatformAccountIdRouteLazyRoute:
      PlatformAccountPlatformAccountIdRouteLazyRouteWithChildren,
    PlatformAccountCreateLazyRoute: PlatformAccountCreateLazyRoute,
  }

const PlatformAccountRouteLazyRouteWithChildren =
  PlatformAccountRouteLazyRoute._addFileChildren(
    PlatformAccountRouteLazyRouteChildren,
  )

interface PlayChatSessionIdRouteLazyRouteChildren {
  PlayChatSessionIdIndexRoute: typeof PlayChatSessionIdIndexRoute
  PlayChatSessionIdDebugLazyRoute: typeof PlayChatSessionIdDebugLazyRoute
  PlayChatSessionIdEditLazyRoute: typeof PlayChatSessionIdEditLazyRoute
  PlayChatSessionIdResultLazyRoute: typeof PlayChatSessionIdResultLazyRoute
  PlayChatSessionIdStateLazyRoute: typeof PlayChatSessionIdStateLazyRoute
  PlayChatSessionIdTeamLazyRoute: typeof PlayChatSessionIdTeamLazyRoute
}

const PlayChatSessionIdRouteLazyRouteChildren: PlayChatSessionIdRouteLazyRouteChildren =
  {
    PlayChatSessionIdIndexRoute: PlayChatSessionIdIndexRoute,
    PlayChatSessionIdDebugLazyRoute: PlayChatSessionIdDebugLazyRoute,
    PlayChatSessionIdEditLazyRoute: PlayChatSessionIdEditLazyRoute,
    PlayChatSessionIdResultLazyRoute: PlayChatSessionIdResultLazyRoute,
    PlayChatSessionIdStateLazyRoute: PlayChatSessionIdStateLazyRoute,
    PlayChatSessionIdTeamLazyRoute: PlayChatSessionIdTeamLazyRoute,
  }

const PlayChatSessionIdRouteLazyRouteWithChildren =
  PlayChatSessionIdRouteLazyRoute._addFileChildren(
    PlayChatSessionIdRouteLazyRouteChildren,
  )

interface PlayChatRouteLazyRouteChildren {
  PlayChatIndexLazyRoute: typeof PlayChatIndexLazyRoute
  PlayChatSessionIdRouteLazyRoute: typeof PlayChatSessionIdRouteLazyRouteWithChildren
}

const PlayChatRouteLazyRouteChildren: PlayChatRouteLazyRouteChildren = {
  PlayChatIndexLazyRoute: PlayChatIndexLazyRoute,
  PlayChatSessionIdRouteLazyRoute: PlayChatSessionIdRouteLazyRouteWithChildren,
}

const PlayChatRouteLazyRouteWithChildren =
  PlayChatRouteLazyRoute._addFileChildren(PlayChatRouteLazyRouteChildren)

interface PlayRouteLazyRouteChildren {
  PlayIndexLazyRoute: typeof PlayIndexLazyRoute
  PlayChatRouteLazyRoute: typeof PlayChatRouteLazyRouteWithChildren
}

const PlayRouteLazyRouteChildren: PlayRouteLazyRouteChildren = {
  PlayIndexLazyRoute: PlayIndexLazyRoute,
  PlayChatRouteLazyRoute: PlayChatRouteLazyRouteWithChildren,
}

const PlayRouteLazyRouteWithChildren = PlayRouteLazyRoute._addFileChildren(
  PlayRouteLazyRouteChildren,
)

interface PostRouteLazyRouteChildren {
  PostIndexLazyRoute: typeof PostIndexLazyRoute
  PostCreateLazyRoute: typeof PostCreateLazyRoute
}

const PostRouteLazyRouteChildren: PostRouteLazyRouteChildren = {
  PostIndexLazyRoute: PostIndexLazyRoute,
  PostCreateLazyRoute: PostCreateLazyRoute,
}

const PostRouteLazyRouteWithChildren = PostRouteLazyRoute._addFileChildren(
  PostRouteLazyRouteChildren,
)

interface SettingsRouteLazyRouteChildren {
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute
}

const SettingsRouteLazyRouteChildren: SettingsRouteLazyRouteChildren = {
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
}

const SettingsRouteLazyRouteWithChildren =
  SettingsRouteLazyRoute._addFileChildren(SettingsRouteLazyRouteChildren)

interface SiteSiteIdHostRouteRouteChildren {
  SiteSiteIdHostIndexRoute: typeof SiteSiteIdHostIndexRoute
}

const SiteSiteIdHostRouteRouteChildren: SiteSiteIdHostRouteRouteChildren = {
  SiteSiteIdHostIndexRoute: SiteSiteIdHostIndexRoute,
}

const SiteSiteIdHostRouteRouteWithChildren =
  SiteSiteIdHostRouteRoute._addFileChildren(SiteSiteIdHostRouteRouteChildren)

interface SiteSiteIdRouteRouteChildren {
  SiteSiteIdIndexRoute: typeof SiteSiteIdIndexRoute
  SiteSiteIdEditRoute: typeof SiteSiteIdEditRoute
  SiteSiteIdHostRouteRoute: typeof SiteSiteIdHostRouteRouteWithChildren
}

const SiteSiteIdRouteRouteChildren: SiteSiteIdRouteRouteChildren = {
  SiteSiteIdIndexRoute: SiteSiteIdIndexRoute,
  SiteSiteIdEditRoute: SiteSiteIdEditRoute,
  SiteSiteIdHostRouteRoute: SiteSiteIdHostRouteRouteWithChildren,
}

const SiteSiteIdRouteRouteWithChildren = SiteSiteIdRouteRoute._addFileChildren(
  SiteSiteIdRouteRouteChildren,
)

interface SiteRouteLazyRouteChildren {
  SiteIndexRoute: typeof SiteIndexRoute
  SiteSiteIdRouteRoute: typeof SiteSiteIdRouteRouteWithChildren
  SiteCreateIndexRoute: typeof SiteCreateIndexRoute
}

const SiteRouteLazyRouteChildren: SiteRouteLazyRouteChildren = {
  SiteIndexRoute: SiteIndexRoute,
  SiteSiteIdRouteRoute: SiteSiteIdRouteRouteWithChildren,
  SiteCreateIndexRoute: SiteCreateIndexRoute,
}

const SiteRouteLazyRouteWithChildren = SiteRouteLazyRoute._addFileChildren(
  SiteRouteLazyRouteChildren,
)

interface TeamRouteLazyRouteChildren {
  TeamTeamIdRoute: typeof TeamTeamIdRoute
  TeamIndexLazyRoute: typeof TeamIndexLazyRoute
}

const TeamRouteLazyRouteChildren: TeamRouteLazyRouteChildren = {
  TeamTeamIdRoute: TeamTeamIdRoute,
  TeamIndexLazyRoute: TeamIndexLazyRoute,
}

const TeamRouteLazyRouteWithChildren = TeamRouteLazyRoute._addFileChildren(
  TeamRouteLazyRouteChildren,
)

interface TriggerRouteLazyRouteChildren {
  TriggerAgRoute: typeof TriggerAgRoute
  TriggerIdLazyRoute: typeof TriggerIdLazyRoute
}

const TriggerRouteLazyRouteChildren: TriggerRouteLazyRouteChildren = {
  TriggerAgRoute: TriggerAgRoute,
  TriggerIdLazyRoute: TriggerIdLazyRoute,
}

const TriggerRouteLazyRouteWithChildren =
  TriggerRouteLazyRoute._addFileChildren(TriggerRouteLazyRouteChildren)

interface WorkflowRunsRouteLazyRouteChildren {
  WorkflowRunsIndexLazyRoute: typeof WorkflowRunsIndexLazyRoute
  WorkflowRunsWorkflowRunIdLazyRoute: typeof WorkflowRunsWorkflowRunIdLazyRoute
}

const WorkflowRunsRouteLazyRouteChildren: WorkflowRunsRouteLazyRouteChildren = {
  WorkflowRunsIndexLazyRoute: WorkflowRunsIndexLazyRoute,
  WorkflowRunsWorkflowRunIdLazyRoute: WorkflowRunsWorkflowRunIdLazyRoute,
}

const WorkflowRunsRouteLazyRouteWithChildren =
  WorkflowRunsRouteLazyRoute._addFileChildren(
    WorkflowRunsRouteLazyRouteChildren,
  )

interface WorkflowsRouteLazyRouteChildren {
  WorkflowsIndexLazyRoute: typeof WorkflowsIndexLazyRoute
  WorkflowsWorkflowIdLazyRoute: typeof WorkflowsWorkflowIdLazyRoute
}

const WorkflowsRouteLazyRouteChildren: WorkflowsRouteLazyRouteChildren = {
  WorkflowsIndexLazyRoute: WorkflowsIndexLazyRoute,
  WorkflowsWorkflowIdLazyRoute: WorkflowsWorkflowIdLazyRoute,
}

const WorkflowsRouteLazyRouteWithChildren =
  WorkflowsRouteLazyRoute._addFileChildren(WorkflowsRouteLazyRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agEvents': typeof AgEventsRouteLazyRouteWithChildren
  '/ag_state': typeof AgstateRouteLazyRoute
  '/auth': typeof AuthRouteLazyRouteWithChildren
  '/endpoint': typeof EndpointRouteLazyRouteWithChildren
  '/envs': typeof EnvsRouteLazyRouteWithChildren
  '/events': typeof EventsRouteLazyRouteWithChildren
  '/gallery': typeof GalleryRouteLazyRouteWithChildren
  '/model': typeof ModelRouteLazyRouteWithChildren
  '/platform': typeof PlatformRouteLazyRouteWithChildren
  '/platform-account': typeof PlatformAccountRouteLazyRouteWithChildren
  '/play': typeof PlayRouteLazyRouteWithChildren
  '/post': typeof PostRouteLazyRouteWithChildren
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/site': typeof SiteRouteLazyRouteWithChildren
  '/team': typeof TeamRouteLazyRouteWithChildren
  '/trigger': typeof TriggerRouteLazyRouteWithChildren
  '/workflow-runs': typeof WorkflowRunsRouteLazyRouteWithChildren
  '/workflows': typeof WorkflowsRouteLazyRouteWithChildren
  '/gallery/': typeof GalleryIndexRoute
  '/platform/': typeof PlatformIndexRoute
  '/site/': typeof SiteIndexRoute
  '/envs/create': typeof EnvsCreateRoute
  '/gallery/$galleryId': typeof GalleryGalleryIdRoute
  '/site/$siteId': typeof SiteSiteIdRouteRouteWithChildren
  '/team/$teamId': typeof TeamTeamIdRoute
  '/trigger/ag': typeof TriggerAgRoute
  '/agEvents/': typeof AgEventsIndexLazyRoute
  '/endpoint/': typeof EndpointIndexLazyRoute
  '/envs/': typeof EnvsIndexLazyRoute
  '/events/': typeof EventsIndexLazyRoute
  '/model/': typeof ModelIndexLazyRoute
  '/platform-account/': typeof PlatformAccountIndexLazyRoute
  '/play/': typeof PlayIndexLazyRoute
  '/post/': typeof PostIndexLazyRoute
  '/settings/': typeof SettingsIndexLazyRoute
  '/team/': typeof TeamIndexLazyRoute
  '/workflow-runs/': typeof WorkflowRunsIndexLazyRoute
  '/workflows/': typeof WorkflowsIndexLazyRoute
  '/auth/login': typeof AuthLoginRouteLazyRouteWithChildren
  '/auth/register': typeof AuthRegisterLazyRoute
  '/platform-account/$platformAccountId': typeof PlatformAccountPlatformAccountIdRouteLazyRouteWithChildren
  '/platform-account/create': typeof PlatformAccountCreateLazyRoute
  '/play/chat': typeof PlayChatRouteLazyRouteWithChildren
  '/post/create': typeof PostCreateLazyRoute
  '/trigger/$id': typeof TriggerIdLazyRoute
  '/workflow-runs/$workflowRunId': typeof WorkflowRunsWorkflowRunIdLazyRoute
  '/workflows/$workflowId': typeof WorkflowsWorkflowIdLazyRoute
  '/onboarding/create-tenant': typeof OnboardingCreateTenantIndexRoute
  '/site/$siteId/': typeof SiteSiteIdIndexRoute
  '/site/create': typeof SiteCreateIndexRoute
  '/site/$siteId/edit': typeof SiteSiteIdEditRoute
  '/site/$siteId/host': typeof SiteSiteIdHostRouteRouteWithChildren
  '/auth/login/': typeof AuthLoginIndexLazyRoute
  '/platform-account/$platformAccountId/': typeof PlatformAccountPlatformAccountIdIndexLazyRoute
  '/play/chat/': typeof PlayChatIndexLazyRoute
  '/play/chat/$sessionId': typeof PlayChatSessionIdRouteLazyRouteWithChildren
  '/play/chat/$sessionId/': typeof PlayChatSessionIdIndexRoute
  '/site/$siteId/host/': typeof SiteSiteIdHostIndexRoute
  '/play/chat/$sessionId/debug': typeof PlayChatSessionIdDebugLazyRoute
  '/play/chat/$sessionId/edit': typeof PlayChatSessionIdEditLazyRoute
  '/play/chat/$sessionId/result': typeof PlayChatSessionIdResultLazyRoute
  '/play/chat/$sessionId/state': typeof PlayChatSessionIdStateLazyRoute
  '/play/chat/$sessionId/team': typeof PlayChatSessionIdTeamLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ag_state': typeof AgstateRouteLazyRoute
  '/auth': typeof AuthRouteLazyRouteWithChildren
  '/trigger': typeof TriggerRouteLazyRouteWithChildren
  '/gallery': typeof GalleryIndexRoute
  '/platform': typeof PlatformIndexRoute
  '/site': typeof SiteIndexRoute
  '/envs/create': typeof EnvsCreateRoute
  '/gallery/$galleryId': typeof GalleryGalleryIdRoute
  '/team/$teamId': typeof TeamTeamIdRoute
  '/trigger/ag': typeof TriggerAgRoute
  '/agEvents': typeof AgEventsIndexLazyRoute
  '/endpoint': typeof EndpointIndexLazyRoute
  '/envs': typeof EnvsIndexLazyRoute
  '/events': typeof EventsIndexLazyRoute
  '/model': typeof ModelIndexLazyRoute
  '/platform-account': typeof PlatformAccountIndexLazyRoute
  '/play': typeof PlayIndexLazyRoute
  '/post': typeof PostIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/team': typeof TeamIndexLazyRoute
  '/workflow-runs': typeof WorkflowRunsIndexLazyRoute
  '/workflows': typeof WorkflowsIndexLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/platform-account/create': typeof PlatformAccountCreateLazyRoute
  '/post/create': typeof PostCreateLazyRoute
  '/trigger/$id': typeof TriggerIdLazyRoute
  '/workflow-runs/$workflowRunId': typeof WorkflowRunsWorkflowRunIdLazyRoute
  '/workflows/$workflowId': typeof WorkflowsWorkflowIdLazyRoute
  '/onboarding/create-tenant': typeof OnboardingCreateTenantIndexRoute
  '/site/$siteId': typeof SiteSiteIdIndexRoute
  '/site/create': typeof SiteCreateIndexRoute
  '/site/$siteId/edit': typeof SiteSiteIdEditRoute
  '/auth/login': typeof AuthLoginIndexLazyRoute
  '/platform-account/$platformAccountId': typeof PlatformAccountPlatformAccountIdIndexLazyRoute
  '/play/chat': typeof PlayChatIndexLazyRoute
  '/play/chat/$sessionId': typeof PlayChatSessionIdIndexRoute
  '/site/$siteId/host': typeof SiteSiteIdHostIndexRoute
  '/play/chat/$sessionId/debug': typeof PlayChatSessionIdDebugLazyRoute
  '/play/chat/$sessionId/edit': typeof PlayChatSessionIdEditLazyRoute
  '/play/chat/$sessionId/result': typeof PlayChatSessionIdResultLazyRoute
  '/play/chat/$sessionId/state': typeof PlayChatSessionIdStateLazyRoute
  '/play/chat/$sessionId/team': typeof PlayChatSessionIdTeamLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/agEvents': typeof AgEventsRouteLazyRouteWithChildren
  '/ag_state': typeof AgstateRouteLazyRoute
  '/auth': typeof AuthRouteLazyRouteWithChildren
  '/endpoint': typeof EndpointRouteLazyRouteWithChildren
  '/envs': typeof EnvsRouteLazyRouteWithChildren
  '/events': typeof EventsRouteLazyRouteWithChildren
  '/gallery': typeof GalleryRouteLazyRouteWithChildren
  '/model': typeof ModelRouteLazyRouteWithChildren
  '/platform': typeof PlatformRouteLazyRouteWithChildren
  '/platform-account': typeof PlatformAccountRouteLazyRouteWithChildren
  '/play': typeof PlayRouteLazyRouteWithChildren
  '/post': typeof PostRouteLazyRouteWithChildren
  '/settings': typeof SettingsRouteLazyRouteWithChildren
  '/site': typeof SiteRouteLazyRouteWithChildren
  '/team': typeof TeamRouteLazyRouteWithChildren
  '/trigger': typeof TriggerRouteLazyRouteWithChildren
  '/workflow-runs': typeof WorkflowRunsRouteLazyRouteWithChildren
  '/workflows': typeof WorkflowsRouteLazyRouteWithChildren
  '/gallery/': typeof GalleryIndexRoute
  '/platform/': typeof PlatformIndexRoute
  '/site/': typeof SiteIndexRoute
  '/envs/create': typeof EnvsCreateRoute
  '/gallery/$galleryId': typeof GalleryGalleryIdRoute
  '/site/$siteId': typeof SiteSiteIdRouteRouteWithChildren
  '/team/$teamId': typeof TeamTeamIdRoute
  '/trigger/ag': typeof TriggerAgRoute
  '/agEvents/': typeof AgEventsIndexLazyRoute
  '/endpoint/': typeof EndpointIndexLazyRoute
  '/envs/': typeof EnvsIndexLazyRoute
  '/events/': typeof EventsIndexLazyRoute
  '/model/': typeof ModelIndexLazyRoute
  '/platform-account/': typeof PlatformAccountIndexLazyRoute
  '/play/': typeof PlayIndexLazyRoute
  '/post/': typeof PostIndexLazyRoute
  '/settings/': typeof SettingsIndexLazyRoute
  '/team/': typeof TeamIndexLazyRoute
  '/workflow-runs/': typeof WorkflowRunsIndexLazyRoute
  '/workflows/': typeof WorkflowsIndexLazyRoute
  '/auth/login': typeof AuthLoginRouteLazyRouteWithChildren
  '/auth/register': typeof AuthRegisterLazyRoute
  '/platform-account/$platformAccountId': typeof PlatformAccountPlatformAccountIdRouteLazyRouteWithChildren
  '/platform-account/create': typeof PlatformAccountCreateLazyRoute
  '/play/chat': typeof PlayChatRouteLazyRouteWithChildren
  '/post/create': typeof PostCreateLazyRoute
  '/trigger/$id': typeof TriggerIdLazyRoute
  '/workflow-runs/$workflowRunId': typeof WorkflowRunsWorkflowRunIdLazyRoute
  '/workflows/$workflowId': typeof WorkflowsWorkflowIdLazyRoute
  '/onboarding/create-tenant/': typeof OnboardingCreateTenantIndexRoute
  '/site/$siteId/': typeof SiteSiteIdIndexRoute
  '/site/create/': typeof SiteCreateIndexRoute
  '/site/$siteId/edit': typeof SiteSiteIdEditRoute
  '/site/$siteId/host': typeof SiteSiteIdHostRouteRouteWithChildren
  '/auth/login/': typeof AuthLoginIndexLazyRoute
  '/platform-account/$platformAccountId/': typeof PlatformAccountPlatformAccountIdIndexLazyRoute
  '/play/chat/': typeof PlayChatIndexLazyRoute
  '/play/chat/$sessionId': typeof PlayChatSessionIdRouteLazyRouteWithChildren
  '/play/chat/$sessionId/': typeof PlayChatSessionIdIndexRoute
  '/site/$siteId/host/': typeof SiteSiteIdHostIndexRoute
  '/play/chat/$sessionId/debug': typeof PlayChatSessionIdDebugLazyRoute
  '/play/chat/$sessionId/edit': typeof PlayChatSessionIdEditLazyRoute
  '/play/chat/$sessionId/result': typeof PlayChatSessionIdResultLazyRoute
  '/play/chat/$sessionId/state': typeof PlayChatSessionIdStateLazyRoute
  '/play/chat/$sessionId/team': typeof PlayChatSessionIdTeamLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agEvents'
    | '/ag_state'
    | '/auth'
    | '/endpoint'
    | '/envs'
    | '/events'
    | '/gallery'
    | '/model'
    | '/platform'
    | '/platform-account'
    | '/play'
    | '/post'
    | '/settings'
    | '/site'
    | '/team'
    | '/trigger'
    | '/workflow-runs'
    | '/workflows'
    | '/gallery/'
    | '/platform/'
    | '/site/'
    | '/envs/create'
    | '/gallery/$galleryId'
    | '/site/$siteId'
    | '/team/$teamId'
    | '/trigger/ag'
    | '/agEvents/'
    | '/endpoint/'
    | '/envs/'
    | '/events/'
    | '/model/'
    | '/platform-account/'
    | '/play/'
    | '/post/'
    | '/settings/'
    | '/team/'
    | '/workflow-runs/'
    | '/workflows/'
    | '/auth/login'
    | '/auth/register'
    | '/platform-account/$platformAccountId'
    | '/platform-account/create'
    | '/play/chat'
    | '/post/create'
    | '/trigger/$id'
    | '/workflow-runs/$workflowRunId'
    | '/workflows/$workflowId'
    | '/onboarding/create-tenant'
    | '/site/$siteId/'
    | '/site/create'
    | '/site/$siteId/edit'
    | '/site/$siteId/host'
    | '/auth/login/'
    | '/platform-account/$platformAccountId/'
    | '/play/chat/'
    | '/play/chat/$sessionId'
    | '/play/chat/$sessionId/'
    | '/site/$siteId/host/'
    | '/play/chat/$sessionId/debug'
    | '/play/chat/$sessionId/edit'
    | '/play/chat/$sessionId/result'
    | '/play/chat/$sessionId/state'
    | '/play/chat/$sessionId/team'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ag_state'
    | '/auth'
    | '/trigger'
    | '/gallery'
    | '/platform'
    | '/site'
    | '/envs/create'
    | '/gallery/$galleryId'
    | '/team/$teamId'
    | '/trigger/ag'
    | '/agEvents'
    | '/endpoint'
    | '/envs'
    | '/events'
    | '/model'
    | '/platform-account'
    | '/play'
    | '/post'
    | '/settings'
    | '/team'
    | '/workflow-runs'
    | '/workflows'
    | '/auth/register'
    | '/platform-account/create'
    | '/post/create'
    | '/trigger/$id'
    | '/workflow-runs/$workflowRunId'
    | '/workflows/$workflowId'
    | '/onboarding/create-tenant'
    | '/site/$siteId'
    | '/site/create'
    | '/site/$siteId/edit'
    | '/auth/login'
    | '/platform-account/$platformAccountId'
    | '/play/chat'
    | '/play/chat/$sessionId'
    | '/site/$siteId/host'
    | '/play/chat/$sessionId/debug'
    | '/play/chat/$sessionId/edit'
    | '/play/chat/$sessionId/result'
    | '/play/chat/$sessionId/state'
    | '/play/chat/$sessionId/team'
  id:
    | '__root__'
    | '/'
    | '/agEvents'
    | '/ag_state'
    | '/auth'
    | '/endpoint'
    | '/envs'
    | '/events'
    | '/gallery'
    | '/model'
    | '/platform'
    | '/platform-account'
    | '/play'
    | '/post'
    | '/settings'
    | '/site'
    | '/team'
    | '/trigger'
    | '/workflow-runs'
    | '/workflows'
    | '/gallery/'
    | '/platform/'
    | '/site/'
    | '/envs/create'
    | '/gallery/$galleryId'
    | '/site/$siteId'
    | '/team/$teamId'
    | '/trigger/ag'
    | '/agEvents/'
    | '/endpoint/'
    | '/envs/'
    | '/events/'
    | '/model/'
    | '/platform-account/'
    | '/play/'
    | '/post/'
    | '/settings/'
    | '/team/'
    | '/workflow-runs/'
    | '/workflows/'
    | '/auth/login'
    | '/auth/register'
    | '/platform-account/$platformAccountId'
    | '/platform-account/create'
    | '/play/chat'
    | '/post/create'
    | '/trigger/$id'
    | '/workflow-runs/$workflowRunId'
    | '/workflows/$workflowId'
    | '/onboarding/create-tenant/'
    | '/site/$siteId/'
    | '/site/create/'
    | '/site/$siteId/edit'
    | '/site/$siteId/host'
    | '/auth/login/'
    | '/platform-account/$platformAccountId/'
    | '/play/chat/'
    | '/play/chat/$sessionId'
    | '/play/chat/$sessionId/'
    | '/site/$siteId/host/'
    | '/play/chat/$sessionId/debug'
    | '/play/chat/$sessionId/edit'
    | '/play/chat/$sessionId/result'
    | '/play/chat/$sessionId/state'
    | '/play/chat/$sessionId/team'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgEventsRouteLazyRoute: typeof AgEventsRouteLazyRouteWithChildren
  AgstateRouteLazyRoute: typeof AgstateRouteLazyRoute
  AuthRouteLazyRoute: typeof AuthRouteLazyRouteWithChildren
  EndpointRouteLazyRoute: typeof EndpointRouteLazyRouteWithChildren
  EnvsRouteLazyRoute: typeof EnvsRouteLazyRouteWithChildren
  EventsRouteLazyRoute: typeof EventsRouteLazyRouteWithChildren
  GalleryRouteLazyRoute: typeof GalleryRouteLazyRouteWithChildren
  ModelRouteLazyRoute: typeof ModelRouteLazyRouteWithChildren
  PlatformRouteLazyRoute: typeof PlatformRouteLazyRouteWithChildren
  PlatformAccountRouteLazyRoute: typeof PlatformAccountRouteLazyRouteWithChildren
  PlayRouteLazyRoute: typeof PlayRouteLazyRouteWithChildren
  PostRouteLazyRoute: typeof PostRouteLazyRouteWithChildren
  SettingsRouteLazyRoute: typeof SettingsRouteLazyRouteWithChildren
  SiteRouteLazyRoute: typeof SiteRouteLazyRouteWithChildren
  TeamRouteLazyRoute: typeof TeamRouteLazyRouteWithChildren
  TriggerRouteLazyRoute: typeof TriggerRouteLazyRouteWithChildren
  WorkflowRunsRouteLazyRoute: typeof WorkflowRunsRouteLazyRouteWithChildren
  WorkflowsRouteLazyRoute: typeof WorkflowsRouteLazyRouteWithChildren
  OnboardingCreateTenantIndexRoute: typeof OnboardingCreateTenantIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgEventsRouteLazyRoute: AgEventsRouteLazyRouteWithChildren,
  AgstateRouteLazyRoute: AgstateRouteLazyRoute,
  AuthRouteLazyRoute: AuthRouteLazyRouteWithChildren,
  EndpointRouteLazyRoute: EndpointRouteLazyRouteWithChildren,
  EnvsRouteLazyRoute: EnvsRouteLazyRouteWithChildren,
  EventsRouteLazyRoute: EventsRouteLazyRouteWithChildren,
  GalleryRouteLazyRoute: GalleryRouteLazyRouteWithChildren,
  ModelRouteLazyRoute: ModelRouteLazyRouteWithChildren,
  PlatformRouteLazyRoute: PlatformRouteLazyRouteWithChildren,
  PlatformAccountRouteLazyRoute: PlatformAccountRouteLazyRouteWithChildren,
  PlayRouteLazyRoute: PlayRouteLazyRouteWithChildren,
  PostRouteLazyRoute: PostRouteLazyRouteWithChildren,
  SettingsRouteLazyRoute: SettingsRouteLazyRouteWithChildren,
  SiteRouteLazyRoute: SiteRouteLazyRouteWithChildren,
  TeamRouteLazyRoute: TeamRouteLazyRouteWithChildren,
  TriggerRouteLazyRoute: TriggerRouteLazyRouteWithChildren,
  WorkflowRunsRouteLazyRoute: WorkflowRunsRouteLazyRouteWithChildren,
  WorkflowsRouteLazyRoute: WorkflowsRouteLazyRouteWithChildren,
  OnboardingCreateTenantIndexRoute: OnboardingCreateTenantIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/agEvents",
        "/ag_state",
        "/auth",
        "/endpoint",
        "/envs",
        "/events",
        "/gallery",
        "/model",
        "/platform",
        "/platform-account",
        "/play",
        "/post",
        "/settings",
        "/site",
        "/team",
        "/trigger",
        "/workflow-runs",
        "/workflows",
        "/onboarding/create-tenant/"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/agEvents": {
      "filePath": "~agEvents/~route.lazy.tsx",
      "children": [
        "/agEvents/"
      ]
    },
    "/ag_state": {
      "filePath": "~ag_state/~route.lazy.tsx"
    },
    "/auth": {
      "filePath": "~auth/~route.lazy.tsx",
      "children": [
        "/auth/login",
        "/auth/register"
      ]
    },
    "/endpoint": {
      "filePath": "~endpoint/~route.lazy.tsx",
      "children": [
        "/endpoint/"
      ]
    },
    "/envs": {
      "filePath": "~envs/~route.lazy.tsx",
      "children": [
        "/envs/create",
        "/envs/"
      ]
    },
    "/events": {
      "filePath": "~events/~route.lazy.tsx",
      "children": [
        "/events/"
      ]
    },
    "/gallery": {
      "filePath": "~gallery/~route.lazy.tsx",
      "children": [
        "/gallery/",
        "/gallery/$galleryId"
      ]
    },
    "/model": {
      "filePath": "~model/~route.lazy.tsx",
      "children": [
        "/model/"
      ]
    },
    "/platform": {
      "filePath": "~platform/~route.lazy.tsx",
      "children": [
        "/platform/"
      ]
    },
    "/platform-account": {
      "filePath": "~platform-account/~route.lazy.tsx",
      "children": [
        "/platform-account/",
        "/platform-account/$platformAccountId",
        "/platform-account/create"
      ]
    },
    "/play": {
      "filePath": "~play/~route.lazy.tsx",
      "children": [
        "/play/",
        "/play/chat"
      ]
    },
    "/post": {
      "filePath": "~post/~route.lazy.tsx",
      "children": [
        "/post/",
        "/post/create"
      ]
    },
    "/settings": {
      "filePath": "~settings/~route.lazy.tsx",
      "children": [
        "/settings/"
      ]
    },
    "/site": {
      "filePath": "~site/~route.lazy.tsx",
      "children": [
        "/site/",
        "/site/$siteId",
        "/site/create/"
      ]
    },
    "/team": {
      "filePath": "~team/~route.lazy.tsx",
      "children": [
        "/team/$teamId",
        "/team/"
      ]
    },
    "/trigger": {
      "filePath": "~trigger/~route.lazy.tsx",
      "children": [
        "/trigger/ag",
        "/trigger/$id"
      ]
    },
    "/workflow-runs": {
      "filePath": "~workflow-runs/~route.lazy.tsx",
      "children": [
        "/workflow-runs/",
        "/workflow-runs/$workflowRunId"
      ]
    },
    "/workflows": {
      "filePath": "~workflows/~route.lazy.tsx",
      "children": [
        "/workflows/",
        "/workflows/$workflowId"
      ]
    },
    "/gallery/": {
      "filePath": "~gallery/~index.tsx",
      "parent": "/gallery"
    },
    "/platform/": {
      "filePath": "~platform/~index.tsx",
      "parent": "/platform"
    },
    "/site/": {
      "filePath": "~site/~index.tsx",
      "parent": "/site"
    },
    "/envs/create": {
      "filePath": "~envs/~create.tsx",
      "parent": "/envs"
    },
    "/gallery/$galleryId": {
      "filePath": "~gallery/~$galleryId.tsx",
      "parent": "/gallery"
    },
    "/site/$siteId": {
      "filePath": "~site/~$siteId/~route.tsx",
      "parent": "/site",
      "children": [
        "/site/$siteId/",
        "/site/$siteId/edit",
        "/site/$siteId/host"
      ]
    },
    "/team/$teamId": {
      "filePath": "~team/~$teamId.tsx",
      "parent": "/team"
    },
    "/trigger/ag": {
      "filePath": "~trigger/~ag.tsx",
      "parent": "/trigger"
    },
    "/agEvents/": {
      "filePath": "~agEvents/~index.lazy.tsx",
      "parent": "/agEvents"
    },
    "/endpoint/": {
      "filePath": "~endpoint/~index.lazy.tsx",
      "parent": "/endpoint"
    },
    "/envs/": {
      "filePath": "~envs/~index.lazy.tsx",
      "parent": "/envs"
    },
    "/events/": {
      "filePath": "~events/~index.lazy.tsx",
      "parent": "/events"
    },
    "/model/": {
      "filePath": "~model/~index.lazy.tsx",
      "parent": "/model"
    },
    "/platform-account/": {
      "filePath": "~platform-account/~index.lazy.tsx",
      "parent": "/platform-account"
    },
    "/play/": {
      "filePath": "~play/~index.lazy.tsx",
      "parent": "/play"
    },
    "/post/": {
      "filePath": "~post/~index.lazy.tsx",
      "parent": "/post"
    },
    "/settings/": {
      "filePath": "~settings/~index.lazy.tsx",
      "parent": "/settings"
    },
    "/team/": {
      "filePath": "~team/~index.lazy.tsx",
      "parent": "/team"
    },
    "/workflow-runs/": {
      "filePath": "~workflow-runs/~index.lazy.tsx",
      "parent": "/workflow-runs"
    },
    "/workflows/": {
      "filePath": "~workflows/~index.lazy.tsx",
      "parent": "/workflows"
    },
    "/auth/login": {
      "filePath": "~auth/~login/~route.lazy.tsx",
      "parent": "/auth",
      "children": [
        "/auth/login/"
      ]
    },
    "/auth/register": {
      "filePath": "~auth/~register.lazy.tsx",
      "parent": "/auth"
    },
    "/platform-account/$platformAccountId": {
      "filePath": "~platform-account/~$platformAccountId/~route.lazy.tsx",
      "parent": "/platform-account",
      "children": [
        "/platform-account/$platformAccountId/"
      ]
    },
    "/platform-account/create": {
      "filePath": "~platform-account/~create.lazy.tsx",
      "parent": "/platform-account"
    },
    "/play/chat": {
      "filePath": "~play/~chat/~route.lazy.tsx",
      "parent": "/play",
      "children": [
        "/play/chat/",
        "/play/chat/$sessionId"
      ]
    },
    "/post/create": {
      "filePath": "~post/~create.lazy.tsx",
      "parent": "/post"
    },
    "/trigger/$id": {
      "filePath": "~trigger/~$id.lazy.tsx",
      "parent": "/trigger"
    },
    "/workflow-runs/$workflowRunId": {
      "filePath": "~workflow-runs/~$workflowRunId.lazy.tsx",
      "parent": "/workflow-runs"
    },
    "/workflows/$workflowId": {
      "filePath": "~workflows/~$workflowId.lazy.tsx",
      "parent": "/workflows"
    },
    "/onboarding/create-tenant/": {
      "filePath": "~onboarding/~create-tenant/~index.tsx"
    },
    "/site/$siteId/": {
      "filePath": "~site/~$siteId/~index.tsx",
      "parent": "/site/$siteId"
    },
    "/site/create/": {
      "filePath": "~site/~create/~index.tsx",
      "parent": "/site"
    },
    "/site/$siteId/edit": {
      "filePath": "~site/~$siteId/~edit.tsx",
      "parent": "/site/$siteId"
    },
    "/site/$siteId/host": {
      "filePath": "~site/~$siteId/~host/~route.tsx",
      "parent": "/site/$siteId",
      "children": [
        "/site/$siteId/host/"
      ]
    },
    "/auth/login/": {
      "filePath": "~auth/~login/~index.lazy.tsx",
      "parent": "/auth/login"
    },
    "/platform-account/$platformAccountId/": {
      "filePath": "~platform-account/~$platformAccountId/~index.lazy.tsx",
      "parent": "/platform-account/$platformAccountId"
    },
    "/play/chat/": {
      "filePath": "~play/~chat/~index.lazy.tsx",
      "parent": "/play/chat"
    },
    "/play/chat/$sessionId": {
      "filePath": "~play/~chat/~$sessionId/~route.lazy.tsx",
      "parent": "/play/chat",
      "children": [
        "/play/chat/$sessionId/",
        "/play/chat/$sessionId/debug",
        "/play/chat/$sessionId/edit",
        "/play/chat/$sessionId/result",
        "/play/chat/$sessionId/state",
        "/play/chat/$sessionId/team"
      ]
    },
    "/play/chat/$sessionId/": {
      "filePath": "~play/~chat/~$sessionId/~index.tsx",
      "parent": "/play/chat/$sessionId"
    },
    "/site/$siteId/host/": {
      "filePath": "~site/~$siteId/~host/~index.tsx",
      "parent": "/site/$siteId/host"
    },
    "/play/chat/$sessionId/debug": {
      "filePath": "~play/~chat/~$sessionId/~debug.lazy.tsx",
      "parent": "/play/chat/$sessionId"
    },
    "/play/chat/$sessionId/edit": {
      "filePath": "~play/~chat/~$sessionId/~edit.lazy.tsx",
      "parent": "/play/chat/$sessionId"
    },
    "/play/chat/$sessionId/result": {
      "filePath": "~play/~chat/~$sessionId/~result.lazy.tsx",
      "parent": "/play/chat/$sessionId"
    },
    "/play/chat/$sessionId/state": {
      "filePath": "~play/~chat/~$sessionId/~state.lazy.tsx",
      "parent": "/play/chat/$sessionId"
    },
    "/play/chat/$sessionId/team": {
      "filePath": "~play/~chat/~$sessionId/~team.lazy.tsx",
      "parent": "/play/chat/$sessionId"
    }
  }
}
ROUTE_MANIFEST_END */
